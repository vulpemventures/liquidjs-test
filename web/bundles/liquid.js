(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.liquid = f()}})(function(){var define,module,exports;return (function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){

},{}],2:[function(require,module,exports){
'use strict'

exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function getLens (b64) {
  var len = b64.length

  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // Trim off extra bytes after placeholder bytes are found
  // See: https://github.com/beatgammit/base64-js/issues/42
  var validLen = b64.indexOf('=')
  if (validLen === -1) validLen = len

  var placeHoldersLen = validLen === len
    ? 0
    : 4 - (validLen % 4)

  return [validLen, placeHoldersLen]
}

// base64 is 4/3 + up to two characters of the original data
function byteLength (b64) {
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function _byteLength (b64, validLen, placeHoldersLen) {
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function toByteArray (b64) {
  var tmp
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]

  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))

  var curByte = 0

  // if there are placeholders, only get up to the last complete 4 chars
  var len = placeHoldersLen > 0
    ? validLen - 4
    : validLen

  var i
  for (i = 0; i < len; i += 4) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 18) |
      (revLookup[b64.charCodeAt(i + 1)] << 12) |
      (revLookup[b64.charCodeAt(i + 2)] << 6) |
      revLookup[b64.charCodeAt(i + 3)]
    arr[curByte++] = (tmp >> 16) & 0xFF
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 2) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 2) |
      (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 1) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 10) |
      (revLookup[b64.charCodeAt(i + 1)] << 4) |
      (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] +
    lookup[num >> 12 & 0x3F] +
    lookup[num >> 6 & 0x3F] +
    lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp =
      ((uint8[i] << 16) & 0xFF0000) +
      ((uint8[i + 1] << 8) & 0xFF00) +
      (uint8[i + 2] & 0xFF)
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    parts.push(
      lookup[tmp >> 2] +
      lookup[(tmp << 4) & 0x3F] +
      '=='
    )
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1]
    parts.push(
      lookup[tmp >> 10] +
      lookup[(tmp >> 4) & 0x3F] +
      lookup[(tmp << 2) & 0x3F] +
      '='
    )
  }

  return parts.join('')
}

},{}],3:[function(require,module,exports){
arguments[4][1][0].apply(exports,arguments)
},{"dup":1}],4:[function(require,module,exports){
(function (Buffer){(function (){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */

'use strict'

var base64 = require('base64-js')
var ieee754 = require('ieee754')

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

var K_MAX_LENGTH = 0x7fffffff
exports.kMaxLength = K_MAX_LENGTH

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Print warning and recommend using `buffer` v4.x which has an Object
 *               implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * We report that the browser does not support typed arrays if the are not subclassable
 * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
 * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
 * for __proto__ and has a buggy typed array implementation.
 */
Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport()

if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&
    typeof console.error === 'function') {
  console.error(
    'This browser lacks typed array (Uint8Array) support which is required by ' +
    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'
  )
}

function typedArraySupport () {
  // Can typed array instances can be augmented?
  try {
    var arr = new Uint8Array(1)
    arr.__proto__ = { __proto__: Uint8Array.prototype, foo: function () { return 42 } }
    return arr.foo() === 42
  } catch (e) {
    return false
  }
}

Object.defineProperty(Buffer.prototype, 'parent', {
  enumerable: true,
  get: function () {
    if (!Buffer.isBuffer(this)) return undefined
    return this.buffer
  }
})

Object.defineProperty(Buffer.prototype, 'offset', {
  enumerable: true,
  get: function () {
    if (!Buffer.isBuffer(this)) return undefined
    return this.byteOffset
  }
})

function createBuffer (length) {
  if (length > K_MAX_LENGTH) {
    throw new RangeError('The value "' + length + '" is invalid for option "size"')
  }
  // Return an augmented `Uint8Array` instance
  var buf = new Uint8Array(length)
  buf.__proto__ = Buffer.prototype
  return buf
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new TypeError(
        'The "string" argument must be of type string. Received type number'
      )
    }
    return allocUnsafe(arg)
  }
  return from(arg, encodingOrOffset, length)
}

// Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
if (typeof Symbol !== 'undefined' && Symbol.species != null &&
    Buffer[Symbol.species] === Buffer) {
  Object.defineProperty(Buffer, Symbol.species, {
    value: null,
    configurable: true,
    enumerable: false,
    writable: false
  })
}

Buffer.poolSize = 8192 // not used by this implementation

function from (value, encodingOrOffset, length) {
  if (typeof value === 'string') {
    return fromString(value, encodingOrOffset)
  }

  if (ArrayBuffer.isView(value)) {
    return fromArrayLike(value)
  }

  if (value == null) {
    throw TypeError(
      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
      'or Array-like Object. Received type ' + (typeof value)
    )
  }

  if (isInstance(value, ArrayBuffer) ||
      (value && isInstance(value.buffer, ArrayBuffer))) {
    return fromArrayBuffer(value, encodingOrOffset, length)
  }

  if (typeof value === 'number') {
    throw new TypeError(
      'The "value" argument must not be of type number. Received type number'
    )
  }

  var valueOf = value.valueOf && value.valueOf()
  if (valueOf != null && valueOf !== value) {
    return Buffer.from(valueOf, encodingOrOffset, length)
  }

  var b = fromObject(value)
  if (b) return b

  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&
      typeof value[Symbol.toPrimitive] === 'function') {
    return Buffer.from(
      value[Symbol.toPrimitive]('string'), encodingOrOffset, length
    )
  }

  throw new TypeError(
    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
    'or Array-like Object. Received type ' + (typeof value)
  )
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(value, encodingOrOffset, length)
}

// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
// https://github.com/feross/buffer/pull/148
Buffer.prototype.__proto__ = Uint8Array.prototype
Buffer.__proto__ = Uint8Array

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be of type number')
  } else if (size < 0) {
    throw new RangeError('The value "' + size + '" is invalid for option "size"')
  }
}

function alloc (size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(size).fill(fill, encoding)
      : createBuffer(size).fill(fill)
  }
  return createBuffer(size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(size, fill, encoding)
}

function allocUnsafe (size) {
  assertSize(size)
  return createBuffer(size < 0 ? 0 : checked(size) | 0)
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(size)
}

function fromString (string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('Unknown encoding: ' + encoding)
  }

  var length = byteLength(string, encoding) | 0
  var buf = createBuffer(length)

  var actual = buf.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    buf = buf.slice(0, actual)
  }

  return buf
}

function fromArrayLike (array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0
  var buf = createBuffer(length)
  for (var i = 0; i < length; i += 1) {
    buf[i] = array[i] & 255
  }
  return buf
}

function fromArrayBuffer (array, byteOffset, length) {
  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('"offset" is outside of buffer bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('"length" is outside of buffer bounds')
  }

  var buf
  if (byteOffset === undefined && length === undefined) {
    buf = new Uint8Array(array)
  } else if (length === undefined) {
    buf = new Uint8Array(array, byteOffset)
  } else {
    buf = new Uint8Array(array, byteOffset, length)
  }

  // Return an augmented `Uint8Array` instance
  buf.__proto__ = Buffer.prototype
  return buf
}

function fromObject (obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0
    var buf = createBuffer(len)

    if (buf.length === 0) {
      return buf
    }

    obj.copy(buf, 0, 0, len)
    return buf
  }

  if (obj.length !== undefined) {
    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {
      return createBuffer(0)
    }
    return fromArrayLike(obj)
  }

  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {
    return fromArrayLike(obj.data)
  }
}

function checked (length) {
  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= K_MAX_LENGTH) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return b != null && b._isBuffer === true &&
    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false
}

Buffer.compare = function compare (a, b) {
  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)
  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError(
      'The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array'
    )
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!Array.isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  var buffer = Buffer.allocUnsafe(length)
  var pos = 0
  for (i = 0; i < list.length; ++i) {
    var buf = list[i]
    if (isInstance(buf, Uint8Array)) {
      buf = Buffer.from(buf)
    }
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos)
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    throw new TypeError(
      'The "string" argument must be one of type string, Buffer, or ArrayBuffer. ' +
      'Received type ' + typeof string
    )
  }

  var len = string.length
  var mustMatch = (arguments.length > 2 && arguments[2] === true)
  if (!mustMatch && len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) {
          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8
        }
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
// to detect a Buffer instance. It's not possible to use `instanceof Buffer`
// reliably in a browserify context because there could be multiple different
// copies of the 'buffer' package in use. This method works even for Buffer
// instances that were created from another copy of the `buffer` package.
// See: https://github.com/feross/buffer/issues/154
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  var i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  var length = this.length
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.toLocaleString = Buffer.prototype.toString

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()
  if (this.length > max) str += ' ... '
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (isInstance(target, Uint8Array)) {
    target = Buffer.from(target, target.offset, target.byteLength)
  }
  if (!Buffer.isBuffer(target)) {
    throw new TypeError(
      'The "target" argument must be one of type Buffer or Uint8Array. ' +
      'Received type ' + (typeof target)
    )
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  var x = thisEnd - thisStart
  var y = end - start
  var len = Math.min(x, y)

  var thisCopy = this.slice(thisStart, thisEnd)
  var targetCopy = target.slice(start, end)

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset // Coerce to Number.
  if (numberIsNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1
  var arrLength = arr.length
  var valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i
  if (dir) {
    var foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      var found = true
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  var strLen = string.length

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (numberIsNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset >>> 0
    if (isFinite(length)) {
      length = length >>> 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
        : (firstByte > 0xBF) ? 2
          : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf = this.subarray(start, end)
  // Return an augmented `Uint8Array` instance
  newBuf.__proto__ = Buffer.prototype
  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset + 3] = (value >>> 24)
  this[offset + 2] = (value >>> 16)
  this[offset + 1] = (value >>> 8)
  this[offset] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    var limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    var limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  this[offset + 2] = (value >>> 16)
  this[offset + 3] = (value >>> 24)
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start

  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {
    // Use built-in when available, missing from IE11
    this.copyWithin(targetStart, start, end)
  } else if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (var i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, end),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0)
      if ((encoding === 'utf8' && code < 128) ||
          encoding === 'latin1') {
        // Fast path: If `val` fits into a single byte, use that numeric value.
        val = code
      }
    }
  } else if (typeof val === 'number') {
    val = val & 255
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  var i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : Buffer.from(val, encoding)
    var len = bytes.length
    if (len === 0) {
      throw new TypeError('The value "' + val +
        '" is invalid for argument "value"')
    }
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node takes equal signs as end of the Base64 encoding
  str = str.split('=')[0]
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = str.trim().replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
// the `instanceof` check but they should be treated as of that type.
// See: https://github.com/feross/buffer/issues/166
function isInstance (obj, type) {
  return obj instanceof type ||
    (obj != null && obj.constructor != null && obj.constructor.name != null &&
      obj.constructor.name === type.name)
}
function numberIsNaN (obj) {
  // For IE11 support
  return obj !== obj // eslint-disable-line no-self-compare
}

}).call(this)}).call(this,require("buffer").Buffer)
},{"base64-js":2,"buffer":4,"ieee754":6}],5:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

var R = typeof Reflect === 'object' ? Reflect : null
var ReflectApply = R && typeof R.apply === 'function'
  ? R.apply
  : function ReflectApply(target, receiver, args) {
    return Function.prototype.apply.call(target, receiver, args);
  }

var ReflectOwnKeys
if (R && typeof R.ownKeys === 'function') {
  ReflectOwnKeys = R.ownKeys
} else if (Object.getOwnPropertySymbols) {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target)
      .concat(Object.getOwnPropertySymbols(target));
  };
} else {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target);
  };
}

function ProcessEmitWarning(warning) {
  if (console && console.warn) console.warn(warning);
}

var NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {
  return value !== value;
}

function EventEmitter() {
  EventEmitter.init.call(this);
}
module.exports = EventEmitter;
module.exports.once = once;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._eventsCount = 0;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
var defaultMaxListeners = 10;

function checkListener(listener) {
  if (typeof listener !== 'function') {
    throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
  }
}

Object.defineProperty(EventEmitter, 'defaultMaxListeners', {
  enumerable: true,
  get: function() {
    return defaultMaxListeners;
  },
  set: function(arg) {
    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {
      throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + '.');
    }
    defaultMaxListeners = arg;
  }
});

EventEmitter.init = function() {

  if (this._events === undefined ||
      this._events === Object.getPrototypeOf(this)._events) {
    this._events = Object.create(null);
    this._eventsCount = 0;
  }

  this._maxListeners = this._maxListeners || undefined;
};

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {
    throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + '.');
  }
  this._maxListeners = n;
  return this;
};

function _getMaxListeners(that) {
  if (that._maxListeners === undefined)
    return EventEmitter.defaultMaxListeners;
  return that._maxListeners;
}

EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
  return _getMaxListeners(this);
};

EventEmitter.prototype.emit = function emit(type) {
  var args = [];
  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);
  var doError = (type === 'error');

  var events = this._events;
  if (events !== undefined)
    doError = (doError && events.error === undefined);
  else if (!doError)
    return false;

  // If there is no 'error' event listener then throw.
  if (doError) {
    var er;
    if (args.length > 0)
      er = args[0];
    if (er instanceof Error) {
      // Note: The comments on the `throw` lines are intentional, they show
      // up in Node's output if this results in an unhandled exception.
      throw er; // Unhandled 'error' event
    }
    // At least give some kind of context to the user
    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));
    err.context = er;
    throw err; // Unhandled 'error' event
  }

  var handler = events[type];

  if (handler === undefined)
    return false;

  if (typeof handler === 'function') {
    ReflectApply(handler, this, args);
  } else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      ReflectApply(listeners[i], this, args);
  }

  return true;
};

function _addListener(target, type, listener, prepend) {
  var m;
  var events;
  var existing;

  checkListener(listener);

  events = target._events;
  if (events === undefined) {
    events = target._events = Object.create(null);
    target._eventsCount = 0;
  } else {
    // To avoid recursion in the case that type === "newListener"! Before
    // adding it to the listeners, first emit "newListener".
    if (events.newListener !== undefined) {
      target.emit('newListener', type,
                  listener.listener ? listener.listener : listener);

      // Re-assign `events` because a newListener handler could have caused the
      // this._events to be assigned to a new object
      events = target._events;
    }
    existing = events[type];
  }

  if (existing === undefined) {
    // Optimize the case of one listener. Don't need the extra array object.
    existing = events[type] = listener;
    ++target._eventsCount;
  } else {
    if (typeof existing === 'function') {
      // Adding the second element, need to change to array.
      existing = events[type] =
        prepend ? [listener, existing] : [existing, listener];
      // If we've already got an array, just append.
    } else if (prepend) {
      existing.unshift(listener);
    } else {
      existing.push(listener);
    }

    // Check for listener leak
    m = _getMaxListeners(target);
    if (m > 0 && existing.length > m && !existing.warned) {
      existing.warned = true;
      // No error code for this since it is a Warning
      // eslint-disable-next-line no-restricted-syntax
      var w = new Error('Possible EventEmitter memory leak detected. ' +
                          existing.length + ' ' + String(type) + ' listeners ' +
                          'added. Use emitter.setMaxListeners() to ' +
                          'increase limit');
      w.name = 'MaxListenersExceededWarning';
      w.emitter = target;
      w.type = type;
      w.count = existing.length;
      ProcessEmitWarning(w);
    }
  }

  return target;
}

EventEmitter.prototype.addListener = function addListener(type, listener) {
  return _addListener(this, type, listener, false);
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.prependListener =
    function prependListener(type, listener) {
      return _addListener(this, type, listener, true);
    };

function onceWrapper() {
  if (!this.fired) {
    this.target.removeListener(this.type, this.wrapFn);
    this.fired = true;
    if (arguments.length === 0)
      return this.listener.call(this.target);
    return this.listener.apply(this.target, arguments);
  }
}

function _onceWrap(target, type, listener) {
  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };
  var wrapped = onceWrapper.bind(state);
  wrapped.listener = listener;
  state.wrapFn = wrapped;
  return wrapped;
}

EventEmitter.prototype.once = function once(type, listener) {
  checkListener(listener);
  this.on(type, _onceWrap(this, type, listener));
  return this;
};

EventEmitter.prototype.prependOnceListener =
    function prependOnceListener(type, listener) {
      checkListener(listener);
      this.prependListener(type, _onceWrap(this, type, listener));
      return this;
    };

// Emits a 'removeListener' event if and only if the listener was removed.
EventEmitter.prototype.removeListener =
    function removeListener(type, listener) {
      var list, events, position, i, originalListener;

      checkListener(listener);

      events = this._events;
      if (events === undefined)
        return this;

      list = events[type];
      if (list === undefined)
        return this;

      if (list === listener || list.listener === listener) {
        if (--this._eventsCount === 0)
          this._events = Object.create(null);
        else {
          delete events[type];
          if (events.removeListener)
            this.emit('removeListener', type, list.listener || listener);
        }
      } else if (typeof list !== 'function') {
        position = -1;

        for (i = list.length - 1; i >= 0; i--) {
          if (list[i] === listener || list[i].listener === listener) {
            originalListener = list[i].listener;
            position = i;
            break;
          }
        }

        if (position < 0)
          return this;

        if (position === 0)
          list.shift();
        else {
          spliceOne(list, position);
        }

        if (list.length === 1)
          events[type] = list[0];

        if (events.removeListener !== undefined)
          this.emit('removeListener', type, originalListener || listener);
      }

      return this;
    };

EventEmitter.prototype.off = EventEmitter.prototype.removeListener;

EventEmitter.prototype.removeAllListeners =
    function removeAllListeners(type) {
      var listeners, events, i;

      events = this._events;
      if (events === undefined)
        return this;

      // not listening for removeListener, no need to emit
      if (events.removeListener === undefined) {
        if (arguments.length === 0) {
          this._events = Object.create(null);
          this._eventsCount = 0;
        } else if (events[type] !== undefined) {
          if (--this._eventsCount === 0)
            this._events = Object.create(null);
          else
            delete events[type];
        }
        return this;
      }

      // emit removeListener for all listeners on all events
      if (arguments.length === 0) {
        var keys = Object.keys(events);
        var key;
        for (i = 0; i < keys.length; ++i) {
          key = keys[i];
          if (key === 'removeListener') continue;
          this.removeAllListeners(key);
        }
        this.removeAllListeners('removeListener');
        this._events = Object.create(null);
        this._eventsCount = 0;
        return this;
      }

      listeners = events[type];

      if (typeof listeners === 'function') {
        this.removeListener(type, listeners);
      } else if (listeners !== undefined) {
        // LIFO order
        for (i = listeners.length - 1; i >= 0; i--) {
          this.removeListener(type, listeners[i]);
        }
      }

      return this;
    };

function _listeners(target, type, unwrap) {
  var events = target._events;

  if (events === undefined)
    return [];

  var evlistener = events[type];
  if (evlistener === undefined)
    return [];

  if (typeof evlistener === 'function')
    return unwrap ? [evlistener.listener || evlistener] : [evlistener];

  return unwrap ?
    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
}

EventEmitter.prototype.listeners = function listeners(type) {
  return _listeners(this, type, true);
};

EventEmitter.prototype.rawListeners = function rawListeners(type) {
  return _listeners(this, type, false);
};

EventEmitter.listenerCount = function(emitter, type) {
  if (typeof emitter.listenerCount === 'function') {
    return emitter.listenerCount(type);
  } else {
    return listenerCount.call(emitter, type);
  }
};

EventEmitter.prototype.listenerCount = listenerCount;
function listenerCount(type) {
  var events = this._events;

  if (events !== undefined) {
    var evlistener = events[type];

    if (typeof evlistener === 'function') {
      return 1;
    } else if (evlistener !== undefined) {
      return evlistener.length;
    }
  }

  return 0;
}

EventEmitter.prototype.eventNames = function eventNames() {
  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
};

function arrayClone(arr, n) {
  var copy = new Array(n);
  for (var i = 0; i < n; ++i)
    copy[i] = arr[i];
  return copy;
}

function spliceOne(list, index) {
  for (; index + 1 < list.length; index++)
    list[index] = list[index + 1];
  list.pop();
}

function unwrapListeners(arr) {
  var ret = new Array(arr.length);
  for (var i = 0; i < ret.length; ++i) {
    ret[i] = arr[i].listener || arr[i];
  }
  return ret;
}

function once(emitter, name) {
  return new Promise(function (resolve, reject) {
    function eventListener() {
      if (errorListener !== undefined) {
        emitter.removeListener('error', errorListener);
      }
      resolve([].slice.call(arguments));
    };
    var errorListener;

    // Adding an error listener is not optional because
    // if an error is thrown on an event emitter we cannot
    // guarantee that the actual event we are waiting will
    // be fired. The result could be a silent way to create
    // memory or file descriptor leaks, which is something
    // we should avoid.
    if (name !== 'error') {
      errorListener = function errorListener(err) {
        emitter.removeListener(name, eventListener);
        reject(err);
      };

      emitter.once('error', errorListener);
    }

    emitter.once(name, eventListener);
  });
}

},{}],6:[function(require,module,exports){
/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = ((value * c) - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}

},{}],7:[function(require,module,exports){
if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
      ctor.super_ = superCtor
      ctor.prototype = Object.create(superCtor.prototype, {
        constructor: {
          value: ctor,
          enumerable: false,
          writable: true,
          configurable: true
        }
      })
    }
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
      ctor.super_ = superCtor
      var TempCtor = function () {}
      TempCtor.prototype = superCtor.prototype
      ctor.prototype = new TempCtor()
      ctor.prototype.constructor = ctor
    }
  }
}

},{}],8:[function(require,module,exports){
/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */

// The _isBuffer check is for Safari 5-7 support, because it's missing
// Object.prototype.constructor. Remove this eventually
module.exports = function (obj) {
  return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer)
}

function isBuffer (obj) {
  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)
}

// For Node v0.10 support. Remove this eventually.
function isSlowBuffer (obj) {
  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer(obj.slice(0, 0))
}

},{}],9:[function(require,module,exports){
(function (process){(function (){
// 'path' module extracted from Node.js v8.11.1 (only the posix part)
// transplited with Babel

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

function assertPath(path) {
  if (typeof path !== 'string') {
    throw new TypeError('Path must be a string. Received ' + JSON.stringify(path));
  }
}

// Resolves . and .. elements in a path with directory names
function normalizeStringPosix(path, allowAboveRoot) {
  var res = '';
  var lastSegmentLength = 0;
  var lastSlash = -1;
  var dots = 0;
  var code;
  for (var i = 0; i <= path.length; ++i) {
    if (i < path.length)
      code = path.charCodeAt(i);
    else if (code === 47 /*/*/)
      break;
    else
      code = 47 /*/*/;
    if (code === 47 /*/*/) {
      if (lastSlash === i - 1 || dots === 1) {
        // NOOP
      } else if (lastSlash !== i - 1 && dots === 2) {
        if (res.length < 2 || lastSegmentLength !== 2 || res.charCodeAt(res.length - 1) !== 46 /*.*/ || res.charCodeAt(res.length - 2) !== 46 /*.*/) {
          if (res.length > 2) {
            var lastSlashIndex = res.lastIndexOf('/');
            if (lastSlashIndex !== res.length - 1) {
              if (lastSlashIndex === -1) {
                res = '';
                lastSegmentLength = 0;
              } else {
                res = res.slice(0, lastSlashIndex);
                lastSegmentLength = res.length - 1 - res.lastIndexOf('/');
              }
              lastSlash = i;
              dots = 0;
              continue;
            }
          } else if (res.length === 2 || res.length === 1) {
            res = '';
            lastSegmentLength = 0;
            lastSlash = i;
            dots = 0;
            continue;
          }
        }
        if (allowAboveRoot) {
          if (res.length > 0)
            res += '/..';
          else
            res = '..';
          lastSegmentLength = 2;
        }
      } else {
        if (res.length > 0)
          res += '/' + path.slice(lastSlash + 1, i);
        else
          res = path.slice(lastSlash + 1, i);
        lastSegmentLength = i - lastSlash - 1;
      }
      lastSlash = i;
      dots = 0;
    } else if (code === 46 /*.*/ && dots !== -1) {
      ++dots;
    } else {
      dots = -1;
    }
  }
  return res;
}

function _format(sep, pathObject) {
  var dir = pathObject.dir || pathObject.root;
  var base = pathObject.base || (pathObject.name || '') + (pathObject.ext || '');
  if (!dir) {
    return base;
  }
  if (dir === pathObject.root) {
    return dir + base;
  }
  return dir + sep + base;
}

var posix = {
  // path.resolve([from ...], to)
  resolve: function resolve() {
    var resolvedPath = '';
    var resolvedAbsolute = false;
    var cwd;

    for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
      var path;
      if (i >= 0)
        path = arguments[i];
      else {
        if (cwd === undefined)
          cwd = process.cwd();
        path = cwd;
      }

      assertPath(path);

      // Skip empty entries
      if (path.length === 0) {
        continue;
      }

      resolvedPath = path + '/' + resolvedPath;
      resolvedAbsolute = path.charCodeAt(0) === 47 /*/*/;
    }

    // At this point the path should be resolved to a full absolute path, but
    // handle relative paths to be safe (might happen when process.cwd() fails)

    // Normalize the path
    resolvedPath = normalizeStringPosix(resolvedPath, !resolvedAbsolute);

    if (resolvedAbsolute) {
      if (resolvedPath.length > 0)
        return '/' + resolvedPath;
      else
        return '/';
    } else if (resolvedPath.length > 0) {
      return resolvedPath;
    } else {
      return '.';
    }
  },

  normalize: function normalize(path) {
    assertPath(path);

    if (path.length === 0) return '.';

    var isAbsolute = path.charCodeAt(0) === 47 /*/*/;
    var trailingSeparator = path.charCodeAt(path.length - 1) === 47 /*/*/;

    // Normalize the path
    path = normalizeStringPosix(path, !isAbsolute);

    if (path.length === 0 && !isAbsolute) path = '.';
    if (path.length > 0 && trailingSeparator) path += '/';

    if (isAbsolute) return '/' + path;
    return path;
  },

  isAbsolute: function isAbsolute(path) {
    assertPath(path);
    return path.length > 0 && path.charCodeAt(0) === 47 /*/*/;
  },

  join: function join() {
    if (arguments.length === 0)
      return '.';
    var joined;
    for (var i = 0; i < arguments.length; ++i) {
      var arg = arguments[i];
      assertPath(arg);
      if (arg.length > 0) {
        if (joined === undefined)
          joined = arg;
        else
          joined += '/' + arg;
      }
    }
    if (joined === undefined)
      return '.';
    return posix.normalize(joined);
  },

  relative: function relative(from, to) {
    assertPath(from);
    assertPath(to);

    if (from === to) return '';

    from = posix.resolve(from);
    to = posix.resolve(to);

    if (from === to) return '';

    // Trim any leading backslashes
    var fromStart = 1;
    for (; fromStart < from.length; ++fromStart) {
      if (from.charCodeAt(fromStart) !== 47 /*/*/)
        break;
    }
    var fromEnd = from.length;
    var fromLen = fromEnd - fromStart;

    // Trim any leading backslashes
    var toStart = 1;
    for (; toStart < to.length; ++toStart) {
      if (to.charCodeAt(toStart) !== 47 /*/*/)
        break;
    }
    var toEnd = to.length;
    var toLen = toEnd - toStart;

    // Compare paths to find the longest common path from root
    var length = fromLen < toLen ? fromLen : toLen;
    var lastCommonSep = -1;
    var i = 0;
    for (; i <= length; ++i) {
      if (i === length) {
        if (toLen > length) {
          if (to.charCodeAt(toStart + i) === 47 /*/*/) {
            // We get here if `from` is the exact base path for `to`.
            // For example: from='/foo/bar'; to='/foo/bar/baz'
            return to.slice(toStart + i + 1);
          } else if (i === 0) {
            // We get here if `from` is the root
            // For example: from='/'; to='/foo'
            return to.slice(toStart + i);
          }
        } else if (fromLen > length) {
          if (from.charCodeAt(fromStart + i) === 47 /*/*/) {
            // We get here if `to` is the exact base path for `from`.
            // For example: from='/foo/bar/baz'; to='/foo/bar'
            lastCommonSep = i;
          } else if (i === 0) {
            // We get here if `to` is the root.
            // For example: from='/foo'; to='/'
            lastCommonSep = 0;
          }
        }
        break;
      }
      var fromCode = from.charCodeAt(fromStart + i);
      var toCode = to.charCodeAt(toStart + i);
      if (fromCode !== toCode)
        break;
      else if (fromCode === 47 /*/*/)
        lastCommonSep = i;
    }

    var out = '';
    // Generate the relative path based on the path difference between `to`
    // and `from`
    for (i = fromStart + lastCommonSep + 1; i <= fromEnd; ++i) {
      if (i === fromEnd || from.charCodeAt(i) === 47 /*/*/) {
        if (out.length === 0)
          out += '..';
        else
          out += '/..';
      }
    }

    // Lastly, append the rest of the destination (`to`) path that comes after
    // the common path parts
    if (out.length > 0)
      return out + to.slice(toStart + lastCommonSep);
    else {
      toStart += lastCommonSep;
      if (to.charCodeAt(toStart) === 47 /*/*/)
        ++toStart;
      return to.slice(toStart);
    }
  },

  _makeLong: function _makeLong(path) {
    return path;
  },

  dirname: function dirname(path) {
    assertPath(path);
    if (path.length === 0) return '.';
    var code = path.charCodeAt(0);
    var hasRoot = code === 47 /*/*/;
    var end = -1;
    var matchedSlash = true;
    for (var i = path.length - 1; i >= 1; --i) {
      code = path.charCodeAt(i);
      if (code === 47 /*/*/) {
          if (!matchedSlash) {
            end = i;
            break;
          }
        } else {
        // We saw the first non-path separator
        matchedSlash = false;
      }
    }

    if (end === -1) return hasRoot ? '/' : '.';
    if (hasRoot && end === 1) return '//';
    return path.slice(0, end);
  },

  basename: function basename(path, ext) {
    if (ext !== undefined && typeof ext !== 'string') throw new TypeError('"ext" argument must be a string');
    assertPath(path);

    var start = 0;
    var end = -1;
    var matchedSlash = true;
    var i;

    if (ext !== undefined && ext.length > 0 && ext.length <= path.length) {
      if (ext.length === path.length && ext === path) return '';
      var extIdx = ext.length - 1;
      var firstNonSlashEnd = -1;
      for (i = path.length - 1; i >= 0; --i) {
        var code = path.charCodeAt(i);
        if (code === 47 /*/*/) {
            // If we reached a path separator that was not part of a set of path
            // separators at the end of the string, stop now
            if (!matchedSlash) {
              start = i + 1;
              break;
            }
          } else {
          if (firstNonSlashEnd === -1) {
            // We saw the first non-path separator, remember this index in case
            // we need it if the extension ends up not matching
            matchedSlash = false;
            firstNonSlashEnd = i + 1;
          }
          if (extIdx >= 0) {
            // Try to match the explicit extension
            if (code === ext.charCodeAt(extIdx)) {
              if (--extIdx === -1) {
                // We matched the extension, so mark this as the end of our path
                // component
                end = i;
              }
            } else {
              // Extension does not match, so our result is the entire path
              // component
              extIdx = -1;
              end = firstNonSlashEnd;
            }
          }
        }
      }

      if (start === end) end = firstNonSlashEnd;else if (end === -1) end = path.length;
      return path.slice(start, end);
    } else {
      for (i = path.length - 1; i >= 0; --i) {
        if (path.charCodeAt(i) === 47 /*/*/) {
            // If we reached a path separator that was not part of a set of path
            // separators at the end of the string, stop now
            if (!matchedSlash) {
              start = i + 1;
              break;
            }
          } else if (end === -1) {
          // We saw the first non-path separator, mark this as the end of our
          // path component
          matchedSlash = false;
          end = i + 1;
        }
      }

      if (end === -1) return '';
      return path.slice(start, end);
    }
  },

  extname: function extname(path) {
    assertPath(path);
    var startDot = -1;
    var startPart = 0;
    var end = -1;
    var matchedSlash = true;
    // Track the state of characters (if any) we see before our first dot and
    // after any path separator we find
    var preDotState = 0;
    for (var i = path.length - 1; i >= 0; --i) {
      var code = path.charCodeAt(i);
      if (code === 47 /*/*/) {
          // If we reached a path separator that was not part of a set of path
          // separators at the end of the string, stop now
          if (!matchedSlash) {
            startPart = i + 1;
            break;
          }
          continue;
        }
      if (end === -1) {
        // We saw the first non-path separator, mark this as the end of our
        // extension
        matchedSlash = false;
        end = i + 1;
      }
      if (code === 46 /*.*/) {
          // If this is our first dot, mark it as the start of our extension
          if (startDot === -1)
            startDot = i;
          else if (preDotState !== 1)
            preDotState = 1;
      } else if (startDot !== -1) {
        // We saw a non-dot and non-path separator before our dot, so we should
        // have a good chance at having a non-empty extension
        preDotState = -1;
      }
    }

    if (startDot === -1 || end === -1 ||
        // We saw a non-dot character immediately before the dot
        preDotState === 0 ||
        // The (right-most) trimmed path component is exactly '..'
        preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
      return '';
    }
    return path.slice(startDot, end);
  },

  format: function format(pathObject) {
    if (pathObject === null || typeof pathObject !== 'object') {
      throw new TypeError('The "pathObject" argument must be of type Object. Received type ' + typeof pathObject);
    }
    return _format('/', pathObject);
  },

  parse: function parse(path) {
    assertPath(path);

    var ret = { root: '', dir: '', base: '', ext: '', name: '' };
    if (path.length === 0) return ret;
    var code = path.charCodeAt(0);
    var isAbsolute = code === 47 /*/*/;
    var start;
    if (isAbsolute) {
      ret.root = '/';
      start = 1;
    } else {
      start = 0;
    }
    var startDot = -1;
    var startPart = 0;
    var end = -1;
    var matchedSlash = true;
    var i = path.length - 1;

    // Track the state of characters (if any) we see before our first dot and
    // after any path separator we find
    var preDotState = 0;

    // Get non-dir info
    for (; i >= start; --i) {
      code = path.charCodeAt(i);
      if (code === 47 /*/*/) {
          // If we reached a path separator that was not part of a set of path
          // separators at the end of the string, stop now
          if (!matchedSlash) {
            startPart = i + 1;
            break;
          }
          continue;
        }
      if (end === -1) {
        // We saw the first non-path separator, mark this as the end of our
        // extension
        matchedSlash = false;
        end = i + 1;
      }
      if (code === 46 /*.*/) {
          // If this is our first dot, mark it as the start of our extension
          if (startDot === -1) startDot = i;else if (preDotState !== 1) preDotState = 1;
        } else if (startDot !== -1) {
        // We saw a non-dot and non-path separator before our dot, so we should
        // have a good chance at having a non-empty extension
        preDotState = -1;
      }
    }

    if (startDot === -1 || end === -1 ||
    // We saw a non-dot character immediately before the dot
    preDotState === 0 ||
    // The (right-most) trimmed path component is exactly '..'
    preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
      if (end !== -1) {
        if (startPart === 0 && isAbsolute) ret.base = ret.name = path.slice(1, end);else ret.base = ret.name = path.slice(startPart, end);
      }
    } else {
      if (startPart === 0 && isAbsolute) {
        ret.name = path.slice(1, startDot);
        ret.base = path.slice(1, end);
      } else {
        ret.name = path.slice(startPart, startDot);
        ret.base = path.slice(startPart, end);
      }
      ret.ext = path.slice(startDot, end);
    }

    if (startPart > 0) ret.dir = path.slice(0, startPart - 1);else if (isAbsolute) ret.dir = '/';

    return ret;
  },

  sep: '/',
  delimiter: ':',
  win32: null,
  posix: null
};

posix.posix = posix;

module.exports = posix;

}).call(this)}).call(this,require('_process'))
},{"_process":10}],10:[function(require,module,exports){
// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],11:[function(require,module,exports){
/*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */
/* eslint-disable node/no-deprecated-api */
var buffer = require('buffer')
var Buffer = buffer.Buffer

// alternative to using Object.keys for old browsers
function copyProps (src, dst) {
  for (var key in src) {
    dst[key] = src[key]
  }
}
if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
  module.exports = buffer
} else {
  // Copy properties from require('buffer')
  copyProps(buffer, exports)
  exports.Buffer = SafeBuffer
}

function SafeBuffer (arg, encodingOrOffset, length) {
  return Buffer(arg, encodingOrOffset, length)
}

SafeBuffer.prototype = Object.create(Buffer.prototype)

// Copy static methods from Buffer
copyProps(Buffer, SafeBuffer)

SafeBuffer.from = function (arg, encodingOrOffset, length) {
  if (typeof arg === 'number') {
    throw new TypeError('Argument must not be a number')
  }
  return Buffer(arg, encodingOrOffset, length)
}

SafeBuffer.alloc = function (size, fill, encoding) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  var buf = Buffer(size)
  if (fill !== undefined) {
    if (typeof encoding === 'string') {
      buf.fill(fill, encoding)
    } else {
      buf.fill(fill)
    }
  } else {
    buf.fill(0)
  }
  return buf
}

SafeBuffer.allocUnsafe = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return Buffer(size)
}

SafeBuffer.allocUnsafeSlow = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return buffer.SlowBuffer(size)
}

},{"buffer":4}],12:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

module.exports = Stream;

var EE = require('events').EventEmitter;
var inherits = require('inherits');

inherits(Stream, EE);
Stream.Readable = require('readable-stream/lib/_stream_readable.js');
Stream.Writable = require('readable-stream/lib/_stream_writable.js');
Stream.Duplex = require('readable-stream/lib/_stream_duplex.js');
Stream.Transform = require('readable-stream/lib/_stream_transform.js');
Stream.PassThrough = require('readable-stream/lib/_stream_passthrough.js');
Stream.finished = require('readable-stream/lib/internal/streams/end-of-stream.js')
Stream.pipeline = require('readable-stream/lib/internal/streams/pipeline.js')

// Backwards-compat with node 0.4.x
Stream.Stream = Stream;



// old-style streams.  Note that the pipe method (the only relevant
// part of this class) is overridden in the Readable class.

function Stream() {
  EE.call(this);
}

Stream.prototype.pipe = function(dest, options) {
  var source = this;

  function ondata(chunk) {
    if (dest.writable) {
      if (false === dest.write(chunk) && source.pause) {
        source.pause();
      }
    }
  }

  source.on('data', ondata);

  function ondrain() {
    if (source.readable && source.resume) {
      source.resume();
    }
  }

  dest.on('drain', ondrain);

  // If the 'end' option is not supplied, dest.end() will be called when
  // source gets the 'end' or 'close' events.  Only dest.end() once.
  if (!dest._isStdio && (!options || options.end !== false)) {
    source.on('end', onend);
    source.on('close', onclose);
  }

  var didOnEnd = false;
  function onend() {
    if (didOnEnd) return;
    didOnEnd = true;

    dest.end();
  }


  function onclose() {
    if (didOnEnd) return;
    didOnEnd = true;

    if (typeof dest.destroy === 'function') dest.destroy();
  }

  // don't leave dangling pipes when there are errors.
  function onerror(er) {
    cleanup();
    if (EE.listenerCount(this, 'error') === 0) {
      throw er; // Unhandled stream error in pipe.
    }
  }

  source.on('error', onerror);
  dest.on('error', onerror);

  // remove all the event listeners that were added.
  function cleanup() {
    source.removeListener('data', ondata);
    dest.removeListener('drain', ondrain);

    source.removeListener('end', onend);
    source.removeListener('close', onclose);

    source.removeListener('error', onerror);
    dest.removeListener('error', onerror);

    source.removeListener('end', cleanup);
    source.removeListener('close', cleanup);

    dest.removeListener('close', cleanup);
  }

  source.on('end', cleanup);
  source.on('close', cleanup);

  dest.on('close', cleanup);

  dest.emit('pipe', source);

  // Allow for unix-like usage: A.pipe(B).pipe(C)
  return dest;
};

},{"events":5,"inherits":7,"readable-stream/lib/_stream_duplex.js":14,"readable-stream/lib/_stream_passthrough.js":15,"readable-stream/lib/_stream_readable.js":16,"readable-stream/lib/_stream_transform.js":17,"readable-stream/lib/_stream_writable.js":18,"readable-stream/lib/internal/streams/end-of-stream.js":22,"readable-stream/lib/internal/streams/pipeline.js":24}],13:[function(require,module,exports){
'use strict';

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

var codes = {};

function createErrorType(code, message, Base) {
  if (!Base) {
    Base = Error;
  }

  function getMessage(arg1, arg2, arg3) {
    if (typeof message === 'string') {
      return message;
    } else {
      return message(arg1, arg2, arg3);
    }
  }

  var NodeError =
  /*#__PURE__*/
  function (_Base) {
    _inheritsLoose(NodeError, _Base);

    function NodeError(arg1, arg2, arg3) {
      return _Base.call(this, getMessage(arg1, arg2, arg3)) || this;
    }

    return NodeError;
  }(Base);

  NodeError.prototype.name = Base.name;
  NodeError.prototype.code = code;
  codes[code] = NodeError;
} // https://github.com/nodejs/node/blob/v10.8.0/lib/internal/errors.js


function oneOf(expected, thing) {
  if (Array.isArray(expected)) {
    var len = expected.length;
    expected = expected.map(function (i) {
      return String(i);
    });

    if (len > 2) {
      return "one of ".concat(thing, " ").concat(expected.slice(0, len - 1).join(', '), ", or ") + expected[len - 1];
    } else if (len === 2) {
      return "one of ".concat(thing, " ").concat(expected[0], " or ").concat(expected[1]);
    } else {
      return "of ".concat(thing, " ").concat(expected[0]);
    }
  } else {
    return "of ".concat(thing, " ").concat(String(expected));
  }
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith


function startsWith(str, search, pos) {
  return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith


function endsWith(str, search, this_len) {
  if (this_len === undefined || this_len > str.length) {
    this_len = str.length;
  }

  return str.substring(this_len - search.length, this_len) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes


function includes(str, search, start) {
  if (typeof start !== 'number') {
    start = 0;
  }

  if (start + search.length > str.length) {
    return false;
  } else {
    return str.indexOf(search, start) !== -1;
  }
}

createErrorType('ERR_INVALID_OPT_VALUE', function (name, value) {
  return 'The value "' + value + '" is invalid for option "' + name + '"';
}, TypeError);
createErrorType('ERR_INVALID_ARG_TYPE', function (name, expected, actual) {
  // determiner: 'must be' or 'must not be'
  var determiner;

  if (typeof expected === 'string' && startsWith(expected, 'not ')) {
    determiner = 'must not be';
    expected = expected.replace(/^not /, '');
  } else {
    determiner = 'must be';
  }

  var msg;

  if (endsWith(name, ' argument')) {
    // For cases like 'first argument'
    msg = "The ".concat(name, " ").concat(determiner, " ").concat(oneOf(expected, 'type'));
  } else {
    var type = includes(name, '.') ? 'property' : 'argument';
    msg = "The \"".concat(name, "\" ").concat(type, " ").concat(determiner, " ").concat(oneOf(expected, 'type'));
  }

  msg += ". Received type ".concat(typeof actual);
  return msg;
}, TypeError);
createErrorType('ERR_STREAM_PUSH_AFTER_EOF', 'stream.push() after EOF');
createErrorType('ERR_METHOD_NOT_IMPLEMENTED', function (name) {
  return 'The ' + name + ' method is not implemented';
});
createErrorType('ERR_STREAM_PREMATURE_CLOSE', 'Premature close');
createErrorType('ERR_STREAM_DESTROYED', function (name) {
  return 'Cannot call ' + name + ' after a stream was destroyed';
});
createErrorType('ERR_MULTIPLE_CALLBACK', 'Callback called multiple times');
createErrorType('ERR_STREAM_CANNOT_PIPE', 'Cannot pipe, not readable');
createErrorType('ERR_STREAM_WRITE_AFTER_END', 'write after end');
createErrorType('ERR_STREAM_NULL_VALUES', 'May not write null values to stream', TypeError);
createErrorType('ERR_UNKNOWN_ENCODING', function (arg) {
  return 'Unknown encoding: ' + arg;
}, TypeError);
createErrorType('ERR_STREAM_UNSHIFT_AFTER_END_EVENT', 'stream.unshift() after end event');
module.exports.codes = codes;

},{}],14:[function(require,module,exports){
(function (process){(function (){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.
'use strict';
/*<replacement>*/

var objectKeys = Object.keys || function (obj) {
  var keys = [];

  for (var key in obj) {
    keys.push(key);
  }

  return keys;
};
/*</replacement>*/


module.exports = Duplex;

var Readable = require('./_stream_readable');

var Writable = require('./_stream_writable');

require('inherits')(Duplex, Readable);

{
  // Allow the keys array to be GC'ed.
  var keys = objectKeys(Writable.prototype);

  for (var v = 0; v < keys.length; v++) {
    var method = keys[v];
    if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
  }
}

function Duplex(options) {
  if (!(this instanceof Duplex)) return new Duplex(options);
  Readable.call(this, options);
  Writable.call(this, options);
  this.allowHalfOpen = true;

  if (options) {
    if (options.readable === false) this.readable = false;
    if (options.writable === false) this.writable = false;

    if (options.allowHalfOpen === false) {
      this.allowHalfOpen = false;
      this.once('end', onend);
    }
  }
}

Object.defineProperty(Duplex.prototype, 'writableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.highWaterMark;
  }
});
Object.defineProperty(Duplex.prototype, 'writableBuffer', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState && this._writableState.getBuffer();
  }
});
Object.defineProperty(Duplex.prototype, 'writableLength', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.length;
  }
}); // the no-half-open enforcer

function onend() {
  // If the writable side ended, then we're ok.
  if (this._writableState.ended) return; // no more data can be written.
  // But allow more writes to happen in this tick.

  process.nextTick(onEndNT, this);
}

function onEndNT(self) {
  self.end();
}

Object.defineProperty(Duplex.prototype, 'destroyed', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    if (this._readableState === undefined || this._writableState === undefined) {
      return false;
    }

    return this._readableState.destroyed && this._writableState.destroyed;
  },
  set: function set(value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (this._readableState === undefined || this._writableState === undefined) {
      return;
    } // backward compatibility, the user is explicitly
    // managing destroyed


    this._readableState.destroyed = value;
    this._writableState.destroyed = value;
  }
});
}).call(this)}).call(this,require('_process'))
},{"./_stream_readable":16,"./_stream_writable":18,"_process":10,"inherits":7}],15:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.
'use strict';

module.exports = PassThrough;

var Transform = require('./_stream_transform');

require('inherits')(PassThrough, Transform);

function PassThrough(options) {
  if (!(this instanceof PassThrough)) return new PassThrough(options);
  Transform.call(this, options);
}

PassThrough.prototype._transform = function (chunk, encoding, cb) {
  cb(null, chunk);
};
},{"./_stream_transform":17,"inherits":7}],16:[function(require,module,exports){
(function (process,global){(function (){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
'use strict';

module.exports = Readable;
/*<replacement>*/

var Duplex;
/*</replacement>*/

Readable.ReadableState = ReadableState;
/*<replacement>*/

var EE = require('events').EventEmitter;

var EElistenerCount = function EElistenerCount(emitter, type) {
  return emitter.listeners(type).length;
};
/*</replacement>*/

/*<replacement>*/


var Stream = require('./internal/streams/stream');
/*</replacement>*/


var Buffer = require('buffer').Buffer;

var OurUint8Array = global.Uint8Array || function () {};

function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}

function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}
/*<replacement>*/


var debugUtil = require('util');

var debug;

if (debugUtil && debugUtil.debuglog) {
  debug = debugUtil.debuglog('stream');
} else {
  debug = function debug() {};
}
/*</replacement>*/


var BufferList = require('./internal/streams/buffer_list');

var destroyImpl = require('./internal/streams/destroy');

var _require = require('./internal/streams/state'),
    getHighWaterMark = _require.getHighWaterMark;

var _require$codes = require('../errors').codes,
    ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,
    ERR_STREAM_PUSH_AFTER_EOF = _require$codes.ERR_STREAM_PUSH_AFTER_EOF,
    ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
    ERR_STREAM_UNSHIFT_AFTER_END_EVENT = _require$codes.ERR_STREAM_UNSHIFT_AFTER_END_EVENT; // Lazy loaded to improve the startup performance.


var StringDecoder;
var createReadableStreamAsyncIterator;
var from;

require('inherits')(Readable, Stream);

var errorOrDestroy = destroyImpl.errorOrDestroy;
var kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];

function prependListener(emitter, event, fn) {
  // Sadly this is not cacheable as some libraries bundle their own
  // event emitter implementation with them.
  if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn); // This is a hack to make sure that our error handler is attached before any
  // userland ones.  NEVER DO THIS. This is here only because this code needs
  // to continue to work with older versions of Node.js that do not include
  // the prependListener() method. The goal is to eventually remove this hack.

  if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (Array.isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
}

function ReadableState(options, stream, isDuplex) {
  Duplex = Duplex || require('./_stream_duplex');
  options = options || {}; // Duplex streams are both readable and writable, but share
  // the same options object.
  // However, some cases require setting options to different
  // values for the readable and the writable sides of the duplex stream.
  // These options can be provided separately as readableXXX and writableXXX.

  if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex; // object stream flag. Used to make read(n) ignore n and to
  // make all the buffer merging and length checks go away

  this.objectMode = !!options.objectMode;
  if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode; // the point at which it stops calling _read() to fill the buffer
  // Note: 0 is a valid value, means "don't call _read preemptively ever"

  this.highWaterMark = getHighWaterMark(this, options, 'readableHighWaterMark', isDuplex); // A linked list is used to store data chunks instead of an array because the
  // linked list can remove elements from the beginning faster than
  // array.shift()

  this.buffer = new BufferList();
  this.length = 0;
  this.pipes = null;
  this.pipesCount = 0;
  this.flowing = null;
  this.ended = false;
  this.endEmitted = false;
  this.reading = false; // a flag to be able to tell if the event 'readable'/'data' is emitted
  // immediately, or on a later tick.  We set this to true at first, because
  // any actions that shouldn't happen until "later" should generally also
  // not happen before the first read call.

  this.sync = true; // whenever we return null, then we set a flag to say
  // that we're awaiting a 'readable' event emission.

  this.needReadable = false;
  this.emittedReadable = false;
  this.readableListening = false;
  this.resumeScheduled = false;
  this.paused = true; // Should close be emitted on destroy. Defaults to true.

  this.emitClose = options.emitClose !== false; // Should .destroy() be called after 'end' (and potentially 'finish')

  this.autoDestroy = !!options.autoDestroy; // has it been destroyed

  this.destroyed = false; // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.

  this.defaultEncoding = options.defaultEncoding || 'utf8'; // the number of writers that are awaiting a drain event in .pipe()s

  this.awaitDrain = 0; // if true, a maybeReadMore has been scheduled

  this.readingMore = false;
  this.decoder = null;
  this.encoding = null;

  if (options.encoding) {
    if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
    this.decoder = new StringDecoder(options.encoding);
    this.encoding = options.encoding;
  }
}

function Readable(options) {
  Duplex = Duplex || require('./_stream_duplex');
  if (!(this instanceof Readable)) return new Readable(options); // Checking for a Stream.Duplex instance is faster here instead of inside
  // the ReadableState constructor, at least with V8 6.5

  var isDuplex = this instanceof Duplex;
  this._readableState = new ReadableState(options, this, isDuplex); // legacy

  this.readable = true;

  if (options) {
    if (typeof options.read === 'function') this._read = options.read;
    if (typeof options.destroy === 'function') this._destroy = options.destroy;
  }

  Stream.call(this);
}

Object.defineProperty(Readable.prototype, 'destroyed', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    if (this._readableState === undefined) {
      return false;
    }

    return this._readableState.destroyed;
  },
  set: function set(value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._readableState) {
      return;
    } // backward compatibility, the user is explicitly
    // managing destroyed


    this._readableState.destroyed = value;
  }
});
Readable.prototype.destroy = destroyImpl.destroy;
Readable.prototype._undestroy = destroyImpl.undestroy;

Readable.prototype._destroy = function (err, cb) {
  cb(err);
}; // Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.


Readable.prototype.push = function (chunk, encoding) {
  var state = this._readableState;
  var skipChunkCheck;

  if (!state.objectMode) {
    if (typeof chunk === 'string') {
      encoding = encoding || state.defaultEncoding;

      if (encoding !== state.encoding) {
        chunk = Buffer.from(chunk, encoding);
        encoding = '';
      }

      skipChunkCheck = true;
    }
  } else {
    skipChunkCheck = true;
  }

  return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
}; // Unshift should *always* be something directly out of read()


Readable.prototype.unshift = function (chunk) {
  return readableAddChunk(this, chunk, null, true, false);
};

function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
  debug('readableAddChunk', chunk);
  var state = stream._readableState;

  if (chunk === null) {
    state.reading = false;
    onEofChunk(stream, state);
  } else {
    var er;
    if (!skipChunkCheck) er = chunkInvalid(state, chunk);

    if (er) {
      errorOrDestroy(stream, er);
    } else if (state.objectMode || chunk && chunk.length > 0) {
      if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {
        chunk = _uint8ArrayToBuffer(chunk);
      }

      if (addToFront) {
        if (state.endEmitted) errorOrDestroy(stream, new ERR_STREAM_UNSHIFT_AFTER_END_EVENT());else addChunk(stream, state, chunk, true);
      } else if (state.ended) {
        errorOrDestroy(stream, new ERR_STREAM_PUSH_AFTER_EOF());
      } else if (state.destroyed) {
        return false;
      } else {
        state.reading = false;

        if (state.decoder && !encoding) {
          chunk = state.decoder.write(chunk);
          if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);
        } else {
          addChunk(stream, state, chunk, false);
        }
      }
    } else if (!addToFront) {
      state.reading = false;
      maybeReadMore(stream, state);
    }
  } // We can push more data if we are below the highWaterMark.
  // Also, if we have no data yet, we can stand some more bytes.
  // This is to work around cases where hwm=0, such as the repl.


  return !state.ended && (state.length < state.highWaterMark || state.length === 0);
}

function addChunk(stream, state, chunk, addToFront) {
  if (state.flowing && state.length === 0 && !state.sync) {
    state.awaitDrain = 0;
    stream.emit('data', chunk);
  } else {
    // update the buffer info.
    state.length += state.objectMode ? 1 : chunk.length;
    if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);
    if (state.needReadable) emitReadable(stream);
  }

  maybeReadMore(stream, state);
}

function chunkInvalid(state, chunk) {
  var er;

  if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
    er = new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer', 'Uint8Array'], chunk);
  }

  return er;
}

Readable.prototype.isPaused = function () {
  return this._readableState.flowing === false;
}; // backwards compatibility.


Readable.prototype.setEncoding = function (enc) {
  if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
  var decoder = new StringDecoder(enc);
  this._readableState.decoder = decoder; // If setEncoding(null), decoder.encoding equals utf8

  this._readableState.encoding = this._readableState.decoder.encoding; // Iterate over current buffer to convert already stored Buffers:

  var p = this._readableState.buffer.head;
  var content = '';

  while (p !== null) {
    content += decoder.write(p.data);
    p = p.next;
  }

  this._readableState.buffer.clear();

  if (content !== '') this._readableState.buffer.push(content);
  this._readableState.length = content.length;
  return this;
}; // Don't raise the hwm > 1GB


var MAX_HWM = 0x40000000;

function computeNewHighWaterMark(n) {
  if (n >= MAX_HWM) {
    // TODO(ronag): Throw ERR_VALUE_OUT_OF_RANGE.
    n = MAX_HWM;
  } else {
    // Get the next highest power of 2 to prevent increasing hwm excessively in
    // tiny amounts
    n--;
    n |= n >>> 1;
    n |= n >>> 2;
    n |= n >>> 4;
    n |= n >>> 8;
    n |= n >>> 16;
    n++;
  }

  return n;
} // This function is designed to be inlinable, so please take care when making
// changes to the function body.


function howMuchToRead(n, state) {
  if (n <= 0 || state.length === 0 && state.ended) return 0;
  if (state.objectMode) return 1;

  if (n !== n) {
    // Only flow one buffer at a time
    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
  } // If we're asking for more than the current hwm, then raise the hwm.


  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
  if (n <= state.length) return n; // Don't have enough

  if (!state.ended) {
    state.needReadable = true;
    return 0;
  }

  return state.length;
} // you can override either this method, or the async _read(n) below.


Readable.prototype.read = function (n) {
  debug('read', n);
  n = parseInt(n, 10);
  var state = this._readableState;
  var nOrig = n;
  if (n !== 0) state.emittedReadable = false; // if we're doing read(0) to trigger a readable event, but we
  // already have a bunch of data in the buffer, then just trigger
  // the 'readable' event and move on.

  if (n === 0 && state.needReadable && ((state.highWaterMark !== 0 ? state.length >= state.highWaterMark : state.length > 0) || state.ended)) {
    debug('read: emitReadable', state.length, state.ended);
    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
    return null;
  }

  n = howMuchToRead(n, state); // if we've ended, and we're now clear, then finish it up.

  if (n === 0 && state.ended) {
    if (state.length === 0) endReadable(this);
    return null;
  } // All the actual chunk generation logic needs to be
  // *below* the call to _read.  The reason is that in certain
  // synthetic stream cases, such as passthrough streams, _read
  // may be a completely synchronous operation which may change
  // the state of the read buffer, providing enough data when
  // before there was *not* enough.
  //
  // So, the steps are:
  // 1. Figure out what the state of things will be after we do
  // a read from the buffer.
  //
  // 2. If that resulting state will trigger a _read, then call _read.
  // Note that this may be asynchronous, or synchronous.  Yes, it is
  // deeply ugly to write APIs this way, but that still doesn't mean
  // that the Readable class should behave improperly, as streams are
  // designed to be sync/async agnostic.
  // Take note if the _read call is sync or async (ie, if the read call
  // has returned yet), so that we know whether or not it's safe to emit
  // 'readable' etc.
  //
  // 3. Actually pull the requested chunks out of the buffer and return.
  // if we need a readable event, then we need to do some reading.


  var doRead = state.needReadable;
  debug('need readable', doRead); // if we currently have less than the highWaterMark, then also read some

  if (state.length === 0 || state.length - n < state.highWaterMark) {
    doRead = true;
    debug('length less than watermark', doRead);
  } // however, if we've ended, then there's no point, and if we're already
  // reading, then it's unnecessary.


  if (state.ended || state.reading) {
    doRead = false;
    debug('reading or ended', doRead);
  } else if (doRead) {
    debug('do read');
    state.reading = true;
    state.sync = true; // if the length is currently zero, then we *need* a readable event.

    if (state.length === 0) state.needReadable = true; // call internal read method

    this._read(state.highWaterMark);

    state.sync = false; // If _read pushed data synchronously, then `reading` will be false,
    // and we need to re-evaluate how much data we can return to the user.

    if (!state.reading) n = howMuchToRead(nOrig, state);
  }

  var ret;
  if (n > 0) ret = fromList(n, state);else ret = null;

  if (ret === null) {
    state.needReadable = state.length <= state.highWaterMark;
    n = 0;
  } else {
    state.length -= n;
    state.awaitDrain = 0;
  }

  if (state.length === 0) {
    // If we have nothing in the buffer, then we want to know
    // as soon as we *do* get something into the buffer.
    if (!state.ended) state.needReadable = true; // If we tried to read() past the EOF, then emit end on the next tick.

    if (nOrig !== n && state.ended) endReadable(this);
  }

  if (ret !== null) this.emit('data', ret);
  return ret;
};

function onEofChunk(stream, state) {
  debug('onEofChunk');
  if (state.ended) return;

  if (state.decoder) {
    var chunk = state.decoder.end();

    if (chunk && chunk.length) {
      state.buffer.push(chunk);
      state.length += state.objectMode ? 1 : chunk.length;
    }
  }

  state.ended = true;

  if (state.sync) {
    // if we are sync, wait until next tick to emit the data.
    // Otherwise we risk emitting data in the flow()
    // the readable code triggers during a read() call
    emitReadable(stream);
  } else {
    // emit 'readable' now to make sure it gets picked up.
    state.needReadable = false;

    if (!state.emittedReadable) {
      state.emittedReadable = true;
      emitReadable_(stream);
    }
  }
} // Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.


function emitReadable(stream) {
  var state = stream._readableState;
  debug('emitReadable', state.needReadable, state.emittedReadable);
  state.needReadable = false;

  if (!state.emittedReadable) {
    debug('emitReadable', state.flowing);
    state.emittedReadable = true;
    process.nextTick(emitReadable_, stream);
  }
}

function emitReadable_(stream) {
  var state = stream._readableState;
  debug('emitReadable_', state.destroyed, state.length, state.ended);

  if (!state.destroyed && (state.length || state.ended)) {
    stream.emit('readable');
    state.emittedReadable = false;
  } // The stream needs another readable event if
  // 1. It is not flowing, as the flow mechanism will take
  //    care of it.
  // 2. It is not ended.
  // 3. It is below the highWaterMark, so we can schedule
  //    another readable later.


  state.needReadable = !state.flowing && !state.ended && state.length <= state.highWaterMark;
  flow(stream);
} // at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.


function maybeReadMore(stream, state) {
  if (!state.readingMore) {
    state.readingMore = true;
    process.nextTick(maybeReadMore_, stream, state);
  }
}

function maybeReadMore_(stream, state) {
  // Attempt to read more data if we should.
  //
  // The conditions for reading more data are (one of):
  // - Not enough data buffered (state.length < state.highWaterMark). The loop
  //   is responsible for filling the buffer with enough data if such data
  //   is available. If highWaterMark is 0 and we are not in the flowing mode
  //   we should _not_ attempt to buffer any extra data. We'll get more data
  //   when the stream consumer calls read() instead.
  // - No data in the buffer, and the stream is in flowing mode. In this mode
  //   the loop below is responsible for ensuring read() is called. Failing to
  //   call read here would abort the flow and there's no other mechanism for
  //   continuing the flow if the stream consumer has just subscribed to the
  //   'data' event.
  //
  // In addition to the above conditions to keep reading data, the following
  // conditions prevent the data from being read:
  // - The stream has ended (state.ended).
  // - There is already a pending 'read' operation (state.reading). This is a
  //   case where the the stream has called the implementation defined _read()
  //   method, but they are processing the call asynchronously and have _not_
  //   called push() with new data. In this case we skip performing more
  //   read()s. The execution ends in this method again after the _read() ends
  //   up calling push() with more data.
  while (!state.reading && !state.ended && (state.length < state.highWaterMark || state.flowing && state.length === 0)) {
    var len = state.length;
    debug('maybeReadMore read 0');
    stream.read(0);
    if (len === state.length) // didn't get any data, stop spinning.
      break;
  }

  state.readingMore = false;
} // abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.


Readable.prototype._read = function (n) {
  errorOrDestroy(this, new ERR_METHOD_NOT_IMPLEMENTED('_read()'));
};

Readable.prototype.pipe = function (dest, pipeOpts) {
  var src = this;
  var state = this._readableState;

  switch (state.pipesCount) {
    case 0:
      state.pipes = dest;
      break;

    case 1:
      state.pipes = [state.pipes, dest];
      break;

    default:
      state.pipes.push(dest);
      break;
  }

  state.pipesCount += 1;
  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);
  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;
  var endFn = doEnd ? onend : unpipe;
  if (state.endEmitted) process.nextTick(endFn);else src.once('end', endFn);
  dest.on('unpipe', onunpipe);

  function onunpipe(readable, unpipeInfo) {
    debug('onunpipe');

    if (readable === src) {
      if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
        unpipeInfo.hasUnpiped = true;
        cleanup();
      }
    }
  }

  function onend() {
    debug('onend');
    dest.end();
  } // when the dest drains, it reduces the awaitDrain counter
  // on the source.  This would be more elegant with a .once()
  // handler in flow(), but adding and removing repeatedly is
  // too slow.


  var ondrain = pipeOnDrain(src);
  dest.on('drain', ondrain);
  var cleanedUp = false;

  function cleanup() {
    debug('cleanup'); // cleanup event handlers once the pipe is broken

    dest.removeListener('close', onclose);
    dest.removeListener('finish', onfinish);
    dest.removeListener('drain', ondrain);
    dest.removeListener('error', onerror);
    dest.removeListener('unpipe', onunpipe);
    src.removeListener('end', onend);
    src.removeListener('end', unpipe);
    src.removeListener('data', ondata);
    cleanedUp = true; // if the reader is waiting for a drain event from this
    // specific writer, then it would cause it to never start
    // flowing again.
    // So, if this is awaiting a drain, then we just call it now.
    // If we don't know, then assume that we are waiting for one.

    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
  }

  src.on('data', ondata);

  function ondata(chunk) {
    debug('ondata');
    var ret = dest.write(chunk);
    debug('dest.write', ret);

    if (ret === false) {
      // If the user unpiped during `dest.write()`, it is possible
      // to get stuck in a permanently paused state if that write
      // also returned false.
      // => Check whether `dest` is still a piping destination.
      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
        debug('false write response, pause', state.awaitDrain);
        state.awaitDrain++;
      }

      src.pause();
    }
  } // if the dest has an error, then stop piping into it.
  // however, don't suppress the throwing behavior for this.


  function onerror(er) {
    debug('onerror', er);
    unpipe();
    dest.removeListener('error', onerror);
    if (EElistenerCount(dest, 'error') === 0) errorOrDestroy(dest, er);
  } // Make sure our error handler is attached before userland ones.


  prependListener(dest, 'error', onerror); // Both close and finish should trigger unpipe, but only once.

  function onclose() {
    dest.removeListener('finish', onfinish);
    unpipe();
  }

  dest.once('close', onclose);

  function onfinish() {
    debug('onfinish');
    dest.removeListener('close', onclose);
    unpipe();
  }

  dest.once('finish', onfinish);

  function unpipe() {
    debug('unpipe');
    src.unpipe(dest);
  } // tell the dest that it's being piped to


  dest.emit('pipe', src); // start the flow if it hasn't been started already.

  if (!state.flowing) {
    debug('pipe resume');
    src.resume();
  }

  return dest;
};

function pipeOnDrain(src) {
  return function pipeOnDrainFunctionResult() {
    var state = src._readableState;
    debug('pipeOnDrain', state.awaitDrain);
    if (state.awaitDrain) state.awaitDrain--;

    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
      state.flowing = true;
      flow(src);
    }
  };
}

Readable.prototype.unpipe = function (dest) {
  var state = this._readableState;
  var unpipeInfo = {
    hasUnpiped: false
  }; // if we're not piping anywhere, then do nothing.

  if (state.pipesCount === 0) return this; // just one destination.  most common case.

  if (state.pipesCount === 1) {
    // passed in one, but it's not the right one.
    if (dest && dest !== state.pipes) return this;
    if (!dest) dest = state.pipes; // got a match.

    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;
    if (dest) dest.emit('unpipe', this, unpipeInfo);
    return this;
  } // slow case. multiple pipe destinations.


  if (!dest) {
    // remove all.
    var dests = state.pipes;
    var len = state.pipesCount;
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;

    for (var i = 0; i < len; i++) {
      dests[i].emit('unpipe', this, {
        hasUnpiped: false
      });
    }

    return this;
  } // try to find the right one.


  var index = indexOf(state.pipes, dest);
  if (index === -1) return this;
  state.pipes.splice(index, 1);
  state.pipesCount -= 1;
  if (state.pipesCount === 1) state.pipes = state.pipes[0];
  dest.emit('unpipe', this, unpipeInfo);
  return this;
}; // set up data events if they are asked for
// Ensure readable listeners eventually get something


Readable.prototype.on = function (ev, fn) {
  var res = Stream.prototype.on.call(this, ev, fn);
  var state = this._readableState;

  if (ev === 'data') {
    // update readableListening so that resume() may be a no-op
    // a few lines down. This is needed to support once('readable').
    state.readableListening = this.listenerCount('readable') > 0; // Try start flowing on next tick if stream isn't explicitly paused

    if (state.flowing !== false) this.resume();
  } else if (ev === 'readable') {
    if (!state.endEmitted && !state.readableListening) {
      state.readableListening = state.needReadable = true;
      state.flowing = false;
      state.emittedReadable = false;
      debug('on readable', state.length, state.reading);

      if (state.length) {
        emitReadable(this);
      } else if (!state.reading) {
        process.nextTick(nReadingNextTick, this);
      }
    }
  }

  return res;
};

Readable.prototype.addListener = Readable.prototype.on;

Readable.prototype.removeListener = function (ev, fn) {
  var res = Stream.prototype.removeListener.call(this, ev, fn);

  if (ev === 'readable') {
    // We need to check if there is someone still listening to
    // readable and reset the state. However this needs to happen
    // after readable has been emitted but before I/O (nextTick) to
    // support once('readable', fn) cycles. This means that calling
    // resume within the same tick will have no
    // effect.
    process.nextTick(updateReadableListening, this);
  }

  return res;
};

Readable.prototype.removeAllListeners = function (ev) {
  var res = Stream.prototype.removeAllListeners.apply(this, arguments);

  if (ev === 'readable' || ev === undefined) {
    // We need to check if there is someone still listening to
    // readable and reset the state. However this needs to happen
    // after readable has been emitted but before I/O (nextTick) to
    // support once('readable', fn) cycles. This means that calling
    // resume within the same tick will have no
    // effect.
    process.nextTick(updateReadableListening, this);
  }

  return res;
};

function updateReadableListening(self) {
  var state = self._readableState;
  state.readableListening = self.listenerCount('readable') > 0;

  if (state.resumeScheduled && !state.paused) {
    // flowing needs to be set to true now, otherwise
    // the upcoming resume will not flow.
    state.flowing = true; // crude way to check if we should resume
  } else if (self.listenerCount('data') > 0) {
    self.resume();
  }
}

function nReadingNextTick(self) {
  debug('readable nexttick read 0');
  self.read(0);
} // pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.


Readable.prototype.resume = function () {
  var state = this._readableState;

  if (!state.flowing) {
    debug('resume'); // we flow only if there is no one listening
    // for readable, but we still have to call
    // resume()

    state.flowing = !state.readableListening;
    resume(this, state);
  }

  state.paused = false;
  return this;
};

function resume(stream, state) {
  if (!state.resumeScheduled) {
    state.resumeScheduled = true;
    process.nextTick(resume_, stream, state);
  }
}

function resume_(stream, state) {
  debug('resume', state.reading);

  if (!state.reading) {
    stream.read(0);
  }

  state.resumeScheduled = false;
  stream.emit('resume');
  flow(stream);
  if (state.flowing && !state.reading) stream.read(0);
}

Readable.prototype.pause = function () {
  debug('call pause flowing=%j', this._readableState.flowing);

  if (this._readableState.flowing !== false) {
    debug('pause');
    this._readableState.flowing = false;
    this.emit('pause');
  }

  this._readableState.paused = true;
  return this;
};

function flow(stream) {
  var state = stream._readableState;
  debug('flow', state.flowing);

  while (state.flowing && stream.read() !== null) {
    ;
  }
} // wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.


Readable.prototype.wrap = function (stream) {
  var _this = this;

  var state = this._readableState;
  var paused = false;
  stream.on('end', function () {
    debug('wrapped end');

    if (state.decoder && !state.ended) {
      var chunk = state.decoder.end();
      if (chunk && chunk.length) _this.push(chunk);
    }

    _this.push(null);
  });
  stream.on('data', function (chunk) {
    debug('wrapped data');
    if (state.decoder) chunk = state.decoder.write(chunk); // don't skip over falsy values in objectMode

    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;

    var ret = _this.push(chunk);

    if (!ret) {
      paused = true;
      stream.pause();
    }
  }); // proxy all the other methods.
  // important when wrapping filters and duplexes.

  for (var i in stream) {
    if (this[i] === undefined && typeof stream[i] === 'function') {
      this[i] = function methodWrap(method) {
        return function methodWrapReturnFunction() {
          return stream[method].apply(stream, arguments);
        };
      }(i);
    }
  } // proxy certain important events.


  for (var n = 0; n < kProxyEvents.length; n++) {
    stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
  } // when we try to consume some more bytes, simply unpause the
  // underlying stream.


  this._read = function (n) {
    debug('wrapped _read', n);

    if (paused) {
      paused = false;
      stream.resume();
    }
  };

  return this;
};

if (typeof Symbol === 'function') {
  Readable.prototype[Symbol.asyncIterator] = function () {
    if (createReadableStreamAsyncIterator === undefined) {
      createReadableStreamAsyncIterator = require('./internal/streams/async_iterator');
    }

    return createReadableStreamAsyncIterator(this);
  };
}

Object.defineProperty(Readable.prototype, 'readableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState.highWaterMark;
  }
});
Object.defineProperty(Readable.prototype, 'readableBuffer', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState && this._readableState.buffer;
  }
});
Object.defineProperty(Readable.prototype, 'readableFlowing', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState.flowing;
  },
  set: function set(state) {
    if (this._readableState) {
      this._readableState.flowing = state;
    }
  }
}); // exposed for testing purposes only.

Readable._fromList = fromList;
Object.defineProperty(Readable.prototype, 'readableLength', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState.length;
  }
}); // Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.

function fromList(n, state) {
  // nothing buffered
  if (state.length === 0) return null;
  var ret;
  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
    // read it all, truncate the list
    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.first();else ret = state.buffer.concat(state.length);
    state.buffer.clear();
  } else {
    // read part of list
    ret = state.buffer.consume(n, state.decoder);
  }
  return ret;
}

function endReadable(stream) {
  var state = stream._readableState;
  debug('endReadable', state.endEmitted);

  if (!state.endEmitted) {
    state.ended = true;
    process.nextTick(endReadableNT, state, stream);
  }
}

function endReadableNT(state, stream) {
  debug('endReadableNT', state.endEmitted, state.length); // Check that we didn't get one last unshift.

  if (!state.endEmitted && state.length === 0) {
    state.endEmitted = true;
    stream.readable = false;
    stream.emit('end');

    if (state.autoDestroy) {
      // In case of duplex streams we need a way to detect
      // if the writable side is ready for autoDestroy as well
      var wState = stream._writableState;

      if (!wState || wState.autoDestroy && wState.finished) {
        stream.destroy();
      }
    }
  }
}

if (typeof Symbol === 'function') {
  Readable.from = function (iterable, opts) {
    if (from === undefined) {
      from = require('./internal/streams/from');
    }

    return from(Readable, iterable, opts);
  };
}

function indexOf(xs, x) {
  for (var i = 0, l = xs.length; i < l; i++) {
    if (xs[i] === x) return i;
  }

  return -1;
}
}).call(this)}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"../errors":13,"./_stream_duplex":14,"./internal/streams/async_iterator":19,"./internal/streams/buffer_list":20,"./internal/streams/destroy":21,"./internal/streams/from":23,"./internal/streams/state":25,"./internal/streams/stream":26,"_process":10,"buffer":4,"events":5,"inherits":7,"string_decoder/":27,"util":3}],17:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.
'use strict';

module.exports = Transform;

var _require$codes = require('../errors').codes,
    ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
    ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK,
    ERR_TRANSFORM_ALREADY_TRANSFORMING = _require$codes.ERR_TRANSFORM_ALREADY_TRANSFORMING,
    ERR_TRANSFORM_WITH_LENGTH_0 = _require$codes.ERR_TRANSFORM_WITH_LENGTH_0;

var Duplex = require('./_stream_duplex');

require('inherits')(Transform, Duplex);

function afterTransform(er, data) {
  var ts = this._transformState;
  ts.transforming = false;
  var cb = ts.writecb;

  if (cb === null) {
    return this.emit('error', new ERR_MULTIPLE_CALLBACK());
  }

  ts.writechunk = null;
  ts.writecb = null;
  if (data != null) // single equals check for both `null` and `undefined`
    this.push(data);
  cb(er);
  var rs = this._readableState;
  rs.reading = false;

  if (rs.needReadable || rs.length < rs.highWaterMark) {
    this._read(rs.highWaterMark);
  }
}

function Transform(options) {
  if (!(this instanceof Transform)) return new Transform(options);
  Duplex.call(this, options);
  this._transformState = {
    afterTransform: afterTransform.bind(this),
    needTransform: false,
    transforming: false,
    writecb: null,
    writechunk: null,
    writeencoding: null
  }; // start out asking for a readable event once data is transformed.

  this._readableState.needReadable = true; // we have implemented the _read method, and done the other things
  // that Readable wants before the first _read call, so unset the
  // sync guard flag.

  this._readableState.sync = false;

  if (options) {
    if (typeof options.transform === 'function') this._transform = options.transform;
    if (typeof options.flush === 'function') this._flush = options.flush;
  } // When the writable side finishes, then flush out anything remaining.


  this.on('prefinish', prefinish);
}

function prefinish() {
  var _this = this;

  if (typeof this._flush === 'function' && !this._readableState.destroyed) {
    this._flush(function (er, data) {
      done(_this, er, data);
    });
  } else {
    done(this, null, null);
  }
}

Transform.prototype.push = function (chunk, encoding) {
  this._transformState.needTransform = false;
  return Duplex.prototype.push.call(this, chunk, encoding);
}; // This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.


Transform.prototype._transform = function (chunk, encoding, cb) {
  cb(new ERR_METHOD_NOT_IMPLEMENTED('_transform()'));
};

Transform.prototype._write = function (chunk, encoding, cb) {
  var ts = this._transformState;
  ts.writecb = cb;
  ts.writechunk = chunk;
  ts.writeencoding = encoding;

  if (!ts.transforming) {
    var rs = this._readableState;
    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
  }
}; // Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.


Transform.prototype._read = function (n) {
  var ts = this._transformState;

  if (ts.writechunk !== null && !ts.transforming) {
    ts.transforming = true;

    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
  } else {
    // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
  }
};

Transform.prototype._destroy = function (err, cb) {
  Duplex.prototype._destroy.call(this, err, function (err2) {
    cb(err2);
  });
};

function done(stream, er, data) {
  if (er) return stream.emit('error', er);
  if (data != null) // single equals check for both `null` and `undefined`
    stream.push(data); // TODO(BridgeAR): Write a test for these two error cases
  // if there's nothing in the write buffer, then that means
  // that nothing more will ever be provided

  if (stream._writableState.length) throw new ERR_TRANSFORM_WITH_LENGTH_0();
  if (stream._transformState.transforming) throw new ERR_TRANSFORM_ALREADY_TRANSFORMING();
  return stream.push(null);
}
},{"../errors":13,"./_stream_duplex":14,"inherits":7}],18:[function(require,module,exports){
(function (process,global){(function (){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// A bit simpler than readable streams.
// Implement an async ._write(chunk, encoding, cb), and it'll handle all
// the drain event emission and buffering.
'use strict';

module.exports = Writable;
/* <replacement> */

function WriteReq(chunk, encoding, cb) {
  this.chunk = chunk;
  this.encoding = encoding;
  this.callback = cb;
  this.next = null;
} // It seems a linked list but it is not
// there will be only 2 of these for each stream


function CorkedRequest(state) {
  var _this = this;

  this.next = null;
  this.entry = null;

  this.finish = function () {
    onCorkedFinish(_this, state);
  };
}
/* </replacement> */

/*<replacement>*/


var Duplex;
/*</replacement>*/

Writable.WritableState = WritableState;
/*<replacement>*/

var internalUtil = {
  deprecate: require('util-deprecate')
};
/*</replacement>*/

/*<replacement>*/

var Stream = require('./internal/streams/stream');
/*</replacement>*/


var Buffer = require('buffer').Buffer;

var OurUint8Array = global.Uint8Array || function () {};

function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}

function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}

var destroyImpl = require('./internal/streams/destroy');

var _require = require('./internal/streams/state'),
    getHighWaterMark = _require.getHighWaterMark;

var _require$codes = require('../errors').codes,
    ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,
    ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
    ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK,
    ERR_STREAM_CANNOT_PIPE = _require$codes.ERR_STREAM_CANNOT_PIPE,
    ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED,
    ERR_STREAM_NULL_VALUES = _require$codes.ERR_STREAM_NULL_VALUES,
    ERR_STREAM_WRITE_AFTER_END = _require$codes.ERR_STREAM_WRITE_AFTER_END,
    ERR_UNKNOWN_ENCODING = _require$codes.ERR_UNKNOWN_ENCODING;

var errorOrDestroy = destroyImpl.errorOrDestroy;

require('inherits')(Writable, Stream);

function nop() {}

function WritableState(options, stream, isDuplex) {
  Duplex = Duplex || require('./_stream_duplex');
  options = options || {}; // Duplex streams are both readable and writable, but share
  // the same options object.
  // However, some cases require setting options to different
  // values for the readable and the writable sides of the duplex stream,
  // e.g. options.readableObjectMode vs. options.writableObjectMode, etc.

  if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex; // object stream flag to indicate whether or not this stream
  // contains buffers or objects.

  this.objectMode = !!options.objectMode;
  if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode; // the point at which write() starts returning false
  // Note: 0 is a valid value, means that we always return false if
  // the entire buffer is not flushed immediately on write()

  this.highWaterMark = getHighWaterMark(this, options, 'writableHighWaterMark', isDuplex); // if _final has been called

  this.finalCalled = false; // drain event flag.

  this.needDrain = false; // at the start of calling end()

  this.ending = false; // when end() has been called, and returned

  this.ended = false; // when 'finish' is emitted

  this.finished = false; // has it been destroyed

  this.destroyed = false; // should we decode strings into buffers before passing to _write?
  // this is here so that some node-core streams can optimize string
  // handling at a lower level.

  var noDecode = options.decodeStrings === false;
  this.decodeStrings = !noDecode; // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.

  this.defaultEncoding = options.defaultEncoding || 'utf8'; // not an actual buffer we keep track of, but a measurement
  // of how much we're waiting to get pushed to some underlying
  // socket or file.

  this.length = 0; // a flag to see when we're in the middle of a write.

  this.writing = false; // when true all writes will be buffered until .uncork() call

  this.corked = 0; // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, because any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.

  this.sync = true; // a flag to know if we're processing previously buffered items, which
  // may call the _write() callback in the same tick, so that we don't
  // end up in an overlapped onwrite situation.

  this.bufferProcessing = false; // the callback that's passed to _write(chunk,cb)

  this.onwrite = function (er) {
    onwrite(stream, er);
  }; // the callback that the user supplies to write(chunk,encoding,cb)


  this.writecb = null; // the amount that is being written when _write is called.

  this.writelen = 0;
  this.bufferedRequest = null;
  this.lastBufferedRequest = null; // number of pending user-supplied write callbacks
  // this must be 0 before 'finish' can be emitted

  this.pendingcb = 0; // emit prefinish if the only thing we're waiting for is _write cbs
  // This is relevant for synchronous Transform streams

  this.prefinished = false; // True if the error was already emitted and should not be thrown again

  this.errorEmitted = false; // Should close be emitted on destroy. Defaults to true.

  this.emitClose = options.emitClose !== false; // Should .destroy() be called after 'finish' (and potentially 'end')

  this.autoDestroy = !!options.autoDestroy; // count buffered requests

  this.bufferedRequestCount = 0; // allocate the first CorkedRequest, there is always
  // one allocated and free to use, and we maintain at most two

  this.corkedRequestsFree = new CorkedRequest(this);
}

WritableState.prototype.getBuffer = function getBuffer() {
  var current = this.bufferedRequest;
  var out = [];

  while (current) {
    out.push(current);
    current = current.next;
  }

  return out;
};

(function () {
  try {
    Object.defineProperty(WritableState.prototype, 'buffer', {
      get: internalUtil.deprecate(function writableStateBufferGetter() {
        return this.getBuffer();
      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')
    });
  } catch (_) {}
})(); // Test _writableState for inheritance to account for Duplex streams,
// whose prototype chain only points to Readable.


var realHasInstance;

if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
  realHasInstance = Function.prototype[Symbol.hasInstance];
  Object.defineProperty(Writable, Symbol.hasInstance, {
    value: function value(object) {
      if (realHasInstance.call(this, object)) return true;
      if (this !== Writable) return false;
      return object && object._writableState instanceof WritableState;
    }
  });
} else {
  realHasInstance = function realHasInstance(object) {
    return object instanceof this;
  };
}

function Writable(options) {
  Duplex = Duplex || require('./_stream_duplex'); // Writable ctor is applied to Duplexes, too.
  // `realHasInstance` is necessary because using plain `instanceof`
  // would return false, as no `_writableState` property is attached.
  // Trying to use the custom `instanceof` for Writable here will also break the
  // Node.js LazyTransform implementation, which has a non-trivial getter for
  // `_writableState` that would lead to infinite recursion.
  // Checking for a Stream.Duplex instance is faster here instead of inside
  // the WritableState constructor, at least with V8 6.5

  var isDuplex = this instanceof Duplex;
  if (!isDuplex && !realHasInstance.call(Writable, this)) return new Writable(options);
  this._writableState = new WritableState(options, this, isDuplex); // legacy.

  this.writable = true;

  if (options) {
    if (typeof options.write === 'function') this._write = options.write;
    if (typeof options.writev === 'function') this._writev = options.writev;
    if (typeof options.destroy === 'function') this._destroy = options.destroy;
    if (typeof options.final === 'function') this._final = options.final;
  }

  Stream.call(this);
} // Otherwise people can pipe Writable streams, which is just wrong.


Writable.prototype.pipe = function () {
  errorOrDestroy(this, new ERR_STREAM_CANNOT_PIPE());
};

function writeAfterEnd(stream, cb) {
  var er = new ERR_STREAM_WRITE_AFTER_END(); // TODO: defer error events consistently everywhere, not just the cb

  errorOrDestroy(stream, er);
  process.nextTick(cb, er);
} // Checks that a user-supplied chunk is valid, especially for the particular
// mode the stream is in. Currently this means that `null` is never accepted
// and undefined/non-string values are only allowed in object mode.


function validChunk(stream, state, chunk, cb) {
  var er;

  if (chunk === null) {
    er = new ERR_STREAM_NULL_VALUES();
  } else if (typeof chunk !== 'string' && !state.objectMode) {
    er = new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer'], chunk);
  }

  if (er) {
    errorOrDestroy(stream, er);
    process.nextTick(cb, er);
    return false;
  }

  return true;
}

Writable.prototype.write = function (chunk, encoding, cb) {
  var state = this._writableState;
  var ret = false;

  var isBuf = !state.objectMode && _isUint8Array(chunk);

  if (isBuf && !Buffer.isBuffer(chunk)) {
    chunk = _uint8ArrayToBuffer(chunk);
  }

  if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;
  if (typeof cb !== 'function') cb = nop;
  if (state.ending) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {
    state.pendingcb++;
    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
  }
  return ret;
};

Writable.prototype.cork = function () {
  this._writableState.corked++;
};

Writable.prototype.uncork = function () {
  var state = this._writableState;

  if (state.corked) {
    state.corked--;
    if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
  }
};

Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
  // node::ParseEncoding() requires lower case.
  if (typeof encoding === 'string') encoding = encoding.toLowerCase();
  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new ERR_UNKNOWN_ENCODING(encoding);
  this._writableState.defaultEncoding = encoding;
  return this;
};

Object.defineProperty(Writable.prototype, 'writableBuffer', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState && this._writableState.getBuffer();
  }
});

function decodeChunk(state, chunk, encoding) {
  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
    chunk = Buffer.from(chunk, encoding);
  }

  return chunk;
}

Object.defineProperty(Writable.prototype, 'writableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.highWaterMark;
  }
}); // if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.

function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
  if (!isBuf) {
    var newChunk = decodeChunk(state, chunk, encoding);

    if (chunk !== newChunk) {
      isBuf = true;
      encoding = 'buffer';
      chunk = newChunk;
    }
  }

  var len = state.objectMode ? 1 : chunk.length;
  state.length += len;
  var ret = state.length < state.highWaterMark; // we must ensure that previous needDrain will not be reset to false.

  if (!ret) state.needDrain = true;

  if (state.writing || state.corked) {
    var last = state.lastBufferedRequest;
    state.lastBufferedRequest = {
      chunk: chunk,
      encoding: encoding,
      isBuf: isBuf,
      callback: cb,
      next: null
    };

    if (last) {
      last.next = state.lastBufferedRequest;
    } else {
      state.bufferedRequest = state.lastBufferedRequest;
    }

    state.bufferedRequestCount += 1;
  } else {
    doWrite(stream, state, false, len, chunk, encoding, cb);
  }

  return ret;
}

function doWrite(stream, state, writev, len, chunk, encoding, cb) {
  state.writelen = len;
  state.writecb = cb;
  state.writing = true;
  state.sync = true;
  if (state.destroyed) state.onwrite(new ERR_STREAM_DESTROYED('write'));else if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
  state.sync = false;
}

function onwriteError(stream, state, sync, er, cb) {
  --state.pendingcb;

  if (sync) {
    // defer the callback if we are being called synchronously
    // to avoid piling up things on the stack
    process.nextTick(cb, er); // this can emit finish, and it will always happen
    // after error

    process.nextTick(finishMaybe, stream, state);
    stream._writableState.errorEmitted = true;
    errorOrDestroy(stream, er);
  } else {
    // the caller expect this to happen before if
    // it is async
    cb(er);
    stream._writableState.errorEmitted = true;
    errorOrDestroy(stream, er); // this can emit finish, but finish must
    // always follow error

    finishMaybe(stream, state);
  }
}

function onwriteStateUpdate(state) {
  state.writing = false;
  state.writecb = null;
  state.length -= state.writelen;
  state.writelen = 0;
}

function onwrite(stream, er) {
  var state = stream._writableState;
  var sync = state.sync;
  var cb = state.writecb;
  if (typeof cb !== 'function') throw new ERR_MULTIPLE_CALLBACK();
  onwriteStateUpdate(state);
  if (er) onwriteError(stream, state, sync, er, cb);else {
    // Check if we're actually ready to finish, but don't emit yet
    var finished = needFinish(state) || stream.destroyed;

    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
      clearBuffer(stream, state);
    }

    if (sync) {
      process.nextTick(afterWrite, stream, state, finished, cb);
    } else {
      afterWrite(stream, state, finished, cb);
    }
  }
}

function afterWrite(stream, state, finished, cb) {
  if (!finished) onwriteDrain(stream, state);
  state.pendingcb--;
  cb();
  finishMaybe(stream, state);
} // Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.


function onwriteDrain(stream, state) {
  if (state.length === 0 && state.needDrain) {
    state.needDrain = false;
    stream.emit('drain');
  }
} // if there's something in the buffer waiting, then process it


function clearBuffer(stream, state) {
  state.bufferProcessing = true;
  var entry = state.bufferedRequest;

  if (stream._writev && entry && entry.next) {
    // Fast case, write everything using _writev()
    var l = state.bufferedRequestCount;
    var buffer = new Array(l);
    var holder = state.corkedRequestsFree;
    holder.entry = entry;
    var count = 0;
    var allBuffers = true;

    while (entry) {
      buffer[count] = entry;
      if (!entry.isBuf) allBuffers = false;
      entry = entry.next;
      count += 1;
    }

    buffer.allBuffers = allBuffers;
    doWrite(stream, state, true, state.length, buffer, '', holder.finish); // doWrite is almost always async, defer these to save a bit of time
    // as the hot path ends with doWrite

    state.pendingcb++;
    state.lastBufferedRequest = null;

    if (holder.next) {
      state.corkedRequestsFree = holder.next;
      holder.next = null;
    } else {
      state.corkedRequestsFree = new CorkedRequest(state);
    }

    state.bufferedRequestCount = 0;
  } else {
    // Slow case, write chunks one-by-one
    while (entry) {
      var chunk = entry.chunk;
      var encoding = entry.encoding;
      var cb = entry.callback;
      var len = state.objectMode ? 1 : chunk.length;
      doWrite(stream, state, false, len, chunk, encoding, cb);
      entry = entry.next;
      state.bufferedRequestCount--; // if we didn't call the onwrite immediately, then
      // it means that we need to wait until it does.
      // also, that means that the chunk and cb are currently
      // being processed, so move the buffer counter past them.

      if (state.writing) {
        break;
      }
    }

    if (entry === null) state.lastBufferedRequest = null;
  }

  state.bufferedRequest = entry;
  state.bufferProcessing = false;
}

Writable.prototype._write = function (chunk, encoding, cb) {
  cb(new ERR_METHOD_NOT_IMPLEMENTED('_write()'));
};

Writable.prototype._writev = null;

Writable.prototype.end = function (chunk, encoding, cb) {
  var state = this._writableState;

  if (typeof chunk === 'function') {
    cb = chunk;
    chunk = null;
    encoding = null;
  } else if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding); // .end() fully uncorks

  if (state.corked) {
    state.corked = 1;
    this.uncork();
  } // ignore unnecessary end() calls.


  if (!state.ending) endWritable(this, state, cb);
  return this;
};

Object.defineProperty(Writable.prototype, 'writableLength', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.length;
  }
});

function needFinish(state) {
  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
}

function callFinal(stream, state) {
  stream._final(function (err) {
    state.pendingcb--;

    if (err) {
      errorOrDestroy(stream, err);
    }

    state.prefinished = true;
    stream.emit('prefinish');
    finishMaybe(stream, state);
  });
}

function prefinish(stream, state) {
  if (!state.prefinished && !state.finalCalled) {
    if (typeof stream._final === 'function' && !state.destroyed) {
      state.pendingcb++;
      state.finalCalled = true;
      process.nextTick(callFinal, stream, state);
    } else {
      state.prefinished = true;
      stream.emit('prefinish');
    }
  }
}

function finishMaybe(stream, state) {
  var need = needFinish(state);

  if (need) {
    prefinish(stream, state);

    if (state.pendingcb === 0) {
      state.finished = true;
      stream.emit('finish');

      if (state.autoDestroy) {
        // In case of duplex streams we need a way to detect
        // if the readable side is ready for autoDestroy as well
        var rState = stream._readableState;

        if (!rState || rState.autoDestroy && rState.endEmitted) {
          stream.destroy();
        }
      }
    }
  }

  return need;
}

function endWritable(stream, state, cb) {
  state.ending = true;
  finishMaybe(stream, state);

  if (cb) {
    if (state.finished) process.nextTick(cb);else stream.once('finish', cb);
  }

  state.ended = true;
  stream.writable = false;
}

function onCorkedFinish(corkReq, state, err) {
  var entry = corkReq.entry;
  corkReq.entry = null;

  while (entry) {
    var cb = entry.callback;
    state.pendingcb--;
    cb(err);
    entry = entry.next;
  } // reuse the free corkReq.


  state.corkedRequestsFree.next = corkReq;
}

Object.defineProperty(Writable.prototype, 'destroyed', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    if (this._writableState === undefined) {
      return false;
    }

    return this._writableState.destroyed;
  },
  set: function set(value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._writableState) {
      return;
    } // backward compatibility, the user is explicitly
    // managing destroyed


    this._writableState.destroyed = value;
  }
});
Writable.prototype.destroy = destroyImpl.destroy;
Writable.prototype._undestroy = destroyImpl.undestroy;

Writable.prototype._destroy = function (err, cb) {
  cb(err);
};
}).call(this)}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"../errors":13,"./_stream_duplex":14,"./internal/streams/destroy":21,"./internal/streams/state":25,"./internal/streams/stream":26,"_process":10,"buffer":4,"inherits":7,"util-deprecate":28}],19:[function(require,module,exports){
(function (process){(function (){
'use strict';

var _Object$setPrototypeO;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var finished = require('./end-of-stream');

var kLastResolve = Symbol('lastResolve');
var kLastReject = Symbol('lastReject');
var kError = Symbol('error');
var kEnded = Symbol('ended');
var kLastPromise = Symbol('lastPromise');
var kHandlePromise = Symbol('handlePromise');
var kStream = Symbol('stream');

function createIterResult(value, done) {
  return {
    value: value,
    done: done
  };
}

function readAndResolve(iter) {
  var resolve = iter[kLastResolve];

  if (resolve !== null) {
    var data = iter[kStream].read(); // we defer if data is null
    // we can be expecting either 'end' or
    // 'error'

    if (data !== null) {
      iter[kLastPromise] = null;
      iter[kLastResolve] = null;
      iter[kLastReject] = null;
      resolve(createIterResult(data, false));
    }
  }
}

function onReadable(iter) {
  // we wait for the next tick, because it might
  // emit an error with process.nextTick
  process.nextTick(readAndResolve, iter);
}

function wrapForNext(lastPromise, iter) {
  return function (resolve, reject) {
    lastPromise.then(function () {
      if (iter[kEnded]) {
        resolve(createIterResult(undefined, true));
        return;
      }

      iter[kHandlePromise](resolve, reject);
    }, reject);
  };
}

var AsyncIteratorPrototype = Object.getPrototypeOf(function () {});
var ReadableStreamAsyncIteratorPrototype = Object.setPrototypeOf((_Object$setPrototypeO = {
  get stream() {
    return this[kStream];
  },

  next: function next() {
    var _this = this;

    // if we have detected an error in the meanwhile
    // reject straight away
    var error = this[kError];

    if (error !== null) {
      return Promise.reject(error);
    }

    if (this[kEnded]) {
      return Promise.resolve(createIterResult(undefined, true));
    }

    if (this[kStream].destroyed) {
      // We need to defer via nextTick because if .destroy(err) is
      // called, the error will be emitted via nextTick, and
      // we cannot guarantee that there is no error lingering around
      // waiting to be emitted.
      return new Promise(function (resolve, reject) {
        process.nextTick(function () {
          if (_this[kError]) {
            reject(_this[kError]);
          } else {
            resolve(createIterResult(undefined, true));
          }
        });
      });
    } // if we have multiple next() calls
    // we will wait for the previous Promise to finish
    // this logic is optimized to support for await loops,
    // where next() is only called once at a time


    var lastPromise = this[kLastPromise];
    var promise;

    if (lastPromise) {
      promise = new Promise(wrapForNext(lastPromise, this));
    } else {
      // fast path needed to support multiple this.push()
      // without triggering the next() queue
      var data = this[kStream].read();

      if (data !== null) {
        return Promise.resolve(createIterResult(data, false));
      }

      promise = new Promise(this[kHandlePromise]);
    }

    this[kLastPromise] = promise;
    return promise;
  }
}, _defineProperty(_Object$setPrototypeO, Symbol.asyncIterator, function () {
  return this;
}), _defineProperty(_Object$setPrototypeO, "return", function _return() {
  var _this2 = this;

  // destroy(err, cb) is a private API
  // we can guarantee we have that here, because we control the
  // Readable class this is attached to
  return new Promise(function (resolve, reject) {
    _this2[kStream].destroy(null, function (err) {
      if (err) {
        reject(err);
        return;
      }

      resolve(createIterResult(undefined, true));
    });
  });
}), _Object$setPrototypeO), AsyncIteratorPrototype);

var createReadableStreamAsyncIterator = function createReadableStreamAsyncIterator(stream) {
  var _Object$create;

  var iterator = Object.create(ReadableStreamAsyncIteratorPrototype, (_Object$create = {}, _defineProperty(_Object$create, kStream, {
    value: stream,
    writable: true
  }), _defineProperty(_Object$create, kLastResolve, {
    value: null,
    writable: true
  }), _defineProperty(_Object$create, kLastReject, {
    value: null,
    writable: true
  }), _defineProperty(_Object$create, kError, {
    value: null,
    writable: true
  }), _defineProperty(_Object$create, kEnded, {
    value: stream._readableState.endEmitted,
    writable: true
  }), _defineProperty(_Object$create, kHandlePromise, {
    value: function value(resolve, reject) {
      var data = iterator[kStream].read();

      if (data) {
        iterator[kLastPromise] = null;
        iterator[kLastResolve] = null;
        iterator[kLastReject] = null;
        resolve(createIterResult(data, false));
      } else {
        iterator[kLastResolve] = resolve;
        iterator[kLastReject] = reject;
      }
    },
    writable: true
  }), _Object$create));
  iterator[kLastPromise] = null;
  finished(stream, function (err) {
    if (err && err.code !== 'ERR_STREAM_PREMATURE_CLOSE') {
      var reject = iterator[kLastReject]; // reject if we are waiting for data in the Promise
      // returned by next() and store the error

      if (reject !== null) {
        iterator[kLastPromise] = null;
        iterator[kLastResolve] = null;
        iterator[kLastReject] = null;
        reject(err);
      }

      iterator[kError] = err;
      return;
    }

    var resolve = iterator[kLastResolve];

    if (resolve !== null) {
      iterator[kLastPromise] = null;
      iterator[kLastResolve] = null;
      iterator[kLastReject] = null;
      resolve(createIterResult(undefined, true));
    }

    iterator[kEnded] = true;
  });
  stream.on('readable', onReadable.bind(null, iterator));
  return iterator;
};

module.exports = createReadableStreamAsyncIterator;
}).call(this)}).call(this,require('_process'))
},{"./end-of-stream":22,"_process":10}],20:[function(require,module,exports){
'use strict';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var _require = require('buffer'),
    Buffer = _require.Buffer;

var _require2 = require('util'),
    inspect = _require2.inspect;

var custom = inspect && inspect.custom || 'inspect';

function copyBuffer(src, target, offset) {
  Buffer.prototype.copy.call(src, target, offset);
}

module.exports =
/*#__PURE__*/
function () {
  function BufferList() {
    _classCallCheck(this, BufferList);

    this.head = null;
    this.tail = null;
    this.length = 0;
  }

  _createClass(BufferList, [{
    key: "push",
    value: function push(v) {
      var entry = {
        data: v,
        next: null
      };
      if (this.length > 0) this.tail.next = entry;else this.head = entry;
      this.tail = entry;
      ++this.length;
    }
  }, {
    key: "unshift",
    value: function unshift(v) {
      var entry = {
        data: v,
        next: this.head
      };
      if (this.length === 0) this.tail = entry;
      this.head = entry;
      ++this.length;
    }
  }, {
    key: "shift",
    value: function shift() {
      if (this.length === 0) return;
      var ret = this.head.data;
      if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
      --this.length;
      return ret;
    }
  }, {
    key: "clear",
    value: function clear() {
      this.head = this.tail = null;
      this.length = 0;
    }
  }, {
    key: "join",
    value: function join(s) {
      if (this.length === 0) return '';
      var p = this.head;
      var ret = '' + p.data;

      while (p = p.next) {
        ret += s + p.data;
      }

      return ret;
    }
  }, {
    key: "concat",
    value: function concat(n) {
      if (this.length === 0) return Buffer.alloc(0);
      var ret = Buffer.allocUnsafe(n >>> 0);
      var p = this.head;
      var i = 0;

      while (p) {
        copyBuffer(p.data, ret, i);
        i += p.data.length;
        p = p.next;
      }

      return ret;
    } // Consumes a specified amount of bytes or characters from the buffered data.

  }, {
    key: "consume",
    value: function consume(n, hasStrings) {
      var ret;

      if (n < this.head.data.length) {
        // `slice` is the same for buffers and strings.
        ret = this.head.data.slice(0, n);
        this.head.data = this.head.data.slice(n);
      } else if (n === this.head.data.length) {
        // First chunk is a perfect match.
        ret = this.shift();
      } else {
        // Result spans more than one buffer.
        ret = hasStrings ? this._getString(n) : this._getBuffer(n);
      }

      return ret;
    }
  }, {
    key: "first",
    value: function first() {
      return this.head.data;
    } // Consumes a specified amount of characters from the buffered data.

  }, {
    key: "_getString",
    value: function _getString(n) {
      var p = this.head;
      var c = 1;
      var ret = p.data;
      n -= ret.length;

      while (p = p.next) {
        var str = p.data;
        var nb = n > str.length ? str.length : n;
        if (nb === str.length) ret += str;else ret += str.slice(0, n);
        n -= nb;

        if (n === 0) {
          if (nb === str.length) {
            ++c;
            if (p.next) this.head = p.next;else this.head = this.tail = null;
          } else {
            this.head = p;
            p.data = str.slice(nb);
          }

          break;
        }

        ++c;
      }

      this.length -= c;
      return ret;
    } // Consumes a specified amount of bytes from the buffered data.

  }, {
    key: "_getBuffer",
    value: function _getBuffer(n) {
      var ret = Buffer.allocUnsafe(n);
      var p = this.head;
      var c = 1;
      p.data.copy(ret);
      n -= p.data.length;

      while (p = p.next) {
        var buf = p.data;
        var nb = n > buf.length ? buf.length : n;
        buf.copy(ret, ret.length - n, 0, nb);
        n -= nb;

        if (n === 0) {
          if (nb === buf.length) {
            ++c;
            if (p.next) this.head = p.next;else this.head = this.tail = null;
          } else {
            this.head = p;
            p.data = buf.slice(nb);
          }

          break;
        }

        ++c;
      }

      this.length -= c;
      return ret;
    } // Make sure the linked list only shows the minimal necessary information.

  }, {
    key: custom,
    value: function value(_, options) {
      return inspect(this, _objectSpread({}, options, {
        // Only inspect one level.
        depth: 0,
        // It should not recurse.
        customInspect: false
      }));
    }
  }]);

  return BufferList;
}();
},{"buffer":4,"util":3}],21:[function(require,module,exports){
(function (process){(function (){
'use strict'; // undocumented cb() API, needed for core, not for public API

function destroy(err, cb) {
  var _this = this;

  var readableDestroyed = this._readableState && this._readableState.destroyed;
  var writableDestroyed = this._writableState && this._writableState.destroyed;

  if (readableDestroyed || writableDestroyed) {
    if (cb) {
      cb(err);
    } else if (err) {
      if (!this._writableState) {
        process.nextTick(emitErrorNT, this, err);
      } else if (!this._writableState.errorEmitted) {
        this._writableState.errorEmitted = true;
        process.nextTick(emitErrorNT, this, err);
      }
    }

    return this;
  } // we set destroyed to true before firing error callbacks in order
  // to make it re-entrance safe in case destroy() is called within callbacks


  if (this._readableState) {
    this._readableState.destroyed = true;
  } // if this is a duplex stream mark the writable part as destroyed as well


  if (this._writableState) {
    this._writableState.destroyed = true;
  }

  this._destroy(err || null, function (err) {
    if (!cb && err) {
      if (!_this._writableState) {
        process.nextTick(emitErrorAndCloseNT, _this, err);
      } else if (!_this._writableState.errorEmitted) {
        _this._writableState.errorEmitted = true;
        process.nextTick(emitErrorAndCloseNT, _this, err);
      } else {
        process.nextTick(emitCloseNT, _this);
      }
    } else if (cb) {
      process.nextTick(emitCloseNT, _this);
      cb(err);
    } else {
      process.nextTick(emitCloseNT, _this);
    }
  });

  return this;
}

function emitErrorAndCloseNT(self, err) {
  emitErrorNT(self, err);
  emitCloseNT(self);
}

function emitCloseNT(self) {
  if (self._writableState && !self._writableState.emitClose) return;
  if (self._readableState && !self._readableState.emitClose) return;
  self.emit('close');
}

function undestroy() {
  if (this._readableState) {
    this._readableState.destroyed = false;
    this._readableState.reading = false;
    this._readableState.ended = false;
    this._readableState.endEmitted = false;
  }

  if (this._writableState) {
    this._writableState.destroyed = false;
    this._writableState.ended = false;
    this._writableState.ending = false;
    this._writableState.finalCalled = false;
    this._writableState.prefinished = false;
    this._writableState.finished = false;
    this._writableState.errorEmitted = false;
  }
}

function emitErrorNT(self, err) {
  self.emit('error', err);
}

function errorOrDestroy(stream, err) {
  // We have tests that rely on errors being emitted
  // in the same tick, so changing this is semver major.
  // For now when you opt-in to autoDestroy we allow
  // the error to be emitted nextTick. In a future
  // semver major update we should change the default to this.
  var rState = stream._readableState;
  var wState = stream._writableState;
  if (rState && rState.autoDestroy || wState && wState.autoDestroy) stream.destroy(err);else stream.emit('error', err);
}

module.exports = {
  destroy: destroy,
  undestroy: undestroy,
  errorOrDestroy: errorOrDestroy
};
}).call(this)}).call(this,require('_process'))
},{"_process":10}],22:[function(require,module,exports){
// Ported from https://github.com/mafintosh/end-of-stream with
// permission from the author, Mathias Buus (@mafintosh).
'use strict';

var ERR_STREAM_PREMATURE_CLOSE = require('../../../errors').codes.ERR_STREAM_PREMATURE_CLOSE;

function once(callback) {
  var called = false;
  return function () {
    if (called) return;
    called = true;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    callback.apply(this, args);
  };
}

function noop() {}

function isRequest(stream) {
  return stream.setHeader && typeof stream.abort === 'function';
}

function eos(stream, opts, callback) {
  if (typeof opts === 'function') return eos(stream, null, opts);
  if (!opts) opts = {};
  callback = once(callback || noop);
  var readable = opts.readable || opts.readable !== false && stream.readable;
  var writable = opts.writable || opts.writable !== false && stream.writable;

  var onlegacyfinish = function onlegacyfinish() {
    if (!stream.writable) onfinish();
  };

  var writableEnded = stream._writableState && stream._writableState.finished;

  var onfinish = function onfinish() {
    writable = false;
    writableEnded = true;
    if (!readable) callback.call(stream);
  };

  var readableEnded = stream._readableState && stream._readableState.endEmitted;

  var onend = function onend() {
    readable = false;
    readableEnded = true;
    if (!writable) callback.call(stream);
  };

  var onerror = function onerror(err) {
    callback.call(stream, err);
  };

  var onclose = function onclose() {
    var err;

    if (readable && !readableEnded) {
      if (!stream._readableState || !stream._readableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
      return callback.call(stream, err);
    }

    if (writable && !writableEnded) {
      if (!stream._writableState || !stream._writableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
      return callback.call(stream, err);
    }
  };

  var onrequest = function onrequest() {
    stream.req.on('finish', onfinish);
  };

  if (isRequest(stream)) {
    stream.on('complete', onfinish);
    stream.on('abort', onclose);
    if (stream.req) onrequest();else stream.on('request', onrequest);
  } else if (writable && !stream._writableState) {
    // legacy streams
    stream.on('end', onlegacyfinish);
    stream.on('close', onlegacyfinish);
  }

  stream.on('end', onend);
  stream.on('finish', onfinish);
  if (opts.error !== false) stream.on('error', onerror);
  stream.on('close', onclose);
  return function () {
    stream.removeListener('complete', onfinish);
    stream.removeListener('abort', onclose);
    stream.removeListener('request', onrequest);
    if (stream.req) stream.req.removeListener('finish', onfinish);
    stream.removeListener('end', onlegacyfinish);
    stream.removeListener('close', onlegacyfinish);
    stream.removeListener('finish', onfinish);
    stream.removeListener('end', onend);
    stream.removeListener('error', onerror);
    stream.removeListener('close', onclose);
  };
}

module.exports = eos;
},{"../../../errors":13}],23:[function(require,module,exports){
module.exports = function () {
  throw new Error('Readable.from is not available in the browser')
};

},{}],24:[function(require,module,exports){
// Ported from https://github.com/mafintosh/pump with
// permission from the author, Mathias Buus (@mafintosh).
'use strict';

var eos;

function once(callback) {
  var called = false;
  return function () {
    if (called) return;
    called = true;
    callback.apply(void 0, arguments);
  };
}

var _require$codes = require('../../../errors').codes,
    ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS,
    ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED;

function noop(err) {
  // Rethrow the error if it exists to avoid swallowing it
  if (err) throw err;
}

function isRequest(stream) {
  return stream.setHeader && typeof stream.abort === 'function';
}

function destroyer(stream, reading, writing, callback) {
  callback = once(callback);
  var closed = false;
  stream.on('close', function () {
    closed = true;
  });
  if (eos === undefined) eos = require('./end-of-stream');
  eos(stream, {
    readable: reading,
    writable: writing
  }, function (err) {
    if (err) return callback(err);
    closed = true;
    callback();
  });
  var destroyed = false;
  return function (err) {
    if (closed) return;
    if (destroyed) return;
    destroyed = true; // request.destroy just do .end - .abort is what we want

    if (isRequest(stream)) return stream.abort();
    if (typeof stream.destroy === 'function') return stream.destroy();
    callback(err || new ERR_STREAM_DESTROYED('pipe'));
  };
}

function call(fn) {
  fn();
}

function pipe(from, to) {
  return from.pipe(to);
}

function popCallback(streams) {
  if (!streams.length) return noop;
  if (typeof streams[streams.length - 1] !== 'function') return noop;
  return streams.pop();
}

function pipeline() {
  for (var _len = arguments.length, streams = new Array(_len), _key = 0; _key < _len; _key++) {
    streams[_key] = arguments[_key];
  }

  var callback = popCallback(streams);
  if (Array.isArray(streams[0])) streams = streams[0];

  if (streams.length < 2) {
    throw new ERR_MISSING_ARGS('streams');
  }

  var error;
  var destroys = streams.map(function (stream, i) {
    var reading = i < streams.length - 1;
    var writing = i > 0;
    return destroyer(stream, reading, writing, function (err) {
      if (!error) error = err;
      if (err) destroys.forEach(call);
      if (reading) return;
      destroys.forEach(call);
      callback(error);
    });
  });
  return streams.reduce(pipe);
}

module.exports = pipeline;
},{"../../../errors":13,"./end-of-stream":22}],25:[function(require,module,exports){
'use strict';

var ERR_INVALID_OPT_VALUE = require('../../../errors').codes.ERR_INVALID_OPT_VALUE;

function highWaterMarkFrom(options, isDuplex, duplexKey) {
  return options.highWaterMark != null ? options.highWaterMark : isDuplex ? options[duplexKey] : null;
}

function getHighWaterMark(state, options, duplexKey, isDuplex) {
  var hwm = highWaterMarkFrom(options, isDuplex, duplexKey);

  if (hwm != null) {
    if (!(isFinite(hwm) && Math.floor(hwm) === hwm) || hwm < 0) {
      var name = isDuplex ? duplexKey : 'highWaterMark';
      throw new ERR_INVALID_OPT_VALUE(name, hwm);
    }

    return Math.floor(hwm);
  } // Default value


  return state.objectMode ? 16 : 16 * 1024;
}

module.exports = {
  getHighWaterMark: getHighWaterMark
};
},{"../../../errors":13}],26:[function(require,module,exports){
module.exports = require('events').EventEmitter;

},{"events":5}],27:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

/*<replacement>*/

var Buffer = require('safe-buffer').Buffer;
/*</replacement>*/

var isEncoding = Buffer.isEncoding || function (encoding) {
  encoding = '' + encoding;
  switch (encoding && encoding.toLowerCase()) {
    case 'hex':case 'utf8':case 'utf-8':case 'ascii':case 'binary':case 'base64':case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':case 'raw':
      return true;
    default:
      return false;
  }
};

function _normalizeEncoding(enc) {
  if (!enc) return 'utf8';
  var retried;
  while (true) {
    switch (enc) {
      case 'utf8':
      case 'utf-8':
        return 'utf8';
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return 'utf16le';
      case 'latin1':
      case 'binary':
        return 'latin1';
      case 'base64':
      case 'ascii':
      case 'hex':
        return enc;
      default:
        if (retried) return; // undefined
        enc = ('' + enc).toLowerCase();
        retried = true;
    }
  }
};

// Do not cache `Buffer.isEncoding` when checking encoding names as some
// modules monkey-patch it to support additional encodings
function normalizeEncoding(enc) {
  var nenc = _normalizeEncoding(enc);
  if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);
  return nenc || enc;
}

// StringDecoder provides an interface for efficiently splitting a series of
// buffers into a series of JS strings without breaking apart multi-byte
// characters.
exports.StringDecoder = StringDecoder;
function StringDecoder(encoding) {
  this.encoding = normalizeEncoding(encoding);
  var nb;
  switch (this.encoding) {
    case 'utf16le':
      this.text = utf16Text;
      this.end = utf16End;
      nb = 4;
      break;
    case 'utf8':
      this.fillLast = utf8FillLast;
      nb = 4;
      break;
    case 'base64':
      this.text = base64Text;
      this.end = base64End;
      nb = 3;
      break;
    default:
      this.write = simpleWrite;
      this.end = simpleEnd;
      return;
  }
  this.lastNeed = 0;
  this.lastTotal = 0;
  this.lastChar = Buffer.allocUnsafe(nb);
}

StringDecoder.prototype.write = function (buf) {
  if (buf.length === 0) return '';
  var r;
  var i;
  if (this.lastNeed) {
    r = this.fillLast(buf);
    if (r === undefined) return '';
    i = this.lastNeed;
    this.lastNeed = 0;
  } else {
    i = 0;
  }
  if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
  return r || '';
};

StringDecoder.prototype.end = utf8End;

// Returns only complete characters in a Buffer
StringDecoder.prototype.text = utf8Text;

// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer
StringDecoder.prototype.fillLast = function (buf) {
  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }
  buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
  this.lastNeed -= buf.length;
};

// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
// continuation byte. If an invalid byte is detected, -2 is returned.
function utf8CheckByte(byte) {
  if (byte <= 0x7F) return 0;else if (byte >> 5 === 0x06) return 2;else if (byte >> 4 === 0x0E) return 3;else if (byte >> 3 === 0x1E) return 4;
  return byte >> 6 === 0x02 ? -1 : -2;
}

// Checks at most 3 bytes at the end of a Buffer in order to detect an
// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
// needed to complete the UTF-8 character (if applicable) are returned.
function utf8CheckIncomplete(self, buf, i) {
  var j = buf.length - 1;
  if (j < i) return 0;
  var nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 1;
    return nb;
  }
  if (--j < i || nb === -2) return 0;
  nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 2;
    return nb;
  }
  if (--j < i || nb === -2) return 0;
  nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) {
      if (nb === 2) nb = 0;else self.lastNeed = nb - 3;
    }
    return nb;
  }
  return 0;
}

// Validates as many continuation bytes for a multi-byte UTF-8 character as
// needed or are available. If we see a non-continuation byte where we expect
// one, we "replace" the validated continuation bytes we've seen so far with
// a single UTF-8 replacement character ('\ufffd'), to match v8's UTF-8 decoding
// behavior. The continuation byte check is included three times in the case
// where all of the continuation bytes for a character exist in the same buffer.
// It is also done this way as a slight performance increase instead of using a
// loop.
function utf8CheckExtraBytes(self, buf, p) {
  if ((buf[0] & 0xC0) !== 0x80) {
    self.lastNeed = 0;
    return '\ufffd';
  }
  if (self.lastNeed > 1 && buf.length > 1) {
    if ((buf[1] & 0xC0) !== 0x80) {
      self.lastNeed = 1;
      return '\ufffd';
    }
    if (self.lastNeed > 2 && buf.length > 2) {
      if ((buf[2] & 0xC0) !== 0x80) {
        self.lastNeed = 2;
        return '\ufffd';
      }
    }
  }
}

// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.
function utf8FillLast(buf) {
  var p = this.lastTotal - this.lastNeed;
  var r = utf8CheckExtraBytes(this, buf, p);
  if (r !== undefined) return r;
  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, p, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }
  buf.copy(this.lastChar, p, 0, buf.length);
  this.lastNeed -= buf.length;
}

// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
// partial character, the character's bytes are buffered until the required
// number of bytes are available.
function utf8Text(buf, i) {
  var total = utf8CheckIncomplete(this, buf, i);
  if (!this.lastNeed) return buf.toString('utf8', i);
  this.lastTotal = total;
  var end = buf.length - (total - this.lastNeed);
  buf.copy(this.lastChar, 0, end);
  return buf.toString('utf8', i, end);
}

// For UTF-8, a replacement character is added when ending on a partial
// character.
function utf8End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + '\ufffd';
  return r;
}

// UTF-16LE typically needs two bytes per character, but even if we have an even
// number of bytes available, we need to check if we end on a leading/high
// surrogate. In that case, we need to wait for the next two bytes in order to
// decode the last character properly.
function utf16Text(buf, i) {
  if ((buf.length - i) % 2 === 0) {
    var r = buf.toString('utf16le', i);
    if (r) {
      var c = r.charCodeAt(r.length - 1);
      if (c >= 0xD800 && c <= 0xDBFF) {
        this.lastNeed = 2;
        this.lastTotal = 4;
        this.lastChar[0] = buf[buf.length - 2];
        this.lastChar[1] = buf[buf.length - 1];
        return r.slice(0, -1);
      }
    }
    return r;
  }
  this.lastNeed = 1;
  this.lastTotal = 2;
  this.lastChar[0] = buf[buf.length - 1];
  return buf.toString('utf16le', i, buf.length - 1);
}

// For UTF-16LE we do not explicitly append special replacement characters if we
// end on a partial character, we simply let v8 handle that.
function utf16End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) {
    var end = this.lastTotal - this.lastNeed;
    return r + this.lastChar.toString('utf16le', 0, end);
  }
  return r;
}

function base64Text(buf, i) {
  var n = (buf.length - i) % 3;
  if (n === 0) return buf.toString('base64', i);
  this.lastNeed = 3 - n;
  this.lastTotal = 3;
  if (n === 1) {
    this.lastChar[0] = buf[buf.length - 1];
  } else {
    this.lastChar[0] = buf[buf.length - 2];
    this.lastChar[1] = buf[buf.length - 1];
  }
  return buf.toString('base64', i, buf.length - n);
}

function base64End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);
  return r;
}

// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)
function simpleWrite(buf) {
  return buf.toString(this.encoding);
}

function simpleEnd(buf) {
  return buf && buf.length ? this.write(buf) : '';
}
},{"safe-buffer":11}],28:[function(require,module,exports){
(function (global){(function (){

/**
 * Module exports.
 */

module.exports = deprecate;

/**
 * Mark that a method should not be used.
 * Returns a modified function which warns once by default.
 *
 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
 *
 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
 * will throw an Error when invoked.
 *
 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
 * will invoke `console.trace()` instead of `console.error()`.
 *
 * @param {Function} fn - the function to deprecate
 * @param {String} msg - the string to print to the console when `fn` is invoked
 * @returns {Function} a new "deprecated" version of `fn`
 * @api public
 */

function deprecate (fn, msg) {
  if (config('noDeprecation')) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (config('throwDeprecation')) {
        throw new Error(msg);
      } else if (config('traceDeprecation')) {
        console.trace(msg);
      } else {
        console.warn(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
}

/**
 * Checks `localStorage` for boolean values for the given `name`.
 *
 * @param {String} name
 * @returns {Boolean}
 * @api private
 */

function config (name) {
  // accessing global.localStorage can trigger a DOMException in sandboxed iframes
  try {
    if (!global.localStorage) return false;
  } catch (_) {
    return false;
  }
  var val = global.localStorage[name];
  if (null == val) return false;
  return String(val).toLowerCase() === 'true';
}

}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],29:[function(require,module,exports){
'use strict'
// base-x encoding / decoding
// Copyright (c) 2018 base-x contributors
// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)
// Distributed under the MIT software license, see the accompanying
// file LICENSE or http://www.opensource.org/licenses/mit-license.php.
// @ts-ignore
var _Buffer = require('safe-buffer').Buffer
function base (ALPHABET) {
  if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }
  var BASE_MAP = new Uint8Array(256)
  for (var j = 0; j < BASE_MAP.length; j++) {
    BASE_MAP[j] = 255
  }
  for (var i = 0; i < ALPHABET.length; i++) {
    var x = ALPHABET.charAt(i)
    var xc = x.charCodeAt(0)
    if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }
    BASE_MAP[xc] = i
  }
  var BASE = ALPHABET.length
  var LEADER = ALPHABET.charAt(0)
  var FACTOR = Math.log(BASE) / Math.log(256) // log(BASE) / log(256), rounded up
  var iFACTOR = Math.log(256) / Math.log(BASE) // log(256) / log(BASE), rounded up
  function encode (source) {
    if (Array.isArray(source) || source instanceof Uint8Array) { source = _Buffer.from(source) }
    if (!_Buffer.isBuffer(source)) { throw new TypeError('Expected Buffer') }
    if (source.length === 0) { return '' }
        // Skip & count leading zeroes.
    var zeroes = 0
    var length = 0
    var pbegin = 0
    var pend = source.length
    while (pbegin !== pend && source[pbegin] === 0) {
      pbegin++
      zeroes++
    }
        // Allocate enough space in big-endian base58 representation.
    var size = ((pend - pbegin) * iFACTOR + 1) >>> 0
    var b58 = new Uint8Array(size)
        // Process the bytes.
    while (pbegin !== pend) {
      var carry = source[pbegin]
            // Apply "b58 = b58 * 256 + ch".
      var i = 0
      for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {
        carry += (256 * b58[it1]) >>> 0
        b58[it1] = (carry % BASE) >>> 0
        carry = (carry / BASE) >>> 0
      }
      if (carry !== 0) { throw new Error('Non-zero carry') }
      length = i
      pbegin++
    }
        // Skip leading zeroes in base58 result.
    var it2 = size - length
    while (it2 !== size && b58[it2] === 0) {
      it2++
    }
        // Translate the result into a string.
    var str = LEADER.repeat(zeroes)
    for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]) }
    return str
  }
  function decodeUnsafe (source) {
    if (typeof source !== 'string') { throw new TypeError('Expected String') }
    if (source.length === 0) { return _Buffer.alloc(0) }
    var psz = 0
        // Skip leading spaces.
    if (source[psz] === ' ') { return }
        // Skip and count leading '1's.
    var zeroes = 0
    var length = 0
    while (source[psz] === LEADER) {
      zeroes++
      psz++
    }
        // Allocate enough space in big-endian base256 representation.
    var size = (((source.length - psz) * FACTOR) + 1) >>> 0 // log(58) / log(256), rounded up.
    var b256 = new Uint8Array(size)
        // Process the characters.
    while (source[psz]) {
            // Decode character
      var carry = BASE_MAP[source.charCodeAt(psz)]
            // Invalid character
      if (carry === 255) { return }
      var i = 0
      for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {
        carry += (BASE * b256[it3]) >>> 0
        b256[it3] = (carry % 256) >>> 0
        carry = (carry / 256) >>> 0
      }
      if (carry !== 0) { throw new Error('Non-zero carry') }
      length = i
      psz++
    }
        // Skip trailing spaces.
    if (source[psz] === ' ') { return }
        // Skip leading zeroes in b256.
    var it4 = size - length
    while (it4 !== size && b256[it4] === 0) {
      it4++
    }
    var vch = _Buffer.allocUnsafe(zeroes + (size - it4))
    vch.fill(0x00, 0, zeroes)
    var j = zeroes
    while (it4 !== size) {
      vch[j++] = b256[it4++]
    }
    return vch
  }
  function decode (string) {
    var buffer = decodeUnsafe(string)
    if (buffer) { return buffer }
    throw new Error('Non-base' + BASE + ' character')
  }
  return {
    encode: encode,
    decodeUnsafe: decodeUnsafe,
    decode: decode
  }
}
module.exports = base

},{"safe-buffer":126}],30:[function(require,module,exports){
'use strict'
var ALPHABET = 'qpzry9x8gf2tvdw0s3jn54khce6mua7l'

// pre-compute lookup table
var ALPHABET_MAP = {}
for (var z = 0; z < ALPHABET.length; z++) {
  var x = ALPHABET.charAt(z)

  if (ALPHABET_MAP[x] !== undefined) throw new TypeError(x + ' is ambiguous')
  ALPHABET_MAP[x] = z
}

function polymodStep (pre) {
  var b = pre >> 25
  return ((pre & 0x1FFFFFF) << 5) ^
    (-((b >> 0) & 1) & 0x3b6a57b2) ^
    (-((b >> 1) & 1) & 0x26508e6d) ^
    (-((b >> 2) & 1) & 0x1ea119fa) ^
    (-((b >> 3) & 1) & 0x3d4233dd) ^
    (-((b >> 4) & 1) & 0x2a1462b3)
}

function prefixChk (prefix) {
  var chk = 1
  for (var i = 0; i < prefix.length; ++i) {
    var c = prefix.charCodeAt(i)
    if (c < 33 || c > 126) return 'Invalid prefix (' + prefix + ')'

    chk = polymodStep(chk) ^ (c >> 5)
  }
  chk = polymodStep(chk)

  for (i = 0; i < prefix.length; ++i) {
    var v = prefix.charCodeAt(i)
    chk = polymodStep(chk) ^ (v & 0x1f)
  }
  return chk
}

function encode (prefix, words, LIMIT) {
  LIMIT = LIMIT || 90
  if ((prefix.length + 7 + words.length) > LIMIT) throw new TypeError('Exceeds length limit')

  prefix = prefix.toLowerCase()

  // determine chk mod
  var chk = prefixChk(prefix)
  if (typeof chk === 'string') throw new Error(chk)

  var result = prefix + '1'
  for (var i = 0; i < words.length; ++i) {
    var x = words[i]
    if ((x >> 5) !== 0) throw new Error('Non 5-bit word')

    chk = polymodStep(chk) ^ x
    result += ALPHABET.charAt(x)
  }

  for (i = 0; i < 6; ++i) {
    chk = polymodStep(chk)
  }
  chk ^= 1

  for (i = 0; i < 6; ++i) {
    var v = (chk >> ((5 - i) * 5)) & 0x1f
    result += ALPHABET.charAt(v)
  }

  return result
}

function __decode (str, LIMIT) {
  LIMIT = LIMIT || 90
  if (str.length < 8) return str + ' too short'
  if (str.length > LIMIT) return 'Exceeds length limit'

  // don't allow mixed case
  var lowered = str.toLowerCase()
  var uppered = str.toUpperCase()
  if (str !== lowered && str !== uppered) return 'Mixed-case string ' + str
  str = lowered

  var split = str.lastIndexOf('1')
  if (split === -1) return 'No separator character for ' + str
  if (split === 0) return 'Missing prefix for ' + str

  var prefix = str.slice(0, split)
  var wordChars = str.slice(split + 1)
  if (wordChars.length < 6) return 'Data too short'

  var chk = prefixChk(prefix)
  if (typeof chk === 'string') return chk

  var words = []
  for (var i = 0; i < wordChars.length; ++i) {
    var c = wordChars.charAt(i)
    var v = ALPHABET_MAP[c]
    if (v === undefined) return 'Unknown character ' + c
    chk = polymodStep(chk) ^ v

    // not in the checksum?
    if (i + 6 >= wordChars.length) continue
    words.push(v)
  }

  if (chk !== 1) return 'Invalid checksum for ' + str
  return { prefix: prefix, words: words }
}

function decodeUnsafe () {
  var res = __decode.apply(null, arguments)
  if (typeof res === 'object') return res
}

function decode (str) {
  var res = __decode.apply(null, arguments)
  if (typeof res === 'object') return res

  throw new Error(res)
}

function convert (data, inBits, outBits, pad) {
  var value = 0
  var bits = 0
  var maxV = (1 << outBits) - 1

  var result = []
  for (var i = 0; i < data.length; ++i) {
    value = (value << inBits) | data[i]
    bits += inBits

    while (bits >= outBits) {
      bits -= outBits
      result.push((value >> bits) & maxV)
    }
  }

  if (pad) {
    if (bits > 0) {
      result.push((value << (outBits - bits)) & maxV)
    }
  } else {
    if (bits >= inBits) return 'Excess padding'
    if ((value << (outBits - bits)) & maxV) return 'Non-zero padding'
  }

  return result
}

function toWordsUnsafe (bytes) {
  var res = convert(bytes, 8, 5, true)
  if (Array.isArray(res)) return res
}

function toWords (bytes) {
  var res = convert(bytes, 8, 5, true)
  if (Array.isArray(res)) return res

  throw new Error(res)
}

function fromWordsUnsafe (words) {
  var res = convert(words, 5, 8, false)
  if (Array.isArray(res)) return res
}

function fromWords (words) {
  var res = convert(words, 5, 8, false)
  if (Array.isArray(res)) return res

  throw new Error(res)
}

module.exports = {
  decodeUnsafe: decodeUnsafe,
  decode: decode,
  encode: encode,
  toWordsUnsafe: toWordsUnsafe,
  toWords: toWords,
  fromWordsUnsafe: fromWordsUnsafe,
  fromWords: fromWords
}

},{}],31:[function(require,module,exports){
'use strict';
Object.defineProperty(exports, '__esModule', { value: true });
const parser_1 = require('../parser');
function combine(psbts) {
  const self = psbts[0];
  const selfKeyVals = parser_1.psbtToKeyVals(self);
  const others = psbts.slice(1);
  if (others.length === 0) throw new Error('Combine: Nothing to combine');
  const selfTx = getTx(self);
  if (selfTx === undefined) {
    throw new Error('Combine: Self missing transaction');
  }
  const selfGlobalSet = getKeySet(selfKeyVals.globalKeyVals);
  const selfInputSets = selfKeyVals.inputKeyVals.map(getKeySet);
  const selfOutputSets = selfKeyVals.outputKeyVals.map(getKeySet);
  for (const other of others) {
    const otherTx = getTx(other);
    if (
      otherTx === undefined ||
      !otherTx.toBuffer().equals(selfTx.toBuffer())
    ) {
      throw new Error(
        'Combine: One of the Psbts does not have the same transaction.',
      );
    }
    const otherKeyVals = parser_1.psbtToKeyVals(other);
    const otherGlobalSet = getKeySet(otherKeyVals.globalKeyVals);
    otherGlobalSet.forEach(
      keyPusher(
        selfGlobalSet,
        selfKeyVals.globalKeyVals,
        otherKeyVals.globalKeyVals,
      ),
    );
    const otherInputSets = otherKeyVals.inputKeyVals.map(getKeySet);
    otherInputSets.forEach((inputSet, idx) =>
      inputSet.forEach(
        keyPusher(
          selfInputSets[idx],
          selfKeyVals.inputKeyVals[idx],
          otherKeyVals.inputKeyVals[idx],
        ),
      ),
    );
    const otherOutputSets = otherKeyVals.outputKeyVals.map(getKeySet);
    otherOutputSets.forEach((outputSet, idx) =>
      outputSet.forEach(
        keyPusher(
          selfOutputSets[idx],
          selfKeyVals.outputKeyVals[idx],
          otherKeyVals.outputKeyVals[idx],
        ),
      ),
    );
  }
  return parser_1.psbtFromKeyVals(selfTx, {
    globalMapKeyVals: selfKeyVals.globalKeyVals,
    inputKeyVals: selfKeyVals.inputKeyVals,
    outputKeyVals: selfKeyVals.outputKeyVals,
  });
}
exports.combine = combine;
function keyPusher(selfSet, selfKeyVals, otherKeyVals) {
  return key => {
    if (selfSet.has(key)) return;
    const newKv = otherKeyVals.filter(kv => kv.key.toString('hex') === key)[0];
    selfKeyVals.push(newKv);
    selfSet.add(key);
  };
}
function getTx(psbt) {
  return psbt.globalMap.unsignedTx;
}
function getKeySet(keyVals) {
  const set = new Set();
  keyVals.forEach(keyVal => {
    const hex = keyVal.key.toString('hex');
    if (set.has(hex))
      throw new Error('Combine: KeyValue Map keys should be unique');
    set.add(hex);
  });
  return set;
}

},{"../parser":49}],32:[function(require,module,exports){
(function (Buffer){(function (){
'use strict';
Object.defineProperty(exports, '__esModule', { value: true });
const typeFields_1 = require('../../typeFields');
const range = n => [...Array(n).keys()];
function decode(keyVal) {
  if (keyVal.key[0] !== typeFields_1.GlobalTypes.GLOBAL_XPUB) {
    throw new Error(
      'Decode Error: could not decode globalXpub with key 0x' +
        keyVal.key.toString('hex'),
    );
  }
  if (keyVal.key.length !== 79 || ![2, 3].includes(keyVal.key[46])) {
    throw new Error(
      'Decode Error: globalXpub has invalid extended pubkey in key 0x' +
        keyVal.key.toString('hex'),
    );
  }
  if ((keyVal.value.length / 4) % 1 !== 0) {
    throw new Error(
      'Decode Error: Global GLOBAL_XPUB value length should be multiple of 4',
    );
  }
  const extendedPubkey = keyVal.key.slice(1);
  const data = {
    masterFingerprint: keyVal.value.slice(0, 4),
    extendedPubkey,
    path: 'm',
  };
  for (const i of range(keyVal.value.length / 4 - 1)) {
    const val = keyVal.value.readUInt32LE(i * 4 + 4);
    const isHard = !!(val & 0x80000000);
    const idx = val & 0x7fffffff;
    data.path += '/' + idx.toString(10) + (isHard ? "'" : '');
  }
  return data;
}
exports.decode = decode;
function encode(data) {
  const head = Buffer.from([typeFields_1.GlobalTypes.GLOBAL_XPUB]);
  const key = Buffer.concat([head, data.extendedPubkey]);
  const splitPath = data.path.split('/');
  const value = Buffer.allocUnsafe(splitPath.length * 4);
  data.masterFingerprint.copy(value, 0);
  let offset = 4;
  splitPath.slice(1).forEach(level => {
    const isHard = level.slice(-1) === "'";
    let num = 0x7fffffff & parseInt(isHard ? level.slice(0, -1) : level, 10);
    if (isHard) num += 0x80000000;
    value.writeUInt32LE(num, offset);
    offset += 4;
  });
  return {
    key,
    value,
  };
}
exports.encode = encode;
exports.expected =
  '{ masterFingerprint: Buffer; extendedPubkey: Buffer; path: string; }';
function check(data) {
  const epk = data.extendedPubkey;
  const mfp = data.masterFingerprint;
  const p = data.path;
  return (
    Buffer.isBuffer(epk) &&
    epk.length === 78 &&
    [2, 3].indexOf(epk[45]) > -1 &&
    Buffer.isBuffer(mfp) &&
    mfp.length === 4 &&
    typeof p === 'string' &&
    !!p.match(/^m(\/\d+'?)+$/)
  );
}
exports.check = check;
function canAddToArray(array, item, dupeSet) {
  const dupeString = item.extendedPubkey.toString('hex');
  if (dupeSet.has(dupeString)) return false;
  dupeSet.add(dupeString);
  return (
    array.filter(v => v.extendedPubkey.equals(item.extendedPubkey)).length === 0
  );
}
exports.canAddToArray = canAddToArray;

}).call(this)}).call(this,require("buffer").Buffer)
},{"../../typeFields":52,"buffer":4}],33:[function(require,module,exports){
(function (Buffer){(function (){
'use strict';
Object.defineProperty(exports, '__esModule', { value: true });
const typeFields_1 = require('../../typeFields');
function encode(data) {
  return {
    key: Buffer.from([typeFields_1.GlobalTypes.UNSIGNED_TX]),
    value: data.toBuffer(),
  };
}
exports.encode = encode;

}).call(this)}).call(this,require("buffer").Buffer)
},{"../../typeFields":52,"buffer":4}],34:[function(require,module,exports){
'use strict';
Object.defineProperty(exports, '__esModule', { value: true });
const typeFields_1 = require('../typeFields');
const globalXpub = require('./global/globalXpub');
const unsignedTx = require('./global/unsignedTx');
const finalScriptSig = require('./input/finalScriptSig');
const finalScriptWitness = require('./input/finalScriptWitness');
const nonWitnessUtxo = require('./input/nonWitnessUtxo');
const partialSig = require('./input/partialSig');
const porCommitment = require('./input/porCommitment');
const sighashType = require('./input/sighashType');
const witnessUtxo = require('./input/witnessUtxo');
const bip32Derivation = require('./shared/bip32Derivation');
const checkPubkey = require('./shared/checkPubkey');
const redeemScript = require('./shared/redeemScript');
const witnessScript = require('./shared/witnessScript');
const globals = {
  unsignedTx,
  globalXpub,
  // pass an Array of key bytes that require pubkey beside the key
  checkPubkey: checkPubkey.makeChecker([]),
};
exports.globals = globals;
const inputs = {
  nonWitnessUtxo,
  partialSig,
  sighashType,
  finalScriptSig,
  finalScriptWitness,
  porCommitment,
  witnessUtxo,
  bip32Derivation: bip32Derivation.makeConverter(
    typeFields_1.InputTypes.BIP32_DERIVATION,
  ),
  redeemScript: redeemScript.makeConverter(
    typeFields_1.InputTypes.REDEEM_SCRIPT,
  ),
  witnessScript: witnessScript.makeConverter(
    typeFields_1.InputTypes.WITNESS_SCRIPT,
  ),
  checkPubkey: checkPubkey.makeChecker([
    typeFields_1.InputTypes.PARTIAL_SIG,
    typeFields_1.InputTypes.BIP32_DERIVATION,
  ]),
};
exports.inputs = inputs;
const outputs = {
  bip32Derivation: bip32Derivation.makeConverter(
    typeFields_1.OutputTypes.BIP32_DERIVATION,
  ),
  redeemScript: redeemScript.makeConverter(
    typeFields_1.OutputTypes.REDEEM_SCRIPT,
  ),
  witnessScript: witnessScript.makeConverter(
    typeFields_1.OutputTypes.WITNESS_SCRIPT,
  ),
  checkPubkey: checkPubkey.makeChecker([
    typeFields_1.OutputTypes.BIP32_DERIVATION,
  ]),
};
exports.outputs = outputs;

},{"../typeFields":52,"./global/globalXpub":32,"./global/unsignedTx":33,"./input/finalScriptSig":35,"./input/finalScriptWitness":36,"./input/nonWitnessUtxo":37,"./input/partialSig":38,"./input/porCommitment":39,"./input/sighashType":40,"./input/witnessUtxo":41,"./shared/bip32Derivation":42,"./shared/checkPubkey":43,"./shared/redeemScript":44,"./shared/witnessScript":45}],35:[function(require,module,exports){
(function (Buffer){(function (){
'use strict';
Object.defineProperty(exports, '__esModule', { value: true });
const typeFields_1 = require('../../typeFields');
function decode(keyVal) {
  if (keyVal.key[0] !== typeFields_1.InputTypes.FINAL_SCRIPTSIG) {
    throw new Error(
      'Decode Error: could not decode finalScriptSig with key 0x' +
        keyVal.key.toString('hex'),
    );
  }
  return keyVal.value;
}
exports.decode = decode;
function encode(data) {
  const key = Buffer.from([typeFields_1.InputTypes.FINAL_SCRIPTSIG]);
  return {
    key,
    value: data,
  };
}
exports.encode = encode;
exports.expected = 'Buffer';
function check(data) {
  return Buffer.isBuffer(data);
}
exports.check = check;
function canAdd(currentData, newData) {
  return !!currentData && !!newData && currentData.finalScriptSig === undefined;
}
exports.canAdd = canAdd;

}).call(this)}).call(this,require("buffer").Buffer)
},{"../../typeFields":52,"buffer":4}],36:[function(require,module,exports){
(function (Buffer){(function (){
'use strict';
Object.defineProperty(exports, '__esModule', { value: true });
const typeFields_1 = require('../../typeFields');
function decode(keyVal) {
  if (keyVal.key[0] !== typeFields_1.InputTypes.FINAL_SCRIPTWITNESS) {
    throw new Error(
      'Decode Error: could not decode finalScriptWitness with key 0x' +
        keyVal.key.toString('hex'),
    );
  }
  return keyVal.value;
}
exports.decode = decode;
function encode(data) {
  const key = Buffer.from([typeFields_1.InputTypes.FINAL_SCRIPTWITNESS]);
  return {
    key,
    value: data,
  };
}
exports.encode = encode;
exports.expected = 'Buffer';
function check(data) {
  return Buffer.isBuffer(data);
}
exports.check = check;
function canAdd(currentData, newData) {
  return (
    !!currentData && !!newData && currentData.finalScriptWitness === undefined
  );
}
exports.canAdd = canAdd;

}).call(this)}).call(this,require("buffer").Buffer)
},{"../../typeFields":52,"buffer":4}],37:[function(require,module,exports){
(function (Buffer){(function (){
'use strict';
Object.defineProperty(exports, '__esModule', { value: true });
const typeFields_1 = require('../../typeFields');
function decode(keyVal) {
  if (keyVal.key[0] !== typeFields_1.InputTypes.NON_WITNESS_UTXO) {
    throw new Error(
      'Decode Error: could not decode nonWitnessUtxo with key 0x' +
        keyVal.key.toString('hex'),
    );
  }
  return keyVal.value;
}
exports.decode = decode;
function encode(data) {
  return {
    key: Buffer.from([typeFields_1.InputTypes.NON_WITNESS_UTXO]),
    value: data,
  };
}
exports.encode = encode;
exports.expected = 'Buffer';
function check(data) {
  return Buffer.isBuffer(data);
}
exports.check = check;
function canAdd(currentData, newData) {
  return (
    !!currentData &&
    !!newData &&
    currentData.witnessUtxo === undefined &&
    currentData.nonWitnessUtxo === undefined
  );
}
exports.canAdd = canAdd;

}).call(this)}).call(this,require("buffer").Buffer)
},{"../../typeFields":52,"buffer":4}],38:[function(require,module,exports){
(function (Buffer){(function (){
'use strict';
Object.defineProperty(exports, '__esModule', { value: true });
const typeFields_1 = require('../../typeFields');
function decode(keyVal) {
  if (keyVal.key[0] !== typeFields_1.InputTypes.PARTIAL_SIG) {
    throw new Error(
      'Decode Error: could not decode partialSig with key 0x' +
        keyVal.key.toString('hex'),
    );
  }
  if (
    !(keyVal.key.length === 34 || keyVal.key.length === 66) ||
    ![2, 3, 4].includes(keyVal.key[1])
  ) {
    throw new Error(
      'Decode Error: partialSig has invalid pubkey in key 0x' +
        keyVal.key.toString('hex'),
    );
  }
  const pubkey = keyVal.key.slice(1);
  return {
    pubkey,
    signature: keyVal.value,
  };
}
exports.decode = decode;
function encode(pSig) {
  const head = Buffer.from([typeFields_1.InputTypes.PARTIAL_SIG]);
  return {
    key: Buffer.concat([head, pSig.pubkey]),
    value: pSig.signature,
  };
}
exports.encode = encode;
exports.expected = '{ pubkey: Buffer; signature: Buffer; }';
function check(data) {
  return (
    Buffer.isBuffer(data.pubkey) &&
    Buffer.isBuffer(data.signature) &&
    [33, 65].includes(data.pubkey.length) &&
    [2, 3, 4].includes(data.pubkey[0]) &&
    isDerSigWithSighash(data.signature)
  );
}
exports.check = check;
function isDerSigWithSighash(buf) {
  if (!Buffer.isBuffer(buf) || buf.length < 9) return false;
  if (buf[0] !== 0x30) return false;
  if (buf.length !== buf[1] + 3) return false;
  if (buf[2] !== 0x02) return false;
  const rLen = buf[3];
  if (rLen > 33 || rLen < 1) return false;
  if (buf[3 + rLen + 1] !== 0x02) return false;
  const sLen = buf[3 + rLen + 2];
  if (sLen > 33 || sLen < 1) return false;
  if (buf.length !== 3 + rLen + 2 + sLen + 2) return false;
  return true;
}
function canAddToArray(array, item, dupeSet) {
  const dupeString = item.pubkey.toString('hex');
  if (dupeSet.has(dupeString)) return false;
  dupeSet.add(dupeString);
  return array.filter(v => v.pubkey.equals(item.pubkey)).length === 0;
}
exports.canAddToArray = canAddToArray;

}).call(this)}).call(this,require("buffer").Buffer)
},{"../../typeFields":52,"buffer":4}],39:[function(require,module,exports){
(function (Buffer){(function (){
'use strict';
Object.defineProperty(exports, '__esModule', { value: true });
const typeFields_1 = require('../../typeFields');
function decode(keyVal) {
  if (keyVal.key[0] !== typeFields_1.InputTypes.POR_COMMITMENT) {
    throw new Error(
      'Decode Error: could not decode porCommitment with key 0x' +
        keyVal.key.toString('hex'),
    );
  }
  return keyVal.value.toString('utf8');
}
exports.decode = decode;
function encode(data) {
  const key = Buffer.from([typeFields_1.InputTypes.POR_COMMITMENT]);
  return {
    key,
    value: Buffer.from(data, 'utf8'),
  };
}
exports.encode = encode;
exports.expected = 'string';
function check(data) {
  return typeof data === 'string';
}
exports.check = check;
function canAdd(currentData, newData) {
  return !!currentData && !!newData && currentData.porCommitment === undefined;
}
exports.canAdd = canAdd;

}).call(this)}).call(this,require("buffer").Buffer)
},{"../../typeFields":52,"buffer":4}],40:[function(require,module,exports){
(function (Buffer){(function (){
'use strict';
Object.defineProperty(exports, '__esModule', { value: true });
const typeFields_1 = require('../../typeFields');
function decode(keyVal) {
  if (keyVal.key[0] !== typeFields_1.InputTypes.SIGHASH_TYPE) {
    throw new Error(
      'Decode Error: could not decode sighashType with key 0x' +
        keyVal.key.toString('hex'),
    );
  }
  return keyVal.value.readUInt32LE(0);
}
exports.decode = decode;
function encode(data) {
  const key = Buffer.from([typeFields_1.InputTypes.SIGHASH_TYPE]);
  const value = Buffer.allocUnsafe(4);
  value.writeUInt32LE(data, 0);
  return {
    key,
    value,
  };
}
exports.encode = encode;
exports.expected = 'number';
function check(data) {
  return typeof data === 'number';
}
exports.check = check;
function canAdd(currentData, newData) {
  return !!currentData && !!newData && currentData.sighashType === undefined;
}
exports.canAdd = canAdd;

}).call(this)}).call(this,require("buffer").Buffer)
},{"../../typeFields":52,"buffer":4}],41:[function(require,module,exports){
(function (Buffer){(function (){
'use strict';
Object.defineProperty(exports, '__esModule', { value: true });
const typeFields_1 = require('../../typeFields');
const varuint = require('../varint');
function decode(keyVal) {
  if (keyVal.key[0] !== typeFields_1.InputTypes.WITNESS_UTXO) {
    throw new Error(
      'Decode Error: could not decode witnessUtxo with key 0x' +
        keyVal.key.toString('hex'),
    );
  }
  let rangeProof;
  let surjectionProof;
  let _offset = 0;
  let _next = 33;
  const asset = keyVal.value.slice(_offset, _next);
  _offset = _next;
  _next += 1;
  const prefix = keyVal.value.slice(_offset, _next);
  _offset = _next;
  _next += prefix[0] === 1 ? 8 : 32;
  const value = Buffer.concat([prefix, keyVal.value.slice(_offset, _next)]);
  _offset = _next;
  _next += 1;
  const nPrefix = keyVal.value.slice(_offset, _next);
  let nonce = nPrefix;
  if (nPrefix[0] !== 0) {
    _offset = _next;
    _next += 32;
    nonce = Buffer.concat([nonce, keyVal.value.slice(_offset, _next)]);
  }
  _offset = _next;
  _next += 1;
  const scriptLen = varuint.decode(keyVal.value, _offset);
  _offset = _next;
  _next += scriptLen;
  const script = keyVal.value.slice(_offset, _next);
  if (script.length !== scriptLen) {
    throw new Error('Decode Error: WITNESS_UTXO script is not proper length');
  }
  _offset = _next;
  if (_offset < keyVal.value.length) {
    _next += 1;
    const surjectionProofLen = varuint.decode(keyVal.value, _offset);
    _offset = _next;
    _next += surjectionProofLen;
    surjectionProof = keyVal.value.slice(_offset, _next);
    _offset = _next;
    _next += 3;
    const rangeProofLen = varuint.decode(keyVal.value, _offset);
    _offset = _next;
    _next += rangeProofLen;
    rangeProof = keyVal.value.slice(_offset, _next);
    _offset = _next;
  }
  return {
    script,
    value,
    asset,
    nonce,
    rangeProof,
    surjectionProof,
  };
}
exports.decode = decode;
function encode(data) {
  const { script, value, asset, nonce, rangeProof, surjectionProof } = data;
  const assetLen = 33;
  const valueLen = value[0] === 1 ? 9 : 33;
  const nonceLen = nonce[0] === 0 ? 1 : 33;
  const varintScriptLen = varuint.encodingLength(script.length);
  const rangeProofLen = rangeProof ? rangeProof.length : 0;
  const varintRangeProofLen = rangeProofLen
    ? varuint.encodingLength(rangeProofLen)
    : 0;
  const surjectionProofLen = surjectionProof ? surjectionProof.length : 0;
  const varintSurjectionProofLen = surjectionProofLen
    ? varuint.encodingLength(surjectionProofLen)
    : 0;
  const result = Buffer.allocUnsafe(
    assetLen +
      valueLen +
      nonceLen +
      varintScriptLen +
      script.length +
      varintRangeProofLen +
      rangeProofLen +
      varintSurjectionProofLen +
      surjectionProofLen,
  );
  let resultLen = 0;
  asset.copy(result, resultLen);
  resultLen += assetLen;
  value.copy(result, resultLen);
  resultLen += valueLen;
  nonce.copy(result, resultLen);
  resultLen += nonceLen;
  varuint.encode(script.length, result, resultLen);
  resultLen += varintScriptLen;
  script.copy(result, resultLen);
  if (rangeProofLen && surjectionProofLen) {
    resultLen += script.length;
    varuint.encode(surjectionProofLen, result, resultLen);
    resultLen += varintSurjectionProofLen;
    surjectionProof && surjectionProof.copy(result, resultLen);
    resultLen += surjectionProofLen;
    varuint.encode(rangeProofLen, result, resultLen);
    resultLen += varintRangeProofLen;
    rangeProof && rangeProof.copy(result, resultLen);
    resultLen += rangeProofLen;
  }
  return {
    key: Buffer.from([typeFields_1.InputTypes.WITNESS_UTXO]),
    value: result,
  };
}
exports.encode = encode;
exports.expected =
  '{ script: Buffer; value: Buffer; asset: Buffer; nonce: Buffer; rangeProof?: Buffer; surjectionProof?: Buffer }';
function check(data) {
  return (
    Buffer.isBuffer(data.script) &&
    Buffer.isBuffer(data.value) &&
    Buffer.isBuffer(data.asset) &&
    Buffer.isBuffer(data.nonce) &&
    // since proofs are optional, skip check returning true when undefined, otherwise check the type
    (data.rangeProof ? Buffer.isBuffer(data.rangeProof) : true) &&
    (data.surjectionProof ? Buffer.isBuffer(data.surjectionProof) : true)
  );
}
exports.check = check;
function canAdd(currentData, newData) {
  return (
    !!currentData &&
    !!newData &&
    currentData.witnessUtxo === undefined &&
    currentData.nonWitnessUtxo === undefined
  );
}
exports.canAdd = canAdd;

}).call(this)}).call(this,require("buffer").Buffer)
},{"../../typeFields":52,"../varint":47,"buffer":4}],42:[function(require,module,exports){
(function (Buffer){(function (){
'use strict';
Object.defineProperty(exports, '__esModule', { value: true });
const range = n => [...Array(n).keys()];
function makeConverter(TYPE_BYTE) {
  function decode(keyVal) {
    if (keyVal.key[0] !== TYPE_BYTE) {
      throw new Error(
        'Decode Error: could not decode bip32Derivation with key 0x' +
          keyVal.key.toString('hex'),
      );
    }
    if (
      !(keyVal.key.length === 34 || keyVal.key.length === 66) ||
      ![2, 3, 4].includes(keyVal.key[1])
    ) {
      throw new Error(
        'Decode Error: bip32Derivation has invalid pubkey in key 0x' +
          keyVal.key.toString('hex'),
      );
    }
    if ((keyVal.value.length / 4) % 1 !== 0) {
      throw new Error(
        'Decode Error: Input BIP32_DERIVATION value length should be multiple of 4',
      );
    }
    const pubkey = keyVal.key.slice(1);
    const data = {
      masterFingerprint: keyVal.value.slice(0, 4),
      pubkey,
      path: 'm',
    };
    for (const i of range(keyVal.value.length / 4 - 1)) {
      const val = keyVal.value.readUInt32LE(i * 4 + 4);
      const isHard = !!(val & 0x80000000);
      const idx = val & 0x7fffffff;
      data.path += '/' + idx.toString(10) + (isHard ? "'" : '');
    }
    return data;
  }
  function encode(data) {
    const head = Buffer.from([TYPE_BYTE]);
    const key = Buffer.concat([head, data.pubkey]);
    const splitPath = data.path.split('/');
    const value = Buffer.allocUnsafe(splitPath.length * 4);
    data.masterFingerprint.copy(value, 0);
    let offset = 4;
    splitPath.slice(1).forEach(level => {
      const isHard = level.slice(-1) === "'";
      let num = 0x7fffffff & parseInt(isHard ? level.slice(0, -1) : level, 10);
      if (isHard) num += 0x80000000;
      value.writeUInt32LE(num, offset);
      offset += 4;
    });
    return {
      key,
      value,
    };
  }
  const expected =
    '{ masterFingerprint: Buffer; pubkey: Buffer; path: string; }';
  function check(data) {
    return (
      Buffer.isBuffer(data.pubkey) &&
      Buffer.isBuffer(data.masterFingerprint) &&
      typeof data.path === 'string' &&
      [33, 65].includes(data.pubkey.length) &&
      [2, 3, 4].includes(data.pubkey[0]) &&
      data.masterFingerprint.length === 4
    );
  }
  function canAddToArray(array, item, dupeSet) {
    const dupeString = item.pubkey.toString('hex');
    if (dupeSet.has(dupeString)) return false;
    dupeSet.add(dupeString);
    return array.filter(v => v.pubkey.equals(item.pubkey)).length === 0;
  }
  return {
    decode,
    encode,
    check,
    expected,
    canAddToArray,
  };
}
exports.makeConverter = makeConverter;

}).call(this)}).call(this,require("buffer").Buffer)
},{"buffer":4}],43:[function(require,module,exports){
'use strict';
Object.defineProperty(exports, '__esModule', { value: true });
function makeChecker(pubkeyTypes) {
  return checkPubkey;
  function checkPubkey(keyVal) {
    let pubkey;
    if (pubkeyTypes.includes(keyVal.key[0])) {
      pubkey = keyVal.key.slice(1);
      if (
        !(pubkey.length === 33 || pubkey.length === 65) ||
        ![2, 3, 4].includes(pubkey[0])
      ) {
        throw new Error(
          'Format Error: invalid pubkey in key 0x' + keyVal.key.toString('hex'),
        );
      }
    }
    return pubkey;
  }
}
exports.makeChecker = makeChecker;

},{}],44:[function(require,module,exports){
(function (Buffer){(function (){
'use strict';
Object.defineProperty(exports, '__esModule', { value: true });
function makeConverter(TYPE_BYTE) {
  function decode(keyVal) {
    if (keyVal.key[0] !== TYPE_BYTE) {
      throw new Error(
        'Decode Error: could not decode redeemScript with key 0x' +
          keyVal.key.toString('hex'),
      );
    }
    return keyVal.value;
  }
  function encode(data) {
    const key = Buffer.from([TYPE_BYTE]);
    return {
      key,
      value: data,
    };
  }
  const expected = 'Buffer';
  function check(data) {
    return Buffer.isBuffer(data);
  }
  function canAdd(currentData, newData) {
    return !!currentData && !!newData && currentData.redeemScript === undefined;
  }
  return {
    decode,
    encode,
    check,
    expected,
    canAdd,
  };
}
exports.makeConverter = makeConverter;

}).call(this)}).call(this,require("buffer").Buffer)
},{"buffer":4}],45:[function(require,module,exports){
(function (Buffer){(function (){
'use strict';
Object.defineProperty(exports, '__esModule', { value: true });
function makeConverter(TYPE_BYTE) {
  function decode(keyVal) {
    if (keyVal.key[0] !== TYPE_BYTE) {
      throw new Error(
        'Decode Error: could not decode witnessScript with key 0x' +
          keyVal.key.toString('hex'),
      );
    }
    return keyVal.value;
  }
  function encode(data) {
    const key = Buffer.from([TYPE_BYTE]);
    return {
      key,
      value: data,
    };
  }
  const expected = 'Buffer';
  function check(data) {
    return Buffer.isBuffer(data);
  }
  function canAdd(currentData, newData) {
    return (
      !!currentData && !!newData && currentData.witnessScript === undefined
    );
  }
  return {
    decode,
    encode,
    check,
    expected,
    canAdd,
  };
}
exports.makeConverter = makeConverter;

}).call(this)}).call(this,require("buffer").Buffer)
},{"buffer":4}],46:[function(require,module,exports){
(function (Buffer){(function (){
'use strict';
Object.defineProperty(exports, '__esModule', { value: true });
const varuint = require('./varint');
exports.range = n => [...Array(n).keys()];
function reverseBuffer(buffer) {
  if (buffer.length < 1) return buffer;
  let j = buffer.length - 1;
  let tmp = 0;
  for (let i = 0; i < buffer.length / 2; i++) {
    tmp = buffer[i];
    buffer[i] = buffer[j];
    buffer[j] = tmp;
    j--;
  }
  return buffer;
}
exports.reverseBuffer = reverseBuffer;
function keyValsToBuffer(keyVals) {
  const buffers = keyVals.map(keyValToBuffer);
  buffers.push(Buffer.from([0]));
  return Buffer.concat(buffers);
}
exports.keyValsToBuffer = keyValsToBuffer;
function keyValToBuffer(keyVal) {
  const keyLen = keyVal.key.length;
  const valLen = keyVal.value.length;
  const keyVarIntLen = varuint.encodingLength(keyLen);
  const valVarIntLen = varuint.encodingLength(valLen);
  const buffer = Buffer.allocUnsafe(
    keyVarIntLen + keyLen + valVarIntLen + valLen,
  );
  varuint.encode(keyLen, buffer, 0);
  keyVal.key.copy(buffer, keyVarIntLen);
  varuint.encode(valLen, buffer, keyVarIntLen + keyLen);
  keyVal.value.copy(buffer, keyVarIntLen + keyLen + valVarIntLen);
  return buffer;
}
exports.keyValToBuffer = keyValToBuffer;
// https://github.com/feross/buffer/blob/master/index.js#L1127
function verifuint(value, max) {
  if (typeof value !== 'number')
    throw new Error('cannot write a non-number as a number');
  if (value < 0)
    throw new Error('specified a negative value for writing an unsigned value');
  if (value > max) throw new Error('RangeError: value out of range');
  if (Math.floor(value) !== value)
    throw new Error('value has a fractional component');
}
function readUInt64LE(buffer, offset) {
  const a = buffer.readUInt32LE(offset);
  let b = buffer.readUInt32LE(offset + 4);
  b *= 0x100000000;
  verifuint(b + a, 0x001fffffffffffff);
  return b + a;
}
exports.readUInt64LE = readUInt64LE;
function writeUInt64LE(buffer, value, offset) {
  verifuint(value, 0x001fffffffffffff);
  buffer.writeInt32LE(value & -1, offset);
  buffer.writeUInt32LE(Math.floor(value / 0x100000000), offset + 4);
  return offset + 8;
}
exports.writeUInt64LE = writeUInt64LE;

}).call(this)}).call(this,require("buffer").Buffer)
},{"./varint":47,"buffer":4}],47:[function(require,module,exports){
(function (Buffer){(function (){
'use strict';
Object.defineProperty(exports, '__esModule', { value: true });
// Number.MAX_SAFE_INTEGER
const MAX_SAFE_INTEGER = 9007199254740991;
function checkUInt53(n) {
  if (n < 0 || n > MAX_SAFE_INTEGER || n % 1 !== 0)
    throw new RangeError('value out of range');
}
function encode(_number, buffer, offset) {
  checkUInt53(_number);
  if (!buffer) buffer = Buffer.allocUnsafe(encodingLength(_number));
  if (!Buffer.isBuffer(buffer))
    throw new TypeError('buffer must be a Buffer instance');
  if (!offset) offset = 0;
  // 8 bit
  if (_number < 0xfd) {
    buffer.writeUInt8(_number, offset);
    Object.assign(encode, { bytes: 1 });
    // 16 bit
  } else if (_number <= 0xffff) {
    buffer.writeUInt8(0xfd, offset);
    buffer.writeUInt16LE(_number, offset + 1);
    Object.assign(encode, { bytes: 3 });
    // 32 bit
  } else if (_number <= 0xffffffff) {
    buffer.writeUInt8(0xfe, offset);
    buffer.writeUInt32LE(_number, offset + 1);
    Object.assign(encode, { bytes: 5 });
    // 64 bit
  } else {
    buffer.writeUInt8(0xff, offset);
    buffer.writeUInt32LE(_number >>> 0, offset + 1);
    buffer.writeUInt32LE((_number / 0x100000000) | 0, offset + 5);
    Object.assign(encode, { bytes: 9 });
  }
  return buffer;
}
exports.encode = encode;
function decode(buffer, offset) {
  if (!Buffer.isBuffer(buffer))
    throw new TypeError('buffer must be a Buffer instance');
  if (!offset) offset = 0;
  const first = buffer.readUInt8(offset);
  // 8 bit
  if (first < 0xfd) {
    Object.assign(decode, { bytes: 1 });
    return first;
    // 16 bit
  } else if (first === 0xfd) {
    Object.assign(decode, { bytes: 3 });
    return buffer.readUInt16LE(offset + 1);
    // 32 bit
  } else if (first === 0xfe) {
    Object.assign(decode, { bytes: 5 });
    return buffer.readUInt32LE(offset + 1);
    // 64 bit
  } else {
    Object.assign(decode, { bytes: 9 });
    const lo = buffer.readUInt32LE(offset + 1);
    const hi = buffer.readUInt32LE(offset + 5);
    const _number = hi * 0x0100000000 + lo;
    checkUInt53(_number);
    return _number;
  }
}
exports.decode = decode;
function encodingLength(_number) {
  checkUInt53(_number);
  return _number < 0xfd
    ? 1
    : _number <= 0xffff
    ? 3
    : _number <= 0xffffffff
    ? 5
    : 9;
}
exports.encodingLength = encodingLength;

}).call(this)}).call(this,require("buffer").Buffer)
},{"buffer":4}],48:[function(require,module,exports){
(function (Buffer){(function (){
'use strict';
Object.defineProperty(exports, '__esModule', { value: true });
const convert = require('../converter');
const tools_1 = require('../converter/tools');
const varuint = require('../converter/varint');
const typeFields_1 = require('../typeFields');
function psbtFromBuffer(buffer, txGetter) {
  let offset = 0;
  function varSlice() {
    const keyLen = varuint.decode(buffer, offset);
    offset += varuint.encodingLength(keyLen);
    const key = buffer.slice(offset, offset + keyLen);
    offset += keyLen;
    return key;
  }
  function readUInt32BE() {
    const num = buffer.readUInt32BE(offset);
    offset += 4;
    return num;
  }
  function readUInt8() {
    const num = buffer.readUInt8(offset);
    offset += 1;
    return num;
  }
  function getKeyValue() {
    const key = varSlice();
    const value = varSlice();
    return {
      key,
      value,
    };
  }
  function checkEndOfKeyValPairs() {
    if (offset >= buffer.length) {
      throw new Error('Format Error: Unexpected End of PSBT');
    }
    const isEnd = buffer.readUInt8(offset) === 0;
    if (isEnd) {
      offset++;
    }
    return isEnd;
  }
  if (readUInt32BE() !== 0x70736574) {
    throw new Error('Format Error: Invalid Magic Number');
  }
  if (readUInt8() !== 0xff) {
    throw new Error(
      'Format Error: Magic Number must be followed by 0xff separator',
    );
  }
  const globalMapKeyVals = [];
  const globalKeyIndex = {};
  while (!checkEndOfKeyValPairs()) {
    const keyVal = getKeyValue();
    const hexKey = keyVal.key.toString('hex');
    if (globalKeyIndex[hexKey]) {
      throw new Error(
        'Format Error: Keys must be unique for global keymap: key ' + hexKey,
      );
    }
    globalKeyIndex[hexKey] = 1;
    globalMapKeyVals.push(keyVal);
  }
  const unsignedTxMaps = globalMapKeyVals.filter(
    keyVal => keyVal.key[0] === typeFields_1.GlobalTypes.UNSIGNED_TX,
  );
  if (unsignedTxMaps.length !== 1) {
    throw new Error('Format Error: Only one UNSIGNED_TX allowed');
  }
  const unsignedTx = txGetter(unsignedTxMaps[0].value);
  // Get input and output counts to loop the respective fields
  const { inputCount, outputCount } = unsignedTx.getInputOutputCounts();
  const inputKeyVals = [];
  const outputKeyVals = [];
  // Get input fields
  for (const index of tools_1.range(inputCount)) {
    const inputKeyIndex = {};
    const input = [];
    while (!checkEndOfKeyValPairs()) {
      const keyVal = getKeyValue();
      const hexKey = keyVal.key.toString('hex');
      if (inputKeyIndex[hexKey]) {
        throw new Error(
          'Format Error: Keys must be unique for each input: ' +
            'input index ' +
            index +
            ' key ' +
            hexKey,
        );
      }
      inputKeyIndex[hexKey] = 1;
      input.push(keyVal);
    }
    inputKeyVals.push(input);
  }
  for (const index of tools_1.range(outputCount)) {
    const outputKeyIndex = {};
    const output = [];
    while (!checkEndOfKeyValPairs()) {
      const keyVal = getKeyValue();
      const hexKey = keyVal.key.toString('hex');
      if (outputKeyIndex[hexKey]) {
        throw new Error(
          'Format Error: Keys must be unique for each output: ' +
            'output index ' +
            index +
            ' key ' +
            hexKey,
        );
      }
      outputKeyIndex[hexKey] = 1;
      output.push(keyVal);
    }
    outputKeyVals.push(output);
  }
  return psbtFromKeyVals(unsignedTx, {
    globalMapKeyVals,
    inputKeyVals,
    outputKeyVals,
  });
}
exports.psbtFromBuffer = psbtFromBuffer;
function checkKeyBuffer(type, keyBuf, keyNum) {
  if (!keyBuf.equals(Buffer.from([keyNum]))) {
    throw new Error(
      `Format Error: Invalid ${type} key: ${keyBuf.toString('hex')}`,
    );
  }
}
exports.checkKeyBuffer = checkKeyBuffer;
function psbtFromKeyVals(
  unsignedTx,
  { globalMapKeyVals, inputKeyVals, outputKeyVals },
) {
  // That was easy :-)
  const globalMap = {
    unsignedTx,
  };
  let txCount = 0;
  for (const keyVal of globalMapKeyVals) {
    // If a globalMap item needs pubkey, uncomment
    // const pubkey = convert.globals.checkPubkey(keyVal);
    switch (keyVal.key[0]) {
      case typeFields_1.GlobalTypes.UNSIGNED_TX:
        checkKeyBuffer(
          'global',
          keyVal.key,
          typeFields_1.GlobalTypes.UNSIGNED_TX,
        );
        if (txCount > 0) {
          throw new Error('Format Error: GlobalMap has multiple UNSIGNED_TX');
        }
        txCount++;
        break;
      case typeFields_1.GlobalTypes.GLOBAL_XPUB:
        if (globalMap.globalXpub === undefined) {
          globalMap.globalXpub = [];
        }
        globalMap.globalXpub.push(convert.globals.globalXpub.decode(keyVal));
        break;
      default:
        // This will allow inclusion during serialization.
        if (!globalMap.unknownKeyVals) globalMap.unknownKeyVals = [];
        globalMap.unknownKeyVals.push(keyVal);
    }
  }
  // Get input and output counts to loop the respective fields
  const inputCount = inputKeyVals.length;
  const outputCount = outputKeyVals.length;
  const inputs = [];
  const outputs = [];
  // Get input fields
  for (const index of tools_1.range(inputCount)) {
    const input = {};
    for (const keyVal of inputKeyVals[index]) {
      convert.inputs.checkPubkey(keyVal);
      switch (keyVal.key[0]) {
        case typeFields_1.InputTypes.NON_WITNESS_UTXO:
          checkKeyBuffer(
            'input',
            keyVal.key,
            typeFields_1.InputTypes.NON_WITNESS_UTXO,
          );
          if (
            input.nonWitnessUtxo !== undefined ||
            input.witnessUtxo !== undefined
          ) {
            throw new Error(
              'Format Error: Input has multiple [NON_]WITNESS_UTXO',
            );
          }
          input.nonWitnessUtxo = convert.inputs.nonWitnessUtxo.decode(keyVal);
          break;
        case typeFields_1.InputTypes.WITNESS_UTXO:
          checkKeyBuffer(
            'input',
            keyVal.key,
            typeFields_1.InputTypes.WITNESS_UTXO,
          );
          if (
            input.nonWitnessUtxo !== undefined ||
            input.witnessUtxo !== undefined
          ) {
            throw new Error(
              'Format Error: Input has multiple [NON_]WITNESS_UTXO',
            );
          }
          input.witnessUtxo = convert.inputs.witnessUtxo.decode(keyVal);
          break;
        case typeFields_1.InputTypes.PARTIAL_SIG:
          if (input.partialSig === undefined) {
            input.partialSig = [];
          }
          input.partialSig.push(convert.inputs.partialSig.decode(keyVal));
          break;
        case typeFields_1.InputTypes.SIGHASH_TYPE:
          checkKeyBuffer(
            'input',
            keyVal.key,
            typeFields_1.InputTypes.SIGHASH_TYPE,
          );
          if (input.sighashType !== undefined) {
            throw new Error('Format Error: Input has multiple SIGHASH_TYPE');
          }
          input.sighashType = convert.inputs.sighashType.decode(keyVal);
          break;
        case typeFields_1.InputTypes.REDEEM_SCRIPT:
          checkKeyBuffer(
            'input',
            keyVal.key,
            typeFields_1.InputTypes.REDEEM_SCRIPT,
          );
          if (input.redeemScript !== undefined) {
            throw new Error('Format Error: Input has multiple REDEEM_SCRIPT');
          }
          input.redeemScript = convert.inputs.redeemScript.decode(keyVal);
          break;
        case typeFields_1.InputTypes.WITNESS_SCRIPT:
          checkKeyBuffer(
            'input',
            keyVal.key,
            typeFields_1.InputTypes.WITNESS_SCRIPT,
          );
          if (input.witnessScript !== undefined) {
            throw new Error('Format Error: Input has multiple WITNESS_SCRIPT');
          }
          input.witnessScript = convert.inputs.witnessScript.decode(keyVal);
          break;
        case typeFields_1.InputTypes.BIP32_DERIVATION:
          if (input.bip32Derivation === undefined) {
            input.bip32Derivation = [];
          }
          input.bip32Derivation.push(
            convert.inputs.bip32Derivation.decode(keyVal),
          );
          break;
        case typeFields_1.InputTypes.FINAL_SCRIPTSIG:
          checkKeyBuffer(
            'input',
            keyVal.key,
            typeFields_1.InputTypes.FINAL_SCRIPTSIG,
          );
          input.finalScriptSig = convert.inputs.finalScriptSig.decode(keyVal);
          break;
        case typeFields_1.InputTypes.FINAL_SCRIPTWITNESS:
          checkKeyBuffer(
            'input',
            keyVal.key,
            typeFields_1.InputTypes.FINAL_SCRIPTWITNESS,
          );
          input.finalScriptWitness = convert.inputs.finalScriptWitness.decode(
            keyVal,
          );
          break;
        case typeFields_1.InputTypes.POR_COMMITMENT:
          checkKeyBuffer(
            'input',
            keyVal.key,
            typeFields_1.InputTypes.POR_COMMITMENT,
          );
          input.porCommitment = convert.inputs.porCommitment.decode(keyVal);
          break;
        default:
          // This will allow inclusion during serialization.
          if (!input.unknownKeyVals) input.unknownKeyVals = [];
          input.unknownKeyVals.push(keyVal);
      }
    }
    inputs.push(input);
  }
  for (const index of tools_1.range(outputCount)) {
    const output = {};
    for (const keyVal of outputKeyVals[index]) {
      convert.outputs.checkPubkey(keyVal);
      switch (keyVal.key[0]) {
        case typeFields_1.OutputTypes.REDEEM_SCRIPT:
          checkKeyBuffer(
            'output',
            keyVal.key,
            typeFields_1.OutputTypes.REDEEM_SCRIPT,
          );
          if (output.redeemScript !== undefined) {
            throw new Error('Format Error: Output has multiple REDEEM_SCRIPT');
          }
          output.redeemScript = convert.outputs.redeemScript.decode(keyVal);
          break;
        case typeFields_1.OutputTypes.WITNESS_SCRIPT:
          checkKeyBuffer(
            'output',
            keyVal.key,
            typeFields_1.OutputTypes.WITNESS_SCRIPT,
          );
          if (output.witnessScript !== undefined) {
            throw new Error('Format Error: Output has multiple WITNESS_SCRIPT');
          }
          output.witnessScript = convert.outputs.witnessScript.decode(keyVal);
          break;
        case typeFields_1.OutputTypes.BIP32_DERIVATION:
          if (output.bip32Derivation === undefined) {
            output.bip32Derivation = [];
          }
          output.bip32Derivation.push(
            convert.outputs.bip32Derivation.decode(keyVal),
          );
          break;
        default:
          if (!output.unknownKeyVals) output.unknownKeyVals = [];
          output.unknownKeyVals.push(keyVal);
      }
    }
    outputs.push(output);
  }
  return { globalMap, inputs, outputs };
}
exports.psbtFromKeyVals = psbtFromKeyVals;

}).call(this)}).call(this,require("buffer").Buffer)
},{"../converter":34,"../converter/tools":46,"../converter/varint":47,"../typeFields":52,"buffer":4}],49:[function(require,module,exports){
'use strict';
function __export(m) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, '__esModule', { value: true });
__export(require('./fromBuffer'));
__export(require('./toBuffer'));

},{"./fromBuffer":48,"./toBuffer":50}],50:[function(require,module,exports){
(function (Buffer){(function (){
'use strict';
Object.defineProperty(exports, '__esModule', { value: true });
const convert = require('../converter');
const tools_1 = require('../converter/tools');
function psbtToBuffer({ globalMap, inputs, outputs }) {
  const { globalKeyVals, inputKeyVals, outputKeyVals } = psbtToKeyVals({
    globalMap,
    inputs,
    outputs,
  });
  const globalBuffer = tools_1.keyValsToBuffer(globalKeyVals);
  const keyValsOrEmptyToBuffer = keyVals =>
    keyVals.length === 0
      ? [Buffer.from([0])]
      : keyVals.map(tools_1.keyValsToBuffer);
  const inputBuffers = keyValsOrEmptyToBuffer(inputKeyVals);
  const outputBuffers = keyValsOrEmptyToBuffer(outputKeyVals);
  const header = Buffer.allocUnsafe(5);
  header.writeUIntBE(0x70736574ff, 0, 5);
  return Buffer.concat(
    [header, globalBuffer].concat(inputBuffers, outputBuffers),
  );
}
exports.psbtToBuffer = psbtToBuffer;
const sortKeyVals = (a, b) => {
  return a.key.compare(b.key);
};
function keyValsFromMap(keyValMap, converterFactory) {
  const keyHexSet = new Set();
  const keyVals = Object.entries(keyValMap).reduce((result, [key, value]) => {
    if (key === 'unknownKeyVals') return result;
    // We are checking for undefined anyways. So ignore TS error
    // @ts-ignore
    const converter = converterFactory[key];
    if (converter === undefined) return result;
    const encodedKeyVals = (Array.isArray(value) ? value : [value]).map(
      converter.encode,
    );
    const keyHexes = encodedKeyVals.map(kv => kv.key.toString('hex'));
    keyHexes.forEach(hex => {
      if (keyHexSet.has(hex))
        throw new Error('Serialize Error: Duplicate key: ' + hex);
      keyHexSet.add(hex);
    });
    return result.concat(encodedKeyVals);
  }, []);
  // Get other keyVals that have not yet been gotten
  const otherKeyVals = keyValMap.unknownKeyVals
    ? keyValMap.unknownKeyVals.filter(keyVal => {
        return !keyHexSet.has(keyVal.key.toString('hex'));
      })
    : [];
  return keyVals.concat(otherKeyVals).sort(sortKeyVals);
}
function psbtToKeyVals({ globalMap, inputs, outputs }) {
  // First parse the global keyVals
  // Get any extra keyvals to pass along
  return {
    globalKeyVals: keyValsFromMap(globalMap, convert.globals),
    inputKeyVals: inputs.map(i => keyValsFromMap(i, convert.inputs)),
    outputKeyVals: outputs.map(o => keyValsFromMap(o, convert.outputs)),
  };
}
exports.psbtToKeyVals = psbtToKeyVals;

}).call(this)}).call(this,require("buffer").Buffer)
},{"../converter":34,"../converter/tools":46,"buffer":4}],51:[function(require,module,exports){
(function (Buffer){(function (){
'use strict';
Object.defineProperty(exports, '__esModule', { value: true });
const combiner_1 = require('./combiner');
const parser_1 = require('./parser');
const typeFields_1 = require('./typeFields');
const utils_1 = require('./utils');
class Psbt {
  constructor(tx) {
    this.inputs = [];
    this.outputs = [];
    this.globalMap = {
      unsignedTx: tx,
    };
  }
  static fromBase64(data, txFromBuffer) {
    const buffer = Buffer.from(data, 'base64');
    return this.fromBuffer(buffer, txFromBuffer);
  }
  static fromHex(data, txFromBuffer) {
    const buffer = Buffer.from(data, 'hex');
    return this.fromBuffer(buffer, txFromBuffer);
  }
  static fromBuffer(buffer, txFromBuffer) {
    const results = parser_1.psbtFromBuffer(buffer, txFromBuffer);
    const psbt = new this(results.globalMap.unsignedTx);
    Object.assign(psbt, results);
    return psbt;
  }
  toBase64() {
    const buffer = this.toBuffer();
    return buffer.toString('base64');
  }
  toHex() {
    const buffer = this.toBuffer();
    return buffer.toString('hex');
  }
  toBuffer() {
    return parser_1.psbtToBuffer(this);
  }
  updateGlobal(updateData) {
    utils_1.updateGlobal(updateData, this.globalMap);
    return this;
  }
  updateInput(inputIndex, updateData) {
    const input = utils_1.checkForInput(this.inputs, inputIndex);
    utils_1.updateInput(updateData, input);
    return this;
  }
  updateOutput(outputIndex, updateData) {
    const output = utils_1.checkForOutput(this.outputs, outputIndex);
    utils_1.updateOutput(updateData, output);
    return this;
  }
  addUnknownKeyValToGlobal(keyVal) {
    utils_1.checkHasKey(
      keyVal,
      this.globalMap.unknownKeyVals,
      utils_1.getEnumLength(typeFields_1.GlobalTypes),
    );
    if (!this.globalMap.unknownKeyVals) this.globalMap.unknownKeyVals = [];
    this.globalMap.unknownKeyVals.push(keyVal);
    return this;
  }
  addUnknownKeyValToInput(inputIndex, keyVal) {
    const input = utils_1.checkForInput(this.inputs, inputIndex);
    utils_1.checkHasKey(
      keyVal,
      input.unknownKeyVals,
      utils_1.getEnumLength(typeFields_1.InputTypes),
    );
    if (!input.unknownKeyVals) input.unknownKeyVals = [];
    input.unknownKeyVals.push(keyVal);
    return this;
  }
  addUnknownKeyValToOutput(outputIndex, keyVal) {
    const output = utils_1.checkForOutput(this.outputs, outputIndex);
    utils_1.checkHasKey(
      keyVal,
      output.unknownKeyVals,
      utils_1.getEnumLength(typeFields_1.OutputTypes),
    );
    if (!output.unknownKeyVals) output.unknownKeyVals = [];
    output.unknownKeyVals.push(keyVal);
    return this;
  }
  addInput(inputData) {
    this.globalMap.unsignedTx.addInput(inputData);
    this.inputs.push({
      unknownKeyVals: [],
    });
    const addKeyVals = inputData.unknownKeyVals || [];
    const inputIndex = this.inputs.length - 1;
    if (!Array.isArray(addKeyVals)) {
      throw new Error('unknownKeyVals must be an Array');
    }
    addKeyVals.forEach(keyVal =>
      this.addUnknownKeyValToInput(inputIndex, keyVal),
    );
    utils_1.addInputAttributes(this.inputs, inputData);
    return this;
  }
  addOutput(outputData) {
    this.globalMap.unsignedTx.addOutput(outputData);
    this.outputs.push({
      unknownKeyVals: [],
    });
    const addKeyVals = outputData.unknownKeyVals || [];
    const outputIndex = this.outputs.length - 1;
    if (!Array.isArray(addKeyVals)) {
      throw new Error('unknownKeyVals must be an Array');
    }
    addKeyVals.forEach(keyVal =>
      this.addUnknownKeyValToInput(outputIndex, keyVal),
    );
    utils_1.addOutputAttributes(this.outputs, outputData);
    return this;
  }
  clearFinalizedInput(inputIndex) {
    const input = utils_1.checkForInput(this.inputs, inputIndex);
    utils_1.inputCheckUncleanFinalized(inputIndex, input);
    for (const key of Object.keys(input)) {
      if (
        ![
          'witnessUtxo',
          'nonWitnessUtxo',
          'finalScriptSig',
          'finalScriptWitness',
          'unknownKeyVals',
        ].includes(key)
      ) {
        // @ts-ignore
        delete input[key];
      }
    }
    return this;
  }
  combine(...those) {
    // Combine this with those.
    // Return self for chaining.
    const result = combiner_1.combine([this].concat(those));
    Object.assign(this, result);
    return this;
  }
  getTransaction() {
    return this.globalMap.unsignedTx.toBuffer();
  }
}
exports.Psbt = Psbt;

}).call(this)}).call(this,require("buffer").Buffer)
},{"./combiner":31,"./parser":49,"./typeFields":52,"./utils":53,"buffer":4}],52:[function(require,module,exports){
'use strict';
Object.defineProperty(exports, '__esModule', { value: true });
var GlobalTypes;
(function(GlobalTypes) {
  GlobalTypes[(GlobalTypes['UNSIGNED_TX'] = 0)] = 'UNSIGNED_TX';
  GlobalTypes[(GlobalTypes['GLOBAL_XPUB'] = 1)] = 'GLOBAL_XPUB';
})((GlobalTypes = exports.GlobalTypes || (exports.GlobalTypes = {})));
exports.GLOBAL_TYPE_NAMES = ['unsignedTx', 'globalXpub'];
var InputTypes;
(function(InputTypes) {
  InputTypes[(InputTypes['NON_WITNESS_UTXO'] = 0)] = 'NON_WITNESS_UTXO';
  InputTypes[(InputTypes['WITNESS_UTXO'] = 1)] = 'WITNESS_UTXO';
  InputTypes[(InputTypes['PARTIAL_SIG'] = 2)] = 'PARTIAL_SIG';
  InputTypes[(InputTypes['SIGHASH_TYPE'] = 3)] = 'SIGHASH_TYPE';
  InputTypes[(InputTypes['REDEEM_SCRIPT'] = 4)] = 'REDEEM_SCRIPT';
  InputTypes[(InputTypes['WITNESS_SCRIPT'] = 5)] = 'WITNESS_SCRIPT';
  InputTypes[(InputTypes['BIP32_DERIVATION'] = 6)] = 'BIP32_DERIVATION';
  InputTypes[(InputTypes['FINAL_SCRIPTSIG'] = 7)] = 'FINAL_SCRIPTSIG';
  InputTypes[(InputTypes['FINAL_SCRIPTWITNESS'] = 8)] = 'FINAL_SCRIPTWITNESS';
  InputTypes[(InputTypes['POR_COMMITMENT'] = 9)] = 'POR_COMMITMENT';
})((InputTypes = exports.InputTypes || (exports.InputTypes = {})));
exports.INPUT_TYPE_NAMES = [
  'nonWitnessUtxo',
  'witnessUtxo',
  'partialSig',
  'sighashType',
  'redeemScript',
  'witnessScript',
  'bip32Derivation',
  'finalScriptSig',
  'finalScriptWitness',
  'porCommitment',
];
var OutputTypes;
(function(OutputTypes) {
  OutputTypes[(OutputTypes['REDEEM_SCRIPT'] = 0)] = 'REDEEM_SCRIPT';
  OutputTypes[(OutputTypes['WITNESS_SCRIPT'] = 1)] = 'WITNESS_SCRIPT';
  OutputTypes[(OutputTypes['BIP32_DERIVATION'] = 2)] = 'BIP32_DERIVATION';
})((OutputTypes = exports.OutputTypes || (exports.OutputTypes = {})));
exports.OUTPUT_TYPE_NAMES = [
  'redeemScript',
  'witnessScript',
  'bip32Derivation',
];

},{}],53:[function(require,module,exports){
(function (Buffer){(function (){
'use strict';
Object.defineProperty(exports, '__esModule', { value: true });
const converter = require('./converter');
function checkForInput(inputs, inputIndex) {
  const input = inputs[inputIndex];
  if (input === undefined) throw new Error(`No input #${inputIndex}`);
  return input;
}
exports.checkForInput = checkForInput;
function checkForOutput(outputs, outputIndex) {
  const output = outputs[outputIndex];
  if (output === undefined) throw new Error(`No output #${outputIndex}`);
  return output;
}
exports.checkForOutput = checkForOutput;
function checkHasKey(checkKeyVal, keyVals, enumLength) {
  if (checkKeyVal.key[0] < enumLength) {
    throw new Error(
      `Use the method for your specific key instead of addUnknownKeyVal*`,
    );
  }
  if (
    keyVals &&
    keyVals.filter(kv => kv.key.equals(checkKeyVal.key)).length !== 0
  ) {
    throw new Error(`Duplicate Key: ${checkKeyVal.key.toString('hex')}`);
  }
}
exports.checkHasKey = checkHasKey;
function getEnumLength(myenum) {
  let count = 0;
  Object.keys(myenum).forEach(val => {
    if (Number(isNaN(Number(val)))) {
      count++;
    }
  });
  return count;
}
exports.getEnumLength = getEnumLength;
function inputCheckUncleanFinalized(inputIndex, input) {
  let result = false;
  if (!input.nonWitnessUtxo !== !input.witnessUtxo) {
    const needScriptSig = !!input.redeemScript;
    const needWitnessScript = !!input.witnessScript;
    const scriptSigOK = !needScriptSig || !!input.finalScriptSig;
    const witnessScriptOK = !needWitnessScript || !!input.finalScriptWitness;
    const hasOneFinal = !!input.finalScriptSig || !!input.finalScriptWitness;
    result = scriptSigOK && witnessScriptOK && hasOneFinal;
  }
  if (result === false) {
    throw new Error(
      `Input #${inputIndex} has too much or too little data to clean`,
    );
  }
}
exports.inputCheckUncleanFinalized = inputCheckUncleanFinalized;
function throwForUpdateMaker(typeName, name, expected, data) {
  throw new Error(
    `Data for ${typeName} key ${name} is incorrect: Expected ` +
      `${expected} and got ${JSON.stringify(data)}`,
  );
}
function updateMaker(typeName) {
  return (updateData, mainData) => {
    for (const name of Object.keys(updateData)) {
      // @ts-ignore
      const data = updateData[name];
      // @ts-ignore
      const { canAdd, canAddToArray, check, expected } =
        // @ts-ignore
        converter[typeName + 's'][name] || {};
      const isArray = !!canAddToArray;
      // If unknown data. ignore and do not add
      if (check) {
        if (isArray) {
          if (
            !Array.isArray(data) ||
            // @ts-ignore
            (mainData[name] && !Array.isArray(mainData[name]))
          ) {
            throw new Error(`Key type ${name} must be an array`);
          }
          if (!data.every(check)) {
            throwForUpdateMaker(typeName, name, expected, data);
          }
          // @ts-ignore
          const arr = mainData[name] || [];
          const dupeCheckSet = new Set();
          if (!data.every(v => canAddToArray(arr, v, dupeCheckSet))) {
            throw new Error('Can not add duplicate data to array');
          }
          // @ts-ignore
          mainData[name] = arr.concat(data);
        } else {
          if (!check(data)) {
            throwForUpdateMaker(typeName, name, expected, data);
          }
          if (!canAdd(mainData, data)) {
            throw new Error(`Can not add duplicate data to ${typeName}`);
          }
          // @ts-ignore
          mainData[name] = data;
        }
      }
    }
  };
}
exports.updateGlobal = updateMaker('global');
exports.updateInput = updateMaker('input');
exports.updateOutput = updateMaker('output');
function addInputAttributes(inputs, data) {
  const index = inputs.length - 1;
  const input = checkForInput(inputs, index);
  exports.updateInput(data, input);
}
exports.addInputAttributes = addInputAttributes;
function addOutputAttributes(outputs, data) {
  const index = outputs.length - 1;
  const output = checkForInput(outputs, index);
  exports.updateOutput(data, output);
}
exports.addOutputAttributes = addOutputAttributes;
function defaultVersionSetter(version, txBuf) {
  if (!Buffer.isBuffer(txBuf) || txBuf.length < 4) {
    throw new Error('Set Version: Invalid Transaction');
  }
  txBuf.writeUInt32LE(version, 0);
  return txBuf;
}
exports.defaultVersionSetter = defaultVersionSetter;
function defaultLocktimeSetter(locktime, txBuf) {
  if (!Buffer.isBuffer(txBuf) || txBuf.length < 4) {
    throw new Error('Set Locktime: Invalid Transaction');
  }
  txBuf.writeUInt32LE(locktime, txBuf.length - 4);
  return txBuf;
}
exports.defaultLocktimeSetter = defaultLocktimeSetter;

}).call(this)}).call(this,{"isBuffer":require("../../../../../../../.nvm/versions/node/v14.15.4/lib/node_modules/browserify/node_modules/is-buffer/index.js")})
},{"../../../../../../../.nvm/versions/node/v14.15.4/lib/node_modules/browserify/node_modules/is-buffer/index.js":8,"./converter":34}],54:[function(require,module,exports){
(function (Buffer){(function (){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const crypto = require("./crypto");
const bs58check = require('bs58check');
const ecc = require('tiny-secp256k1');
const typeforce = require('typeforce');
const wif = require('wif');
const UINT256_TYPE = typeforce.BufferN(32);
const NETWORK_TYPE = typeforce.compile({
    wif: typeforce.UInt8,
    bip32: {
        public: typeforce.UInt32,
        private: typeforce.UInt32,
    },
});
const BITCOIN = {
    messagePrefix: '\x18Bitcoin Signed Message:\n',
    bech32: 'bc',
    bip32: {
        public: 0x0488b21e,
        private: 0x0488ade4,
    },
    pubKeyHash: 0x00,
    scriptHash: 0x05,
    wif: 0x80,
};
const HIGHEST_BIT = 0x80000000;
const UINT31_MAX = Math.pow(2, 31) - 1;
function BIP32Path(value) {
    return (typeforce.String(value) && value.match(/^(m\/)?(\d+'?\/)*\d+'?$/) !== null);
}
function UInt31(value) {
    return typeforce.UInt32(value) && value <= UINT31_MAX;
}
class BIP32 {
    constructor(__D, __Q, chainCode, network, __DEPTH = 0, __INDEX = 0, __PARENT_FINGERPRINT = 0x00000000) {
        this.__D = __D;
        this.__Q = __Q;
        this.chainCode = chainCode;
        this.network = network;
        this.__DEPTH = __DEPTH;
        this.__INDEX = __INDEX;
        this.__PARENT_FINGERPRINT = __PARENT_FINGERPRINT;
        typeforce(NETWORK_TYPE, network);
        this.lowR = false;
    }
    get depth() {
        return this.__DEPTH;
    }
    get index() {
        return this.__INDEX;
    }
    get parentFingerprint() {
        return this.__PARENT_FINGERPRINT;
    }
    get publicKey() {
        if (this.__Q === undefined)
            this.__Q = ecc.pointFromScalar(this.__D, true);
        return this.__Q;
    }
    get privateKey() {
        return this.__D;
    }
    get identifier() {
        return crypto.hash160(this.publicKey);
    }
    get fingerprint() {
        return this.identifier.slice(0, 4);
    }
    get compressed() {
        return true;
    }
    // Private === not neutered
    // Public === neutered
    isNeutered() {
        return this.__D === undefined;
    }
    neutered() {
        return fromPublicKeyLocal(this.publicKey, this.chainCode, this.network, this.depth, this.index, this.parentFingerprint);
    }
    toBase58() {
        const network = this.network;
        const version = !this.isNeutered()
            ? network.bip32.private
            : network.bip32.public;
        const buffer = Buffer.allocUnsafe(78);
        // 4 bytes: version bytes
        buffer.writeUInt32BE(version, 0);
        // 1 byte: depth: 0x00 for master nodes, 0x01 for level-1 descendants, ....
        buffer.writeUInt8(this.depth, 4);
        // 4 bytes: the fingerprint of the parent's key (0x00000000 if master key)
        buffer.writeUInt32BE(this.parentFingerprint, 5);
        // 4 bytes: child number. This is the number i in xi = xpar/i, with xi the key being serialized.
        // This is encoded in big endian. (0x00000000 if master key)
        buffer.writeUInt32BE(this.index, 9);
        // 32 bytes: the chain code
        this.chainCode.copy(buffer, 13);
        // 33 bytes: the public key or private key data
        if (!this.isNeutered()) {
            // 0x00 + k for private keys
            buffer.writeUInt8(0, 45);
            this.privateKey.copy(buffer, 46);
            // 33 bytes: the public key
        }
        else {
            // X9.62 encoding for public keys
            this.publicKey.copy(buffer, 45);
        }
        return bs58check.encode(buffer);
    }
    toWIF() {
        if (!this.privateKey)
            throw new TypeError('Missing private key');
        return wif.encode(this.network.wif, this.privateKey, true);
    }
    // https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki#child-key-derivation-ckd-functions
    derive(index) {
        typeforce(typeforce.UInt32, index);
        const isHardened = index >= HIGHEST_BIT;
        const data = Buffer.allocUnsafe(37);
        // Hardened child
        if (isHardened) {
            if (this.isNeutered())
                throw new TypeError('Missing private key for hardened child key');
            // data = 0x00 || ser256(kpar) || ser32(index)
            data[0] = 0x00;
            this.privateKey.copy(data, 1);
            data.writeUInt32BE(index, 33);
            // Normal child
        }
        else {
            // data = serP(point(kpar)) || ser32(index)
            //      = serP(Kpar) || ser32(index)
            this.publicKey.copy(data, 0);
            data.writeUInt32BE(index, 33);
        }
        const I = crypto.hmacSHA512(this.chainCode, data);
        const IL = I.slice(0, 32);
        const IR = I.slice(32);
        // if parse256(IL) >= n, proceed with the next value for i
        if (!ecc.isPrivate(IL))
            return this.derive(index + 1);
        // Private parent key -> private child key
        let hd;
        if (!this.isNeutered()) {
            // ki = parse256(IL) + kpar (mod n)
            const ki = ecc.privateAdd(this.privateKey, IL);
            // In case ki == 0, proceed with the next value for i
            if (ki == null)
                return this.derive(index + 1);
            hd = fromPrivateKeyLocal(ki, IR, this.network, this.depth + 1, index, this.fingerprint.readUInt32BE(0));
            // Public parent key -> public child key
        }
        else {
            // Ki = point(parse256(IL)) + Kpar
            //    = G*IL + Kpar
            const Ki = ecc.pointAddScalar(this.publicKey, IL, true);
            // In case Ki is the point at infinity, proceed with the next value for i
            if (Ki === null)
                return this.derive(index + 1);
            hd = fromPublicKeyLocal(Ki, IR, this.network, this.depth + 1, index, this.fingerprint.readUInt32BE(0));
        }
        return hd;
    }
    deriveHardened(index) {
        typeforce(UInt31, index);
        // Only derives hardened private keys by default
        return this.derive(index + HIGHEST_BIT);
    }
    derivePath(path) {
        typeforce(BIP32Path, path);
        let splitPath = path.split('/');
        if (splitPath[0] === 'm') {
            if (this.parentFingerprint)
                throw new TypeError('Expected master, got child');
            splitPath = splitPath.slice(1);
        }
        return splitPath.reduce((prevHd, indexStr) => {
            let index;
            if (indexStr.slice(-1) === `'`) {
                index = parseInt(indexStr.slice(0, -1), 10);
                return prevHd.deriveHardened(index);
            }
            else {
                index = parseInt(indexStr, 10);
                return prevHd.derive(index);
            }
        }, this);
    }
    sign(hash, lowR) {
        if (!this.privateKey)
            throw new Error('Missing private key');
        if (lowR === undefined)
            lowR = this.lowR;
        if (lowR === false) {
            return ecc.sign(hash, this.privateKey);
        }
        else {
            let sig = ecc.sign(hash, this.privateKey);
            const extraData = Buffer.alloc(32, 0);
            let counter = 0;
            // if first try is lowR, skip the loop
            // for second try and on, add extra entropy counting up
            while (sig[0] > 0x7f) {
                counter++;
                extraData.writeUIntLE(counter, 0, 6);
                sig = ecc.signWithEntropy(hash, this.privateKey, extraData);
            }
            return sig;
        }
    }
    verify(hash, signature) {
        return ecc.verify(hash, this.publicKey, signature);
    }
}
function fromBase58(inString, network) {
    const buffer = bs58check.decode(inString);
    if (buffer.length !== 78)
        throw new TypeError('Invalid buffer length');
    network = network || BITCOIN;
    // 4 bytes: version bytes
    const version = buffer.readUInt32BE(0);
    if (version !== network.bip32.private && version !== network.bip32.public)
        throw new TypeError('Invalid network version');
    // 1 byte: depth: 0x00 for master nodes, 0x01 for level-1 descendants, ...
    const depth = buffer[4];
    // 4 bytes: the fingerprint of the parent's key (0x00000000 if master key)
    const parentFingerprint = buffer.readUInt32BE(5);
    if (depth === 0) {
        if (parentFingerprint !== 0x00000000)
            throw new TypeError('Invalid parent fingerprint');
    }
    // 4 bytes: child number. This is the number i in xi = xpar/i, with xi the key being serialized.
    // This is encoded in MSB order. (0x00000000 if master key)
    const index = buffer.readUInt32BE(9);
    if (depth === 0 && index !== 0)
        throw new TypeError('Invalid index');
    // 32 bytes: the chain code
    const chainCode = buffer.slice(13, 45);
    let hd;
    // 33 bytes: private key data (0x00 + k)
    if (version === network.bip32.private) {
        if (buffer.readUInt8(45) !== 0x00)
            throw new TypeError('Invalid private key');
        const k = buffer.slice(46, 78);
        hd = fromPrivateKeyLocal(k, chainCode, network, depth, index, parentFingerprint);
        // 33 bytes: public key data (0x02 + X or 0x03 + X)
    }
    else {
        const X = buffer.slice(45, 78);
        hd = fromPublicKeyLocal(X, chainCode, network, depth, index, parentFingerprint);
    }
    return hd;
}
exports.fromBase58 = fromBase58;
function fromPrivateKey(privateKey, chainCode, network) {
    return fromPrivateKeyLocal(privateKey, chainCode, network);
}
exports.fromPrivateKey = fromPrivateKey;
function fromPrivateKeyLocal(privateKey, chainCode, network, depth, index, parentFingerprint) {
    typeforce({
        privateKey: UINT256_TYPE,
        chainCode: UINT256_TYPE,
    }, { privateKey, chainCode });
    network = network || BITCOIN;
    if (!ecc.isPrivate(privateKey))
        throw new TypeError('Private key not in range [1, n)');
    return new BIP32(privateKey, undefined, chainCode, network, depth, index, parentFingerprint);
}
function fromPublicKey(publicKey, chainCode, network) {
    return fromPublicKeyLocal(publicKey, chainCode, network);
}
exports.fromPublicKey = fromPublicKey;
function fromPublicKeyLocal(publicKey, chainCode, network, depth, index, parentFingerprint) {
    typeforce({
        publicKey: typeforce.BufferN(33),
        chainCode: UINT256_TYPE,
    }, { publicKey, chainCode });
    network = network || BITCOIN;
    // verify the X coordinate is a point on the curve
    if (!ecc.isPoint(publicKey))
        throw new TypeError('Point is not on the curve');
    return new BIP32(undefined, publicKey, chainCode, network, depth, index, parentFingerprint);
}
function fromSeed(seed, network) {
    typeforce(typeforce.Buffer, seed);
    if (seed.length < 16)
        throw new TypeError('Seed should be at least 128 bits');
    if (seed.length > 64)
        throw new TypeError('Seed should be at most 512 bits');
    network = network || BITCOIN;
    const I = crypto.hmacSHA512(Buffer.from('Bitcoin seed', 'utf8'), seed);
    const IL = I.slice(0, 32);
    const IR = I.slice(32);
    return fromPrivateKey(IL, IR, network);
}
exports.fromSeed = fromSeed;

}).call(this)}).call(this,require("buffer").Buffer)
},{"./crypto":55,"bs58check":66,"buffer":4,"tiny-secp256k1":138,"typeforce":142,"wif":146}],55:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const createHash = require('create-hash');
const createHmac = require('create-hmac');
function hash160(buffer) {
    const sha256Hash = createHash('sha256')
        .update(buffer)
        .digest();
    try {
        return createHash('rmd160')
            .update(sha256Hash)
            .digest();
    }
    catch (err) {
        return createHash('ripemd160')
            .update(sha256Hash)
            .digest();
    }
}
exports.hash160 = hash160;
function hmacSHA512(key, data) {
    return createHmac('sha512', key)
        .update(data)
        .digest();
}
exports.hmacSHA512 = hmacSHA512;

},{"create-hash":68,"create-hmac":70}],56:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var bip32_1 = require("./bip32");
exports.fromSeed = bip32_1.fromSeed;
exports.fromBase58 = bip32_1.fromBase58;
exports.fromPublicKey = bip32_1.fromPublicKey;
exports.fromPrivateKey = bip32_1.fromPrivateKey;

},{"./bip32":54}],57:[function(require,module,exports){
// Reference https://github.com/bitcoin/bips/blob/master/bip-0066.mediawiki
// Format: 0x30 [total-length] 0x02 [R-length] [R] 0x02 [S-length] [S]
// NOTE: SIGHASH byte ignored AND restricted, truncate before use

var Buffer = require('safe-buffer').Buffer

function check (buffer) {
  if (buffer.length < 8) return false
  if (buffer.length > 72) return false
  if (buffer[0] !== 0x30) return false
  if (buffer[1] !== buffer.length - 2) return false
  if (buffer[2] !== 0x02) return false

  var lenR = buffer[3]
  if (lenR === 0) return false
  if (5 + lenR >= buffer.length) return false
  if (buffer[4 + lenR] !== 0x02) return false

  var lenS = buffer[5 + lenR]
  if (lenS === 0) return false
  if ((6 + lenR + lenS) !== buffer.length) return false

  if (buffer[4] & 0x80) return false
  if (lenR > 1 && (buffer[4] === 0x00) && !(buffer[5] & 0x80)) return false

  if (buffer[lenR + 6] & 0x80) return false
  if (lenS > 1 && (buffer[lenR + 6] === 0x00) && !(buffer[lenR + 7] & 0x80)) return false
  return true
}

function decode (buffer) {
  if (buffer.length < 8) throw new Error('DER sequence length is too short')
  if (buffer.length > 72) throw new Error('DER sequence length is too long')
  if (buffer[0] !== 0x30) throw new Error('Expected DER sequence')
  if (buffer[1] !== buffer.length - 2) throw new Error('DER sequence length is invalid')
  if (buffer[2] !== 0x02) throw new Error('Expected DER integer')

  var lenR = buffer[3]
  if (lenR === 0) throw new Error('R length is zero')
  if (5 + lenR >= buffer.length) throw new Error('R length is too long')
  if (buffer[4 + lenR] !== 0x02) throw new Error('Expected DER integer (2)')

  var lenS = buffer[5 + lenR]
  if (lenS === 0) throw new Error('S length is zero')
  if ((6 + lenR + lenS) !== buffer.length) throw new Error('S length is invalid')

  if (buffer[4] & 0x80) throw new Error('R value is negative')
  if (lenR > 1 && (buffer[4] === 0x00) && !(buffer[5] & 0x80)) throw new Error('R value excessively padded')

  if (buffer[lenR + 6] & 0x80) throw new Error('S value is negative')
  if (lenS > 1 && (buffer[lenR + 6] === 0x00) && !(buffer[lenR + 7] & 0x80)) throw new Error('S value excessively padded')

  // non-BIP66 - extract R, S values
  return {
    r: buffer.slice(4, 4 + lenR),
    s: buffer.slice(6 + lenR)
  }
}

/*
 * Expects r and s to be positive DER integers.
 *
 * The DER format uses the most significant bit as a sign bit (& 0x80).
 * If the significant bit is set AND the integer is positive, a 0x00 is prepended.
 *
 * Examples:
 *
 *      0 =>     0x00
 *      1 =>     0x01
 *     -1 =>     0xff
 *    127 =>     0x7f
 *   -127 =>     0x81
 *    128 =>   0x0080
 *   -128 =>     0x80
 *    255 =>   0x00ff
 *   -255 =>   0xff01
 *  16300 =>   0x3fac
 * -16300 =>   0xc054
 *  62300 => 0x00f35c
 * -62300 => 0xff0ca4
*/
function encode (r, s) {
  var lenR = r.length
  var lenS = s.length
  if (lenR === 0) throw new Error('R length is zero')
  if (lenS === 0) throw new Error('S length is zero')
  if (lenR > 33) throw new Error('R length is too long')
  if (lenS > 33) throw new Error('S length is too long')
  if (r[0] & 0x80) throw new Error('R value is negative')
  if (s[0] & 0x80) throw new Error('S value is negative')
  if (lenR > 1 && (r[0] === 0x00) && !(r[1] & 0x80)) throw new Error('R value excessively padded')
  if (lenS > 1 && (s[0] === 0x00) && !(s[1] & 0x80)) throw new Error('S value excessively padded')

  var signature = Buffer.allocUnsafe(6 + lenR + lenS)

  // 0x30 [total-length] 0x02 [R-length] [R] 0x02 [S-length] [S]
  signature[0] = 0x30
  signature[1] = signature.length - 2
  signature[2] = 0x02
  signature[3] = r.length
  r.copy(signature, 4)
  signature[4 + lenR] = 0x02
  signature[5 + lenR] = s.length
  s.copy(signature, 6 + lenR)

  return signature
}

module.exports = {
  check: check,
  decode: decode,
  encode: encode
}

},{"safe-buffer":126}],58:[function(require,module,exports){
module.exports={
  "OP_FALSE": 0,
  "OP_0": 0,
  "OP_PUSHDATA1": 76,
  "OP_PUSHDATA2": 77,
  "OP_PUSHDATA4": 78,
  "OP_1NEGATE": 79,
  "OP_RESERVED": 80,
  "OP_TRUE": 81,
  "OP_1": 81,
  "OP_2": 82,
  "OP_3": 83,
  "OP_4": 84,
  "OP_5": 85,
  "OP_6": 86,
  "OP_7": 87,
  "OP_8": 88,
  "OP_9": 89,
  "OP_10": 90,
  "OP_11": 91,
  "OP_12": 92,
  "OP_13": 93,
  "OP_14": 94,
  "OP_15": 95,
  "OP_16": 96,

  "OP_NOP": 97,
  "OP_VER": 98,
  "OP_IF": 99,
  "OP_NOTIF": 100,
  "OP_VERIF": 101,
  "OP_VERNOTIF": 102,
  "OP_ELSE": 103,
  "OP_ENDIF": 104,
  "OP_VERIFY": 105,
  "OP_RETURN": 106,

  "OP_TOALTSTACK": 107,
  "OP_FROMALTSTACK": 108,
  "OP_2DROP": 109,
  "OP_2DUP": 110,
  "OP_3DUP": 111,
  "OP_2OVER": 112,
  "OP_2ROT": 113,
  "OP_2SWAP": 114,
  "OP_IFDUP": 115,
  "OP_DEPTH": 116,
  "OP_DROP": 117,
  "OP_DUP": 118,
  "OP_NIP": 119,
  "OP_OVER": 120,
  "OP_PICK": 121,
  "OP_ROLL": 122,
  "OP_ROT": 123,
  "OP_SWAP": 124,
  "OP_TUCK": 125,

  "OP_CAT": 126,
  "OP_SUBSTR": 127,
  "OP_LEFT": 128,
  "OP_RIGHT": 129,
  "OP_SIZE": 130,

  "OP_INVERT": 131,
  "OP_AND": 132,
  "OP_OR": 133,
  "OP_XOR": 134,
  "OP_EQUAL": 135,
  "OP_EQUALVERIFY": 136,
  "OP_RESERVED1": 137,
  "OP_RESERVED2": 138,

  "OP_1ADD": 139,
  "OP_1SUB": 140,
  "OP_2MUL": 141,
  "OP_2DIV": 142,
  "OP_NEGATE": 143,
  "OP_ABS": 144,
  "OP_NOT": 145,
  "OP_0NOTEQUAL": 146,
  "OP_ADD": 147,
  "OP_SUB": 148,
  "OP_MUL": 149,
  "OP_DIV": 150,
  "OP_MOD": 151,
  "OP_LSHIFT": 152,
  "OP_RSHIFT": 153,

  "OP_BOOLAND": 154,
  "OP_BOOLOR": 155,
  "OP_NUMEQUAL": 156,
  "OP_NUMEQUALVERIFY": 157,
  "OP_NUMNOTEQUAL": 158,
  "OP_LESSTHAN": 159,
  "OP_GREATERTHAN": 160,
  "OP_LESSTHANOREQUAL": 161,
  "OP_GREATERTHANOREQUAL": 162,
  "OP_MIN": 163,
  "OP_MAX": 164,

  "OP_WITHIN": 165,

  "OP_RIPEMD160": 166,
  "OP_SHA1": 167,
  "OP_SHA256": 168,
  "OP_HASH160": 169,
  "OP_HASH256": 170,
  "OP_CODESEPARATOR": 171,
  "OP_CHECKSIG": 172,
  "OP_CHECKSIGVERIFY": 173,
  "OP_CHECKMULTISIG": 174,
  "OP_CHECKMULTISIGVERIFY": 175,

  "OP_NOP1": 176,
  
  "OP_NOP2": 177,
  "OP_CHECKLOCKTIMEVERIFY": 177,

  "OP_NOP3": 178,
  "OP_CHECKSEQUENCEVERIFY": 178,
  
  "OP_NOP4": 179,
  "OP_NOP5": 180,
  "OP_NOP6": 181,
  "OP_NOP7": 182,
  "OP_NOP8": 183,
  "OP_NOP9": 184,
  "OP_NOP10": 185,

  "OP_PUBKEYHASH": 253,
  "OP_PUBKEY": 254,
  "OP_INVALIDOPCODE": 255
}

},{}],59:[function(require,module,exports){
var OPS = require('./index.json')

var map = {}
for (var op in OPS) {
  var code = OPS[op]
  map[code] = op
}

module.exports = map

},{"./index.json":58}],60:[function(require,module,exports){
(function (Buffer){(function (){
const Module = require('../src/blech32')();

module.exports = { encode, decode };

function encode(hrp, words, witVer = 0) {
  if (hrp !== 'el' && hrp !== 'lq') {
    throw new Error('Invalid prefix');
  }
  if (!Buffer.isBuffer(words) || words.length === 0) {
    throw new Error('Invalid words');
  }

  const res = malloc(1001);
  const res_len = malloc(4);

  const ret = Module.ccall(
    'addr_encode',
    'number',
    ['number', 'number', 'number', 'number', 'number', 'number'],
    [res, res_len, stringStar(hrp), witVer, charStar(words), words.length]
  );
  if (ret === 1) {
    const address = new Uint8Array(
      Module.HEAPU8.subarray(res, res + Module.getValue(res_len, 'i32'))
    );
    freeMalloc();
    return Buffer.from(address).toString();
  } else {
    freeMalloc();
    throw new Error('encode', ret);
  }
}

function decode(hrp, address) {
  if (hrp !== 'el' && hrp !== 'lq') {
    throw new Error('Invalid prefix');
  }
  if (typeof address !== 'string' || !address.length) {
    throw new Error('Invalid address');
  }
  const witVer = malloc(4);
  const program = malloc(1000);
  const programLen = malloc(8);
  const ret = Module.ccall(
    'addr_decode',
    'number',
    ['number', 'number', 'number', 'number', 'number'],
    [witVer, program, programLen, stringStar(hrp), stringStar(address)]
  );
  if (ret === 1) {
    const version = Module.getValue(witVer, 'i32');
    const words = Buffer.from(
      new Uint8Array(
        Module.HEAPU8.subarray(
          program,
          program + Module.getValue(programLen, 'i64')
        )
      )
    );
    freeMalloc();
    return { version, words };
  } else {
    freeMalloc();
    throw new Error('decode', ret);
  }
}

function charStar(buf) {
  const ptr = malloc(buf.length);
  for (let i = 0; i < buf.length; i++) {
    Module.setValue(ptr + i, buf[i], 'i8');
  }
  return ptr;
}

function stringStar(str) {
  return Module.allocate(
    Module.intArrayFromString(str),
    'i8',
    Module.ALLOC_NORMAL
  );
}

let free = [];

function malloc(size) {
  const ptr = Module._malloc(size);
  free.push(ptr);
  return ptr;
}

function freeMalloc() {
  for (const ptr of free) {
    Module._free(ptr);
  }
  free = [];
}

}).call(this)}).call(this,require("buffer").Buffer)
},{"../src/blech32":61,"buffer":4}],61:[function(require,module,exports){
(function (process,Buffer){(function (){

var Module = (function() {
  var _scriptDir = typeof document !== 'undefined' && document.currentScript ? document.currentScript.src : undefined;
  return (
function(Module) {
  Module = Module || {};

var Module=typeof Module!=="undefined"?Module:{};var moduleOverrides={};var key;for(key in Module){if(Module.hasOwnProperty(key)){moduleOverrides[key]=Module[key]}}Module["arguments"]=[];Module["thisProgram"]="./this.program";Module["quit"]=(function(status,toThrow){throw toThrow});Module["preRun"]=[];Module["postRun"]=[];var ENVIRONMENT_IS_WEB=true;var ENVIRONMENT_IS_WORKER=false;var ENVIRONMENT_IS_NODE=false;var ENVIRONMENT_IS_SHELL=false;var scriptDirectory="";function locateFile(path){if(Module["locateFile"]){return Module["locateFile"](path,scriptDirectory)}else{return scriptDirectory+path}}if(ENVIRONMENT_IS_WEB||ENVIRONMENT_IS_WORKER){if(ENVIRONMENT_IS_WEB){if(document.currentScript){scriptDirectory=document.currentScript.src}}else{scriptDirectory=self.location.href}if(_scriptDir){scriptDirectory=_scriptDir}if(scriptDirectory.indexOf("blob:")!==0){scriptDirectory=scriptDirectory.split("/").slice(0,-1).join("/")+"/"}else{scriptDirectory=""}Module["read"]=function shell_read(url){try{var xhr=new XMLHttpRequest;xhr.open("GET",url,false);xhr.send(null);return xhr.responseText}catch(err){var data=tryParseAsDataURI(url);if(data){return intArrayToString(data)}throw err}};if(ENVIRONMENT_IS_WORKER){Module["readBinary"]=function readBinary(url){try{var xhr=new XMLHttpRequest;xhr.open("GET",url,false);xhr.responseType="arraybuffer";xhr.send(null);return new Uint8Array(xhr.response)}catch(err){var data=tryParseAsDataURI(url);if(data){return data}throw err}}}Module["readAsync"]=function readAsync(url,onload,onerror){var xhr=new XMLHttpRequest;xhr.open("GET",url,true);xhr.responseType="arraybuffer";xhr.onload=function xhr_onload(){if(xhr.status==200||xhr.status==0&&xhr.response){onload(xhr.response);return}var data=tryParseAsDataURI(url);if(data){onload(data.buffer);return}onerror()};xhr.onerror=onerror;xhr.send(null)};Module["setWindowTitle"]=(function(title){document.title=title})}else{}var out=Module["print"]||(typeof console!=="undefined"?console.log.bind(console):typeof print!=="undefined"?print:null);var err=Module["printErr"]||(typeof printErr!=="undefined"?printErr:typeof console!=="undefined"&&console.warn.bind(console)||out);for(key in moduleOverrides){if(moduleOverrides.hasOwnProperty(key)){Module[key]=moduleOverrides[key]}}moduleOverrides=undefined;var STACK_ALIGN=16;function staticAlloc(size){var ret=STATICTOP;STATICTOP=STATICTOP+size+15&-16;return ret}function dynamicAlloc(size){var ret=HEAP32[DYNAMICTOP_PTR>>2];var end=ret+size+15&-16;HEAP32[DYNAMICTOP_PTR>>2]=end;if(end>=TOTAL_MEMORY){var success=enlargeMemory();if(!success){HEAP32[DYNAMICTOP_PTR>>2]=ret;return 0}}return ret}function alignMemory(size,factor){if(!factor)factor=STACK_ALIGN;var ret=size=Math.ceil(size/factor)*factor;return ret}function getNativeTypeSize(type){switch(type){case"i1":case"i8":return 1;case"i16":return 2;case"i32":return 4;case"i64":return 8;case"float":return 4;case"double":return 8;default:{if(type[type.length-1]==="*"){return 4}else if(type[0]==="i"){var bits=parseInt(type.substr(1));assert(bits%8===0);return bits/8}else{return 0}}}}function warnOnce(text){if(!warnOnce.shown)warnOnce.shown={};if(!warnOnce.shown[text]){warnOnce.shown[text]=1;err(text)}}var jsCallStartIndex=1;var functionPointers=new Array(0);var funcWrappers={};function dynCall(sig,ptr,args){if(args&&args.length){return Module["dynCall_"+sig].apply(null,[ptr].concat(args))}else{return Module["dynCall_"+sig].call(null,ptr)}}var GLOBAL_BASE=8;var ABORT=0;var EXITSTATUS=0;function assert(condition,text){if(!condition){abort("Assertion failed: "+text)}}function getCFunc(ident){var func=Module["_"+ident];assert(func,"Cannot call unknown function "+ident+", make sure it is exported");return func}var JSfuncs={"stackSave":(function(){stackSave()}),"stackRestore":(function(){stackRestore()}),"arrayToC":(function(arr){var ret=stackAlloc(arr.length);writeArrayToMemory(arr,ret);return ret}),"stringToC":(function(str){var ret=0;if(str!==null&&str!==undefined&&str!==0){var len=(str.length<<2)+1;ret=stackAlloc(len);stringToUTF8(str,ret,len)}return ret})};var toC={"string":JSfuncs["stringToC"],"array":JSfuncs["arrayToC"]};function ccall(ident,returnType,argTypes,args,opts){function convertReturnValue(ret){if(returnType==="string")return Pointer_stringify(ret);if(returnType==="boolean")return Boolean(ret);return ret}var func=getCFunc(ident);var cArgs=[];var stack=0;if(args){for(var i=0;i<args.length;i++){var converter=toC[argTypes[i]];if(converter){if(stack===0)stack=stackSave();cArgs[i]=converter(args[i])}else{cArgs[i]=args[i]}}}var ret=func.apply(null,cArgs);ret=convertReturnValue(ret);if(stack!==0)stackRestore(stack);return ret}function cwrap(ident,returnType,argTypes,opts){argTypes=argTypes||[];var numericArgs=argTypes.every((function(type){return type==="number"}));var numericRet=returnType!=="string";if(numericRet&&numericArgs&&!opts){return getCFunc(ident)}return(function(){return ccall(ident,returnType,argTypes,arguments,opts)})}function setValue(ptr,value,type,noSafe){type=type||"i8";if(type.charAt(type.length-1)==="*")type="i32";switch(type){case"i1":HEAP8[ptr>>0]=value;break;case"i8":HEAP8[ptr>>0]=value;break;case"i16":HEAP16[ptr>>1]=value;break;case"i32":HEAP32[ptr>>2]=value;break;case"i64":tempI64=[value>>>0,(tempDouble=value,+Math_abs(tempDouble)>=+1?tempDouble>+0?(Math_min(+Math_floor(tempDouble/+4294967296),+4294967295)|0)>>>0:~~+Math_ceil((tempDouble- +(~~tempDouble>>>0))/+4294967296)>>>0:0)],HEAP32[ptr>>2]=tempI64[0],HEAP32[ptr+4>>2]=tempI64[1];break;case"float":HEAPF32[ptr>>2]=value;break;case"double":HEAPF64[ptr>>3]=value;break;default:abort("invalid type for setValue: "+type)}}function getValue(ptr,type,noSafe){type=type||"i8";if(type.charAt(type.length-1)==="*")type="i32";switch(type){case"i1":return HEAP8[ptr>>0];case"i8":return HEAP8[ptr>>0];case"i16":return HEAP16[ptr>>1];case"i32":return HEAP32[ptr>>2];case"i64":return HEAP32[ptr>>2];case"float":return HEAPF32[ptr>>2];case"double":return HEAPF64[ptr>>3];default:abort("invalid type for getValue: "+type)}return null}var ALLOC_NORMAL=0;var ALLOC_STATIC=2;var ALLOC_NONE=4;function allocate(slab,types,allocator,ptr){var zeroinit,size;if(typeof slab==="number"){zeroinit=true;size=slab}else{zeroinit=false;size=slab.length}var singleType=typeof types==="string"?types:null;var ret;if(allocator==ALLOC_NONE){ret=ptr}else{ret=[typeof _malloc==="function"?_malloc:staticAlloc,stackAlloc,staticAlloc,dynamicAlloc][allocator===undefined?ALLOC_STATIC:allocator](Math.max(size,singleType?1:types.length))}if(zeroinit){var stop;ptr=ret;assert((ret&3)==0);stop=ret+(size&~3);for(;ptr<stop;ptr+=4){HEAP32[ptr>>2]=0}stop=ret+size;while(ptr<stop){HEAP8[ptr++>>0]=0}return ret}if(singleType==="i8"){if(slab.subarray||slab.slice){HEAPU8.set(slab,ret)}else{HEAPU8.set(new Uint8Array(slab),ret)}return ret}var i=0,type,typeSize,previousType;while(i<size){var curr=slab[i];type=singleType||types[i];if(type===0){i++;continue}if(type=="i64")type="i32";setValue(ret+i,curr,type);if(previousType!==type){typeSize=getNativeTypeSize(type);previousType=type}i+=typeSize}return ret}function Pointer_stringify(ptr,length){if(length===0||!ptr)return"";var hasUtf=0;var t;var i=0;while(1){t=HEAPU8[ptr+i>>0];hasUtf|=t;if(t==0&&!length)break;i++;if(length&&i==length)break}if(!length)length=i;var ret="";if(hasUtf<128){var MAX_CHUNK=1024;var curr;while(length>0){curr=String.fromCharCode.apply(String,HEAPU8.subarray(ptr,ptr+Math.min(length,MAX_CHUNK)));ret=ret?ret+curr:curr;ptr+=MAX_CHUNK;length-=MAX_CHUNK}return ret}return UTF8ToString(ptr)}var UTF8Decoder=typeof TextDecoder!=="undefined"?new TextDecoder("utf8"):undefined;function UTF8ArrayToString(u8Array,idx){var endPtr=idx;while(u8Array[endPtr])++endPtr;if(endPtr-idx>16&&u8Array.subarray&&UTF8Decoder){return UTF8Decoder.decode(u8Array.subarray(idx,endPtr))}else{var u0,u1,u2,u3,u4,u5;var str="";while(1){u0=u8Array[idx++];if(!u0)return str;if(!(u0&128)){str+=String.fromCharCode(u0);continue}u1=u8Array[idx++]&63;if((u0&224)==192){str+=String.fromCharCode((u0&31)<<6|u1);continue}u2=u8Array[idx++]&63;if((u0&240)==224){u0=(u0&15)<<12|u1<<6|u2}else{u3=u8Array[idx++]&63;if((u0&248)==240){u0=(u0&7)<<18|u1<<12|u2<<6|u3}else{u4=u8Array[idx++]&63;if((u0&252)==248){u0=(u0&3)<<24|u1<<18|u2<<12|u3<<6|u4}else{u5=u8Array[idx++]&63;u0=(u0&1)<<30|u1<<24|u2<<18|u3<<12|u4<<6|u5}}}if(u0<65536){str+=String.fromCharCode(u0)}else{var ch=u0-65536;str+=String.fromCharCode(55296|ch>>10,56320|ch&1023)}}}}function UTF8ToString(ptr){return UTF8ArrayToString(HEAPU8,ptr)}function stringToUTF8Array(str,outU8Array,outIdx,maxBytesToWrite){if(!(maxBytesToWrite>0))return 0;var startIdx=outIdx;var endIdx=outIdx+maxBytesToWrite-1;for(var i=0;i<str.length;++i){var u=str.charCodeAt(i);if(u>=55296&&u<=57343){var u1=str.charCodeAt(++i);u=65536+((u&1023)<<10)|u1&1023}if(u<=127){if(outIdx>=endIdx)break;outU8Array[outIdx++]=u}else if(u<=2047){if(outIdx+1>=endIdx)break;outU8Array[outIdx++]=192|u>>6;outU8Array[outIdx++]=128|u&63}else if(u<=65535){if(outIdx+2>=endIdx)break;outU8Array[outIdx++]=224|u>>12;outU8Array[outIdx++]=128|u>>6&63;outU8Array[outIdx++]=128|u&63}else if(u<=2097151){if(outIdx+3>=endIdx)break;outU8Array[outIdx++]=240|u>>18;outU8Array[outIdx++]=128|u>>12&63;outU8Array[outIdx++]=128|u>>6&63;outU8Array[outIdx++]=128|u&63}else if(u<=67108863){if(outIdx+4>=endIdx)break;outU8Array[outIdx++]=248|u>>24;outU8Array[outIdx++]=128|u>>18&63;outU8Array[outIdx++]=128|u>>12&63;outU8Array[outIdx++]=128|u>>6&63;outU8Array[outIdx++]=128|u&63}else{if(outIdx+5>=endIdx)break;outU8Array[outIdx++]=252|u>>30;outU8Array[outIdx++]=128|u>>24&63;outU8Array[outIdx++]=128|u>>18&63;outU8Array[outIdx++]=128|u>>12&63;outU8Array[outIdx++]=128|u>>6&63;outU8Array[outIdx++]=128|u&63}}outU8Array[outIdx]=0;return outIdx-startIdx}function stringToUTF8(str,outPtr,maxBytesToWrite){return stringToUTF8Array(str,HEAPU8,outPtr,maxBytesToWrite)}function lengthBytesUTF8(str){var len=0;for(var i=0;i<str.length;++i){var u=str.charCodeAt(i);if(u>=55296&&u<=57343)u=65536+((u&1023)<<10)|str.charCodeAt(++i)&1023;if(u<=127){++len}else if(u<=2047){len+=2}else if(u<=65535){len+=3}else if(u<=2097151){len+=4}else if(u<=67108863){len+=5}else{len+=6}}return len}var UTF16Decoder=typeof TextDecoder!=="undefined"?new TextDecoder("utf-16le"):undefined;function allocateUTF8(str){var size=lengthBytesUTF8(str)+1;var ret=_malloc(size);if(ret)stringToUTF8Array(str,HEAP8,ret,size);return ret}function demangle(func){return func}function demangleAll(text){var regex=/__Z[\w\d_]+/g;return text.replace(regex,(function(x){var y=demangle(x);return x===y?x:x+" ["+y+"]"}))}function jsStackTrace(){var err=new Error;if(!err.stack){try{throw new Error(0)}catch(e){err=e}if(!err.stack){return"(no stack trace available)"}}return err.stack.toString()}var PAGE_SIZE=16384;var buffer,HEAP8,HEAPU8,HEAP16,HEAPU16,HEAP32,HEAPU32,HEAPF32,HEAPF64;function updateGlobalBufferViews(){Module["HEAP8"]=HEAP8=new Int8Array(buffer);Module["HEAP16"]=HEAP16=new Int16Array(buffer);Module["HEAP32"]=HEAP32=new Int32Array(buffer);Module["HEAPU8"]=HEAPU8=new Uint8Array(buffer);Module["HEAPU16"]=HEAPU16=new Uint16Array(buffer);Module["HEAPU32"]=HEAPU32=new Uint32Array(buffer);Module["HEAPF32"]=HEAPF32=new Float32Array(buffer);Module["HEAPF64"]=HEAPF64=new Float64Array(buffer)}var STATIC_BASE,STATICTOP,staticSealed;var STACK_BASE,STACKTOP,STACK_MAX;var DYNAMIC_BASE,DYNAMICTOP_PTR;STATIC_BASE=STATICTOP=STACK_BASE=STACKTOP=STACK_MAX=DYNAMIC_BASE=DYNAMICTOP_PTR=0;staticSealed=false;function abortOnCannotGrowMemory(){abort("Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value "+TOTAL_MEMORY+", (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or (4) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ")}function enlargeMemory(){abortOnCannotGrowMemory()}var TOTAL_STACK=Module["TOTAL_STACK"]||5242880;var TOTAL_MEMORY=Module["TOTAL_MEMORY"]||16777216;if(TOTAL_MEMORY<TOTAL_STACK)err("TOTAL_MEMORY should be larger than TOTAL_STACK, was "+TOTAL_MEMORY+"! (TOTAL_STACK="+TOTAL_STACK+")");if(Module["buffer"]){buffer=Module["buffer"]}else{{buffer=new ArrayBuffer(TOTAL_MEMORY)}Module["buffer"]=buffer}updateGlobalBufferViews();function getTotalMemory(){return TOTAL_MEMORY}function callRuntimeCallbacks(callbacks){while(callbacks.length>0){var callback=callbacks.shift();if(typeof callback=="function"){callback();continue}var func=callback.func;if(typeof func==="number"){if(callback.arg===undefined){Module["dynCall_v"](func)}else{Module["dynCall_vi"](func,callback.arg)}}else{func(callback.arg===undefined?null:callback.arg)}}}var __ATPRERUN__=[];var __ATINIT__=[];var __ATMAIN__=[];var __ATEXIT__=[];var __ATPOSTRUN__=[];var runtimeInitialized=false;var runtimeExited=false;function preRun(){if(Module["preRun"]){if(typeof Module["preRun"]=="function")Module["preRun"]=[Module["preRun"]];while(Module["preRun"].length){addOnPreRun(Module["preRun"].shift())}}callRuntimeCallbacks(__ATPRERUN__)}function ensureInitRuntime(){if(runtimeInitialized)return;runtimeInitialized=true;callRuntimeCallbacks(__ATINIT__)}function preMain(){callRuntimeCallbacks(__ATMAIN__)}function exitRuntime(){callRuntimeCallbacks(__ATEXIT__);runtimeExited=true}function postRun(){if(Module["postRun"]){if(typeof Module["postRun"]=="function")Module["postRun"]=[Module["postRun"]];while(Module["postRun"].length){addOnPostRun(Module["postRun"].shift())}}callRuntimeCallbacks(__ATPOSTRUN__)}function addOnPreRun(cb){__ATPRERUN__.unshift(cb)}function addOnPostRun(cb){__ATPOSTRUN__.unshift(cb)}function writeArrayToMemory(array,buffer){HEAP8.set(array,buffer)}function writeAsciiToMemory(str,buffer,dontAddNull){for(var i=0;i<str.length;++i){HEAP8[buffer++>>0]=str.charCodeAt(i)}if(!dontAddNull)HEAP8[buffer>>0]=0}var Math_abs=Math.abs;var Math_ceil=Math.ceil;var Math_floor=Math.floor;var Math_min=Math.min;var runDependencies=0;var runDependencyWatcher=null;var dependenciesFulfilled=null;function addRunDependency(id){runDependencies++;if(Module["monitorRunDependencies"]){Module["monitorRunDependencies"](runDependencies)}}function removeRunDependency(id){runDependencies--;if(Module["monitorRunDependencies"]){Module["monitorRunDependencies"](runDependencies)}if(runDependencies==0){if(runDependencyWatcher!==null){clearInterval(runDependencyWatcher);runDependencyWatcher=null}if(dependenciesFulfilled){var callback=dependenciesFulfilled;dependenciesFulfilled=null;callback()}}}Module["preloadedImages"]={};Module["preloadedAudios"]={};var memoryInitializer=null;var dataURIPrefix="data:application/octet-stream;base64,";function isDataURI(filename){return String.prototype.startsWith?filename.startsWith(dataURIPrefix):filename.indexOf(dataURIPrefix)===0}STATIC_BASE=GLOBAL_BASE;STATICTOP=STATIC_BASE+172416;__ATINIT__.push();memoryInitializer="data:application/octet-stream;base64,";var tempDoublePtr=STATICTOP;STATICTOP+=16;function ___block_all_sigs(){err("missing function: __block_all_sigs");abort(-1)}Module["___block_all_sigs"]=___block_all_sigs;function _emscripten_get_now(){abort()}Module["_emscripten_get_now"]=_emscripten_get_now;function _emscripten_get_now_is_monotonic(){return ENVIRONMENT_IS_NODE||typeof dateNow!=="undefined"||(ENVIRONMENT_IS_WEB||ENVIRONMENT_IS_WORKER)&&self["performance"]&&self["performance"]["now"]}Module["_emscripten_get_now_is_monotonic"]=_emscripten_get_now_is_monotonic;var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};Module["ERRNO_CODES"]=ERRNO_CODES;function ___setErrNo(value){if(Module["___errno_location"])HEAP32[Module["___errno_location"]()>>2]=value;return value}Module["___setErrNo"]=___setErrNo;function _clock_gettime(clk_id,tp){var now;if(clk_id===0){now=Date.now()}else if(clk_id===1&&_emscripten_get_now_is_monotonic()){now=_emscripten_get_now()}else{___setErrNo(ERRNO_CODES.EINVAL);return-1}HEAP32[tp>>2]=now/1e3|0;HEAP32[tp+4>>2]=now%1e3*1e3*1e3|0;return 0}Module["_clock_gettime"]=_clock_gettime;function ___clock_gettime(){return _clock_gettime.apply(null,arguments)}Module["___clock_gettime"]=___clock_gettime;function ___clone(){err("missing function: __clone");abort(-1)}Module["___clone"]=___clone;function ___lock(){}Module["___lock"]=___lock;function ___map_file(pathname,size){___setErrNo(ERRNO_CODES.EPERM);return-1}Module["___map_file"]=___map_file;function ___muldc3(){err("missing function: __muldc3");abort(-1)}Module["___muldc3"]=___muldc3;function ___mulsc3(){err("missing function: __mulsc3");abort(-1)}Module["___mulsc3"]=___mulsc3;function ___restore_sigs(){err("missing function: __restore_sigs");abort(-1)}Module["___restore_sigs"]=___restore_sigs;var SYSCALLS={varargs:0,get:(function(varargs){SYSCALLS.varargs+=4;var ret=HEAP32[SYSCALLS.varargs-4>>2];return ret}),getStr:(function(){var ret=Pointer_stringify(SYSCALLS.get());return ret}),get64:(function(){var low=SYSCALLS.get(),high=SYSCALLS.get();if(low>=0)assert(high===0);else assert(high===-1);return low}),getZero:(function(){assert(SYSCALLS.get()===0)})};Module["SYSCALLS"]=SYSCALLS;function ___syscall1(which,varargs){SYSCALLS.varargs=varargs;try{var status=SYSCALLS.get();exit(status);return 0}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}Module["___syscall1"]=___syscall1;function ___syscall10(which,varargs){SYSCALLS.varargs=varargs;try{var path=SYSCALLS.getStr();FS.unlink(path);return 0}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}Module["___syscall10"]=___syscall10;var SOCKFS=undefined;Module["SOCKFS"]=SOCKFS;function __inet_pton4_raw(str){var b=str.split(".");for(var i=0;i<4;i++){var tmp=Number(b[i]);if(isNaN(tmp))return null;b[i]=tmp}return(b[0]|b[1]<<8|b[2]<<16|b[3]<<24)>>>0}Module["__inet_pton4_raw"]=__inet_pton4_raw;function __inet_pton6_raw(str){var words;var w,offset,z;var valid6regx=/^((?=.*::)(?!.*::.+::)(::)?([\dA-F]{1,4}:(:|\b)|){5}|([\dA-F]{1,4}:){6})((([\dA-F]{1,4}((?!\3)::|:\b|$))|(?!\2\3)){2}|(((2[0-4]|1\d|[1-9])?\d|25[0-5])\.?\b){4})$/i;var parts=[];if(!valid6regx.test(str)){return null}if(str==="::"){return[0,0,0,0,0,0,0,0]}if(str.indexOf("::")===0){str=str.replace("::","Z:")}else{str=str.replace("::",":Z:")}if(str.indexOf(".")>0){str=str.replace(new RegExp("[.]","g"),":");words=str.split(":");words[words.length-4]=parseInt(words[words.length-4])+parseInt(words[words.length-3])*256;words[words.length-3]=parseInt(words[words.length-2])+parseInt(words[words.length-1])*256;words=words.slice(0,words.length-2)}else{words=str.split(":")}offset=0;z=0;for(w=0;w<words.length;w++){if(typeof words[w]==="string"){if(words[w]==="Z"){for(z=0;z<8-words.length+1;z++){parts[w+z]=0}offset=z-1}else{parts[w+offset]=_htons(parseInt(words[w],16))}}else{parts[w+offset]=words[w]}}return[parts[1]<<16|parts[0],parts[3]<<16|parts[2],parts[5]<<16|parts[4],parts[7]<<16|parts[6]]}Module["__inet_pton6_raw"]=__inet_pton6_raw;var DNS={address_map:{id:1,addrs:{},names:{}},lookup_name:(function(name){var res=__inet_pton4_raw(name);if(res!==null){return name}res=__inet_pton6_raw(name);if(res!==null){return name}var addr;if(DNS.address_map.addrs[name]){addr=DNS.address_map.addrs[name]}else{var id=DNS.address_map.id++;assert(id<65535,"exceeded max address mappings of 65535");addr="172.29."+(id&255)+"."+(id&65280);DNS.address_map.names[addr]=name;DNS.address_map.addrs[name]=addr}return addr}),lookup_addr:(function(addr){if(DNS.address_map.names[addr]){return DNS.address_map.names[addr]}return null})};Module["DNS"]=DNS;var Sockets={BUFFER_SIZE:10240,MAX_BUFFER_SIZE:10485760,nextFd:1,fds:{},nextport:1,maxport:65535,peer:null,connections:{},portmap:{},localAddr:4261412874,addrPool:[33554442,50331658,67108874,83886090,100663306,117440522,134217738,150994954,167772170,184549386,201326602,218103818,234881034]};Module["Sockets"]=Sockets;function __inet_ntop4_raw(addr){return(addr&255)+"."+(addr>>8&255)+"."+(addr>>16&255)+"."+(addr>>24&255)}Module["__inet_ntop4_raw"]=__inet_ntop4_raw;function __inet_ntop6_raw(ints){var str="";var word=0;var longest=0;var lastzero=0;var zstart=0;var len=0;var i=0;var parts=[ints[0]&65535,ints[0]>>16,ints[1]&65535,ints[1]>>16,ints[2]&65535,ints[2]>>16,ints[3]&65535,ints[3]>>16];var hasipv4=true;var v4part="";for(i=0;i<5;i++){if(parts[i]!==0){hasipv4=false;break}}if(hasipv4){v4part=__inet_ntop4_raw(parts[6]|parts[7]<<16);if(parts[5]===-1){str="::ffff:";str+=v4part;return str}if(parts[5]===0){str="::";if(v4part==="0.0.0.0")v4part="";if(v4part==="0.0.0.1")v4part="1";str+=v4part;return str}}for(word=0;word<8;word++){if(parts[word]===0){if(word-lastzero>1){len=0}lastzero=word;len++}if(len>longest){longest=len;zstart=word-longest+1}}for(word=0;word<8;word++){if(longest>1){if(parts[word]===0&&word>=zstart&&word<zstart+longest){if(word===zstart){str+=":";if(zstart===0)str+=":"}continue}}str+=Number(_ntohs(parts[word]&65535)).toString(16);str+=word<7?":":""}return str}Module["__inet_ntop6_raw"]=__inet_ntop6_raw;function __read_sockaddr(sa,salen){var family=HEAP16[sa>>1];var port=_ntohs(HEAP16[sa+2>>1]);var addr;switch(family){case 2:if(salen!==16){return{errno:ERRNO_CODES.EINVAL}}addr=HEAP32[sa+4>>2];addr=__inet_ntop4_raw(addr);break;case 10:if(salen!==28){return{errno:ERRNO_CODES.EINVAL}}addr=[HEAP32[sa+8>>2],HEAP32[sa+12>>2],HEAP32[sa+16>>2],HEAP32[sa+20>>2]];addr=__inet_ntop6_raw(addr);break;default:return{errno:ERRNO_CODES.EAFNOSUPPORT}}return{family:family,addr:addr,port:port}}Module["__read_sockaddr"]=__read_sockaddr;function __write_sockaddr(sa,family,addr,port){switch(family){case 2:addr=__inet_pton4_raw(addr);HEAP16[sa>>1]=family;HEAP32[sa+4>>2]=addr;HEAP16[sa+2>>1]=_htons(port);break;case 10:addr=__inet_pton6_raw(addr);HEAP32[sa>>2]=family;HEAP32[sa+8>>2]=addr[0];HEAP32[sa+12>>2]=addr[1];HEAP32[sa+16>>2]=addr[2];HEAP32[sa+20>>2]=addr[3];HEAP16[sa+2>>1]=_htons(port);HEAP32[sa+4>>2]=0;HEAP32[sa+24>>2]=0;break;default:return{errno:ERRNO_CODES.EAFNOSUPPORT}}return{}}Module["__write_sockaddr"]=__write_sockaddr;function ___syscall102(which,varargs){SYSCALLS.varargs=varargs;try{var call=SYSCALLS.get(),socketvararg=SYSCALLS.get();SYSCALLS.varargs=socketvararg;switch(call){case 1:{var domain=SYSCALLS.get(),type=SYSCALLS.get(),protocol=SYSCALLS.get();var sock=SOCKFS.createSocket(domain,type,protocol);assert(sock.stream.fd<64);return sock.stream.fd};case 2:{var sock=SYSCALLS.getSocketFromFD(),info=SYSCALLS.getSocketAddress();sock.sock_ops.bind(sock,info.addr,info.port);return 0};case 3:{var sock=SYSCALLS.getSocketFromFD(),info=SYSCALLS.getSocketAddress();sock.sock_ops.connect(sock,info.addr,info.port);return 0};case 4:{var sock=SYSCALLS.getSocketFromFD(),backlog=SYSCALLS.get();sock.sock_ops.listen(sock,backlog);return 0};case 5:{var sock=SYSCALLS.getSocketFromFD(),addr=SYSCALLS.get(),addrlen=SYSCALLS.get();var newsock=sock.sock_ops.accept(sock);if(addr){var res=__write_sockaddr(addr,newsock.family,DNS.lookup_name(newsock.daddr),newsock.dport);assert(!res.errno)}return newsock.stream.fd};case 6:{var sock=SYSCALLS.getSocketFromFD(),addr=SYSCALLS.get(),addrlen=SYSCALLS.get();var res=__write_sockaddr(addr,sock.family,DNS.lookup_name(sock.saddr||"0.0.0.0"),sock.sport);assert(!res.errno);return 0};case 7:{var sock=SYSCALLS.getSocketFromFD(),addr=SYSCALLS.get(),addrlen=SYSCALLS.get();if(!sock.daddr){return-ERRNO_CODES.ENOTCONN}var res=__write_sockaddr(addr,sock.family,DNS.lookup_name(sock.daddr),sock.dport);assert(!res.errno);return 0};case 11:{var sock=SYSCALLS.getSocketFromFD(),message=SYSCALLS.get(),length=SYSCALLS.get(),flags=SYSCALLS.get(),dest=SYSCALLS.getSocketAddress(true);if(!dest){return FS.write(sock.stream,HEAP8,message,length)}else{return sock.sock_ops.sendmsg(sock,HEAP8,message,length,dest.addr,dest.port)}};case 12:{var sock=SYSCALLS.getSocketFromFD(),buf=SYSCALLS.get(),len=SYSCALLS.get(),flags=SYSCALLS.get(),addr=SYSCALLS.get(),addrlen=SYSCALLS.get();var msg=sock.sock_ops.recvmsg(sock,len);if(!msg)return 0;if(addr){var res=__write_sockaddr(addr,sock.family,DNS.lookup_name(msg.addr),msg.port);assert(!res.errno)}HEAPU8.set(msg.buffer,buf);return msg.buffer.byteLength};case 14:{return-ERRNO_CODES.ENOPROTOOPT};case 15:{var sock=SYSCALLS.getSocketFromFD(),level=SYSCALLS.get(),optname=SYSCALLS.get(),optval=SYSCALLS.get(),optlen=SYSCALLS.get();if(level===1){if(optname===4){HEAP32[optval>>2]=sock.error;HEAP32[optlen>>2]=4;sock.error=null;return 0}}return-ERRNO_CODES.ENOPROTOOPT};case 16:{var sock=SYSCALLS.getSocketFromFD(),message=SYSCALLS.get(),flags=SYSCALLS.get();var iov=HEAP32[message+8>>2];var num=HEAP32[message+12>>2];var addr,port;var name=HEAP32[message>>2];var namelen=HEAP32[message+4>>2];if(name){var info=__read_sockaddr(name,namelen);if(info.errno)return-info.errno;port=info.port;addr=DNS.lookup_addr(info.addr)||info.addr}var total=0;for(var i=0;i<num;i++){total+=HEAP32[iov+(8*i+4)>>2]}var view=new Uint8Array(total);var offset=0;for(var i=0;i<num;i++){var iovbase=HEAP32[iov+(8*i+0)>>2];var iovlen=HEAP32[iov+(8*i+4)>>2];for(var j=0;j<iovlen;j++){view[offset++]=HEAP8[iovbase+j>>0]}}return sock.sock_ops.sendmsg(sock,view,0,total,addr,port)};case 17:{var sock=SYSCALLS.getSocketFromFD(),message=SYSCALLS.get(),flags=SYSCALLS.get();var iov=HEAP32[message+8>>2];var num=HEAP32[message+12>>2];var total=0;for(var i=0;i<num;i++){total+=HEAP32[iov+(8*i+4)>>2]}var msg=sock.sock_ops.recvmsg(sock,total);if(!msg)return 0;var name=HEAP32[message>>2];if(name){var res=__write_sockaddr(name,sock.family,DNS.lookup_name(msg.addr),msg.port);assert(!res.errno)}var bytesRead=0;var bytesRemaining=msg.buffer.byteLength;for(var i=0;bytesRemaining>0&&i<num;i++){var iovbase=HEAP32[iov+(8*i+0)>>2];var iovlen=HEAP32[iov+(8*i+4)>>2];if(!iovlen){continue}var length=Math.min(iovlen,bytesRemaining);var buf=msg.buffer.subarray(bytesRead,bytesRead+length);HEAPU8.set(buf,iovbase+bytesRead);bytesRead+=length;bytesRemaining-=length}return bytesRead};default:abort("unsupported socketcall syscall "+call)}}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}Module["___syscall102"]=___syscall102;function ___syscall114(which,varargs){SYSCALLS.varargs=varargs;try{abort("cannot wait on child processes")}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}Module["___syscall114"]=___syscall114;function ___syscall118(which,varargs){SYSCALLS.varargs=varargs;try{var stream=SYSCALLS.getStreamFromFD();return 0}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}Module["___syscall118"]=___syscall118;function ___syscall12(which,varargs){SYSCALLS.varargs=varargs;try{var path=SYSCALLS.getStr();FS.chdir(path);return 0}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}Module["___syscall12"]=___syscall12;function ___syscall121(which,varargs){SYSCALLS.varargs=varargs;try{return-ERRNO_CODES.EPERM}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}Module["___syscall121"]=___syscall121;function ___syscall122(which,varargs){SYSCALLS.varargs=varargs;try{var buf=SYSCALLS.get();if(!buf)return-ERRNO_CODES.EFAULT;var layout={"sysname":0,"nodename":65,"domainname":325,"machine":260,"version":195,"release":130,"__size__":390};function copyString(element,value){var offset=layout[element];writeAsciiToMemory(value,buf+offset)}copyString("sysname","Emscripten");copyString("nodename","emscripten");copyString("release","1.0");copyString("version","#1");copyString("machine","x86-JS");return 0}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}Module["___syscall122"]=___syscall122;function ___syscall125(which,varargs){SYSCALLS.varargs=varargs;try{return 0}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}Module["___syscall125"]=___syscall125;var PROCINFO={ppid:1,pid:42,sid:42,pgid:42};Module["PROCINFO"]=PROCINFO;function ___syscall132(which,varargs){SYSCALLS.varargs=varargs;try{var pid=SYSCALLS.get();if(pid&&pid!==PROCINFO.pid)return-ERRNO_CODES.ESRCH;return PROCINFO.pgid}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}Module["___syscall132"]=___syscall132;function ___syscall133(which,varargs){SYSCALLS.varargs=varargs;try{var stream=SYSCALLS.getStreamFromFD();FS.chdir(stream.path);return 0}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}Module["___syscall133"]=___syscall133;function ___syscall14(which,varargs){SYSCALLS.varargs=varargs;try{var path=SYSCALLS.getStr(),mode=SYSCALLS.get(),dev=SYSCALLS.get();return SYSCALLS.doMknod(path,mode,dev)}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}Module["___syscall14"]=___syscall14;function ___syscall140(which,varargs){SYSCALLS.varargs=varargs;try{var stream=SYSCALLS.getStreamFromFD(),offset_high=SYSCALLS.get(),offset_low=SYSCALLS.get(),result=SYSCALLS.get(),whence=SYSCALLS.get();var offset=offset_low;FS.llseek(stream,offset,whence);HEAP32[result>>2]=stream.position;if(stream.getdents&&offset===0&&whence===0)stream.getdents=null;return 0}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}Module["___syscall140"]=___syscall140;function ___syscall142(which,varargs){SYSCALLS.varargs=varargs;try{var nfds=SYSCALLS.get(),readfds=SYSCALLS.get(),writefds=SYSCALLS.get(),exceptfds=SYSCALLS.get(),timeout=SYSCALLS.get();assert(nfds<=64,"nfds must be less than or equal to 64");assert(!exceptfds,"exceptfds not supported");var total=0;var srcReadLow=readfds?HEAP32[readfds>>2]:0,srcReadHigh=readfds?HEAP32[readfds+4>>2]:0;var srcWriteLow=writefds?HEAP32[writefds>>2]:0,srcWriteHigh=writefds?HEAP32[writefds+4>>2]:0;var srcExceptLow=exceptfds?HEAP32[exceptfds>>2]:0,srcExceptHigh=exceptfds?HEAP32[exceptfds+4>>2]:0;var dstReadLow=0,dstReadHigh=0;var dstWriteLow=0,dstWriteHigh=0;var dstExceptLow=0,dstExceptHigh=0;var allLow=(readfds?HEAP32[readfds>>2]:0)|(writefds?HEAP32[writefds>>2]:0)|(exceptfds?HEAP32[exceptfds>>2]:0);var allHigh=(readfds?HEAP32[readfds+4>>2]:0)|(writefds?HEAP32[writefds+4>>2]:0)|(exceptfds?HEAP32[exceptfds+4>>2]:0);function check(fd,low,high,val){return fd<32?low&val:high&val}for(var fd=0;fd<nfds;fd++){var mask=1<<fd%32;if(!check(fd,allLow,allHigh,mask)){continue}var stream=FS.getStream(fd);if(!stream)throw new FS.ErrnoError(ERRNO_CODES.EBADF);var flags=SYSCALLS.DEFAULT_POLLMASK;if(stream.stream_ops.poll){flags=stream.stream_ops.poll(stream)}if(flags&1&&check(fd,srcReadLow,srcReadHigh,mask)){fd<32?dstReadLow=dstReadLow|mask:dstReadHigh=dstReadHigh|mask;total++}if(flags&4&&check(fd,srcWriteLow,srcWriteHigh,mask)){fd<32?dstWriteLow=dstWriteLow|mask:dstWriteHigh=dstWriteHigh|mask;total++}if(flags&2&&check(fd,srcExceptLow,srcExceptHigh,mask)){fd<32?dstExceptLow=dstExceptLow|mask:dstExceptHigh=dstExceptHigh|mask;total++}}if(readfds){HEAP32[readfds>>2]=dstReadLow;HEAP32[readfds+4>>2]=dstReadHigh}if(writefds){HEAP32[writefds>>2]=dstWriteLow;HEAP32[writefds+4>>2]=dstWriteHigh}if(exceptfds){HEAP32[exceptfds>>2]=dstExceptLow;HEAP32[exceptfds+4>>2]=dstExceptHigh}return total}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}Module["___syscall142"]=___syscall142;function ___syscall144(which,varargs){SYSCALLS.varargs=varargs;try{var addr=SYSCALLS.get(),len=SYSCALLS.get(),flags=SYSCALLS.get();var info=SYSCALLS.mappings[addr];if(!info)return 0;SYSCALLS.doMsync(addr,FS.getStream(info.fd),len,info.flags);return 0}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}Module["___syscall144"]=___syscall144;function ___syscall145(which,varargs){SYSCALLS.varargs=varargs;try{var stream=SYSCALLS.getStreamFromFD(),iov=SYSCALLS.get(),iovcnt=SYSCALLS.get();return SYSCALLS.doReadv(stream,iov,iovcnt)}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}Module["___syscall145"]=___syscall145;function flush_NO_FILESYSTEM(){var fflush=Module["_fflush"];if(fflush)fflush(0);var printChar=___syscall146.printChar;if(!printChar)return;var buffers=___syscall146.buffers;if(buffers[1].length)printChar(1,10);if(buffers[2].length)printChar(2,10)}Module["flush_NO_FILESYSTEM"]=flush_NO_FILESYSTEM;function ___syscall146(which,varargs){SYSCALLS.varargs=varargs;try{var stream=SYSCALLS.get(),iov=SYSCALLS.get(),iovcnt=SYSCALLS.get();var ret=0;if(!___syscall146.buffers){___syscall146.buffers=[null,[],[]];___syscall146.printChar=(function(stream,curr){var buffer=___syscall146.buffers[stream];assert(buffer);if(curr===0||curr===10){(stream===1?out:err)(UTF8ArrayToString(buffer,0));buffer.length=0}else{buffer.push(curr)}})}for(var i=0;i<iovcnt;i++){var ptr=HEAP32[iov+i*8>>2];var len=HEAP32[iov+(i*8+4)>>2];for(var j=0;j<len;j++){___syscall146.printChar(stream,HEAPU8[ptr+j])}ret+=len}return ret}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}Module["___syscall146"]=___syscall146;function ___syscall147(which,varargs){SYSCALLS.varargs=varargs;try{var pid=SYSCALLS.get();if(pid&&pid!==PROCINFO.pid)return-ERRNO_CODES.ESRCH;return PROCINFO.sid}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}Module["___syscall147"]=___syscall147;function ___syscall148(which,varargs){SYSCALLS.varargs=varargs;try{var stream=SYSCALLS.getStreamFromFD();return 0}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}Module["___syscall148"]=___syscall148;function ___syscall15(which,varargs){SYSCALLS.varargs=varargs;try{var path=SYSCALLS.getStr(),mode=SYSCALLS.get();FS.chmod(path,mode);return 0}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}Module["___syscall15"]=___syscall15;function ___syscall153(which,varargs){SYSCALLS.varargs=varargs;try{return 0}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}Module["___syscall153"]=___syscall153;function ___syscall150(){return ___syscall153.apply(null,arguments)}Module["___syscall150"]=___syscall150;function ___syscall151(){return ___syscall153.apply(null,arguments)}Module["___syscall151"]=___syscall151;function ___syscall152(){return ___syscall153.apply(null,arguments)}Module["___syscall152"]=___syscall152;function ___syscall163(which,varargs){SYSCALLS.varargs=varargs;try{return-ERRNO_CODES.ENOMEM}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}Module["___syscall163"]=___syscall163;function ___syscall168(which,varargs){SYSCALLS.varargs=varargs;try{var fds=SYSCALLS.get(),nfds=SYSCALLS.get(),timeout=SYSCALLS.get();var nonzero=0;for(var i=0;i<nfds;i++){var pollfd=fds+8*i;var fd=HEAP32[pollfd>>2];var events=HEAP16[pollfd+4>>1];var mask=32;var stream=FS.getStream(fd);if(stream){mask=SYSCALLS.DEFAULT_POLLMASK;if(stream.stream_ops.poll){mask=stream.stream_ops.poll(stream)}}mask&=events|8|16;if(mask)nonzero++;HEAP16[pollfd+6>>1]=mask}return nonzero}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}Module["___syscall168"]=___syscall168;function ___syscall180(which,varargs){SYSCALLS.varargs=varargs;try{var stream=SYSCALLS.getStreamFromFD(),buf=SYSCALLS.get(),count=SYSCALLS.get(),zero=SYSCALLS.getZero(),offset=SYSCALLS.get64();return FS.read(stream,HEAP8,buf,count,offset)}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}Module["___syscall180"]=___syscall180;function ___syscall181(which,varargs){SYSCALLS.varargs=varargs;try{var stream=SYSCALLS.getStreamFromFD(),buf=SYSCALLS.get(),count=SYSCALLS.get(),zero=SYSCALLS.getZero(),offset=SYSCALLS.get64();return FS.write(stream,HEAP8,buf,count,offset)}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}Module["___syscall181"]=___syscall181;function ___syscall183(which,varargs){SYSCALLS.varargs=varargs;try{var buf=SYSCALLS.get(),size=SYSCALLS.get();if(size===0)return-ERRNO_CODES.EINVAL;var cwd=FS.cwd();var cwdLengthInBytes=lengthBytesUTF8(cwd);if(size<cwdLengthInBytes+1)return-ERRNO_CODES.ERANGE;stringToUTF8(cwd,buf,size);return buf}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}Module["___syscall183"]=___syscall183;function ___syscall191(which,varargs){SYSCALLS.varargs=varargs;try{var resource=SYSCALLS.get(),rlim=SYSCALLS.get();HEAP32[rlim>>2]=-1;HEAP32[rlim+4>>2]=-1;HEAP32[rlim+8>>2]=-1;HEAP32[rlim+12>>2]=-1;return 0}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}Module["___syscall191"]=___syscall191;function ___syscall192(which,varargs){SYSCALLS.varargs=varargs;try{var addr=SYSCALLS.get(),len=SYSCALLS.get(),prot=SYSCALLS.get(),flags=SYSCALLS.get(),fd=SYSCALLS.get(),off=SYSCALLS.get();off<<=12;var ptr;var allocated=false;if(fd===-1){ptr=_memalign(PAGE_SIZE,len);if(!ptr)return-ERRNO_CODES.ENOMEM;_memset(ptr,0,len);allocated=true}else{var info=FS.getStream(fd);if(!info)return-ERRNO_CODES.EBADF;var res=FS.mmap(info,HEAPU8,addr,len,off,prot,flags);ptr=res.ptr;allocated=res.allocated}SYSCALLS.mappings[ptr]={malloc:ptr,len:len,allocated:allocated,fd:fd,flags:flags};return ptr}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}Module["___syscall192"]=___syscall192;function ___syscall193(which,varargs){SYSCALLS.varargs=varargs;try{var path=SYSCALLS.getStr(),zero=SYSCALLS.getZero(),length=SYSCALLS.get64();FS.truncate(path,length);return 0}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}Module["___syscall193"]=___syscall193;function ___syscall194(which,varargs){SYSCALLS.varargs=varargs;try{var fd=SYSCALLS.get(),zero=SYSCALLS.getZero(),length=SYSCALLS.get64();FS.ftruncate(fd,length);return 0}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}Module["___syscall194"]=___syscall194;function ___syscall195(which,varargs){SYSCALLS.varargs=varargs;try{var path=SYSCALLS.getStr(),buf=SYSCALLS.get();return SYSCALLS.doStat(FS.stat,path,buf)}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}Module["___syscall195"]=___syscall195;function ___syscall196(which,varargs){SYSCALLS.varargs=varargs;try{var path=SYSCALLS.getStr(),buf=SYSCALLS.get();return SYSCALLS.doStat(FS.lstat,path,buf)}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}Module["___syscall196"]=___syscall196;function ___syscall197(which,varargs){SYSCALLS.varargs=varargs;try{var stream=SYSCALLS.getStreamFromFD(),buf=SYSCALLS.get();return SYSCALLS.doStat(FS.stat,stream.path,buf)}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}Module["___syscall197"]=___syscall197;function ___syscall198(which,varargs){SYSCALLS.varargs=varargs;try{var path=SYSCALLS.getStr(),owner=SYSCALLS.get(),group=SYSCALLS.get();FS.chown(path,owner,group);return 0}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}Module["___syscall198"]=___syscall198;function ___syscall202(which,varargs){SYSCALLS.varargs=varargs;try{return 0}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}Module["___syscall202"]=___syscall202;function ___syscall199(){return ___syscall202.apply(null,arguments)}Module["___syscall199"]=___syscall199;function ___syscall20(which,varargs){SYSCALLS.varargs=varargs;try{return PROCINFO.pid}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}Module["___syscall20"]=___syscall20;function ___syscall200(){return ___syscall202.apply(null,arguments)}Module["___syscall200"]=___syscall200;function ___syscall201(){return ___syscall202.apply(null,arguments)}Module["___syscall201"]=___syscall201;function ___syscall214(which,varargs){SYSCALLS.varargs=varargs;try{var uid=SYSCALLS.get();if(uid!==0)return-ERRNO_CODES.EPERM;return 0}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}Module["___syscall214"]=___syscall214;function ___syscall203(){return ___syscall214.apply(null,arguments)}Module["___syscall203"]=___syscall203;function ___syscall204(){return ___syscall214.apply(null,arguments)}Module["___syscall204"]=___syscall204;function ___syscall205(which,varargs){SYSCALLS.varargs=varargs;try{var size=SYSCALLS.get(),list=SYSCALLS.get();if(size<1)return-ERRNO_CODES.EINVAL;HEAP32[list>>2]=0;return 1}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}Module["___syscall205"]=___syscall205;function ___syscall207(which,varargs){SYSCALLS.varargs=varargs;try{var fd=SYSCALLS.get(),owner=SYSCALLS.get(),group=SYSCALLS.get();FS.fchown(fd,owner,group);return 0}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}Module["___syscall207"]=___syscall207;function ___syscall211(which,varargs){SYSCALLS.varargs=varargs;try{var ruid=SYSCALLS.get(),euid=SYSCALLS.get(),suid=SYSCALLS.get();HEAP32[ruid>>2]=0;HEAP32[euid>>2]=0;HEAP32[suid>>2]=0;return 0}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}Module["___syscall211"]=___syscall211;function ___syscall209(){return ___syscall211.apply(null,arguments)}Module["___syscall209"]=___syscall209;function ___syscall212(which,varargs){SYSCALLS.varargs=varargs;try{var path=SYSCALLS.getStr(),owner=SYSCALLS.get(),group=SYSCALLS.get();FS.chown(path,owner,group);return 0}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}Module["___syscall212"]=___syscall212;function ___syscall218(which,varargs){SYSCALLS.varargs=varargs;try{return-ERRNO_CODES.ENOSYS}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}Module["___syscall218"]=___syscall218;function ___syscall219(which,varargs){SYSCALLS.varargs=varargs;try{return 0}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}Module["___syscall219"]=___syscall219;function ___syscall220(which,varargs){SYSCALLS.varargs=varargs;try{var stream=SYSCALLS.getStreamFromFD(),dirp=SYSCALLS.get(),count=SYSCALLS.get();if(!stream.getdents){stream.getdents=FS.readdir(stream.path)}var pos=0;while(stream.getdents.length>0&&pos+268<=count){var id;var type;var name=stream.getdents.pop();if(name[0]==="."){id=1;type=4}else{var child=FS.lookupNode(stream.node,name);id=child.id;type=FS.isChrdev(child.mode)?2:FS.isDir(child.mode)?4:FS.isLink(child.mode)?10:8}HEAP32[dirp+pos>>2]=id;HEAP32[dirp+pos+4>>2]=stream.position;HEAP16[dirp+pos+8>>1]=268;HEAP8[dirp+pos+10>>0]=type;stringToUTF8(name,dirp+pos+11,256);pos+=268}return pos}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}Module["___syscall220"]=___syscall220;function ___syscall221(which,varargs){SYSCALLS.varargs=varargs;try{return 0}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}Module["___syscall221"]=___syscall221;function ___syscall268(which,varargs){SYSCALLS.varargs=varargs;try{var path=SYSCALLS.getStr(),size=SYSCALLS.get(),buf=SYSCALLS.get();assert(size===64);HEAP32[buf+4>>2]=4096;HEAP32[buf+40>>2]=4096;HEAP32[buf+8>>2]=1e6;HEAP32[buf+12>>2]=5e5;HEAP32[buf+16>>2]=5e5;HEAP32[buf+20>>2]=FS.nextInode;HEAP32[buf+24>>2]=1e6;HEAP32[buf+28>>2]=42;HEAP32[buf+44>>2]=2;HEAP32[buf+36>>2]=255;return 0}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}Module["___syscall268"]=___syscall268;function ___syscall269(which,varargs){SYSCALLS.varargs=varargs;try{var stream=SYSCALLS.getStreamFromFD(),size=SYSCALLS.get(),buf=SYSCALLS.get();return ___syscall([268,0,size,buf],0)}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}Module["___syscall269"]=___syscall269;function ___syscall272(which,varargs){SYSCALLS.varargs=varargs;try{return 0}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}Module["___syscall272"]=___syscall272;function ___syscall29(which,varargs){SYSCALLS.varargs=varargs;try{return-ERRNO_CODES.EINTR}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}Module["___syscall29"]=___syscall29;function ___syscall295(which,varargs){SYSCALLS.varargs=varargs;try{var dirfd=SYSCALLS.get(),path=SYSCALLS.getStr(),flags=SYSCALLS.get(),mode=SYSCALLS.get();path=SYSCALLS.calculateAt(dirfd,path);return FS.open(path,flags,mode).fd}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}Module["___syscall295"]=___syscall295;function ___syscall296(which,varargs){SYSCALLS.varargs=varargs;try{var dirfd=SYSCALLS.get(),path=SYSCALLS.getStr(),mode=SYSCALLS.get();path=SYSCALLS.calculateAt(dirfd,path);return SYSCALLS.doMkdir(path,mode)}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}Module["___syscall296"]=___syscall296;function ___syscall297(which,varargs){SYSCALLS.varargs=varargs;try{var dirfd=SYSCALLS.get(),path=SYSCALLS.getStr(),mode=SYSCALLS.get(),dev=SYSCALLS.get();path=SYSCALLS.calculateAt(dirfd,path);return SYSCALLS.doMknod(path,mode,dev)}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}Module["___syscall297"]=___syscall297;function ___syscall298(which,varargs){SYSCALLS.varargs=varargs;try{var dirfd=SYSCALLS.get(),path=SYSCALLS.getStr(),owner=SYSCALLS.get(),group=SYSCALLS.get(),flags=SYSCALLS.get();assert(flags===0);path=SYSCALLS.calculateAt(dirfd,path);FS.chown(path,owner,group);return 0}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}Module["___syscall298"]=___syscall298;function ___syscall3(which,varargs){SYSCALLS.varargs=varargs;try{var stream=SYSCALLS.getStreamFromFD(),buf=SYSCALLS.get(),count=SYSCALLS.get();return FS.read(stream,HEAP8,buf,count)}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}Module["___syscall3"]=___syscall3;function ___syscall300(which,varargs){SYSCALLS.varargs=varargs;try{var dirfd=SYSCALLS.get(),path=SYSCALLS.getStr(),buf=SYSCALLS.get(),flags=SYSCALLS.get();var nofollow=flags&256;flags=flags&~256;assert(!flags,flags);path=SYSCALLS.calculateAt(dirfd,path);return SYSCALLS.doStat(nofollow?FS.lstat:FS.stat,path,buf)}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}Module["___syscall300"]=___syscall300;function ___syscall301(which,varargs){SYSCALLS.varargs=varargs;try{var dirfd=SYSCALLS.get(),path=SYSCALLS.getStr(),flags=SYSCALLS.get();path=SYSCALLS.calculateAt(dirfd,path);if(flags===0){FS.unlink(path)}else if(flags===512){FS.rmdir(path)}else{abort("Invalid flags passed to unlinkat")}return 0}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}Module["___syscall301"]=___syscall301;function ___syscall302(which,varargs){SYSCALLS.varargs=varargs;try{var olddirfd=SYSCALLS.get(),oldpath=SYSCALLS.getStr(),newdirfd=SYSCALLS.get(),newpath=SYSCALLS.getStr();oldpath=SYSCALLS.calculateAt(olddirfd,oldpath);newpath=SYSCALLS.calculateAt(newdirfd,newpath);FS.rename(oldpath,newpath);return 0}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}Module["___syscall302"]=___syscall302;function ___syscall303(which,varargs){SYSCALLS.varargs=varargs;try{return-ERRNO_CODES.EMLINK}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}Module["___syscall303"]=___syscall303;function ___syscall304(which,varargs){SYSCALLS.varargs=varargs;try{var target=SYSCALLS.get(),newdirfd=SYSCALLS.get(),linkpath=SYSCALLS.get();linkpath=SYSCALLS.calculateAt(newdirfd,linkpath);FS.symlink(target,linkpath);return 0}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}Module["___syscall304"]=___syscall304;function ___syscall305(which,varargs){SYSCALLS.varargs=varargs;try{var dirfd=SYSCALLS.get(),path=SYSCALLS.getStr(),buf=SYSCALLS.get(),bufsize=SYSCALLS.get();path=SYSCALLS.calculateAt(dirfd,path);return SYSCALLS.doReadlink(path,buf,bufsize)}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}Module["___syscall305"]=___syscall305;function ___syscall306(which,varargs){SYSCALLS.varargs=varargs;try{var dirfd=SYSCALLS.get(),path=SYSCALLS.getStr(),mode=SYSCALLS.get(),flags=SYSCALLS.get();assert(flags===0);path=SYSCALLS.calculateAt(dirfd,path);FS.chmod(path,mode);return 0}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}Module["___syscall306"]=___syscall306;function ___syscall307(which,varargs){SYSCALLS.varargs=varargs;try{var dirfd=SYSCALLS.get(),path=SYSCALLS.getStr(),amode=SYSCALLS.get(),flags=SYSCALLS.get();assert(flags===0);path=SYSCALLS.calculateAt(dirfd,path);return SYSCALLS.doAccess(path,amode)}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}Module["___syscall307"]=___syscall307;function ___syscall308(which,varargs){SYSCALLS.varargs=varargs;try{return-ERRNO_CODES.ENOSYS}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}Module["___syscall308"]=___syscall308;function ___syscall320(which,varargs){SYSCALLS.varargs=varargs;try{var dirfd=SYSCALLS.get(),path=SYSCALLS.getStr(),times=SYSCALLS.get(),flags=SYSCALLS.get();assert(flags===0);path=SYSCALLS.calculateAt(dirfd,path);var seconds=HEAP32[times>>2];var nanoseconds=HEAP32[times+4>>2];var atime=seconds*1e3+nanoseconds/(1e3*1e3);times+=8;seconds=HEAP32[times>>2];nanoseconds=HEAP32[times+4>>2];var mtime=seconds*1e3+nanoseconds/(1e3*1e3);FS.utime(path,atime,mtime);return 0}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}Module["___syscall320"]=___syscall320;function ___syscall324(which,varargs){SYSCALLS.varargs=varargs;try{var stream=SYSCALLS.getStreamFromFD(),mode=SYSCALLS.get(),offset=SYSCALLS.get64(),len=SYSCALLS.get64();assert(mode===0);FS.allocate(stream,offset,len);return 0}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}Module["___syscall324"]=___syscall324;function ___syscall33(which,varargs){SYSCALLS.varargs=varargs;try{var path=SYSCALLS.getStr(),amode=SYSCALLS.get();return SYSCALLS.doAccess(path,amode)}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}Module["___syscall33"]=___syscall33;function ___syscall330(which,varargs){SYSCALLS.varargs=varargs;try{var old=SYSCALLS.getStreamFromFD(),suggestFD=SYSCALLS.get(),flags=SYSCALLS.get();assert(!flags);if(old.fd===suggestFD)return-ERRNO_CODES.EINVAL;return SYSCALLS.doDup(old.path,old.flags,suggestFD)}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}Module["___syscall330"]=___syscall330;function ___syscall331(which,varargs){SYSCALLS.varargs=varargs;try{return-ERRNO_CODES.ENOSYS}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}Module["___syscall331"]=___syscall331;function ___syscall333(which,varargs){SYSCALLS.varargs=varargs;try{var stream=SYSCALLS.getStreamFromFD(),iov=SYSCALLS.get(),iovcnt=SYSCALLS.get(),offset=SYSCALLS.get();return SYSCALLS.doReadv(stream,iov,iovcnt,offset)}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}Module["___syscall333"]=___syscall333;function ___syscall334(which,varargs){SYSCALLS.varargs=varargs;try{var stream=SYSCALLS.getStreamFromFD(),iov=SYSCALLS.get(),iovcnt=SYSCALLS.get(),offset=SYSCALLS.get();return SYSCALLS.doWritev(stream,iov,iovcnt,offset)}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}Module["___syscall334"]=___syscall334;function ___syscall337(which,varargs){SYSCALLS.varargs=varargs;try{return 0}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}Module["___syscall337"]=___syscall337;function ___syscall34(which,varargs){SYSCALLS.varargs=varargs;try{var inc=SYSCALLS.get();return-ERRNO_CODES.EPERM}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}Module["___syscall34"]=___syscall34;function ___syscall340(which,varargs){SYSCALLS.varargs=varargs;try{var pid=SYSCALLS.get(),resource=SYSCALLS.get(),new_limit=SYSCALLS.get(),old_limit=SYSCALLS.get();if(old_limit){HEAP32[old_limit>>2]=-1;HEAP32[old_limit+4>>2]=-1;HEAP32[old_limit+8>>2]=-1;HEAP32[old_limit+12>>2]=-1}return 0}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}Module["___syscall340"]=___syscall340;function ___syscall345(which,varargs){SYSCALLS.varargs=varargs;try{return 0}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}Module["___syscall345"]=___syscall345;function ___syscall36(which,varargs){SYSCALLS.varargs=varargs;try{return 0}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}Module["___syscall36"]=___syscall36;function ___syscall38(which,varargs){SYSCALLS.varargs=varargs;try{var old_path=SYSCALLS.getStr(),new_path=SYSCALLS.getStr();FS.rename(old_path,new_path);return 0}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}Module["___syscall38"]=___syscall38;function ___syscall39(which,varargs){SYSCALLS.varargs=varargs;try{var path=SYSCALLS.getStr(),mode=SYSCALLS.get();return SYSCALLS.doMkdir(path,mode)}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}Module["___syscall39"]=___syscall39;function ___syscall4(which,varargs){SYSCALLS.varargs=varargs;try{var stream=SYSCALLS.getStreamFromFD(),buf=SYSCALLS.get(),count=SYSCALLS.get();return FS.write(stream,HEAP8,buf,count)}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}Module["___syscall4"]=___syscall4;function ___syscall40(which,varargs){SYSCALLS.varargs=varargs;try{var path=SYSCALLS.getStr();FS.rmdir(path);return 0}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}Module["___syscall40"]=___syscall40;function ___syscall41(which,varargs){SYSCALLS.varargs=varargs;try{var old=SYSCALLS.getStreamFromFD();return FS.open(old.path,old.flags,0).fd}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}Module["___syscall41"]=___syscall41;var PIPEFS=undefined;Module["PIPEFS"]=PIPEFS;function ___syscall42(which,varargs){SYSCALLS.varargs=varargs;try{var fdPtr=SYSCALLS.get();if(fdPtr==0){throw new FS.ErrnoError(ERRNO_CODES.EFAULT)}var res=PIPEFS.createPipe();HEAP32[fdPtr>>2]=res.readable_fd;HEAP32[fdPtr+4>>2]=res.writable_fd;return 0}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}Module["___syscall42"]=___syscall42;function ___syscall5(which,varargs){SYSCALLS.varargs=varargs;try{var pathname=SYSCALLS.getStr(),flags=SYSCALLS.get(),mode=SYSCALLS.get();var stream=FS.open(pathname,flags,mode);return stream.fd}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}Module["___syscall5"]=___syscall5;function ___syscall51(which,varargs){SYSCALLS.varargs=varargs;try{return-ERRNO_CODES.ENOSYS}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}Module["___syscall51"]=___syscall51;function ___syscall54(which,varargs){SYSCALLS.varargs=varargs;try{return 0}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}Module["___syscall54"]=___syscall54;function ___syscall57(which,varargs){SYSCALLS.varargs=varargs;try{var pid=SYSCALLS.get(),pgid=SYSCALLS.get();if(pid&&pid!==PROCINFO.pid)return-ERRNO_CODES.ESRCH;if(pgid&&pgid!==PROCINFO.pgid)return-ERRNO_CODES.EPERM;return 0}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}Module["___syscall57"]=___syscall57;function ___syscall6(which,varargs){SYSCALLS.varargs=varargs;try{var stream=SYSCALLS.getStreamFromFD();FS.close(stream);return 0}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}Module["___syscall6"]=___syscall6;function ___syscall60(which,varargs){SYSCALLS.varargs=varargs;try{var mask=SYSCALLS.get();var old=SYSCALLS.umask;SYSCALLS.umask=mask;return old}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}Module["___syscall60"]=___syscall60;function ___syscall63(which,varargs){SYSCALLS.varargs=varargs;try{var old=SYSCALLS.getStreamFromFD(),suggestFD=SYSCALLS.get();if(old.fd===suggestFD)return suggestFD;return SYSCALLS.doDup(old.path,old.flags,suggestFD)}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}Module["___syscall63"]=___syscall63;function ___syscall64(which,varargs){SYSCALLS.varargs=varargs;try{return PROCINFO.ppid}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}Module["___syscall64"]=___syscall64;function ___syscall66(which,varargs){SYSCALLS.varargs=varargs;try{return 0}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}Module["___syscall66"]=___syscall66;function ___syscall75(which,varargs){SYSCALLS.varargs=varargs;try{return 0}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}Module["___syscall75"]=___syscall75;function ___syscall77(which,varargs){SYSCALLS.varargs=varargs;try{var who=SYSCALLS.get(),usage=SYSCALLS.get();_memset(usage,0,136);HEAP32[usage>>2]=1;HEAP32[usage+4>>2]=2;HEAP32[usage+8>>2]=3;HEAP32[usage+12>>2]=4;return 0}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}Module["___syscall77"]=___syscall77;function ___syscall83(which,varargs){SYSCALLS.varargs=varargs;try{var target=SYSCALLS.getStr(),linkpath=SYSCALLS.getStr();FS.symlink(target,linkpath);return 0}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}Module["___syscall83"]=___syscall83;function ___syscall85(which,varargs){SYSCALLS.varargs=varargs;try{var path=SYSCALLS.getStr(),buf=SYSCALLS.get(),bufsize=SYSCALLS.get();return SYSCALLS.doReadlink(path,buf,bufsize)}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}Module["___syscall85"]=___syscall85;function ___syscall9(which,varargs){SYSCALLS.varargs=varargs;try{var oldpath=SYSCALLS.get(),newpath=SYSCALLS.get();return-ERRNO_CODES.EMLINK}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}Module["___syscall9"]=___syscall9;function ___syscall91(which,varargs){SYSCALLS.varargs=varargs;try{var addr=SYSCALLS.get(),len=SYSCALLS.get();var info=SYSCALLS.mappings[addr];if(!info)return 0;if(len===info.len){var stream=FS.getStream(info.fd);SYSCALLS.doMsync(addr,stream,len,info.flags);FS.munmap(stream);SYSCALLS.mappings[addr]=null;if(info.allocated){_free(info.malloc)}}return 0}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}Module["___syscall91"]=___syscall91;function ___syscall94(which,varargs){SYSCALLS.varargs=varargs;try{var fd=SYSCALLS.get(),mode=SYSCALLS.get();FS.fchmod(fd,mode);return 0}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}Module["___syscall94"]=___syscall94;function ___syscall96(which,varargs){SYSCALLS.varargs=varargs;try{return 0}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}Module["___syscall96"]=___syscall96;function ___syscall97(which,varargs){SYSCALLS.varargs=varargs;try{return-ERRNO_CODES.EPERM}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}Module["___syscall97"]=___syscall97;function ___unlock(){}Module["___unlock"]=___unlock;function ___wait(){}Module["___wait"]=___wait;function __exit(status){exit(status)}Module["__exit"]=__exit;function _endgrent(){err("missing function: endgrent");abort(-1)}Module["_endgrent"]=_endgrent;function _execl(){___setErrNo(ERRNO_CODES.ENOEXEC);return-1}Module["_execl"]=_execl;function _fork(){___setErrNo(ERRNO_CODES.EAGAIN);return-1}Module["_fork"]=_fork;var ENV={};Module["ENV"]=ENV;function _getenv(name){if(name===0)return 0;name=Pointer_stringify(name);if(!ENV.hasOwnProperty(name))return 0;if(_getenv.ret)_free(_getenv.ret);_getenv.ret=allocateUTF8(ENV[name]);return _getenv.ret}Module["_getenv"]=_getenv;function _getgrent(){err("missing function: getgrent");abort(-1)}Module["_getgrent"]=_getgrent;function _getnameinfo(sa,salen,node,nodelen,serv,servlen,flags){var info=__read_sockaddr(sa,salen);if(info.errno){return-6}var port=info.port;var addr=info.addr;var overflowed=false;if(node&&nodelen){var lookup;if(flags&1||!(lookup=DNS.lookup_addr(addr))){if(flags&8){return-2}}else{addr=lookup}var numBytesWrittenExclNull=stringToUTF8(addr,node,nodelen);if(numBytesWrittenExclNull+1>=nodelen){overflowed=true}}if(serv&&servlen){port=""+port;var numBytesWrittenExclNull=stringToUTF8(port,serv,servlen);if(numBytesWrittenExclNull+1>=servlen){overflowed=true}}if(overflowed){return-12}return 0}Module["_getnameinfo"]=_getnameinfo;var ___tm_timezone=allocate(intArrayFromString("GMT"),"i8",ALLOC_STATIC);Module["___tm_timezone"]=___tm_timezone;function _gmtime_r(time,tmPtr){var date=new Date(HEAP32[time>>2]*1e3);HEAP32[tmPtr>>2]=date.getUTCSeconds();HEAP32[tmPtr+4>>2]=date.getUTCMinutes();HEAP32[tmPtr+8>>2]=date.getUTCHours();HEAP32[tmPtr+12>>2]=date.getUTCDate();HEAP32[tmPtr+16>>2]=date.getUTCMonth();HEAP32[tmPtr+20>>2]=date.getUTCFullYear()-1900;HEAP32[tmPtr+24>>2]=date.getUTCDay();HEAP32[tmPtr+36>>2]=0;HEAP32[tmPtr+32>>2]=0;var start=Date.UTC(date.getUTCFullYear(),0,1,0,0,0,0);var yday=(date.getTime()-start)/(1e3*60*60*24)|0;HEAP32[tmPtr+28>>2]=yday;HEAP32[tmPtr+40>>2]=___tm_timezone;return tmPtr}Module["_gmtime_r"]=_gmtime_r;function _inet_addr(ptr){var addr=__inet_pton4_raw(Pointer_stringify(ptr));if(addr===null){return-1}return addr}Module["_inet_addr"]=_inet_addr;function _kill(pid,sig){___setErrNo(ERRNO_CODES.EPERM);return-1}Module["_kill"]=_kill;function _llvm_stackrestore(p){var self=_llvm_stacksave;var ret=self.LLVM_SAVEDSTACKS[p];self.LLVM_SAVEDSTACKS.splice(p,1);stackRestore(ret)}Module["_llvm_stackrestore"]=_llvm_stackrestore;function _llvm_stacksave(){var self=_llvm_stacksave;if(!self.LLVM_SAVEDSTACKS){self.LLVM_SAVEDSTACKS=[]}self.LLVM_SAVEDSTACKS.push(stackSave());return self.LLVM_SAVEDSTACKS.length-1}Module["_llvm_stacksave"]=_llvm_stacksave;function _emscripten_memcpy_big(dest,src,num){HEAPU8.set(HEAPU8.subarray(src,src+num),dest);return dest}Module["_emscripten_memcpy_big"]=_emscripten_memcpy_big;function _usleep(useconds){var msec=useconds/1e3;if((ENVIRONMENT_IS_WEB||ENVIRONMENT_IS_WORKER)&&self["performance"]&&self["performance"]["now"]){var start=self["performance"]["now"]();while(self["performance"]["now"]()-start<msec){}}else{var start=Date.now();while(Date.now()-start<msec){}}return 0}Module["_usleep"]=_usleep;function _nanosleep(rqtp,rmtp){var seconds=HEAP32[rqtp>>2];var nanoseconds=HEAP32[rqtp+4>>2];if(rmtp!==0){HEAP32[rmtp>>2]=0;HEAP32[rmtp+4>>2]=0}return _usleep(seconds*1e6+nanoseconds/1e3)}Module["_nanosleep"]=_nanosleep;function _pthread_cleanup_pop(){assert(_pthread_cleanup_push.level==__ATEXIT__.length,"cannot pop if something else added meanwhile!");__ATEXIT__.pop();_pthread_cleanup_push.level=__ATEXIT__.length}Module["_pthread_cleanup_pop"]=_pthread_cleanup_pop;function _pthread_cleanup_push(routine,arg){__ATEXIT__.push((function(){Module["dynCall_vi"](routine,arg)}));_pthread_cleanup_push.level=__ATEXIT__.length}Module["_pthread_cleanup_push"]=_pthread_cleanup_push;function _pthread_setcancelstate(){return 0}Module["_pthread_setcancelstate"]=_pthread_setcancelstate;function _pthread_sigmask(){err("missing function: pthread_sigmask");abort(-1)}Module["_pthread_sigmask"]=_pthread_sigmask;function _res_query(){err("missing function: res_query");abort(-1)}Module["_res_query"]=_res_query;function _setgrent(){err("missing function: setgrent");abort(-1)}Module["_setgrent"]=_setgrent;function _sysconf(name){switch(name){case 30:return PAGE_SIZE;case 85:var maxHeapSize=2*1024*1024*1024-16777216;maxHeapSize=HEAPU8.length;return maxHeapSize/PAGE_SIZE;case 132:case 133:case 12:case 137:case 138:case 15:case 235:case 16:case 17:case 18:case 19:case 20:case 149:case 13:case 10:case 236:case 153:case 9:case 21:case 22:case 159:case 154:case 14:case 77:case 78:case 139:case 80:case 81:case 82:case 68:case 67:case 164:case 11:case 29:case 47:case 48:case 95:case 52:case 51:case 46:return 200809;case 79:return 0;case 27:case 246:case 127:case 128:case 23:case 24:case 160:case 161:case 181:case 182:case 242:case 183:case 184:case 243:case 244:case 245:case 165:case 178:case 179:case 49:case 50:case 168:case 169:case 175:case 170:case 171:case 172:case 97:case 76:case 32:case 173:case 35:return-1;case 176:case 177:case 7:case 155:case 8:case 157:case 125:case 126:case 92:case 93:case 129:case 130:case 131:case 94:case 91:return 1;case 74:case 60:case 69:case 70:case 4:return 1024;case 31:case 42:case 72:return 32;case 87:case 26:case 33:return 2147483647;case 34:case 1:return 47839;case 38:case 36:return 99;case 43:case 37:return 2048;case 0:return 2097152;case 3:return 65536;case 28:return 32768;case 44:return 32767;case 75:return 16384;case 39:return 1e3;case 89:return 700;case 71:return 256;case 40:return 255;case 2:return 100;case 180:return 64;case 25:return 20;case 5:return 16;case 6:return 6;case 73:return 4;case 84:{if(typeof navigator==="object")return navigator["hardwareConcurrency"]||1;return 1}}___setErrNo(ERRNO_CODES.EINVAL);return-1}Module["_sysconf"]=_sysconf;function _setgroups(ngroups,gidset){if(ngroups<1||ngroups>_sysconf(3)){___setErrNo(ERRNO_CODES.EINVAL);return-1}else{___setErrNo(ERRNO_CODES.EPERM);return-1}}Module["_setgroups"]=_setgroups;function _setitimer(){throw"setitimer() is not implemented yet"}Module["_setitimer"]=_setitimer;function _sigfillset(set){HEAP32[set>>2]=-1>>>0;return 0}Module["_sigfillset"]=_sigfillset;function __isLeapYear(year){return year%4===0&&(year%100!==0||year%400===0)}Module["__isLeapYear"]=__isLeapYear;function __arraySum(array,index){var sum=0;for(var i=0;i<=index;sum+=array[i++]);return sum}Module["__arraySum"]=__arraySum;var __MONTH_DAYS_LEAP=[31,29,31,30,31,30,31,31,30,31,30,31];Module["__MONTH_DAYS_LEAP"]=__MONTH_DAYS_LEAP;var __MONTH_DAYS_REGULAR=[31,28,31,30,31,30,31,31,30,31,30,31];Module["__MONTH_DAYS_REGULAR"]=__MONTH_DAYS_REGULAR;function __addDays(date,days){var newDate=new Date(date.getTime());while(days>0){var leap=__isLeapYear(newDate.getFullYear());var currentMonth=newDate.getMonth();var daysInCurrentMonth=(leap?__MONTH_DAYS_LEAP:__MONTH_DAYS_REGULAR)[currentMonth];if(days>daysInCurrentMonth-newDate.getDate()){days-=daysInCurrentMonth-newDate.getDate()+1;newDate.setDate(1);if(currentMonth<11){newDate.setMonth(currentMonth+1)}else{newDate.setMonth(0);newDate.setFullYear(newDate.getFullYear()+1)}}else{newDate.setDate(newDate.getDate()+days);return newDate}}return newDate}Module["__addDays"]=__addDays;function _strftime(s,maxsize,format,tm){var tm_zone=HEAP32[tm+40>>2];var date={tm_sec:HEAP32[tm>>2],tm_min:HEAP32[tm+4>>2],tm_hour:HEAP32[tm+8>>2],tm_mday:HEAP32[tm+12>>2],tm_mon:HEAP32[tm+16>>2],tm_year:HEAP32[tm+20>>2],tm_wday:HEAP32[tm+24>>2],tm_yday:HEAP32[tm+28>>2],tm_isdst:HEAP32[tm+32>>2],tm_gmtoff:HEAP32[tm+36>>2],tm_zone:tm_zone?Pointer_stringify(tm_zone):""};var pattern=Pointer_stringify(format);var EXPANSION_RULES_1={"%c":"%a %b %d %H:%M:%S %Y","%D":"%m/%d/%y","%F":"%Y-%m-%d","%h":"%b","%r":"%I:%M:%S %p","%R":"%H:%M","%T":"%H:%M:%S","%x":"%m/%d/%y","%X":"%H:%M:%S"};for(var rule in EXPANSION_RULES_1){pattern=pattern.replace(new RegExp(rule,"g"),EXPANSION_RULES_1[rule])}var WEEKDAYS=["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"];var MONTHS=["January","February","March","April","May","June","July","August","September","October","November","December"];function leadingSomething(value,digits,character){var str=typeof value==="number"?value.toString():value||"";while(str.length<digits){str=character[0]+str}return str}function leadingNulls(value,digits){return leadingSomething(value,digits,"0")}function compareByDay(date1,date2){function sgn(value){return value<0?-1:value>0?1:0}var compare;if((compare=sgn(date1.getFullYear()-date2.getFullYear()))===0){if((compare=sgn(date1.getMonth()-date2.getMonth()))===0){compare=sgn(date1.getDate()-date2.getDate())}}return compare}function getFirstWeekStartDate(janFourth){switch(janFourth.getDay()){case 0:return new Date(janFourth.getFullYear()-1,11,29);case 1:return janFourth;case 2:return new Date(janFourth.getFullYear(),0,3);case 3:return new Date(janFourth.getFullYear(),0,2);case 4:return new Date(janFourth.getFullYear(),0,1);case 5:return new Date(janFourth.getFullYear()-1,11,31);case 6:return new Date(janFourth.getFullYear()-1,11,30)}}function getWeekBasedYear(date){var thisDate=__addDays(new Date(date.tm_year+1900,0,1),date.tm_yday);var janFourthThisYear=new Date(thisDate.getFullYear(),0,4);var janFourthNextYear=new Date(thisDate.getFullYear()+1,0,4);var firstWeekStartThisYear=getFirstWeekStartDate(janFourthThisYear);var firstWeekStartNextYear=getFirstWeekStartDate(janFourthNextYear);if(compareByDay(firstWeekStartThisYear,thisDate)<=0){if(compareByDay(firstWeekStartNextYear,thisDate)<=0){return thisDate.getFullYear()+1}else{return thisDate.getFullYear()}}else{return thisDate.getFullYear()-1}}var EXPANSION_RULES_2={"%a":(function(date){return WEEKDAYS[date.tm_wday].substring(0,3)}),"%A":(function(date){return WEEKDAYS[date.tm_wday]}),"%b":(function(date){return MONTHS[date.tm_mon].substring(0,3)}),"%B":(function(date){return MONTHS[date.tm_mon]}),"%C":(function(date){var year=date.tm_year+1900;return leadingNulls(year/100|0,2)}),"%d":(function(date){return leadingNulls(date.tm_mday,2)}),"%e":(function(date){return leadingSomething(date.tm_mday,2," ")}),"%g":(function(date){return getWeekBasedYear(date).toString().substring(2)}),"%G":(function(date){return getWeekBasedYear(date)}),"%H":(function(date){return leadingNulls(date.tm_hour,2)}),"%I":(function(date){var twelveHour=date.tm_hour;if(twelveHour==0)twelveHour=12;else if(twelveHour>12)twelveHour-=12;return leadingNulls(twelveHour,2)}),"%j":(function(date){return leadingNulls(date.tm_mday+__arraySum(__isLeapYear(date.tm_year+1900)?__MONTH_DAYS_LEAP:__MONTH_DAYS_REGULAR,date.tm_mon-1),3)}),"%m":(function(date){return leadingNulls(date.tm_mon+1,2)}),"%M":(function(date){return leadingNulls(date.tm_min,2)}),"%n":(function(){return"\n"}),"%p":(function(date){if(date.tm_hour>=0&&date.tm_hour<12){return"AM"}else{return"PM"}}),"%S":(function(date){return leadingNulls(date.tm_sec,2)}),"%t":(function(){return"\t"}),"%u":(function(date){var day=new Date(date.tm_year+1900,date.tm_mon+1,date.tm_mday,0,0,0,0);return day.getDay()||7}),"%U":(function(date){var janFirst=new Date(date.tm_year+1900,0,1);var firstSunday=janFirst.getDay()===0?janFirst:__addDays(janFirst,7-janFirst.getDay());var endDate=new Date(date.tm_year+1900,date.tm_mon,date.tm_mday);if(compareByDay(firstSunday,endDate)<0){var februaryFirstUntilEndMonth=__arraySum(__isLeapYear(endDate.getFullYear())?__MONTH_DAYS_LEAP:__MONTH_DAYS_REGULAR,endDate.getMonth()-1)-31;var firstSundayUntilEndJanuary=31-firstSunday.getDate();var days=firstSundayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();return leadingNulls(Math.ceil(days/7),2)}return compareByDay(firstSunday,janFirst)===0?"01":"00"}),"%V":(function(date){var janFourthThisYear=new Date(date.tm_year+1900,0,4);var janFourthNextYear=new Date(date.tm_year+1901,0,4);var firstWeekStartThisYear=getFirstWeekStartDate(janFourthThisYear);var firstWeekStartNextYear=getFirstWeekStartDate(janFourthNextYear);var endDate=__addDays(new Date(date.tm_year+1900,0,1),date.tm_yday);if(compareByDay(endDate,firstWeekStartThisYear)<0){return"53"}if(compareByDay(firstWeekStartNextYear,endDate)<=0){return"01"}var daysDifference;if(firstWeekStartThisYear.getFullYear()<date.tm_year+1900){daysDifference=date.tm_yday+32-firstWeekStartThisYear.getDate()}else{daysDifference=date.tm_yday+1-firstWeekStartThisYear.getDate()}return leadingNulls(Math.ceil(daysDifference/7),2)}),"%w":(function(date){var day=new Date(date.tm_year+1900,date.tm_mon+1,date.tm_mday,0,0,0,0);return day.getDay()}),"%W":(function(date){var janFirst=new Date(date.tm_year,0,1);var firstMonday=janFirst.getDay()===1?janFirst:__addDays(janFirst,janFirst.getDay()===0?1:7-janFirst.getDay()+1);var endDate=new Date(date.tm_year+1900,date.tm_mon,date.tm_mday);if(compareByDay(firstMonday,endDate)<0){var februaryFirstUntilEndMonth=__arraySum(__isLeapYear(endDate.getFullYear())?__MONTH_DAYS_LEAP:__MONTH_DAYS_REGULAR,endDate.getMonth()-1)-31;var firstMondayUntilEndJanuary=31-firstMonday.getDate();var days=firstMondayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();return leadingNulls(Math.ceil(days/7),2)}return compareByDay(firstMonday,janFirst)===0?"01":"00"}),"%y":(function(date){return(date.tm_year+1900).toString().substring(2)}),"%Y":(function(date){return date.tm_year+1900}),"%z":(function(date){var off=date.tm_gmtoff;var ahead=off>=0;off=Math.abs(off)/60;off=off/60*100+off%60;return(ahead?"+":"-")+String("0000"+off).slice(-4)}),"%Z":(function(date){return date.tm_zone}),"%%":(function(){return"%"})};for(var rule in EXPANSION_RULES_2){if(pattern.indexOf(rule)>=0){pattern=pattern.replace(new RegExp(rule,"g"),EXPANSION_RULES_2[rule](date))}}var bytes=intArrayFromString(pattern,false);if(bytes.length>maxsize){return 0}writeArrayToMemory(bytes,s);return bytes.length-1}Module["_strftime"]=_strftime;function _time(ptr){var ret=Date.now()/1e3|0;if(ptr){HEAP32[ptr>>2]=ret}return ret}Module["_time"]=_time;function _wait(stat_loc){___setErrNo(ERRNO_CODES.ECHILD);return-1}Module["_wait"]=_wait;function _waitpid(){return _wait.apply(null,arguments)}Module["_waitpid"]=_waitpid;if(ENVIRONMENT_IS_NODE){_emscripten_get_now=function _emscripten_get_now_actual(){var t=process["hrtime"]();return t[0]*1e3+t[1]/1e6}}else if(typeof dateNow!=="undefined"){_emscripten_get_now=dateNow}else if(typeof self==="object"&&self["performance"]&&typeof self["performance"]["now"]==="function"){_emscripten_get_now=(function(){return self["performance"]["now"]()})}else if(typeof performance==="object"&&typeof performance["now"]==="function"){_emscripten_get_now=(function(){return performance["now"]()})}else{_emscripten_get_now=Date.now}DYNAMICTOP_PTR=staticAlloc(4);STACK_BASE=STACKTOP=alignMemory(STATICTOP);STACK_MAX=STACK_BASE+TOTAL_STACK;DYNAMIC_BASE=alignMemory(STACK_MAX);HEAP32[DYNAMICTOP_PTR>>2]=DYNAMIC_BASE;staticSealed=true;var ASSERTIONS=false;function intArrayFromString(stringy,dontAddNull,length){var len=length>0?length:lengthBytesUTF8(stringy)+1;var u8array=new Array(len);var numBytesWritten=stringToUTF8Array(stringy,u8array,0,u8array.length);if(dontAddNull)u8array.length=numBytesWritten;return u8array}function intArrayToString(array){var ret=[];for(var i=0;i<array.length;i++){var chr=array[i];if(chr>255){if(ASSERTIONS){assert(false,"Character code "+chr+" ("+String.fromCharCode(chr)+")  at offset "+i+" not in 0x00-0xFF.")}chr&=255}ret.push(String.fromCharCode(chr))}return ret.join("")}var decodeBase64=typeof atob==="function"?atob:(function(input){var keyStr="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";var output="";var chr1,chr2,chr3;var enc1,enc2,enc3,enc4;var i=0;input=input.replace(/[^A-Za-z0-9\+\/\=]/g,"");do{enc1=keyStr.indexOf(input.charAt(i++));enc2=keyStr.indexOf(input.charAt(i++));enc3=keyStr.indexOf(input.charAt(i++));enc4=keyStr.indexOf(input.charAt(i++));chr1=enc1<<2|enc2>>4;chr2=(enc2&15)<<4|enc3>>2;chr3=(enc3&3)<<6|enc4;output=output+String.fromCharCode(chr1);if(enc3!==64){output=output+String.fromCharCode(chr2)}if(enc4!==64){output=output+String.fromCharCode(chr3)}}while(i<input.length);return output});function intArrayFromBase64(s){if(typeof ENVIRONMENT_IS_NODE==="boolean"&&ENVIRONMENT_IS_NODE){var buf;try{buf=Buffer.from(s,"base64")}catch(_){buf=new Buffer(s,"base64")}return new Uint8Array(buf.buffer,buf.byteOffset,buf.byteLength)}try{var decoded=decodeBase64(s);var bytes=new Uint8Array(decoded.length);for(var i=0;i<decoded.length;++i){bytes[i]=decoded.charCodeAt(i)}return bytes}catch(_){throw new Error("Converting base64 string to bytes failed.")}}function tryParseAsDataURI(filename){if(!isDataURI(filename)){return}return intArrayFromBase64(filename.slice(dataURIPrefix.length))}function invoke_ii(index,a1){var sp=stackSave();try{return Module["dynCall_ii"](index,a1)}catch(e){stackRestore(sp);if(typeof e!=="number"&&e!=="longjmp")throw e;Module["setThrew"](1,0)}}function invoke_iii(index,a1,a2){var sp=stackSave();try{return Module["dynCall_iii"](index,a1,a2)}catch(e){stackRestore(sp);if(typeof e!=="number"&&e!=="longjmp")throw e;Module["setThrew"](1,0)}}function invoke_iiii(index,a1,a2,a3){var sp=stackSave();try{return Module["dynCall_iiii"](index,a1,a2,a3)}catch(e){stackRestore(sp);if(typeof e!=="number"&&e!=="longjmp")throw e;Module["setThrew"](1,0)}}function invoke_iiiii(index,a1,a2,a3,a4){var sp=stackSave();try{return Module["dynCall_iiiii"](index,a1,a2,a3,a4)}catch(e){stackRestore(sp);if(typeof e!=="number"&&e!=="longjmp")throw e;Module["setThrew"](1,0)}}function invoke_iiiiii(index,a1,a2,a3,a4,a5){var sp=stackSave();try{return Module["dynCall_iiiiii"](index,a1,a2,a3,a4,a5)}catch(e){stackRestore(sp);if(typeof e!=="number"&&e!=="longjmp")throw e;Module["setThrew"](1,0)}}function invoke_v(index){var sp=stackSave();try{Module["dynCall_v"](index)}catch(e){stackRestore(sp);if(typeof e!=="number"&&e!=="longjmp")throw e;Module["setThrew"](1,0)}}function invoke_vi(index,a1){var sp=stackSave();try{Module["dynCall_vi"](index,a1)}catch(e){stackRestore(sp);if(typeof e!=="number"&&e!=="longjmp")throw e;Module["setThrew"](1,0)}}Module.asmGlobalArg={"Math":Math,"Int8Array":Int8Array,"Int16Array":Int16Array,"Int32Array":Int32Array,"Uint8Array":Uint8Array,"Uint16Array":Uint16Array,"Uint32Array":Uint32Array,"Float32Array":Float32Array,"Float64Array":Float64Array,"NaN":NaN,"Infinity":Infinity};Module.asmLibraryArg={"abort":abort,"assert":assert,"enlargeMemory":enlargeMemory,"getTotalMemory":getTotalMemory,"abortOnCannotGrowMemory":abortOnCannotGrowMemory,"invoke_ii":invoke_ii,"invoke_iii":invoke_iii,"invoke_iiii":invoke_iiii,"invoke_iiiii":invoke_iiiii,"invoke_iiiiii":invoke_iiiiii,"invoke_v":invoke_v,"invoke_vi":invoke_vi,"___block_all_sigs":___block_all_sigs,"___clock_gettime":___clock_gettime,"___clone":___clone,"___lock":___lock,"___map_file":___map_file,"___muldc3":___muldc3,"___mulsc3":___mulsc3,"___restore_sigs":___restore_sigs,"___setErrNo":___setErrNo,"___syscall1":___syscall1,"___syscall10":___syscall10,"___syscall102":___syscall102,"___syscall114":___syscall114,"___syscall118":___syscall118,"___syscall12":___syscall12,"___syscall121":___syscall121,"___syscall122":___syscall122,"___syscall125":___syscall125,"___syscall132":___syscall132,"___syscall133":___syscall133,"___syscall14":___syscall14,"___syscall140":___syscall140,"___syscall142":___syscall142,"___syscall144":___syscall144,"___syscall145":___syscall145,"___syscall146":___syscall146,"___syscall147":___syscall147,"___syscall148":___syscall148,"___syscall15":___syscall15,"___syscall150":___syscall150,"___syscall151":___syscall151,"___syscall152":___syscall152,"___syscall153":___syscall153,"___syscall163":___syscall163,"___syscall168":___syscall168,"___syscall180":___syscall180,"___syscall181":___syscall181,"___syscall183":___syscall183,"___syscall191":___syscall191,"___syscall192":___syscall192,"___syscall193":___syscall193,"___syscall194":___syscall194,"___syscall195":___syscall195,"___syscall196":___syscall196,"___syscall197":___syscall197,"___syscall198":___syscall198,"___syscall199":___syscall199,"___syscall20":___syscall20,"___syscall200":___syscall200,"___syscall201":___syscall201,"___syscall202":___syscall202,"___syscall203":___syscall203,"___syscall204":___syscall204,"___syscall205":___syscall205,"___syscall207":___syscall207,"___syscall209":___syscall209,"___syscall211":___syscall211,"___syscall212":___syscall212,"___syscall214":___syscall214,"___syscall218":___syscall218,"___syscall219":___syscall219,"___syscall220":___syscall220,"___syscall221":___syscall221,"___syscall268":___syscall268,"___syscall269":___syscall269,"___syscall272":___syscall272,"___syscall29":___syscall29,"___syscall295":___syscall295,"___syscall296":___syscall296,"___syscall297":___syscall297,"___syscall298":___syscall298,"___syscall3":___syscall3,"___syscall300":___syscall300,"___syscall301":___syscall301,"___syscall302":___syscall302,"___syscall303":___syscall303,"___syscall304":___syscall304,"___syscall305":___syscall305,"___syscall306":___syscall306,"___syscall307":___syscall307,"___syscall308":___syscall308,"___syscall320":___syscall320,"___syscall324":___syscall324,"___syscall33":___syscall33,"___syscall330":___syscall330,"___syscall331":___syscall331,"___syscall333":___syscall333,"___syscall334":___syscall334,"___syscall337":___syscall337,"___syscall34":___syscall34,"___syscall340":___syscall340,"___syscall345":___syscall345,"___syscall36":___syscall36,"___syscall38":___syscall38,"___syscall39":___syscall39,"___syscall4":___syscall4,"___syscall40":___syscall40,"___syscall41":___syscall41,"___syscall42":___syscall42,"___syscall5":___syscall5,"___syscall51":___syscall51,"___syscall54":___syscall54,"___syscall57":___syscall57,"___syscall6":___syscall6,"___syscall60":___syscall60,"___syscall63":___syscall63,"___syscall64":___syscall64,"___syscall66":___syscall66,"___syscall75":___syscall75,"___syscall77":___syscall77,"___syscall83":___syscall83,"___syscall85":___syscall85,"___syscall9":___syscall9,"___syscall91":___syscall91,"___syscall94":___syscall94,"___syscall96":___syscall96,"___syscall97":___syscall97,"___unlock":___unlock,"___wait":___wait,"__addDays":__addDays,"__arraySum":__arraySum,"__exit":__exit,"__inet_ntop4_raw":__inet_ntop4_raw,"__inet_ntop6_raw":__inet_ntop6_raw,"__inet_pton4_raw":__inet_pton4_raw,"__inet_pton6_raw":__inet_pton6_raw,"__isLeapYear":__isLeapYear,"__read_sockaddr":__read_sockaddr,"__write_sockaddr":__write_sockaddr,"_clock_gettime":_clock_gettime,"_emscripten_get_now":_emscripten_get_now,"_emscripten_get_now_is_monotonic":_emscripten_get_now_is_monotonic,"_emscripten_memcpy_big":_emscripten_memcpy_big,"_endgrent":_endgrent,"_execl":_execl,"_fork":_fork,"_getenv":_getenv,"_getgrent":_getgrent,"_getnameinfo":_getnameinfo,"_gmtime_r":_gmtime_r,"_inet_addr":_inet_addr,"_kill":_kill,"_llvm_stackrestore":_llvm_stackrestore,"_llvm_stacksave":_llvm_stacksave,"_nanosleep":_nanosleep,"_pthread_cleanup_pop":_pthread_cleanup_pop,"_pthread_cleanup_push":_pthread_cleanup_push,"_pthread_setcancelstate":_pthread_setcancelstate,"_pthread_sigmask":_pthread_sigmask,"_res_query":_res_query,"_setgrent":_setgrent,"_setgroups":_setgroups,"_setitimer":_setitimer,"_sigfillset":_sigfillset,"_strftime":_strftime,"_sysconf":_sysconf,"_time":_time,"_usleep":_usleep,"_wait":_wait,"_waitpid":_waitpid,"flush_NO_FILESYSTEM":flush_NO_FILESYSTEM,"DYNAMICTOP_PTR":DYNAMICTOP_PTR,"tempDoublePtr":tempDoublePtr,"ABORT":ABORT,"STACKTOP":STACKTOP,"STACK_MAX":STACK_MAX};// EMSCRIPTEN_START_ASM
var asm=(/** @suppress {uselessCode} */ function(global,env,buffer) {
"use asm";var a=new global.Int8Array(buffer);var b=new global.Int16Array(buffer);var c=new global.Int32Array(buffer);var d=new global.Uint8Array(buffer);var e=new global.Uint16Array(buffer);var f=new global.Uint32Array(buffer);var g=new global.Float32Array(buffer);var h=new global.Float64Array(buffer);var i=env.DYNAMICTOP_PTR|0;var j=env.tempDoublePtr|0;var k=env.ABORT|0;var l=env.STACKTOP|0;var m=env.STACK_MAX|0;var n=0;var o=0;var p=0;var q=0;var r=global.NaN,s=global.Infinity;var t=0,u=0,v=0,w=0,x=0.0;var y=0;var z=global.Math.floor;var A=global.Math.abs;var B=global.Math.sqrt;var C=global.Math.pow;var D=global.Math.cos;var E=global.Math.sin;var F=global.Math.tan;var G=global.Math.acos;var H=global.Math.asin;var I=global.Math.atan;var J=global.Math.atan2;var K=global.Math.exp;var L=global.Math.log;var M=global.Math.ceil;var N=global.Math.imul;var O=global.Math.min;var P=global.Math.max;var Q=global.Math.clz32;var R=env.abort;var S=env.assert;var T=env.enlargeMemory;var U=env.getTotalMemory;var V=env.abortOnCannotGrowMemory;var W=env.invoke_ii;var X=env.invoke_iii;var Y=env.invoke_iiii;var Z=env.invoke_iiiii;var _=env.invoke_iiiiii;var $=env.invoke_v;var aa=env.invoke_vi;var ba=env.___block_all_sigs;var ca=env.___clock_gettime;var da=env.___clone;var ea=env.___lock;var fa=env.___map_file;var ga=env.___muldc3;var ha=env.___mulsc3;var ia=env.___restore_sigs;var ja=env.___setErrNo;var ka=env.___syscall1;var la=env.___syscall10;var ma=env.___syscall102;var na=env.___syscall114;var oa=env.___syscall118;var pa=env.___syscall12;var qa=env.___syscall121;var ra=env.___syscall122;var sa=env.___syscall125;var ta=env.___syscall132;var ua=env.___syscall133;var va=env.___syscall14;var wa=env.___syscall140;var xa=env.___syscall142;var ya=env.___syscall144;var za=env.___syscall145;var Aa=env.___syscall146;var Ba=env.___syscall147;var Ca=env.___syscall148;var Da=env.___syscall15;var Ea=env.___syscall150;var Fa=env.___syscall151;var Ga=env.___syscall152;var Ha=env.___syscall153;var Ia=env.___syscall163;var Ja=env.___syscall168;var Ka=env.___syscall180;var La=env.___syscall181;var Ma=env.___syscall183;var Na=env.___syscall191;var Oa=env.___syscall192;var Pa=env.___syscall193;var Qa=env.___syscall194;var Ra=env.___syscall195;var Sa=env.___syscall196;var Ta=env.___syscall197;var Ua=env.___syscall198;var Va=env.___syscall199;var Wa=env.___syscall20;var Xa=env.___syscall200;var Ya=env.___syscall201;var Za=env.___syscall202;var _a=env.___syscall203;var $a=env.___syscall204;var ab=env.___syscall205;var bb=env.___syscall207;var cb=env.___syscall209;var db=env.___syscall211;var eb=env.___syscall212;var fb=env.___syscall214;var gb=env.___syscall218;var hb=env.___syscall219;var ib=env.___syscall220;var jb=env.___syscall221;var kb=env.___syscall268;var lb=env.___syscall269;var mb=env.___syscall272;var nb=env.___syscall29;var ob=env.___syscall295;var pb=env.___syscall296;var qb=env.___syscall297;var rb=env.___syscall298;var sb=env.___syscall3;var tb=env.___syscall300;var ub=env.___syscall301;var vb=env.___syscall302;var wb=env.___syscall303;var xb=env.___syscall304;var yb=env.___syscall305;var zb=env.___syscall306;var Ab=env.___syscall307;var Bb=env.___syscall308;var Cb=env.___syscall320;var Db=env.___syscall324;var Eb=env.___syscall33;var Fb=env.___syscall330;var Gb=env.___syscall331;var Hb=env.___syscall333;var Ib=env.___syscall334;var Jb=env.___syscall337;var Kb=env.___syscall34;var Lb=env.___syscall340;var Mb=env.___syscall345;var Nb=env.___syscall36;var Ob=env.___syscall38;var Pb=env.___syscall39;var Qb=env.___syscall4;var Rb=env.___syscall40;var Sb=env.___syscall41;var Tb=env.___syscall42;var Ub=env.___syscall5;var Vb=env.___syscall51;var Wb=env.___syscall54;var Xb=env.___syscall57;var Yb=env.___syscall6;var Zb=env.___syscall60;var _b=env.___syscall63;var $b=env.___syscall64;var ac=env.___syscall66;var bc=env.___syscall75;var cc=env.___syscall77;var dc=env.___syscall83;var ec=env.___syscall85;var fc=env.___syscall9;var gc=env.___syscall91;var hc=env.___syscall94;var ic=env.___syscall96;var jc=env.___syscall97;var kc=env.___unlock;var lc=env.___wait;var mc=env.__addDays;var nc=env.__arraySum;var oc=env.__exit;var pc=env.__inet_ntop4_raw;var qc=env.__inet_ntop6_raw;var rc=env.__inet_pton4_raw;var sc=env.__inet_pton6_raw;var tc=env.__isLeapYear;var uc=env.__read_sockaddr;var vc=env.__write_sockaddr;var wc=env._clock_gettime;var xc=env._emscripten_get_now;var yc=env._emscripten_get_now_is_monotonic;var zc=env._emscripten_memcpy_big;var Ac=env._endgrent;var Bc=env._execl;var Cc=env._fork;var Dc=env._getenv;var Ec=env._getgrent;var Fc=env._getnameinfo;var Gc=env._gmtime_r;var Hc=env._inet_addr;var Ic=env._kill;var Jc=env._llvm_stackrestore;var Kc=env._llvm_stacksave;var Lc=env._nanosleep;var Mc=env._pthread_cleanup_pop;var Nc=env._pthread_cleanup_push;var Oc=env._pthread_setcancelstate;var Pc=env._pthread_sigmask;var Qc=env._res_query;var Rc=env._setgrent;var Sc=env._setgroups;var Tc=env._setitimer;var Uc=env._sigfillset;var Vc=env._strftime;var Wc=env._sysconf;var Xc=env._time;var Yc=env._usleep;var Zc=env._wait;var _c=env._waitpid;var $c=env.flush_NO_FILESYSTEM;var ad=0.0;
// EMSCRIPTEN_START_FUNCS
function xj(a,b,e,f,g,h){a=a|0;b=b|0;e=e|0;f=f|0;g=g|0;h=h|0;var i=0.0,j=0,k=0.0,m=0,n=0,o=0,p=0,q=0,r=0.0,s=0.0,t=0,u=0.0,v=0,w=0,x=0,z=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0.0;I=l;l=l+512|0;F=I;G=f+e|0;H=0-G|0;E=a+4|0;D=a+100|0;j=0;a:while(1){switch(b|0){case 46:{B=7;break a}case 48:break;default:{v=0;q=j;j=0;p=0;break a}}b=c[E>>2]|0;if(b>>>0<(c[D>>2]|0)>>>0){c[E>>2]=b+1;b=d[b>>0]|0}else b=Zf(a)|0;j=1}if((B|0)==7){b=c[E>>2]|0;if(b>>>0<(c[D>>2]|0)>>>0){c[E>>2]=b+1;b=d[b>>0]|0}else b=Zf(a)|0;if((b|0)==48){j=0;b=0;while(1){j=QC(j|0,b|0,-1,-1)|0;p=y;b=c[E>>2]|0;if(b>>>0<(c[D>>2]|0)>>>0){c[E>>2]=b+1;b=d[b>>0]|0}else b=Zf(a)|0;if((b|0)==48)b=p;else{v=1;q=1;break}}}else{v=1;q=j;j=0;p=0}}c[F>>2]=0;o=b+-48|0;n=(b|0)==46;b:do if(n|o>>>0<10){C=F+496|0;w=0;m=0;t=0;x=v;z=q;B=o;q=0;o=0;c:while(1){do if(n)if(!x){x=1;j=q;p=o}else break c;else{q=QC(q|0,o|0,1,0)|0;o=y;v=(b|0)!=48;if((m|0)>=125){if(!v)break;c[C>>2]=c[C>>2]|1;break}n=F+(m<<2)|0;if(!w)b=B;else b=b+-48+((c[n>>2]|0)*10|0)|0;c[n>>2]=b;w=w+1|0;z=(w|0)==9;w=z?0:w;m=m+(z&1)|0;t=v?q:t;z=1}while(0);b=c[E>>2]|0;if(b>>>0<(c[D>>2]|0)>>>0){c[E>>2]=b+1;b=d[b>>0]|0}else b=Zf(a)|0;B=b+-48|0;n=(b|0)==46;if(!(n|B>>>0<10)){v=x;n=z;B=31;break b}}b=w;n=(z|0)!=0;B=39}else{w=0;m=0;t=0;n=q;q=0;o=0;B=31}while(0);do if((B|0)==31){C=(v|0)==0;j=C?q:j;p=C?o:p;n=(n|0)!=0;if(!(n&(b|32|0)==101))if((b|0)>-1){b=w;B=39;break}else{b=w;B=41;break}n=yj(a,h)|0;b=y;if((n|0)==0&(b|0)==-2147483648){if(!h){Xf(a,0);i=0.0;break}if(!(c[D>>2]|0)){n=0;b=0}else{c[E>>2]=(c[E>>2]|0)+-1;n=0;b=0}}j=QC(n|0,b|0,j|0,p|0)|0;b=w;p=y;B=43}while(0);if((B|0)==39)if(c[D>>2]|0){c[E>>2]=(c[E>>2]|0)+-1;if(n)B=43;else B=42}else B=41;if((B|0)==41)if(n)B=43;else B=42;do if((B|0)==42){c[(Xd()|0)>>2]=22;Xf(a,0);i=0.0}else if((B|0)==43){n=c[F>>2]|0;if(!n){i=+(g|0)*0.0;break}if(((o|0)<0|(o|0)==0&q>>>0<10)&((j|0)==(q|0)&(p|0)==(o|0))?(e|0)>30|(n>>>e|0)==0:0){i=+(g|0)*+(n>>>0);break}a=(f|0)/-2|0;E=((a|0)<0)<<31>>31;if((p|0)>(E|0)|(p|0)==(E|0)&j>>>0>a>>>0){c[(Xd()|0)>>2]=34;i=+(g|0)*1797693134862315708145274.0e284*1797693134862315708145274.0e284;break}a=f+-106|0;E=((a|0)<0)<<31>>31;if((p|0)<(E|0)|(p|0)==(E|0)&j>>>0<a>>>0){c[(Xd()|0)>>2]=34;i=+(g|0)*2.2250738585072014e-308*2.2250738585072014e-308;break}if(b){if((b|0)<9){o=F+(m<<2)|0;n=c[o>>2]|0;while(1){n=n*10|0;if((b|0)>=8)break;else b=b+1|0}c[o>>2]=n}m=m+1|0}if((t|0)<9?(t|0)<=(j|0)&(j|0)<18:0){if((j|0)==9){i=+(g|0)*+((c[F>>2]|0)>>>0);break}if((j|0)<9){i=+(g|0)*+((c[F>>2]|0)>>>0)/+(c[136064+(8-j<<2)>>2]|0);break}a=e+27+(N(j,-3)|0)|0;b=c[F>>2]|0;if((a|0)>30|(b>>>a|0)==0){i=+(g|0)*+(b>>>0)*+(c[136064+(j+-10<<2)>>2]|0);break}}b=(j|0)%9|0;if(!b)n=0;else{t=(j|0)>-1?b:b+9|0;p=c[136064+(8-t<<2)>>2]|0;if(m){q=1e9/(p|0)|0;o=0;n=0;b=0;do{D=F+(b<<2)|0;E=c[D>>2]|0;a=(E>>>0)/(p>>>0)|0;E=E-(N(a,p)|0)|0;a=a+o|0;c[D>>2]=a;o=N(q,E)|0;a=(b|0)==(n|0)&(a|0)==0;j=a?j+-9|0:j;n=a?n+1&127:n;b=b+1|0}while((b|0)!=(m|0));if(!o)b=m;else{c[F+(m<<2)>>2]=o;b=m+1|0}}else{n=0;b=0}m=b;j=9-t+j|0}b=0;d:while(1){v=(j|0)<18;w=(j|0)==18;x=F+(n<<2)|0;while(1){if(!v){if(!w)break d;if((c[x>>2]|0)>>>0>=9007199){j=18;break d}}o=0;z=m;m=m+127|0;while(1){q=m&127;p=F+(q<<2)|0;m=_C(c[p>>2]|0,0,29)|0;m=QC(m|0,y|0,o|0,0)|0;o=y;if(o>>>0>0|(o|0)==0&m>>>0>1e9){t=XC(m|0,o|0,1e9,0)|0;a=WC(t|0,y|0,1e9,0)|0;m=RC(m|0,o|0,a|0,y|0)|0}else t=0;c[p>>2]=m;a=(q|0)==(n|0);p=(q|0)!=(z+127&127|0)|a?z:(m|0)==0?q:z;if(a)break;else{o=t;z=p;m=q+-1|0}}b=b+-29|0;if(!t)m=z;else break}n=n+127&127;m=p+127&127;o=F+((p+126&127)<<2)|0;if((n|0)==(p|0))c[o>>2]=c[o>>2]|c[F+(m<<2)>>2];else m=z;c[F+(n<<2)>>2]=t;j=j+9|0}e:while(1){w=m+1&127;x=F+((m+127&127)<<2)|0;while(1){q=(j|0)==18;v=(j|0)>27?9:1;z=n;while(1){p=0;while(1){n=p+z&127;if((n|0)==(m|0)){B=92;break}n=c[F+(n<<2)>>2]|0;o=c[162348+(p<<2)>>2]|0;if(n>>>0<o>>>0){B=92;break}if(n>>>0>o>>>0)break;if((p+1|0)>>>0<2)p=1;else{B=92;break}}if((B|0)==92?(B=0,q):0)break e;b=v+b|0;if((z|0)==(m|0))z=m;else break}q=(1<<v)+-1|0;t=1e9>>>v;p=0;n=z;o=z;do{D=F+(o<<2)|0;E=c[D>>2]|0;a=(E>>>v)+p|0;c[D>>2]=a;p=N(E&q,t)|0;a=(o|0)==(n|0)&(a|0)==0;j=a?j+-9|0:j;n=a?n+1&127:n;o=o+1&127}while((o|0)!=(m|0));if(p|0){if((w|0)!=(n|0))break;c[x>>2]=c[x>>2]|1}}c[F+(m<<2)>>2]=p;m=w}i=0.0;j=m;n=0;do{o=n+z&127;m=j+1&127;if((o|0)==(j|0)){c[F+(m+-1<<2)>>2]=0;j=m}i=i*1.0e9+ +((c[F+(o<<2)>>2]|0)>>>0);n=n+1|0}while((n|0)!=2);u=+(g|0);k=i*u;o=b+53|0;p=o-f|0;q=(p|0)<(e|0);n=q?((p|0)>0?p:0):e;if((n|0)<53){J=+Aj(+zj(1.0,105-n|0),k);r=+Bj(k,+zj(1.0,53-n|0));s=J;i=r;r=J+(k-r)}else{s=0.0;i=0.0;r=k}m=z+2&127;if((m|0)!=(j|0)){m=c[F+(m<<2)>>2]|0;do if(m>>>0>=5e8){if((m|0)!=5e8){i=u*.75+i;break}if((z+3&127|0)==(j|0)){i=u*.5+i;break}else{i=u*.75+i;break}}else{if((m|0)==0?(z+3&127|0)==(j|0):0)break;i=u*.25+i}while(0);if((53-n|0)>1?!(+Bj(i,1.0)!=0.0):0)k=i+1.0;else k=i}else k=i;i=r+k-s;do if((o&2147483647|0)>(-2-G|0)){G=!(+A(+i)>=9007199254740992.0);b=b+((G^1)&1)|0;i=G?i:i*.5;if((b+50|0)<=(H|0)?!(k!=0.0&(q&((n|0)!=(p|0)|G))):0)break;c[(Xd()|0)>>2]=34}while(0);i=+Cj(i,b)}while(0);l=I;return +i}function yj(a,b){a=a|0;b=b|0;var e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0;i=a+4|0;e=c[i>>2]|0;j=a+100|0;if(e>>>0<(c[j>>2]|0)>>>0){c[i>>2]=e+1;f=d[e>>0]|0}else f=Zf(a)|0;switch(f|0){case 43:case 45:{g=(f|0)==45&1;e=c[i>>2]|0;if(e>>>0<(c[j>>2]|0)>>>0){c[i>>2]=e+1;e=d[e>>0]|0}else e=Zf(a)|0;f=e+-48|0;if((b|0)!=0&f>>>0>9)if(!(c[j>>2]|0)){f=0;e=-2147483648}else{c[i>>2]=(c[i>>2]|0)+-1;k=14}else k=12;break}default:{g=0;e=f;f=f+-48|0;k=12}}if((k|0)==12)if(f>>>0>9)k=14;else{f=0;do{f=e+-48+(f*10|0)|0;e=c[i>>2]|0;if(e>>>0<(c[j>>2]|0)>>>0){c[i>>2]=e+1;e=d[e>>0]|0}else e=Zf(a)|0;b=e+-48|0}while(b>>>0<10&(f|0)<214748364);h=((f|0)<0)<<31>>31;if(b>>>0<10){do{l=WC(f|0,h|0,10,0)|0;b=y;e=QC(e|0,((e|0)<0)<<31>>31|0,-48,-1)|0;f=QC(e|0,y|0,l|0,b|0)|0;h=y;e=c[i>>2]|0;if(e>>>0<(c[j>>2]|0)>>>0){c[i>>2]=e+1;e=d[e>>0]|0}else e=Zf(a)|0;b=e+-48|0}while(b>>>0<10&((h|0)<21474836|(h|0)==21474836&f>>>0<2061584302));if(b>>>0<10){do{e=c[i>>2]|0;if(e>>>0<(c[j>>2]|0)>>>0){c[i>>2]=e+1;e=d[e>>0]|0}else e=Zf(a)|0}while((e+-48|0)>>>0<10);e=h}else e=h}else e=h;if(c[j>>2]|0)c[i>>2]=(c[i>>2]|0)+-1;l=(g|0)==0;j=RC(0,0,f|0,e|0)|0;f=l?f:j;e=l?e:y}if((k|0)==14)if(!(c[j>>2]|0)){f=0;e=-2147483648}else{c[i>>2]=(c[i>>2]|0)+-1;f=0;e=-2147483648}y=e;return f|0}function zj(a,b){a=+a;b=b|0;var d=0,e=0;if((b|0)<=1023){if((b|0)<-1022){a=a*2.2250738585072014e-308;e=(b|0)<-2044;d=b+2044|0;a=e?a*2.2250738585072014e-308:a;b=e?((d|0)>-1022?d:-1022):b+1022|0}}else{a=a*8988465674311579538646525.0e283;d=(b|0)>2046;e=b+-2046|0;a=d?a*8988465674311579538646525.0e283:a;b=d?((e|0)<1023?e:1023):b+-1023|0}d=_C(b+1023|0,0,52)|0;e=y;c[j>>2]=d;c[j+4>>2]=e;return +(a*+h[j>>3])}function Aj(a,b){a=+a;b=+b;return +(+Fj(a,b))}function Bj(a,b){a=+a;b=+b;return +(+Dj(a,b))}function Cj(a,b){a=+a;b=b|0;return +(+zj(a,b))}function Dj(a,b){a=+a;b=+b;var d=0,e=0,f=0,g=0,i=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0;h[j>>3]=a;i=c[j>>2]|0;l=c[j+4>>2]|0;h[j>>3]=b;n=c[j>>2]|0;o=c[j+4>>2]|0;e=ZC(i|0,l|0,52)|0;e=e&2047;m=ZC(n|0,o|0,52)|0;m=m&2047;p=l&-2147483648;g=_C(n|0,o|0,1)|0;k=y;a:do if(!((g|0)==0&(k|0)==0)?(f=Ej(b)|0,d=y&2147483647,!((e|0)==2047|(d>>>0>2146435072|(d|0)==2146435072&f>>>0>0))):0){d=_C(i|0,l|0,1)|0;f=y;if(!(f>>>0>k>>>0|(f|0)==(k|0)&d>>>0>g>>>0))return +((d|0)==(g|0)&(f|0)==(k|0)?a*0.0:a);if(!e){d=_C(i|0,l|0,12)|0;f=y;if((f|0)>-1|(f|0)==-1&d>>>0>4294967295){e=0;do{e=e+-1|0;d=_C(d|0,f|0,1)|0;f=y}while((f|0)>-1|(f|0)==-1&d>>>0>4294967295)}else e=0;i=_C(i|0,l|0,1-e|0)|0;g=y}else g=l&1048575|1048576;if(!m){f=_C(n|0,o|0,12)|0;k=y;if((k|0)>-1|(k|0)==-1&f>>>0>4294967295){d=0;do{d=d+-1|0;f=_C(f|0,k|0,1)|0;k=y}while((k|0)>-1|(k|0)==-1&f>>>0>4294967295)}else d=0;n=_C(n|0,o|0,1-d|0)|0;m=d;l=y}else l=o&1048575|1048576;f=RC(i|0,g|0,n|0,l|0)|0;d=y;k=(d|0)>-1|(d|0)==-1&f>>>0>4294967295;b:do if((e|0)>(m|0)){while(1){if(k){if((f|0)==0&(d|0)==0)break}else{f=i;d=g}i=_C(f|0,d|0,1)|0;g=y;e=e+-1|0;f=RC(i|0,g|0,n|0,l|0)|0;d=y;k=(d|0)>-1|(d|0)==-1&f>>>0>4294967295;if((e|0)<=(m|0))break b}b=a*0.0;break a}while(0);if(k){if((f|0)==0&(d|0)==0){b=a*0.0;break}}else{d=g;f=i}if(d>>>0<1048576|(d|0)==1048576&f>>>0<0)do{f=_C(f|0,d|0,1)|0;d=y;e=e+-1|0}while(d>>>0<1048576|(d|0)==1048576&f>>>0<0);if((e|0)>0){o=QC(f|0,d|0,0,-1048576)|0;d=y;e=_C(e|0,0,52)|0;d=d|y;e=o|e}else{e=ZC(f|0,d|0,1-e|0)|0;d=y}c[j>>2]=e;c[j+4>>2]=d|p;b=+h[j>>3]}else q=3;while(0);if((q|0)==3){b=a*b;b=b/b}return +b}function Ej(a){a=+a;var b=0;h[j>>3]=a;b=c[j>>2]|0;y=c[j+4>>2]|0;return b|0}function Fj(a,b){a=+a;b=+b;var d=0,e=0;h[j>>3]=a;e=c[j>>2]|0;d=c[j+4>>2]|0;h[j>>3]=b;d=c[j+4>>2]&-2147483648|d&2147483647;c[j>>2]=e;c[j+4>>2]=d;return +(+h[j>>3])}function Gj(a,b){a=a|0;b=b|0;return +(+uj(a,b,1))}function Hj(a,b){a=a|0;b=b|0;return +(+uj(a,b,2))}function Ij(a,b,c){a=a|0;b=b|0;c=c|0;return +(+tj(a,b))}function Jj(a,b,c){a=a|0;b=b|0;c=c|0;return +(+Gj(a,b))}function Kj(a,b,c){a=a|0;b=b|0;c=c|0;return +(+Hj(a,b))}function Lj(b){b=b|0;var c=0,d=0,e=0,f=0,g=0;while(1){e=b+1|0;if(!(_f(a[b>>0]|0)|0))break;else b=e}d=a[b>>0]|0;switch(d|0){case 45:{b=1;f=5;break}case 43:{b=0;f=5;break}default:{g=0;c=b;b=d}}if((f|0)==5){g=b;c=e;b=a[e>>0]|0}if(!(uf(b)|0))b=0;else{b=0;do{b=(b*10|0)+48-(a[c>>0]|0)|0;c=c+1|0}while((uf(a[c>>0]|0)|0)!=0)}return ((g|0)==0?0-b|0:b)|0}function Mj(a,b,d){a=a|0;b=b|0;d=d|0;var e=0;e=(b|0)/(d|0)|0;c[a>>2]=e;c[a+4>>2]=b-(N(e,d)|0);return}function Nj(b,d,e,f){b=+b;d=d|0;e=e|0;f=f|0;var g=0,i=0,j=0,k=0;k=l;l=l+1520|0;i=k+1504|0;g=k;j=d>>>0<1400?d:1400;c[i>>2]=j;h[i+8>>3]=b;Oj(g,166985,i)|0;i=(a[g>>0]|0)==45&1;g=g+i|0;if((a[g>>0]|0)==48)g=Pj(g+2|0,167057)|0;else g=0-(Qj(g,167761)|0)|0;if((j|0)>(g|0))g=Rj(b,j-g|0,e,f)|0;else{c[f>>2]=i;c[e>>2]=1;g=167004+(j>>>0<14?0-d|0:-14)|0}l=k;return g|0}function Oj(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0;e=l;l=l+16|0;f=e;c[f>>2]=d;d=Sj(a,b,f)|0;l=e;return d|0}function Pj(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,i=0;g=l;l=l+32|0;f=g;c[f>>2]=0;c[f+4>>2]=0;c[f+8>>2]=0;c[f+12>>2]=0;c[f+16>>2]=0;c[f+20>>2]=0;c[f+24>>2]=0;c[f+28>>2]=0;e=a[d>>0]|0;do if(!(e<<24>>24))d=0;else{if(!(a[d+1>>0]|0)){d=b;while(1)if((a[d>>0]|0)==e<<24>>24)d=d+1|0;else break;d=d-b|0;break}do{i=e&255;h=f+(i>>>5<<2)|0;c[h>>2]=c[h>>2]|1<<(i&31);d=d+1|0;e=a[d>>0]|0}while(e<<24>>24!=0);e=a[b>>0]|0;a:do if(!(e<<24>>24))d=b;else{d=b;do{i=e&255;if(!(c[f+(i>>>5<<2)>>2]&1<<(i&31)))break a;d=d+1|0;e=a[d>>0]|0}while(e<<24>>24!=0)}while(0);d=d-b|0}while(0);l=g;return d|0}function Qj(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0;h=l;l=l+32|0;f=h;e=a[d>>0]|0;a:do if(e<<24>>24!=0?(a[d+1>>0]|0)!=0:0){dD(f|0,0,32)|0;e=a[d>>0]|0;if(e<<24>>24)do{j=e&255;i=f+(j>>>5<<2)|0;c[i>>2]=c[i>>2]|1<<(j&31);d=d+1|0;e=a[d>>0]|0}while(e<<24>>24!=0);d=a[b>>0]|0;if(!(d<<24>>24))e=b;else{e=b;do{j=d&255;if(c[f+(j>>>5<<2)>>2]&1<<(j&31)|0)break a;e=e+1|0;d=a[e>>0]|0}while(d<<24>>24!=0)}}else g=3;while(0);if((g|0)==3)e=Hf(b,e<<24>>24)|0;l=h;return e-b|0}function Rj(b,d,e,f){b=+b;d=d|0;e=e|0;f=f|0;var g=0,i=0,j=0,k=0;k=l;l=l+48|0;i=k+32|0;j=k;d=d+-1|0;c[i>>2]=d>>>0>15?14:d;h[i+8>>3]=b;Oj(j,167006,i)|0;d=(a[j>>0]|0)==45&1;c[f>>2]=d;f=a[j+d>>0]|0;if(f<<24>>24==101)f=170288;else{i=0;g=f;f=170288;do{a[f>>0]=g;d=d+1|0;i=i+(g<<24>>24!=46&1)|0;g=a[j+d>>0]|0;f=170288+i|0}while(g<<24>>24!=101)}a[f>>0]=0;c[e>>2]=(Lj(j+d+1|0)|0)+1;l=k;return 170288}function Sj(a,b,c){a=a|0;b=b|0;c=c|0;return th(a,2147483647,b,c)|0}function Tj(a,b){a=a|0;b=b|0;var c=0,d=0;d=(b|0)>0|(b|0)==0&a>>>0>0;c=RC(0,0,a|0,b|0)|0;y=d?b:y;return (d?a:c)|0}function Uj(a,b){a=a|0;b=b|0;var c=0,d=0;d=(b|0)>0|(b|0)==0&a>>>0>0;c=RC(0,0,a|0,b|0)|0;y=d?b:y;return (d?a:c)|0}function Vj(a,b,d){a=+a;b=b|0;d=d|0;var e=0,f=0;e=l;l=l+16|0;f=e;c[f>>2]=b;h[f+8>>3]=a;Oj(d,167011,f)|0;l=e;return d|0}function Wj(b){b=b|0;var c=0,d=0,e=0,f=0;while(1){d=b+1|0;if(!(_f(a[b>>0]|0)|0))break;else b=d}c=a[b>>0]|0;switch(c|0){case 45:{b=1;e=5;break}case 43:{b=0;e=5;break}default:f=0}if((e|0)==5){f=b;b=d;c=a[d>>0]|0}if(!(uf(c)|0)){d=0;b=0}else{d=0;c=0;do{c=WC(d|0,c|0,10,0)|0;d=(a[b>>0]|0)+-48|0;b=b+1|0;d=RC(c|0,y|0,d|0,((d|0)<0)<<31>>31|0)|0;c=y}while((uf(a[b>>0]|0)|0)!=0);b=c}e=(f|0)==0;f=RC(0,0,d|0,b|0)|0;y=e?y:b;return (e?f:d)|0}function Xj(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0,h=0;a:do if(!c)b=0;else{h=b;while(1){g=c>>>1;b=h+(N(g,d)|0)|0;f=cd[e&7](a,b)|0;if(!f)break a;if((c|0)==1){b=0;break a}f=(f|0)<0;c=f?g:c-g|0;if(!c){b=0;break}else h=f?h:b}}while(0);return b|0}function Yj(a,b,c){a=a|0;b=b|0;c=c|0;c=Zj(a,b,c,-1,-1)|0;return c|0}function Zj(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,i=0,j=0,k=0,m=0,n=0,o=0;o=l;l=l+192|0;k=o+64|0;m=k+8|0;n=k+4|0;h=o+4|0;g=k+44|0;i=k;j=i+124|0;do{c[i>>2]=0;i=i+4|0}while((i|0)<(j|0));c[g>>2]=h;c[k+48>>2]=60;c[k+76>>2]=-1;c[k+32>>2]=6;h=a;while(1)if(!(Eg(c[h>>2]|0)|0))break;else h=h+4|0;c[k+84>>2]=h;Xf(k,0);g=Yf(k,d,1,e,f)|0;if(b|0){n=(c[n>>2]|0)-(c[m>>2]|0)+(c[k+108>>2]|0)|0;c[b>>2]=(n|0)==0?a:h+(n<<2)|0}l=o;return g|0}function _j(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,i=0,j=0,k=0;j=b+84|0;k=c[j>>2]|0;k=(c[k>>2]|0)==0?162356:k;h=b+48|0;i=b+44|0;a:do if(!(c[h>>2]|0))h=0;else{f=0;while(1){g=c[k+(f<<2)>>2]|0;if(!g){h=f;break a}a[(c[i>>2]|0)+f>>0]=(g|0)<128?g&255:64;f=f+1|0;if(f>>>0>=(c[h>>2]|0)>>>0){h=f;break}}}while(0);f=c[i>>2]|0;g=b+4|0;c[g>>2]=f;c[b+8>>2]=f+h;c[j>>2]=k+(h<<2);if((e|0)!=0&(h|0)!=0){c[g>>2]=f+1;a[d>>0]=a[f>>0]|0;f=1}else f=0;return f|0}function $j(a,b,c){a=a|0;b=b|0;c=c|0;c=Zj(a,b,c,0,-2147483648)|0;return c|0}function ak(a,b,c){a=a|0;b=b|0;c=c|0;c=Zj(a,b,c,-1,0)|0;return c|0}function bk(a,b,c){a=a|0;b=b|0;c=c|0;c=Zj(a,b,c,-2147483648,0)|0;return c|0}function ck(a,b,c){a=a|0;b=b|0;c=c|0;c=$j(a,b,c)|0;return c|0}function dk(a,b,c){a=a|0;b=b|0;c=c|0;c=Yj(a,b,c)|0;return c|0}function ek(a,b,d){a=a|0;b=b|0;d=d|0;var e=0;e=(b|0)/(d|0)|0;c[a>>2]=e;c[a+4>>2]=b-(N(e,d)|0);return}function fk(a,b,c){a=a|0;b=b|0;c=c|0;c=Wf(a,b,c,-1,-1)|0;return c|0}function gk(a,b,c){a=a|0;b=b|0;c=c|0;c=Wf(a,b,c,0,-2147483648)|0;return c|0}function hk(a,b,c){a=a|0;b=b|0;c=c|0;c=Wf(a,b,c,-2147483648,0)|0;return c|0}function ik(a,b,c){a=a|0;b=b|0;c=c|0;c=gk(a,b,c)|0;return c|0}function jk(a,b,c){a=a|0;b=b|0;c=c|0;c=fk(a,b,c)|0;return c|0}function kk(a,b){a=a|0;b=b|0;return +(+lk(a,b,0))}function lk(a,b,d){a=a|0;b=b|0;d=d|0;var e=0.0,f=0,g=0,h=0,i=0,j=0,k=0,m=0,n=0;n=l;l=l+192|0;j=n+64|0;k=j+8|0;m=j+4|0;f=n+4|0;g=j+44|0;h=j;i=h+124|0;do{c[h>>2]=0;h=h+4|0}while((h|0)<(i|0));c[g>>2]=f;c[j+48>>2]=60;c[j+76>>2]=-1;c[j+32>>2]=7;f=a;while(1)if(!(Eg(c[f>>2]|0)|0))break;else f=f+4|0;c[j+84>>2]=f;Xf(j,0);e=+vj(j,d,1);if(b|0){m=(c[m>>2]|0)-(c[k>>2]|0)+(c[j+108>>2]|0)|0;c[b>>2]=(m|0)==0?a:f+(m<<2)|0}l=n;return +e}function mk(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,i=0,j=0,k=0;j=b+84|0;k=c[j>>2]|0;k=(c[k>>2]|0)==0?162356:k;h=b+48|0;i=b+44|0;a:do if(!(c[h>>2]|0))h=0;else{f=0;while(1){g=c[k+(f<<2)>>2]|0;if(!g){h=f;break a}a[(c[i>>2]|0)+f>>0]=(g|0)<128?g&255:64;f=f+1|0;if(f>>>0>=(c[h>>2]|0)>>>0){h=f;break}}}while(0);f=c[i>>2]|0;g=b+4|0;c[g>>2]=f;c[b+8>>2]=f+h;c[j>>2]=k+(h<<2);if((e|0)!=0&(h|0)!=0){c[g>>2]=f+1;a[d>>0]=a[f>>0]|0;f=1}else f=0;return f|0}function nk(a,b){a=a|0;b=b|0;return +(+lk(a,b,1))}function ok(a,b){a=a|0;b=b|0;return +(+lk(a,b,2))}function pk(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,i=0;h=UC(b|0,d|0,e|0,f|0)|0;g=y;i=a;c[i>>2]=h;c[i+4>>2]=g;e=WC(h|0,g|0,e|0,f|0)|0;e=RC(b|0,d|0,e|0,y|0)|0;f=a+8|0;c[f>>2]=e;c[f+4>>2]=y;return}function qk(b){b=b|0;var c=0,d=0,e=0,f=0,g=0;while(1){e=b+1|0;if(!(_f(a[b>>0]|0)|0))break;else b=e}d=a[b>>0]|0;switch(d|0){case 45:{b=1;f=5;break}case 43:{b=0;f=5;break}default:{g=0;c=b;b=d}}if((f|0)==5){g=b;c=e;b=a[e>>0]|0}if(!(uf(b)|0))b=0;else{b=0;do{b=(b*10|0)+48-(a[c>>0]|0)|0;c=c+1|0}while((uf(a[c>>0]|0)|0)!=0)}return ((g|0)==0?0-b|0:b)|0}function rk(a){a=a|0;return +(+Gj(a,0))}function sk(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,i=0,j=0,k=0,m=0,n=0,o=0;n=l;l=l+208|0;j=n;k=n+192|0;h=N(d,b)|0;i=k;c[i>>2]=1;c[i+4>>2]=0;a:do if(h|0){i=0-d|0;c[j+4>>2]=d;c[j>>2]=d;f=2;b=d;g=d;while(1){b=b+d+g|0;c[j+(f<<2)>>2]=b;if(b>>>0<h>>>0){o=g;f=f+1|0;g=b;b=o}else break}g=a+h+i|0;if(g>>>0>a>>>0){h=g;f=1;b=1;do{do if((b&3|0)!=3){b=f+-1|0;if((c[j+(b<<2)>>2]|0)>>>0<(h-a|0)>>>0)tk(a,d,e,f,j);else vk(a,d,e,k,f,0,j);if((f|0)==1){wk(k,1);f=0;break}else{wk(k,b);f=1;break}}else{tk(a,d,e,f,j);uk(k,2);f=f+2|0}while(0);b=c[k>>2]|1;c[k>>2]=b;a=a+d|0}while(a>>>0<g>>>0)}else{f=1;b=1}vk(a,d,e,k,f,0,j);g=k+4|0;while(1){if((f|0)==1&(b|0)==1)if(!(c[g>>2]|0))break a;else m=19;else if((f|0)<2)m=19;else{wk(k,2);o=f+-2|0;c[k>>2]=c[k>>2]^7;uk(k,1);vk(a+(0-(c[j+(o<<2)>>2]|0))+i|0,d,e,k,f+-1|0,1,j);wk(k,1);b=c[k>>2]|1;c[k>>2]=b;a=a+i|0;vk(a,d,e,k,o,1,j);f=o}if((m|0)==19){m=0;b=xk(k)|0;uk(k,b);a=a+i|0;f=b+f|0;b=c[k>>2]|0}}}while(0);l=n;return}function tk(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,i=0,j=0,k=0,m=0,n=0;n=l;l=l+240|0;m=n;c[m>>2]=a;a:do if((e|0)>1){k=0-b|0;i=a;g=e;e=1;h=a;while(1){i=i+k|0;j=g+-2|0;a=i+(0-(c[f+(j<<2)>>2]|0))|0;if((cd[d&7](h,a)|0)>-1?(cd[d&7](h,i)|0)>-1:0)break a;h=m+(e<<2)|0;if((cd[d&7](a,i)|0)>-1){c[h>>2]=a;g=g+-1|0}else{c[h>>2]=i;a=i;g=j}e=e+1|0;if((g|0)<=1)break a;i=a;h=c[m>>2]|0}}else e=1;while(0);zk(b,m,e);l=n;return}function uk(a,b){a=a|0;b=b|0;var d=0,e=0,f=0;f=a+4|0;if(b>>>0>31){e=c[f>>2]|0;c[a>>2]=e;c[f>>2]=0;b=b+-32|0;d=0}else{d=c[f>>2]|0;e=c[a>>2]|0}c[a>>2]=d<<32-b|e>>>b;c[f>>2]=d>>>b;return}function vk(a,b,d,e,f,g,h){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var i=0,j=0,k=0,m=0,n=0,o=0,p=0,q=0;p=l;l=l+240|0;n=p+232|0;o=p;q=c[e>>2]|0;c[n>>2]=q;j=c[e+4>>2]|0;k=n+4|0;c[k>>2]=j;c[o>>2]=a;a:do if((q|0)!=1|(j|0)!=0?(m=0-b|0,i=a+(0-(c[h+(f<<2)>>2]|0))|0,(cd[d&7](i,a)|0)>=1):0){e=1;g=(g|0)==0;j=i;while(1){if(g&(f|0)>1){g=a+m|0;i=c[h+(f+-2<<2)>>2]|0;if((cd[d&7](g,j)|0)>-1){i=10;break a}if((cd[d&7](g+(0-i)|0,j)|0)>-1){i=10;break a}}g=e+1|0;c[o+(e<<2)>>2]=j;q=xk(n)|0;uk(n,q);f=q+f|0;if(!((c[n>>2]|0)!=1|(c[k>>2]|0)!=0)){e=g;a=j;i=10;break a}a=j+(0-(c[h+(f<<2)>>2]|0))|0;if((cd[d&7](a,c[o>>2]|0)|0)<1){a=j;e=g;g=0;i=9;break}else{q=j;e=g;g=1;j=a;a=q}}}else{e=1;i=9}while(0);if((i|0)==9?(g|0)==0:0)i=10;if((i|0)==10){zk(b,o,e);tk(a,b,d,f,h)}l=p;return}function wk(a,b){a=a|0;b=b|0;var d=0,e=0,f=0;f=a+4|0;if(b>>>0>31){e=c[a>>2]|0;c[f>>2]=e;c[a>>2]=0;b=b+-32|0;d=0}else{d=c[a>>2]|0;e=c[f>>2]|0}c[f>>2]=d>>>(32-b|0)|e<<b;c[a>>2]=d<<b;return}function xk(a){a=a|0;var b=0;b=yk((c[a>>2]|0)+-1|0)|0;if(!b){b=yk(c[a+4>>2]|0)|0;return ((b|0)==0?0:b+32|0)|0}else return b|0;return 0}function yk(a){a=a|0;var b=0;if(a)if(!(a&1)){b=a;a=0;while(1){a=a+1|0;if(!(b&2))b=b>>>1;else break}}else a=0;else a=32;return a|0}function zk(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0,i=0;h=l;l=l+256|0;e=h;a:do if((d|0)>=2?(g=b+(d<<2)|0,c[g>>2]=e,a|0):0)while(1){f=a>>>0<256?a:256;bD(e|0,c[b>>2]|0,f|0)|0;e=0;do{i=b+(e<<2)|0;e=e+1|0;bD(c[i>>2]|0,c[b+(e<<2)>>2]|0,f|0)|0;c[i>>2]=(c[i>>2]|0)+f}while((e|0)!=(d|0));a=a-f|0;if(!a)break a;e=c[g>>2]|0}while(0);l=h;return}function Ak(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,i=0;h=UC(b|0,d|0,e|0,f|0)|0;g=y;i=a;c[i>>2]=h;c[i+4>>2]=g;e=WC(h|0,g|0,e|0,f|0)|0;e=RC(b|0,d|0,e|0,y|0)|0;f=a+8|0;c[f>>2]=e;c[f+4>>2]=y;return}function Bk(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0.0,g=0.0,i=0.0,k=0.0,m=0.0,n=0;e=l;l=l+16|0;n=e;k=+h[b+8>>3];m=+Ck(+h[b>>3],n);b=(c[n>>2]|0)+d|0;d=(b|0)/2|0;c[j>>2]=0;c[j+4>>2]=(d<<20)+1072693248;i=+h[j>>3];c[j>>2]=0;c[j+4>>2]=(b-d<<20)+1072693248;g=+h[j>>3];f=m*+E(+k)*i*g;h[a>>3]=m*+D(+k)*i*g;h[a+8>>3]=f;l=e;return}function Ck(a,b){a=+a;b=b|0;var d=0,e=0,f=0;a=+K(+(a+-1246.9717778273416));h[j>>3]=a;e=c[j>>2]|0;d=c[j+4>>2]|0;f=ZC(e|0,d|0,52)|0;c[b>>2]=f+-247;c[j>>2]=e;c[j+4>>2]=d&1048575|2145386496;return +(+h[j>>3])}function Dk(a,b){a=a|0;b=b|0;var d=0,e=0.0,f=0,h=0,i=0,j=0;d=l;l=l+32|0;h=d+16|0;f=d+8|0;i=d;j=c[b>>2]|0;g[i>>2]=-+g[b+4>>2];c[i+4>>2]=j;c[h>>2]=c[i>>2];c[h+4>>2]=c[i+4>>2];Ek(f,h);e=-+g[f>>2];c[a>>2]=c[f+4>>2];g[a+4>>2]=e;l=d;return}function Ek(a,b){a=a|0;b=b|0;var d=0.0,e=0.0,f=0,h=0.0,i=0.0;e=+g[b>>2];d=+g[b+4>>2];f=(g[j>>2]=e,c[j>>2]|0);b=f&2147483647;do if(b>>>0<=2139095039){if(((Fk(d)|0)&2139095040|0)==2139095040){d=d-d;g[a>>2]=(b|0)==0?e:d;g[a+4>>2]=d;break}if(b>>>0>1093664767){h=+K(+-+A(+e));d=h*(h*(+E(+d)*4.0*+D(+d)));g[a>>2]=+Gk(1.0,e);g[a+4>>2]=d;break}else{d=+F(+d);i=d*d+1.0;e=+Hk(e);h=e*(e*i)+1.0;g[a>>2]=e*(i*+B(+(e*e+1.0)))/h;g[a+4>>2]=d/h;break}}else{if(f&8388607|0){g[a>>2]=e;g[a+4>>2]=d==0.0?d:e*d;break}if(((Fk(d)|0)&2147483647|0)!=2139095040)d=+E(+d)*+D(+d);i=+Gk(0.0,d);c[a>>2]=f+-1073741824;g[a+4>>2]=i}while(0);return}function Fk(a){a=+a;return (g[j>>2]=a,c[j>>2]|0)|0}function Gk(a,b){a=+a;b=+b;var d=0;d=(g[j>>2]=a,c[j>>2]|0);return +(c[j>>2]=(g[j>>2]=b,c[j>>2]|0)&-2147483648|d&2147483647,+g[j>>2])}function Hk(a){a=+a;var b=0.0,d=0,e=0.0;d=(g[j>>2]=a,c[j>>2]|0);e=(d|0)<0?-.5:.5;d=d&2147483647;b=(c[j>>2]=d,+g[j>>2]);do if(d>>>0<1118925335){b=+Ik(b);if(d>>>0>=1065353216){a=e*(b+b/(b+1.0));break}if(d>>>0>=964689920)a=e*(b*2.0-b*b/(b+1.0))}else a=e*2.0*+Jk(b);while(0);return +a}function Ik(a){a=+a;var b=0,d=0,e=0.0,f=0.0,h=0.0,i=0,k=0.0;d=(g[j>>2]=a,c[j>>2]|0);b=d&2147483647;d=d>>>31;do if(b>>>0>1100331075){if(b>>>0<=2139095040)if(!d)if(a>88.7216796875)a=a*1701411834604692317316873.0e14;else i=11;else a=-1.0}else{if(b>>>0<=1051816472)if(b>>>0<855638016)break;else{h=0.0;d=0;i=14;break}if(b>>>0<1065686418)if(!d){b=1;e=a+-.6931381225585938;f=9.05800061445916e-06;i=12;break}else{b=-1;e=a+.6931381225585938;f=-9.05800061445916e-06;i=12;break}else i=11}while(0);if((i|0)==11){b=~~(a*1.4426950216293335+((d|0)==0?.5:-.5));f=+(b|0);e=a-f*.6931381225585938;f=f*9.05800061445916e-06;i=12}if((i|0)==12){h=e-f;a=h;h=e-h-f;d=b;i=14}a:do if((i|0)==14){f=a*.5;e=a*f;k=e*(e*1.5807170420885086e-03+-.03333321213722229)+1.0;f=3.0-f*k;f=e*((k-f)/(6.0-a*f));if(!d){a=a-(a*f-e);break}f=a*(f-h)-h-e;switch(d|0){case -1:{a=(a-f)*.5+-.5;break a}case 1:if(a<-.25){a=(f-(a+.5))*-2.0;break a}else{a=(a-f)*2.0+1.0;break a}default:{b=d<<23;h=(c[j>>2]=b+1065353216,+g[j>>2]);if(d>>>0>56){a=a-f+1.0;a=((d|0)==128?a*2.0*1701411834604692317316873.0e14:a*h)+-1.0;break a}b=1065353216-b|0;if((d|0)<23){e=1.0-(c[j>>2]=b,+g[j>>2]);a=a-f}else{e=a-(f+(c[j>>2]=b,+g[j>>2]));a=1.0}a=(e+a)*h;break a}}}while(0);return +a}function Jk(a){a=+a;return +(+K(+(a+-162.88958740234375))*1661534994731144841129758.0e11*1661534994731144841129758.0e11)}function Kk(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,h=0,i=0;d=l;l=l+32|0;f=d+16|0;e=d+8|0;h=d;i=c[b>>2]|0;g[h>>2]=-+g[b+4>>2];c[h+4>>2]=i;c[f>>2]=c[h>>2];c[f+4>>2]=c[h+4>>2];Lk(e,f);b=c[e+4>>2]|0;c[a>>2]=c[e>>2];c[a+4>>2]=b;l=d;return}function Lk(a,b){a=a|0;b=b|0;var d=0.0,e=0,f=0,h=0,i=0,k=0,m=0,n=0,o=0.0,p=0.0,q=0,r=0,s=0.0;r=l;l=l+32|0;e=r+16|0;f=r+8|0;h=r;o=+g[b>>2];i=b+4|0;p=+g[i>>2];q=(g[j>>2]=o,c[j>>2]|0);k=q&2147483647;m=(g[j>>2]=p,c[j>>2]|0)&2147483647;n=k>>>0<2139095040;do if(n&m>>>0<2139095040){if(!m){g[a>>2]=+Mk(o);g[a+4>>2]=o*p;break}if(k>>>0<1091567616){d=+Mk(o)*+D(+p);p=+Hk(o)*+E(+p);g[a>>2]=d;g[a+4>>2]=p;break}if(k>>>0<1118925336){s=+K(+(+A(+o)))*.5;d=s*+D(+p);p=+Gk(s,o)*+E(+p);g[a>>2]=d;g[a+4>>2]=p;break}if(k>>>0<1128313319){g[h>>2]=+A(+o);g[h+4>>2]=p;c[e>>2]=c[h>>2];c[e+4>>2]=c[h+4>>2];Nk(f,e,-1);q=c[f>>2]|0;s=+g[f+4>>2];c[b>>2]=q;g[i>>2]=s;s=s*+Gk(1.0,o);c[a>>2]=q;g[a+4>>2]=s;break}else{o=o*1701411834604692317316873.0e14;s=o*+E(+p);g[a>>2]=o*o*+D(+p);g[a+4>>2]=s;break}}else{b=m>>>0>2139095039;if((k|0)==0&b){p=p-p;s=+Gk(0.0,o*p);g[a>>2]=p;g[a+4>>2]=s;break}e=k>>>0>2139095039;if(e&(m|0)==0){d=o*o;if(!(q&8388607)){s=p*+Gk(0.0,o);g[a>>2]=d;g[a+4>>2]=s;break}else{s=+Gk(0.0,(o+o)*p);g[a>>2]=d;g[a+4>>2]=s;break}}if(n&b){s=p-p;g[a>>2]=s;g[a+4>>2]=o*s;break}d=o*o;if(!(e&(q&8388607|0)==0)){s=p-p;g[a>>2]=d*s;g[a+4>>2]=(o+o)*s;break}if(b){g[a>>2]=d;g[a+4>>2]=o*(p-p);break}else{s=o*+E(+p);g[a>>2]=d*+D(+p);g[a+4>>2]=s;break}}while(0);l=r;return}function Mk(a){a=+a;var b=0;b=(g[j>>2]=a,c[j>>2]|0)&2147483647;a=(c[j>>2]=b,+g[j>>2]);do if(b>>>0<1060205079)if(b>>>0<964689920)a=1.0;else{a=+Ik(a);a=a*a/((a+1.0)*2.0)+1.0}else if(b>>>0<1118925335){a=+K(+a);a=(a+1.0/a)*.5;break}else{a=+Jk(a);break}while(0);return +a}function Nk(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0.0,h=0.0,i=0.0,k=0.0,m=0.0,n=0;e=l;l=l+16|0;n=e;k=+g[b+4>>2];m=+Ok(+g[b>>2],n);b=(c[n>>2]|0)+d|0;d=(b|0)/2|0;i=(c[j>>2]=(d<<23)+1065353216,+g[j>>2]);h=(c[j>>2]=(b-d<<23)+1065353216,+g[j>>2]);f=m*+E(+k)*i*h;g[a>>2]=m*+D(+k)*i*h;g[a+4>>2]=f;l=e;return}function Ok(a,b){a=+a;b=b|0;var d=0;a=+K(+(a+-162.88958740234375));d=(g[j>>2]=a,c[j>>2]|0);c[b>>2]=(d>>>23)+-19;return +(c[j>>2]=d&8388607|2130706432,+g[j>>2])}function Pk(a){a=a|0;return +(+h[a>>3])}function Qk(a,b){a=a|0;b=b|0;var d=0,e=0.0,f=0,g=0,i=0;d=l;l=l+48|0;g=d+32|0;f=d+16|0;i=d;e=+h[b+8>>3];h[i>>3]=+h[b>>3];h[i+8>>3]=e;c[g>>2]=c[i>>2];c[g+4>>2]=c[i+4>>2];c[g+8>>2]=c[i+8>>2];c[g+12>>2]=c[i+12>>2];Rk(f,g);e=+h[f+8>>3];h[a>>3]=+h[f>>3];h[a+8>>3]=e;l=d;return}function Rk(a,b){a=a|0;b=b|0;var d=0.0,e=0.0,f=0,g=0,i=0,k=0,m=0,n=0,o=0,p=0,q=0,r=0,t=0.0,u=0,v=0.0;u=l;l=l+48|0;f=u+32|0;g=u+16|0;i=u;d=+h[b>>3];k=b+8|0;t=+h[k>>3];h[j>>3]=d;p=c[j>>2]|0;q=c[j+4>>2]|0;h[j>>3]=t;r=c[j>>2]|0;m=q&2147483647;n=c[j+4>>2]&2147483647;o=m>>>0<2146435072;do if(o&n>>>0<2146435072){if(!(n|r)){e=t;d=+Sk(d);break}if(m>>>0<1077280768){v=+Sk(d)*+D(+t);e=+Tk(d)*+E(+t);d=v;break}if(m>>>0<1082535490){v=+K(+(+A(+d)))*.5;e=v*+E(+t);d=+Fj(v,d)*+D(+t);break}if(m>>>0<1083620266){h[i>>3]=+A(+d);h[i+8>>3]=t;c[f>>2]=c[i>>2];c[f+4>>2]=c[i+4>>2];c[f+8>>2]=c[i+8>>2];c[f+12>>2]=c[i+12>>2];Bk(g,f,-1);v=+h[g>>3];e=+h[g+8>>3];h[b>>3]=v;h[k>>3]=e;d=v*+Fj(1.0,d);break}else{d=d*8988465674311579538646525.0e283;e=d*d*+E(+t);d=d*+D(+t);break}}else{b=n>>>0>2146435071;if((m|p|0)==0&b){v=t-t;e=v;d=+Fj(0.0,d*v);break}f=m>>>0>2146435071;if(f&(n|r|0)==0){if(!(q&1048575|p)){e=t;break}e=+Fj(0.0,t);break}if(o&b){v=t-t;e=d*v;d=v;break}if(f?(q&1048575|p|0)==0:0)if(b){e=d*(t-t);d=d*d;break}else{d=d*+D(+t);e=+E(+t)*s;break}v=t-t;e=(d+d)*v;d=d*d*v}while(0);h[a>>3]=d;h[a+8>>3]=e;l=u;return}function Sk(a){a=+a;var b=0.0,d=0,e=0.0;h[j>>3]=a;d=c[j+4>>2]|0;e=(d|0)<0?-.5:.5;d=d&2147483647;c[j>>2]=c[j>>2];c[j+4>>2]=d;b=+h[j>>3];do if(d>>>0<1082535490){b=+Uk(b);if(d>>>0>=1072693248){a=e*(b+b/(b+1.0));break}if(d>>>0>=1045430272)a=e*(b*2.0-b*b/(b+1.0))}else a=e*2.0*+Vk(b);while(0);return +a}function Tk(a){a=+a;var b=0;h[j>>3]=a;b=c[j+4>>2]&2147483647;c[j>>2]=c[j>>2];c[j+4>>2]=b;a=+h[j>>3];do if(b>>>0<1072049730)if(b>>>0<1045430272)a=1.0;else{a=+Uk(a);a=a*a/((a+1.0)*2.0)+1.0}else if(b>>>0<1082535490){a=+K(+a);a=(a+1.0/a)*.5;break}else{a=+Vk(a);break}while(0);return +a}function Uk(a){a=+a;var b=0,d=0,e=0.0,f=0.0,g=0.0,i=0,k=0,l=0.0;h[j>>3]=a;d=c[j+4>>2]|0;b=d&2147483647;d=ZC(c[j>>2]|0,d|0,63)|0;do if(b>>>0>1078159481){i=Wk(a)|0;b=y&2147483647;if(!(b>>>0>2146435072|(b|0)==2146435072&i>>>0>0))if(!d)if(a>709.782712893384)a=a*8988465674311579538646525.0e283;else k=11;else a=-1.0}else{if(b>>>0<=1071001154)if(b>>>0<1016070144)break;else{g=0.0;i=0;k=14;break}if(b>>>0<1072734898)if(!d){b=1;e=a+-.6931471803691238;f=1.9082149292705877e-10;k=12;break}else{b=-1;e=a+.6931471803691238;f=-1.9082149292705877e-10;k=12;break}else k=11}while(0);if((k|0)==11){b=~~(a*1.4426950408889634+((d|0)==0?.5:-.5));f=+(b|0);e=a-f*.6931471803691238;f=f*1.9082149292705877e-10;k=12}if((k|0)==12){g=e-f;a=g;g=e-g-f;i=b;k=14}a:do if((k|0)==14){f=a*.5;e=a*f;l=e*(e*(e*(e*(4.008217827329362e-06-e*2.0109921818362437e-07)+-7.93650757867488e-05)+1.5873015872548146e-03)+-.03333333333333313)+1.0;f=3.0-f*l;f=e*((l-f)/(6.0-a*f));if(!i){a=a-(a*f-e);break}f=a*(f-g)-g-e;switch(i|0){case -1:{a=(a-f)*.5+-.5;break a}case 1:if(a<-.25){a=(f-(a+.5))*-2.0;break a}else{a=(a-f)*2.0+1.0;break a}default:{d=_C(i+1023|0,0,52)|0;k=y;c[j>>2]=d;c[j+4>>2]=k;g=+h[j>>3];if(i>>>0>56){a=a-f+1.0;a=((i|0)==1024?a*2.0*8988465674311579538646525.0e283:a*g)+-1.0;break a}b=_C(1023-i|0,0,52)|0;d=y;if((i|0)<20){c[j>>2]=b;c[j+4>>2]=d;e=1.0-+h[j>>3];a=a-f}else{c[j>>2]=b;c[j+4>>2]=d;e=a-(f+ +h[j>>3]);a=1.0}a=(e+a)*g;break a}}}while(0);return +a}function Vk(a){a=+a;return +(+K(+(a+-1416.0996898839683))*2247116418577894884661631.0e283*2247116418577894884661631.0e283)}function Wk(a){a=+a;var b=0;h[j>>3]=a;b=c[j>>2]|0;y=c[j+4>>2]|0;return b|0}function Xk(a,b){a=a|0;b=b|0;var c=0.0,d=0.0,e=0.0,f=0,g=0.0,i=0,j=0,k=0;k=l;l=l+16|0;j=k;e=+h[b>>3];c=+h[b+8>>3];do if(!(e==0.0&c==0.0)){i=Yk(c)|0;if(!((i|0)==0&(y&2147483647|0)==2146435072)){b=Yk(e)|0;i=y;f=i&2147483647;if(f>>>0>2146435072|(f|0)==2146435072&b>>>0>0){c=c-c;g=e;c=c/c;break}if((b|0)==0&(f|0)==2146435072){d=c-c;if((i|0)<0){g=+A(+d);c=+Fj(e,c);break}else{g=e;c=+Fj(d,c);break}}if(!(+A(+e)>=7446288774449766337959726.0e283)?!(+A(+c)>=7446288774449766337959726.0e283):0)b=0;else{e=e*.25;c=c*.25;b=1}d=+Zk(e,c);if(!(e>=0.0)){e=+B(+((d-e)*.5));g=+A(+c)/(e*2.0);c=+Fj(e,c)}else{e=+B(+((e+d)*.5));g=e;c=c/(e*2.0)}if(b){d=g*2.0-c*0.0;e=g*0.0+c*2.0;if((d!=d|0.0!=0.0)&(e!=e|0.0!=0.0)){ga(j|0,+g,+c,2.0,0.0);g=+h[j>>3];c=+h[j+8>>3]}else{g=d;c=e}}}else g=s}else g=0.0;while(0);h[a>>3]=g;h[a+8>>3]=c;l=k;return}function Yk(a){a=+a;var b=0;h[j>>3]=a;b=c[j>>2]|0;y=c[j+4>>2]|0;return b|0}function Zk(a,b){a=+a;b=+b;var d=0.0,e=0,f=0,g=0,i=0,k=0.0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0;q=l;l=l+32|0;m=q+24|0;n=q+16|0;o=q+8|0;p=q;h[j>>3]=a;t=c[j>>2]|0;g=c[j+4>>2]|0;h[j>>3]=b;e=c[j>>2]|0;g=g&2147483647;f=c[j+4>>2]&2147483647;i=g>>>0<f>>>0|(g|0)==(f|0)&t>>>0<e>>>0;s=i?e:t;r=i?f:g;e=i?t:e;f=i?g:f;g=ZC(s|0,r|0,52)|0;i=ZC(e|0,f|0,52)|0;c[j>>2]=s;c[j+4>>2]=r;a=+h[j>>3];c[j>>2]=e;c[j+4>>2]=f;k=+h[j>>3];do if((i|0)!=2047){if(!((e|0)==0&(f|0)==0|(g|0)==2047)){if((g-i|0)>64){a=a+k;break}if((g|0)>1533){d=5260135901548373507240989.0e186;b=a*1.90109156629516e-211;a=k*1.90109156629516e-211}else{t=(i|0)<573;d=t?1.90109156629516e-211:1.0;b=t?a*5260135901548373507240989.0e186:a;a=t?k*5260135901548373507240989.0e186:k}_k(m,n,b);_k(o,p,a);a=d*+B(+(+h[p>>3]+ +h[n>>3]+ +h[o>>3]+ +h[m>>3]))}}else a=k;while(0);l=q;return +a}function _k(a,b,c){a=a|0;b=b|0;c=+c;var d=0.0,e=0.0;e=c*134217729.0;e=e+(c-e);d=c-e;c=c*c;h[a>>3]=c;h[b>>3]=d*d+(e*e-c+e*2.0*d);return}function $k(a,b){a=a|0;b=b|0;var d=0.0,e=0.0,f=0,g=0,i=0.0,k=0.0;e=+h[b>>3];d=+h[b+8>>3];h[j>>3]=e;f=c[j>>2]|0;g=c[j+4>>2]|0;b=g&2147483647;do if(b>>>0<=2146435071){al(d)|0;if(0==0&(y&2146435072|0)==2146435072){d=d-d;h[a>>3]=e!=0.0?d:e;h[a+8>>3]=d;break}if(b>>>0>1077280767){i=+K(+-+A(+e));d=i*(i*(+E(+d)*4.0*+D(+d)));h[a>>3]=+Fj(1.0,e);h[a+8>>3]=d;break}else{d=+F(+d);k=d*d+1.0;e=+Sk(e);i=e*(e*k)+1.0;h[a>>3]=e*(k*+B(+(e*e+1.0)))/i;h[a+8>>3]=d/i;break}}else{if(g&1048575|f|0){h[a>>3]=e;h[a+8>>3]=d==0.0?d:e*d;break}b=al(d)|0;if(!((b|0)==0&(y&2147483647|0)==2146435072))d=+E(+d)*+D(+d);k=+Fj(0.0,d);b=a;c[b>>2]=f;c[b+4>>2]=g+-1073741824;h[a+8>>3]=k}while(0);return}function al(a){a=+a;var b=0;h[j>>3]=a;b=c[j>>2]|0;y=c[j+4>>2]|0;return b|0}function bl(a,b){a=a|0;b=b|0;var d=0,e=0.0,f=0,g=0,i=0;d=l;l=l+48|0;g=d+32|0;f=d+16|0;i=d;e=+h[b+8>>3];h[i>>3]=+h[b>>3];h[i+8>>3]=e;c[g>>2]=c[i>>2];c[g+4>>2]=c[i+4>>2];c[g+8>>2]=c[i+8>>2];c[g+12>>2]=c[i+12>>2];cl(f,g);e=+h[f+8>>3];h[a>>3]=+h[f>>3];h[a+8>>3]=e;l=d;return}function cl(a,b){a=a|0;b=b|0;var c=0.0,d=0.0,e=0;c=+h[b>>3];e=dl(c)|0;if(!(!((e|0)==0&(y&2147483647|0)==2146435072)?(d=+h[b+8>>3],e=dl(d)|0,!((e|0)==0&(y&2147483647|0)==2146435072)):0)){d=+Fj(0.0,c);c=s}h[a>>3]=c;h[a+8>>3]=d;return}function dl(a){a=+a;var b=0;h[j>>3]=a;b=c[j>>2]|0;y=c[j+4>>2]|0;return b|0}function el(a,b){a=a|0;b=b|0;var d=0,e=0.0,f=0,g=0,i=0;d=l;l=l+48|0;g=d+32|0;f=d+16|0;i=d;e=+h[b+8>>3];h[i>>3]=+h[b>>3];h[i+8>>3]=e;c[g>>2]=c[i>>2];c[g+4>>2]=c[i+4>>2];c[g+8>>2]=c[i+8>>2];c[g+12>>2]=c[i+12>>2];Xk(f,g);e=+h[f+8>>3];h[a>>3]=+h[f>>3];h[a+8>>3]=e;l=d;return}function fl(a,b){a=a|0;b=b|0;var d=0,e=0.0,f=0.0,g=0,i=0,j=0.0,k=0;d=l;l=l+48|0;g=d+32|0;k=d+16|0;i=d;j=+h[b>>3];e=+h[b+8>>3];h[k>>3]=j;h[k+8>>3]=e;c[g>>2]=c[k>>2];c[g+4>>2]=c[k+4>>2];c[g+8>>2]=c[k+8>>2];c[g+12>>2]=c[k+12>>2];f=+gl(g);h[i>>3]=j;h[i+8>>3]=e;c[g>>2]=c[i>>2];c[g+4>>2]=c[i+4>>2];c[g+8>>2]=c[i+8>>2];c[g+12>>2]=c[i+12>>2];e=+hl(g);h[a>>3]=+L(+f);h[a+8>>3]=e;l=d;return}function gl(a){a=a|0;return +(+Zk(+h[a>>3],+h[a+8>>3]))}function hl(a){a=a|0;return +(+J(+(+h[a+8>>3]),+(+h[a>>3])))}function il(a,b){a=a|0;b=b|0;var c=0.0,d=0.0;c=+g[b>>2];if(((jl(c)|0)&2147483647|0)!=2139095040?(d=+g[b+4>>2],((jl(d)|0)&2147483647|0)!=2139095040):0){g[a>>2]=c;g[a+4>>2]=d}else{d=+Gk(0.0,c);g[a>>2]=s;g[a+4>>2]=d}return}function jl(a){a=+a;return (g[j>>2]=a,c[j>>2]|0)|0}function kl(a,b){a=a|0;b=b|0;var c=0.0;c=-+h[b+8>>3];h[a>>3]=+h[b>>3];h[a+8>>3]=c;return}function ll(a,b){a=a|0;b=b|0;var d=0,e=0.0,f=0,h=0,i=0,j=0;d=l;l=l+32|0;h=d+16|0;f=d+8|0;i=d;j=c[b>>2]|0;g[i>>2]=-+g[b+4>>2];c[i+4>>2]=j;c[h>>2]=c[i>>2];c[h+4>>2]=c[i+4>>2];ml(f,h);e=-+g[f>>2];c[a>>2]=c[f+4>>2];g[a+4>>2]=e;l=d;return}function ml(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,h=0,i=0.0,j=0.0,k=0,m=0;d=l;l=l+48|0;f=d+32|0;k=d+24|0;m=d+16|0;e=d+8|0;h=d;i=+g[b>>2];j=+g[b+4>>2];g[m>>2]=1.0-(i-j)*(i+j);g[m+4>>2]=i*-2.0*j;c[f>>2]=c[m>>2];c[f+4>>2]=c[m+4>>2];nl(k,f);i=i+ +g[k+4>>2];g[h>>2]=+g[k>>2]-j;g[h+4>>2]=i;c[f>>2]=c[h>>2];c[f+4>>2]=c[h+4>>2];ol(e,f);b=c[e+4>>2]|0;c[a>>2]=c[e>>2];c[a+4>>2]=b;l=d;return}function nl(a,b){a=a|0;b=b|0;var c=0.0,d=0.0,e=0.0,f=0;c=+g[b>>2];d=+g[b+4>>2];do if(!(c==0.0&d==0.0))if(((sl(d)|0)&2147483647|0)!=2139095040){f=sl(c)|0;b=f&2147483647;if(b>>>0>2139095040){d=d-d;d=d/d;break}if((b|0)==2139095040){e=d-d;if((f|0)<0){e=+A(+e);d=+Gk(c,d);c=e;break}else{d=+Gk(e,d);break}}else if(!(c>=0.0)){e=+B(+((+Zk(c,d)+-c)*.5));c=+A(+d)/(e*2.0);d=+Gk(e,d);break}else{c=+B(+((+Zk(c,d)+c)*.5));d=d/(c*2.0);break}}else c=s;else c=0.0;while(0);g[a>>2]=c;g[a+4>>2]=d;return}function ol(a,b){a=a|0;b=b|0;var d=0,e=0.0,f=0.0,h=0,i=0,j=0,k=0;d=l;l=l+32|0;h=d+16|0;k=d+8|0;i=d;j=c[b>>2]|0;b=c[b+4>>2]|0;c[k>>2]=j;c[k+4>>2]=b;c[h>>2]=c[k>>2];c[h+4>>2]=c[k+4>>2];f=+pl(h);c[i>>2]=j;c[i+4>>2]=b;c[h>>2]=c[i>>2];c[h+4>>2]=c[i+4>>2];e=+ql(h);g[a>>2]=+L(+f);g[a+4>>2]=e;l=d;return}function pl(a){a=a|0;return +(+rl(+g[a>>2],+g[a+4>>2]))}function ql(a){a=a|0;return +(+J(+(+g[a+4>>2]),+(+g[a>>2])))}function rl(a,b){a=+a;b=+b;var d=0,e=0,f=0.0,h=0.0,i=0,k=0;i=(g[j>>2]=a,c[j>>2]|0);i=i&2147483647;e=(g[j>>2]=b,c[j>>2]|0)&2147483647;k=i>>>0<e>>>0;d=k?e:i;e=k?i:e;h=(c[j>>2]=d,+g[j>>2]);a=(c[j>>2]=e,+g[j>>2]);do if((e|0)!=2139095040){if(d>>>0>2139095039|(e|0)==0|(d-e|0)>>>0>209715199){a=h+a;break}if(d>>>0>1568669695){f=1237940039285380274899124.0e3;b=a*8.077935669463161e-28;a=h*8.077935669463161e-28}else{k=e>>>0<562036736;f=k?8.077935669463161e-28:1.0;b=k?a*1237940039285380274899124.0e3:a;a=k?h*1237940039285380274899124.0e3:h}h=a;a=b;a=f*+B(+(h*h+a*a))}while(0);return +a}function sl(a){a=+a;return (g[j>>2]=a,c[j>>2]|0)|0}function tl(a){a=a|0;return +(+g[a>>2])}function ul(a,b){a=a|0;b=b|0;var d=0,e=0.0,f=0,g=0,i=0;d=l;l=l+48|0;g=d+32|0;f=d+16|0;i=d;e=+h[b>>3];h[i>>3]=-+h[b+8>>3];h[i+8>>3]=e;c[g>>2]=c[i>>2];c[g+4>>2]=c[i+4>>2];c[g+8>>2]=c[i+8>>2];c[g+12>>2]=c[i+12>>2];vl(f,g);e=-+h[f>>3];h[a>>3]=+h[f+8>>3];h[a+8>>3]=e;l=d;return}function vl(a,b){a=a|0;b=b|0;var d=0,e=0.0,f=0,g=0,i=0,j=0.0,k=0,m=0;d=l;l=l+80|0;g=d+64|0;k=d+48|0;m=d+32|0;f=d+16|0;i=d;e=+h[b>>3];j=+h[b+8>>3];h[m>>3]=1.0-(e-j)*(e+j);h[m+8>>3]=e*-2.0*j;c[g>>2]=c[m>>2];c[g+4>>2]=c[m+4>>2];c[g+8>>2]=c[m+8>>2];c[g+12>>2]=c[m+12>>2];Xk(k,g);e=e+ +h[k+8>>3];h[i>>3]=+h[k>>3]-j;h[i+8>>3]=e;c[g>>2]=c[i>>2];c[g+4>>2]=c[i+4>>2];c[g+8>>2]=c[i+8>>2];c[g+12>>2]=c[i+12>>2];fl(f,g);e=+h[f+8>>3];h[a>>3]=+h[f>>3];h[a+8>>3]=e;l=d;return}function wl(a,b){a=a|0;b=b|0;var d=0,e=0.0,f=0,h=0,i=0,j=0;d=l;l=l+32|0;h=d+16|0;f=d+8|0;i=d;j=c[b>>2]|0;g[i>>2]=-+g[b+4>>2];c[i+4>>2]=j;c[h>>2]=c[i>>2];c[h+4>>2]=c[i+4>>2];xl(f,h);e=-+g[f>>2];c[a>>2]=c[f+4>>2];g[a+4>>2]=e;l=d;return}function xl(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,h=0,i=0,k=0,m=0,n=0.0,o=0.0,p=0,q=0,r=0.0,t=0.0;q=l;l=l+32|0;d=q+16|0;e=q+8|0;f=q;n=+g[b>>2];h=b+4|0;o=+g[h>>2];p=(g[j>>2]=n,c[j>>2]|0);i=p&2147483647;k=(g[j>>2]=o,c[j>>2]|0)&2147483647;m=i>>>0<2139095040;do if(m&k>>>0<2139095040){if(!k){g[a>>2]=+Hk(n);g[a+4>>2]=o;break}if(i>>>0<1091567616){r=+Hk(n)*+D(+o);o=+Mk(n)*+E(+o);g[a>>2]=r;g[a+4>>2]=o;break}if(i>>>0<1118925336){t=+K(+(+A(+n)))*.5;r=t*+E(+o);g[a>>2]=+Gk(t,n)*+D(+o);g[a+4>>2]=r;break}if(i>>>0<1128313319){g[f>>2]=+A(+n);g[f+4>>2]=o;c[d>>2]=c[f>>2];c[d+4>>2]=c[f+4>>2];Nk(e,d,-1);m=c[e>>2]|0;p=c[e+4>>2]|0;c[b>>2]=m;c[h>>2]=p;t=(c[j>>2]=m,+g[j>>2]);g[a>>2]=+Gk(1.0,n)*t;c[a+4>>2]=p;break}else{r=n*1701411834604692317316873.0e14;t=r*r*+E(+o);g[a>>2]=r*+D(+o);g[a+4>>2]=t;break}}else{b=k>>>0>2139095039;if((i|0)==0&b){t=o-o;g[a>>2]=+Gk(0.0,n*t);g[a+4>>2]=t;break}d=i>>>0>2139095039;if(d&(k|0)==0)if(!(p&8388607)){g[a>>2]=n;g[a+4>>2]=o;break}else{t=+Gk(0.0,o);g[a>>2]=n;g[a+4>>2]=t;break}if(m&b){t=o-o;g[a>>2]=t;g[a+4>>2]=n*t;break}if(!(d&(p&8388607|0)==0)){t=o-o;g[a>>2]=n*n*t;g[a+4>>2]=(n+n)*t;break}if(b){g[a>>2]=n*n;g[a+4>>2]=n*(o-o);break}else{r=n*+D(+o);t=+E(+o)*s;g[a>>2]=r;g[a+4>>2]=t;break}}while(0);l=q;return}function yl(a,b){a=a|0;b=b|0;var d=0,e=0.0,f=0,g=0,i=0;d=l;l=l+48|0;g=d+32|0;f=d+16|0;i=d;e=+h[b+8>>3];h[i>>3]=+h[b>>3];h[i+8>>3]=e;c[g>>2]=c[i>>2];c[g+4>>2]=c[i+4>>2];c[g+8>>2]=c[i+8>>2];c[g+12>>2]=c[i+12>>2];zl(f,g);e=+h[f+8>>3];h[a>>3]=+h[f>>3];h[a+8>>3]=e;l=d;return}function zl(a,b){a=a|0;b=b|0;var d=0,e=0.0,f=0,g=0,i=0;d=l;l=l+48|0;g=d+32|0;f=d+16|0;i=d;e=+h[b>>3];h[i>>3]=-+h[b+8>>3];h[i+8>>3]=e;c[g>>2]=c[i>>2];c[g+4>>2]=c[i+4>>2];c[g+8>>2]=c[i+8>>2];c[g+12>>2]=c[i+12>>2];$k(f,g);e=-+h[f>>3];h[a>>3]=+h[f+8>>3];h[a+8>>3]=e;l=d;return}function Al(a){a=a|0;var b=0.0,d=0,e=0,f=0;d=l;l=l+32|0;e=d+16|0;f=d;b=+h[a+8>>3];h[f>>3]=+h[a>>3];h[f+8>>3]=b;c[e>>2]=c[f>>2];c[e+4>>2]=c[f+4>>2];c[e+8>>2]=c[f+8>>2];c[e+12>>2]=c[f+12>>2];b=+hl(e);l=d;return +b}function Bl(a){a=a|0;return +(+g[a+4>>2])}function Cl(a,b){a=a|0;b=b|0;var d=0,e=0.0,f=0,g=0,i=0;d=l;l=l+48|0;g=d+32|0;f=d+16|0;i=d;e=+h[b+8>>3];h[i>>3]=+h[b>>3];h[i+8>>3]=e;c[g>>2]=c[i>>2];c[g+4>>2]=c[i+4>>2];c[g+8>>2]=c[i+8>>2];c[g+12>>2]=c[i+12>>2];vl(f,g);e=-+h[f+8>>3];h[a>>3]=1.5707963267948966-+h[f>>3];h[a+8>>3]=e;l=d;return}function Dl(a,b){a=a|0;b=b|0;var d=0,e=0.0,f=0,g=0,i=0;d=l;l=l+48|0;g=d+32|0;f=d+16|0;i=d;e=+h[b>>3];h[i>>3]=-+h[b+8>>3];h[i+8>>3]=e;c[g>>2]=c[i>>2];c[g+4>>2]=c[i+4>>2];c[g+8>>2]=c[i+8>>2];c[g+12>>2]=c[i+12>>2];El(f,g);e=-+h[f>>3];h[a>>3]=+h[f+8>>3];h[a+8>>3]=e;l=d;return}function El(a,b){a=a|0;b=b|0;var c=0.0,d=0.0,e=0.0,f=0.0,g=0.0,i=0.0;f=+h[b>>3];c=+h[b+8>>3];if((!(f==0.0&c>1.0)?(g=f*f,d=1.0-g-c*c,!(d==0.0)):0)?(i=+J(+(f*2.0),+d),e=c+-1.0,e=g+e*e,!(e==0.0)):0){c=c+1.0;c=+L(+((g+c*c)/e))*.25;d=c+0.0;c=+Fl(i*.5)+c*0.0}else{d=1.e+308;c=1.e+308}h[a>>3]=c;h[a+8>>3]=d;return}function Fl(a){a=+a;var b=0.0;b=a/3.141592653589793;b=+(~~(b+(!(b>=0.0)?-.5:.5))|0);return +(a-b*3.141592651605606-b*1.9841871479187034e-09-b*1.1442377452219664e-17)}function Gl(a,b){a=a|0;b=b|0;var d=0,e=0.0,f=0,g=0,i=0;d=l;l=l+48|0;g=d+32|0;f=d+16|0;i=d;e=+h[b+8>>3];h[i>>3]=+h[b>>3];h[i+8>>3]=e;c[g>>2]=c[i>>2];c[g+4>>2]=c[i+4>>2];c[g+8>>2]=c[i+8>>2];c[g+12>>2]=c[i+12>>2];vl(f,g);e=+h[f+8>>3];h[a>>3]=+h[f>>3];h[a+8>>3]=e;l=d;return}function Hl(a,b){a=a|0;b=b|0;var d=0,e=0.0,f=0,h=0,i=0,j=0;d=l;l=l+32|0;h=d+16|0;f=d+8|0;i=d;j=c[b+4>>2]|0;c[i>>2]=c[b>>2];c[i+4>>2]=j;c[h>>2]=c[i>>2];c[h+4>>2]=c[i+4>>2];ml(f,h);e=-+g[f+4>>2];g[a>>2]=1.5707963705062866-+g[f>>2];g[a+4>>2]=e;l=d;return}function Il(a,b){a=a|0;b=b|0;var d=0,e=0.0,f=0,g=0,i=0;d=l;l=l+48|0;g=d+32|0;f=d+16|0;i=d;e=+h[b+8>>3];h[i>>3]=+h[b>>3];h[i+8>>3]=e;c[g>>2]=c[i>>2];c[g+4>>2]=c[i+4>>2];c[g+8>>2]=c[i+8>>2];c[g+12>>2]=c[i+12>>2];ul(f,g);e=+h[f+8>>3];h[a>>3]=+h[f>>3];h[a+8>>3]=e;l=d;return}function Jl(a,b){a=a|0;b=b|0;var d=0,e=0.0,f=0,g=0,i=0;d=l;l=l+48|0;g=d+32|0;f=d+16|0;i=d;e=+h[b>>3];h[i>>3]=-+h[b+8>>3];h[i+8>>3]=e;c[g>>2]=c[i>>2];c[g+4>>2]=c[i+4>>2];c[g+8>>2]=c[i+8>>2];c[g+12>>2]=c[i+12>>2];Kl(f,g);e=+h[f+8>>3];h[a>>3]=+h[f>>3];h[a+8>>3]=e;l=d;return}function Kl(a,b){a=a|0;b=b|0;var d=0.0,e=0.0,f=0,g=0,i=0,k=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0.0,t=0.0,u=0;u=l;l=l+48|0;f=u+32|0;g=u+16|0;i=u;s=+h[b>>3];k=b+8|0;t=+h[k>>3];h[j>>3]=s;q=c[j>>2]|0;r=c[j+4>>2]|0;h[j>>3]=t;p=c[j>>2]|0;m=r&2147483647;n=c[j+4>>2]&2147483647;o=m>>>0<2146435072;do if(o&n>>>0<2146435072){if(!(n|p)){e=s*t;d=+Tk(s);break}if(m>>>0<1077280768){d=+Tk(s)*+D(+t);e=+Sk(s)*+E(+t);break}if(m>>>0<1082535490){e=+K(+(+A(+s)))*.5;d=e*+D(+t);e=+Fj(e,s)*+E(+t);break}if(m>>>0<1083620266){h[i>>3]=+A(+s);h[i+8>>3]=t;c[f>>2]=c[i>>2];c[f+4>>2]=c[i+4>>2];c[f+8>>2]=c[i+8>>2];c[f+12>>2]=c[i+12>>2];Bk(g,f,-1);d=+h[g>>3];e=+h[g+8>>3];h[b>>3]=d;h[k>>3]=e;e=e*+Fj(1.0,s);break}else{d=s*8988465674311579538646525.0e283;e=d*+E(+t);d=d*d*+D(+t);break}}else{b=n>>>0>2146435071;if((m|q|0)==0&b){d=t-t;e=+Fj(0.0,s*d);break}f=m>>>0>2146435071;if(f&(n|p|0)==0){d=s*s;if(!(r&1048575|q)){e=t*+Fj(0.0,s);break}else{e=+Fj(0.0,(s+s)*t);break}}if(o&b){d=t-t;e=s*d;break}if(f?(r&1048575|q|0)==0:0){d=s*s;if(b){e=s*(t-t);break}else{e=s*+E(+t);d=d*+D(+t);break}}d=t-t;e=(s+s)*d;d=s*s*d}while(0);h[a>>3]=d;h[a+8>>3]=e;l=u;return}function Ll(a,b){a=a|0;b=b|0;var d=0,e=0.0,f=0,g=0,i=0;d=l;l=l+48|0;g=d+32|0;f=d+16|0;i=d;e=+h[b>>3];h[i>>3]=-+h[b+8>>3];h[i+8>>3]=e;c[g>>2]=c[i>>2];c[g+4>>2]=c[i+4>>2];c[g+8>>2]=c[i+8>>2];c[g+12>>2]=c[i+12>>2];Rk(f,g);e=-+h[f>>3];h[a>>3]=+h[f+8>>3];h[a+8>>3]=e;l=d;return}function Ml(a,b){a=a|0;b=b|0;var d=0,e=0.0,f=0,g=0,i=0;d=l;l=l+48|0;g=d+32|0;f=d+16|0;i=d;e=+h[b+8>>3];h[i>>3]=+h[b>>3];h[i+8>>3]=e;c[g>>2]=c[i>>2];c[g+4>>2]=c[i+4>>2];c[g+8>>2]=c[i+8>>2];c[g+12>>2]=c[i+12>>2];Cl(f,g);e=+h[f+8>>3];h[a>>3]=+h[f>>3];h[a+8>>3]=e;l=d;return}function Nl(a,b){a=a|0;b=b|0;var d=0.0;d=-+g[b+4>>2];c[a>>2]=c[b>>2];g[a+4>>2]=d;return}function Ol(a,b,d){a=a|0;b=b|0;d=d|0;var e=0.0,f=0.0,g=0.0,i=0.0,j=0.0,k=0.0,m=0,n=0,o=0,p=0,q=0,r=0,s=0;q=l;l=l+96|0;n=q+80|0;r=q+64|0;s=q+48|0;m=q+32|0;o=q+16|0;p=q;k=+h[d>>3];j=+h[d+8>>3];g=+h[b+8>>3];h[s>>3]=+h[b>>3];h[s+8>>3]=g;c[n>>2]=c[s>>2];c[n+4>>2]=c[s+4>>2];c[n+8>>2]=c[s+8>>2];c[n+12>>2]=c[s+12>>2];fl(r,n);g=+h[r>>3];i=+h[r+8>>3];f=k*g-j*i;e=j*g+k*i;if((f!=f|0.0!=0.0)&(e!=e|0.0!=0.0)){ga(m|0,+k,+j,+g,+i);f=+h[m>>3];e=+h[m+8>>3]}h[p>>3]=f;h[p+8>>3]=e;c[n>>2]=c[p>>2];c[n+4>>2]=c[p+4>>2];c[n+8>>2]=c[p+8>>2];c[n+12>>2]=c[p+12>>2];Pl(o,n);k=+h[o+8>>3];h[a>>3]=+h[o>>3];h[a+8>>3]=k;l=q;return}function Pl(a,b){a=a|0;b=b|0;var d=0,e=0,f=0.0,g=0,i=0,k=0,m=0,n=0.0,o=0,p=0.0;o=l;l=l+48|0;i=o+32|0;k=o+16|0;m=o;n=+h[b>>3];f=+h[b+8>>3];h[j>>3]=f;g=c[j+4>>2]&2147483647;do if(g|c[j>>2]){h[j>>3]=n;b=c[j>>2]|0;d=c[j+4>>2]|0;e=d&2147483647;if(!(e|b)){n=+E(+f);h[a>>3]=+D(+f);h[a+8>>3]=n;break}if(g>>>0<=2146435071)if((d+-1082535490|0)>>>0<1084067){h[m>>3]=n;h[m+8>>3]=f;c[i>>2]=c[m>>2];c[i+4>>2]=c[m+4>>2];c[i+8>>2]=c[m+8>>2];c[i+12>>2]=c[m+12>>2];Bk(k,i,0);n=+h[k+8>>3];h[a>>3]=+h[k>>3];h[a+8>>3]=n;break}else{p=+K(+n);n=p*+E(+f);h[a>>3]=p*+D(+f);h[a+8>>3]=n;break}if(!((b|0)==0&(e|0)==2146435072)){p=f-f;h[a>>3]=p;h[a+8>>3]=p;break}if((d|0)<0){c[a>>2]=0;c[a+4>>2]=0;c[a+8>>2]=0;c[a+12>>2]=0;break}else{h[a>>3]=n;h[a+8>>3]=f-f;break}}else{h[a>>3]=+K(+n);h[a+8>>3]=f}while(0);l=o;return}function Ql(a){a=a|0;return +(+h[a+8>>3])}function Rl(a){a=a|0;return +(+h[a>>3])}function Sl(a,b){a=a|0;b=b|0;var d=0,e=0.0,f=0,g=0,i=0;d=l;l=l+48|0;g=d+32|0;f=d+16|0;i=d;e=+h[b+8>>3];h[i>>3]=+h[b>>3];h[i+8>>3]=e;c[g>>2]=c[i>>2];c[g+4>>2]=c[i+4>>2];c[g+8>>2]=c[i+8>>2];c[g+12>>2]=c[i+12>>2];fl(f,g);e=+h[f+8>>3];h[a>>3]=+h[f>>3];h[a+8>>3]=e;l=d;return}function Tl(a){a=a|0;return +(+h[a+8>>3])}function Ul(a,b){a=a|0;b=b|0;var d=0,e=0.0,f=0,g=0,i=0;d=l;l=l+48|0;g=d+32|0;f=d+16|0;i=d;e=+h[b+8>>3];h[i>>3]=+h[b>>3];h[i+8>>3]=e;c[g>>2]=c[i>>2];c[g+4>>2]=c[i+4>>2];c[g+8>>2]=c[i+8>>2];c[g+12>>2]=c[i+12>>2];$k(f,g);e=+h[f+8>>3];h[a>>3]=+h[f>>3];h[a+8>>3]=e;l=d;return}function Vl(a,b){a=a|0;b=b|0;var d=0,e=0.0,f=0,g=0,i=0;d=l;l=l+48|0;g=d+32|0;f=d+16|0;i=d;e=+h[b+8>>3];h[i>>3]=+h[b>>3];h[i+8>>3]=e;c[g>>2]=c[i>>2];c[g+4>>2]=c[i+4>>2];c[g+8>>2]=c[i+8>>2];c[g+12>>2]=c[i+12>>2];El(f,g);e=+h[f+8>>3];h[a>>3]=+h[f>>3];h[a+8>>3]=e;l=d;return}function Wl(a,b){a=a|0;b=b|0;var d=0,e=0.0,f=0,g=0,i=0;d=l;l=l+48|0;g=d+32|0;f=d+16|0;i=d;e=+h[b+8>>3];h[i>>3]=+h[b>>3];h[i+8>>3]=e;c[g>>2]=c[i>>2];c[g+4>>2]=c[i+4>>2];c[g+8>>2]=c[i+8>>2];c[g+12>>2]=c[i+12>>2];Dl(f,g);e=+h[f+8>>3];h[a>>3]=+h[f>>3];h[a+8>>3]=e;l=d;return}function Xl(a,b){a=a|0;b=b|0;var c=0.0;c=-+h[b+8>>3];h[a>>3]=+h[b>>3];h[a+8>>3]=c;return}function Yl(a,b){a=a|0;b=b|0;var d=0,e=0.0,f=0,g=0,i=0;d=l;l=l+48|0;g=d+32|0;f=d+16|0;i=d;e=+h[b+8>>3];h[i>>3]=+h[b>>3];h[i+8>>3]=e;c[g>>2]=c[i>>2];c[g+4>>2]=c[i+4>>2];c[g+8>>2]=c[i+8>>2];c[g+12>>2]=c[i+12>>2];Kl(f,g);e=+h[f+8>>3];h[a>>3]=+h[f>>3];h[a+8>>3]=e;l=d;return}function Zl(a,b){a=a|0;b=b|0;var d=0,e=0.0,f=0,g=0,i=0;d=l;l=l+48|0;g=d+32|0;f=d+16|0;i=d;e=+h[b+8>>3];h[i>>3]=+h[b>>3];h[i+8>>3]=e;c[g>>2]=c[i>>2];c[g+4>>2]=c[i+4>>2];c[g+8>>2]=c[i+8>>2];c[g+12>>2]=c[i+12>>2];Cl(f,g);e=+h[f>>3];h[a>>3]=-+h[f+8>>3];h[a+8>>3]=e;l=d;return}function _l(a,b){a=a|0;b=b|0;var d=0,e=0.0,f=0,g=0,i=0;d=l;l=l+48|0;g=d+32|0;f=d+16|0;i=d;e=+h[b+8>>3];h[i>>3]=+h[b>>3];h[i+8>>3]=e;c[g>>2]=c[i>>2];c[g+4>>2]=c[i+4>>2];c[g+8>>2]=c[i+8>>2];c[g+12>>2]=c[i+12>>2];Ll(f,g);e=+h[f+8>>3];h[a>>3]=+h[f>>3];h[a+8>>3]=e;l=d;return}function $l(a,b){a=a|0;b=b|0;var d=0,e=0.0,f=0,g=0,i=0;d=l;l=l+48|0;g=d+32|0;f=d+16|0;i=d;e=+h[b+8>>3];h[i>>3]=+h[b>>3];h[i+8>>3]=e;c[g>>2]=c[i>>2];c[g+4>>2]=c[i+4>>2];c[g+8>>2]=c[i+8>>2];c[g+12>>2]=c[i+12>>2];Pl(f,g);e=+h[f+8>>3];h[a>>3]=+h[f>>3];h[a+8>>3]=e;l=d;return}function am(a,b){a=a|0;b=b|0;var c=0.0,d=0.0,e=0.0,f=0.0,h=0.0,i=0.0;f=+g[b>>2];c=+g[b+4>>2];if((!(f==0.0&c>1.0)?(h=f*f,d=1.0-h-c*c,!(d==0.0)):0)?(i=+J(+(f*2.0),+d),e=c+-1.0,e=h+e*e,!(e==0.0)):0){c=c+1.0;c=+L(+((h+c*c)/e))*.25;d=c+0.0;c=+bm(i*.5)+c*0.0}else{d=9999999680285692465065626.0e13;c=9999999680285692465065626.0e13}g[a>>2]=c;g[a+4>>2]=d;return}function bm(a){a=+a;var b=0.0;b=a/3.1415927410125732;b=+(~~(b+(!(b>=0.0)?-.5:.5))|0);return +(a-b*3.140625-b*9.675025939941406e-04-b*1.5099579909783765e-07)}function cm(a,b){a=a|0;b=b|0;var d=0,e=0.0,f=0,g=0,i=0;d=l;l=l+48|0;g=d+32|0;f=d+16|0;i=d;e=+h[b+8>>3];h[i>>3]=+h[b>>3];h[i+8>>3]=e;c[g>>2]=c[i>>2];c[g+4>>2]=c[i+4>>2];c[g+8>>2]=c[i+8>>2];c[g+12>>2]=c[i+12>>2];Jl(f,g);e=+h[f+8>>3];h[a>>3]=+h[f>>3];h[a+8>>3]=e;l=d;return}function dm(a,b){a=a|0;b=b|0;var d=0,e=0.0,f=0,h=0,i=0,k=0,m=0.0,n=0,o=0.0;n=l;l=l+32|0;h=n+16|0;i=n+8|0;k=n;m=+g[b>>2];e=+g[b+4>>2];f=(g[j>>2]=e,c[j>>2]|0)&2147483647;do if(f){b=(g[j>>2]=m,c[j>>2]|0);d=b&2147483647;if(!d){m=+E(+e);g[a>>2]=+D(+e);g[a+4>>2]=m;break}if(f>>>0<=2139095039)if((b+-1118925336|0)>>>0<9342557){g[k>>2]=m;g[k+4>>2]=e;c[h>>2]=c[k>>2];c[h+4>>2]=c[k+4>>2];Nk(i,h,0);k=c[i+4>>2]|0;c[a>>2]=c[i>>2];c[a+4>>2]=k;break}else{o=+K(+m);m=o*+E(+e);g[a>>2]=o*+D(+e);g[a+4>>2]=m;break}if((d|0)!=2139095040){o=e-e;g[a>>2]=o;g[a+4>>2]=o;break}if((b|0)<0){g[a>>2]=0.0;g[a+4>>2]=0.0;break}else{g[a>>2]=m;g[a+4>>2]=e-e;break}}else{g[a>>2]=+K(+m);g[a+4>>2]=e}while(0);l=n;return}function em(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0.0,g=0,i=0,j=0,k=0,m=0,n=0.0,o=0.0;e=l;l=l+80|0;i=e+64|0;j=e+48|0;g=e+32|0;m=e+16|0;k=e;o=+h[b+8>>3];n=+h[d>>3];f=+h[d+8>>3];h[m>>3]=+h[b>>3];h[m+8>>3]=o;h[k>>3]=n;h[k+8>>3]=f;c[j>>2]=c[m>>2];c[j+4>>2]=c[m+4>>2];c[j+8>>2]=c[m+8>>2];c[j+12>>2]=c[m+12>>2];c[i>>2]=c[k>>2];c[i+4>>2]=c[k+4>>2];c[i+8>>2]=c[k+8>>2];c[i+12>>2]=c[k+12>>2];Ol(g,j,i);f=+h[g+8>>3];h[a>>3]=+h[g>>3];h[a+8>>3]=f;l=e;return}function fm(a,b){a=a|0;b=b|0;var d=0,e=0.0,f=0,h=0,i=0,j=0;d=l;l=l+32|0;h=d+16|0;f=d+8|0;i=d;j=c[b>>2]|0;g[i>>2]=-+g[b+4>>2];c[i+4>>2]=j;c[h>>2]=c[i>>2];c[h+4>>2]=c[i+4>>2];am(f,h);e=-+g[f>>2];c[a>>2]=c[f+4>>2];g[a+4>>2]=e;l=d;return}function gm(a,b){a=a|0;b=b|0;var d=0,e=0.0,f=0,g=0,i=0;d=l;l=l+48|0;g=d+32|0;f=d+16|0;i=d;e=+h[b+8>>3];h[i>>3]=+h[b>>3];h[i+8>>3]=e;c[g>>2]=c[i>>2];c[g+4>>2]=c[i+4>>2];c[g+8>>2]=c[i+8>>2];c[g+12>>2]=c[i+12>>2];Zl(f,g);e=+h[f+8>>3];h[a>>3]=+h[f>>3];h[a+8>>3]=e;l=d;return}function hm(a,b,d){a=a|0;b=b|0;d=d|0;var e=0.0,f=0.0,h=0.0,i=0.0,j=0.0,k=0.0,m=0,n=0,o=0,p=0,q=0,r=0,s=0;q=l;l=l+48|0;n=q+40|0;r=q+32|0;s=q+24|0;m=q+16|0;o=q+8|0;p=q;k=+g[d>>2];j=+g[d+4>>2];d=c[b+4>>2]|0;c[s>>2]=c[b>>2];c[s+4>>2]=d;c[n>>2]=c[s>>2];c[n+4>>2]=c[s+4>>2];ol(r,n);h=+g[r>>2];i=+g[r+4>>2];f=k*h-j*i;e=j*h+k*i;if((f!=f|0.0!=0.0)&(e!=e|0.0!=0.0)){ha(m|0,+k,+j,+h,+i);f=+g[m>>2];e=+g[m+4>>2]}g[p>>2]=f;g[p+4>>2]=e;c[n>>2]=c[p>>2];c[n+4>>2]=c[p+4>>2];dm(o,n);s=c[o+4>>2]|0;c[a>>2]=c[o>>2];c[a+4>>2]=s;l=q;return}function im(a){a=a|0;var b=0.0,d=0,e=0,f=0;d=l;l=l+32|0;e=d+16|0;f=d;b=+h[a+8>>3];h[f>>3]=+h[a>>3];h[f+8>>3]=b;c[e>>2]=c[f>>2];c[e+4>>2]=c[f+4>>2];c[e+8>>2]=c[f+8>>2];c[e+12>>2]=c[f+12>>2];b=+gl(e);l=d;return +b}function jm(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,h=0,i=0;d=l;l=l+32|0;f=d+16|0;e=d+8|0;h=d;i=c[b+4>>2]|0;c[h>>2]=c[b>>2];c[h+4>>2]=i;c[f>>2]=c[h>>2];c[f+4>>2]=c[h+4>>2];Hl(e,f);b=c[e>>2]|0;g[a>>2]=-+g[e+4>>2];c[a+4>>2]=b;l=d;return}function km(a,b){a=a|0;b=b|0;return cg(a)|0}function lm(a,b){a=a|0;b=b|0;return qf(a)|0}function mm(){var a=0;a=(c[c[(nm()|0)+188>>2]>>2]|0)==0;return (a?1:4)|0}function nm(){return Ff()|0}function om(a,b){a=a|0;b=b|0;return uf(a)|0}function pm(a,b){a=a|0;b=b|0;return nf(a)|0}function qm(a,b){a=a|0;b=b|0;return dh(a)|0}function rm(a,b){a=a|0;b=b|0;return lg(a)|0}function sm(a){a=a|0;return a>>>0<128|0}function tm(a){a=a|0;return a&127|0}function um(a,b){a=a|0;b=b|0;return hi(a)|0}function vm(){return 162364}function wm(a,b){a=a|0;b=b|0;return Jg(a)|0}function xm(a,b){a=a|0;b=b|0;return Eg(a)|0}function ym(a,b){a=a|0;b=b|0;return mg(a)|0}function zm(){return 162368}function Am(a,b){a=a|0;b=b|0;return _f(a)|0}function Bm(a,b,c){a=a|0;b=b|0;c=c|0;return li(a,b)|0}function Cm(a,b){a=a|0;b=b|0;return kh(a)|0}function Dm(a,b){a=a|0;b=b|0;return ni(a)|0}function Em(a,b){a=a|0;b=b|0;return gg(a)|0}function Fm(a,b){a=a|0;b=b|0;return of(a)|0}function Gm(a,b){a=a|0;b=b|0;return Ag(a)|0}function Hm(a,b,c){a=a|0;b=b|0;c=c|0;return jg(a,b)|0}function Im(a,b){a=a|0;b=b|0;return yg(a)|0}function Jm(a,b){a=a|0;b=b|0;return Dg(a)|0}function Km(){return 162372}function Lm(a){a=a|0;var b=0,c=0;do if(a>>>0>=255){if((a&-65538)>>>0<65534){b=a>>8;c=a>>>3&31;a=1<<(a&7);if(a&(d[139936+((d[139936+b>>0]|0)<<5|c)>>0]|0)|0){a=0;break}a=(a&(d[141856+((d[141856+b>>0]|0)<<5|c)>>0]|0)|0)==0?1:2;break}if((a&65534|0)!=65534)if((a&-131072|0)==131072)a=2;else return (a|0)>917998&(a+-917536|0)>>>0>94&1|0;else a=-1}else a=(a+1&127)>>>0>32?1:((a|0)!=0)<<31>>31;while(0);return a|0}function Mm(a,b){a=a|0;b=b|0;return bi(a)|0}function Nm(a,b){a=a|0;b=b|0;return ch(a)|0}function Om(a,b){a=a|0;b=b|0;var d=0,e=0;a:do if(!b)d=0;else{d=0;while(1){b=b+-1|0;e=c[a>>2]|0;if(!e)break a;e=Lm(e)|0;if((e|0)<=-1){d=e;break a}d=e+d|0;if(!b)break;else a=a+4|0}}while(0);return d|0}function Pm(a,b){a=a|0;b=b|0;return wg(a)|0}function Qm(a,b){a=a|0;b=b|0;return vg(a)|0}function Rm(a,b){a=a|0;b=b|0;return $g(a)|0}function Sm(a,b){a=a|0;b=b|0;return tf(a)|0}function Tm(a,b){a=a|0;b=b|0;return sf(a)|0}function Um(a,b){a=a|0;b=b|0;return si(a)|0}function Vm(a,b){a=a|0;b=b|0;return hh(a)|0}function Wm(a,b){a=a|0;b=b|0;return qg(a)|0}function Xm(a,b){a=a|0;b=b|0;return _g(a)|0}function Ym(a,b){a=a|0;b=b|0;return mi(a)|0}function Zm(a){a=a|0;if(!a)a=1;else a=(c[a>>2]|0)==0&1;return a|0}function _m(b,e,f,g){b=b|0;e=e|0;f=f|0;g=g|0;var h=0,i=0,j=0,k=0,l=0;h=c[e>>2]|0;if((g|0)!=0?(i=c[g>>2]|0,(i|0)!=0):0)if(!b){j=h;g=f;l=26}else{c[g>>2]=0;k=f;j=h;l=48}else l=5;a:do if((l|0)==5){g=(b|0)!=0;if(c[c[($m()|0)+188>>2]>>2]|0)if(g){g=f;l=33;break}else{g=f;l=15;break}if(!g){f=df(h)|0;l=63;break}b:do if(f){g=f;while(1){i=a[h>>0]|0;if(!(i<<24>>24))break;h=h+1|0;c[b>>2]=i<<24>>24&57343;g=g+-1|0;if(!g)break b;else b=b+4|0}c[b>>2]=0;c[e>>2]=0;f=f-g|0;l=63;break a}while(0);c[e>>2]=h;l=63}while(0);c:while(1){d:do if((l|0)==15){while(1){i=a[h>>0]|0;if(((i&255)+-1|0)>>>0<127?(h&3|0)==0:0){l=c[h>>2]|0;i=l&255;if(!((l+-16843009|l)&-2139062144)){do{h=h+4|0;g=g+-4|0;i=c[h>>2]|0}while(!((i+-16843009|i)&-2139062144|0));i=i&255}}i=i&255;if((i+-1|0)>>>0>=127)break;g=g+-1|0;h=h+1|0}i=i+-194|0;if(i>>>0>50)l=57;else{i=c[176+(i<<2)>>2]|0;j=h+1|0;l=26;continue c}}else if((l|0)==26){l=(d[j>>0]|0)>>>3;if((l+-16|l+(i>>26))>>>0>7){h=j;l=56}else{h=j+1|0;if(i&33554432){if((a[h>>0]&-64)<<24>>24!=-128){h=j;l=56;break}h=j+2|0;if(i&524288){if((a[h>>0]&-64)<<24>>24!=-128){h=j;l=56;break}h=j+3|0}}g=g+-1|0;l=15;continue c}}else if((l|0)==33){l=0;e:do if(g){while(1){i=d[h>>0]|0;j=i+-1|0;if(j>>>0<127){if((h&3|0)==0&g>>>0>4){while(1){i=c[h>>2]|0;if((i+-16843009|i)&-2139062144|0){l=42;break}c[b>>2]=i&255;c[b+4>>2]=d[h+1>>0];c[b+8>>2]=d[h+2>>0];j=h+4|0;i=b+16|0;c[b+12>>2]=d[h+3>>0];g=g+-4|0;if(g>>>0>4){b=i;h=j}else{l=41;break}}if((l|0)==41){b=i;h=j;i=a[j>>0]|0}else if((l|0)==42)i=i&255;i=i&255;j=i+-1|0;l=44}}else l=44;if((l|0)==44){l=0;if(j>>>0>=127)break}h=h+1|0;c[b>>2]=i;g=g+-1|0;if(!g)break e;else b=b+4|0}i=i+-194|0;if(i>>>0>50){l=57;break d}i=c[176+(i<<2)>>2]|0;k=g;j=h+1|0;l=48;continue c}while(0);c[e>>2]=h;l=63;continue c}else if((l|0)==48){l=0;g=d[j>>0]|0;h=g>>>3;if((h+-16|h+(i>>26))>>>0>7){h=j;g=k;l=56}else{h=j+1|0;g=g+-128|i<<6;do if((g|0)<0){i=(d[h>>0]|0)+-128|0;if(i>>>0<=63){h=j+2|0;g=i|g<<6;if((g|0)>=0)break;i=(d[h>>0]|0)+-128|0;if(i>>>0<=63){h=j+3|0;g=i|g<<6;break}}c[(Xd()|0)>>2]=84;h=j+-1|0;break d}while(0);c[b>>2]=g;b=b+4|0;g=k+-1|0;l=33;continue c}}else if((l|0)==63)return f|0;while(0);if((l|0)==56){h=h+-1|0;if(!i)l=57;else{f=b;l=61}}if((l|0)==57)if(!(a[h>>0]|0)){if(b|0){c[b>>2]=0;c[e>>2]=0}f=f-g|0;l=63;continue}else{f=b;l=61}if((l|0)==61){c[(Xd()|0)>>2]=84;if(!f){f=-1;l=63;continue}}c[e>>2]=h;f=-1;l=63}return 0}function $m(){return Ff()|0}function an(a,d,e,f){a=a|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,i=0;i=l;l=l+16|0;h=i;g=(f|0)==0?171604:f;do if(!d)f=an(0,172411,1,g)|0;else{f=c[g>>2]|0;if((f|0)>0){if(a|0)b[a>>1]=f;c[g>>2]=0;f=-3;break}f=Ci(h,d,e,g)|0;if(f>>>0<5){d=c[h>>2]|0;if((d|0)>65535){e=(d>>>10)+55232|0;c[g>>2]=d&1023|56320;c[h>>2]=e;d=e}if(a|0)b[a>>1]=d}}while(0);l=i;return f|0}function bn(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0;e=l;l=l+16|0;f=e;c[f>>2]=b;d=cn(a,f,d,0)|0;l=e;return d|0}function cn(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,i=0,j=0;j=l;l=l+16|0;i=j;a:do if(!b){e=c[d>>2]|0;f=c[e>>2]|0;if(!f)e=0;else{b=e;e=0;do{if(f>>>0>127){f=Kh(i,f,0)|0;if((f|0)==-1){e=-1;break a}}else f=1;e=f+e|0;b=b+4|0;f=c[b>>2]|0}while((f|0)!=0)}}else{b:do if(e>>>0>3){f=e;g=c[d>>2]|0;while(1){h=c[g>>2]|0;if((h+-1|0)>>>0>126){if(!h)break;h=Kh(b,h,0)|0;if((h|0)==-1){e=-1;break a}b=b+h|0;f=f-h|0}else{a[b>>0]=h;b=b+1|0;f=f+-1|0;g=c[d>>2]|0}g=g+4|0;c[d>>2]=g;if(f>>>0<=3)break b}a[b>>0]=0;c[d>>2]=0;e=e-f|0;break a}else f=e;while(0);if(f){g=c[d>>2]|0;while(1){h=c[g>>2]|0;if((h+-1|0)>>>0>126){if(!h){g=20;break}h=Kh(i,h,0)|0;if((h|0)==-1){e=-1;break a}if(f>>>0<h>>>0){g=23;break}Kh(b,c[g>>2]|0,0)|0;b=b+h|0;f=f-h|0}else{a[b>>0]=h;b=b+1|0;f=f+-1|0;g=c[d>>2]|0}g=g+4|0;c[d>>2]=g;if(!f)break a}if((g|0)==20){a[b>>0]=0;c[d>>2]=0;e=e-f|0;break}else if((g|0)==23){e=e-f|0;break}}}while(0);l=j;return e|0}function dn(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,i=0,j=0,k=0,m=0,n=0,o=0;o=l;l=l+1040|0;k=o;m=o+1024|0;j=c[b>>2]|0;c[m>>2]=j;n=(a|0)!=0;h=n?e:256;i=n?a:k;g=j;a:do if((h|0)!=0&(j|0)!=0){e=0;j=i;while(1){a=d>>>2;i=a>>>0>=h>>>0;if(!(d>>>0>131|i)){i=j;break a}a=i?h:a;d=d-a|0;a=_m(j,m,a,f)|0;if((a|0)==-1)break;i=(j|0)==(k|0);h=h-(i?0:a)|0;i=i?j:j+(a<<2)|0;e=a+e|0;g=c[m>>2]|0;if((h|0)!=0&(g|0)!=0)j=i;else break a}e=-1;i=j;h=0;g=c[m>>2]|0}else e=0;while(0);b:do if((g|0)!=0?(h|0)!=0&(d|0)!=0:0){while(1){a=Ci(i,g,d,f)|0;if((a+2|0)>>>0<3)break;g=(c[m>>2]|0)+a|0;c[m>>2]=g;d=d-a|0;h=h+-1|0;e=e+1|0;if(!((h|0)!=0&(d|0)!=0))break b;else i=i+4|0}switch(a|0){case -1:{e=a;break b}case 0:{c[m>>2]=0;break b}default:{c[f>>2]=0;break b}}}while(0);if(n)c[b>>2]=c[m>>2];l=o;return e|0}function en(a,b,c){a=a|0;b=b|0;c=c|0;return Kh(a,b,c)|0}function fn(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,g=0;g=l;l=l+16|0;f=g;e=(e|0)==0?171608:e;if(!b)e=fn(0,172411,1,e)|0;else{e=Ci(f,b,d,e)|0;if((a|0)!=0&e>>>0<5)c[a>>2]=c[f>>2]}l=g;return e|0}function gn(a,b,c){a=a|0;b=b|0;c=c|0;return Ci(0,a,b,(c|0)==0?171612:c)|0}function hn(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0;e=l;l=l+16|0;f=e;c[f>>2]=b;d=_m(a,f,d,0)|0;l=e;return d|0}function jn(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,i=0,j=0,k=0,m=0;m=l;l=l+272|0;i=m;j=m+256|0;f=c[b>>2]|0;c[j>>2]=f;k=(a|0)!=0;g=k?e:256;h=k?a:i;e=f;a:do if((g|0)!=0&(f|0)!=0){f=0;a=e;while(1){e=d>>>0>=g>>>0;if(!(e|d>>>0>32)){e=a;break a}e=e?g:d;d=d-e|0;e=cn(h,j,e,0)|0;if((e|0)==-1)break;a=(h|0)==(i|0);g=g-(a?0:e)|0;h=a?h:h+e|0;f=e+f|0;e=c[j>>2]|0;if((g|0)!=0&(e|0)!=0)a=e;else break a}f=-1;g=0;e=c[j>>2]|0}else f=0;while(0);b:do if((e|0)!=0?(g|0)!=0&(d|0)!=0:0){while(1){a=Kh(h,c[e>>2]|0,0)|0;if((a+1|0)>>>0<2)break;e=(c[j>>2]|0)+4|0;c[j>>2]=e;d=d+-1|0;g=g-a|0;f=a+f|0;if(!((g|0)!=0&(d|0)!=0))break b;else h=h+a|0}if(!a)c[j>>2]=0;else f=-1}while(0);if(k)c[b>>2]=c[j>>2];l=m;return f|0}function kn(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0;g=(d|0)==0?171616:d;e=c[g>>2]|0;f=(e|0)!=0;do if(!a)if(f)h=9;else d=1;else{d=b&65535;b=d&64512;if(!f){if((b|0)==55296){c[g>>2]=(d<<10)+-56557568;d=0;break}}else{if((b|0)!=56320){h=9;break}c[g>>2]=0;d=d+-56320+e|0}d=Kh(a,d,0)|0}while(0);if((h|0)==9){c[g>>2]=0;c[(Xd()|0)>>2]=84;d=-1}return d|0}function ln(a){a=a|0;var b=0;if(a>>>0<128)return a|0;else{b=(a&-128|0)==57216&(c[c[(mn()|0)+188>>2]>>2]|0)==0;return (b?a&255:-1)|0}return 0}function mn(){return Ff()|0}function nn(a){a=a|0;var b=0;b=a&255;if(b>>>0<128)return b|0;else{b=(a|0)!=-1&(c[c[(on()|0)+188>>2]>>2]|0)==0;return (b?a<<24>>24&57343:-1)|0}return 0}function on(){return Ff()|0}function pn(b,e,f){b=b|0;e=e|0;f=f|0;var g=0,h=0,i=0,j=0;j=l;l=l+16|0;g=j;a:do if(!e)b=0;else{do if(f|0){i=(b|0)==0?g:b;b=a[e>>0]|0;if(b<<24>>24>-1){c[i>>2]=b&255;b=b<<24>>24!=0&1;break a}h=(c[c[(qn()|0)+188>>2]>>2]|0)==0;b=a[e>>0]|0;if(h){c[i>>2]=b<<24>>24&57343;b=1;break a}b=(b&255)+-194|0;if(b>>>0<=50){g=e+1|0;h=c[176+(b<<2)>>2]|0;if(f>>>0<4?h&-2147483648>>>((f*6|0)+-6|0)|0:0)break;b=d[g>>0]|0;f=b>>>3;if((f+-16|f+(h>>26))>>>0<=7){b=b+-128|h<<6;if((b|0)>=0){c[i>>2]=b;b=2;break a}g=(d[e+2>>0]|0)+-128|0;if(g>>>0<=63){g=g|b<<6;if((g|0)>=0){c[i>>2]=g;b=3;break a}b=(d[e+3>>0]|0)+-128|0;if(b>>>0<=63){c[i>>2]=b|g<<6;b=4;break a}}}}}while(0);c[(Xd()|0)>>2]=84;b=-1}while(0);l=j;return b|0}function qn(){return Ff()|0}function rn(a,b){a=a|0;b=b|0;return pn(0,a,b)|0}function sn(a){a=a|0;var b=0,d=0;b=l;l=l+16|0;d=b;c[d>>2]=a;a=Wd(Ca(148,d|0)|0)|0;l=b;return a|0}function tn(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0;e=l;l=l+16|0;f=e;c[f>>2]=a;c[f+4>>2]=b;c[f+8>>2]=d;d=Wd(ec(85,f|0)|0)|0;l=e;return d|0}function un(a,b){a=a|0;b=b|0;var d=0,e=0,f=0;f=l;l=l+16|0;e=f;do{c[e>>2]=a;c[e+4>>2]=b;d=_b(63,e|0)|0}while((d|0)==-16);e=Wd(d)|0;l=f;return e|0}function vn(){var a=0,b=0;b=l;l=l+16|0;a=Wd(nb(29,b|0)|0)|0;l=b;return a|0}function wn(){var a=0;a=l;l=l+16|0;Nb(36,a|0)|0;l=a;return}function xn(a){a=a|0;var b=0,d=0;b=l;l=l+16|0;d=b;c[d>>2]=a;a=Wd(Sb(41,d|0)|0)|0;l=b;return a|0}function yn(a){a=a|0;var b=0,d=0,e=0;d=l;l=l+16|0;e=d;b=d+4|0;c[e>>2]=b;a=(zn(a,21519,e)|0)<0;l=d;return (a?-1:c[b>>2]|0)|0}function zn(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0;e=l;l=l+32|0;f=e+16|0;g=e;c[g>>2]=d;h=(c[g>>2]|0)+(4-1)&~(4-1);d=c[h>>2]|0;c[g>>2]=h+4;c[f>>2]=a;c[f+4>>2]=b;c[f+8>>2]=d;d=Wd(Wb(54,f|0)|0)|0;l=e;return d|0}function An(){var a=0,b=0;b=l;l=l+16|0;a=b;c[a>>2]=0;a=ta(132,a|0)|0;l=b;return a|0}function Bn(a,b,c){a=a|0;b=b|0;c=c|0;return Cn(208,a,b,c)|0}function Cn(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,g=0;f=l;l=l+32|0;g=f;c[g>>2]=b;c[g+4>>2]=d;c[g+8>>2]=e;c[g+12>>2]=a;a=g+16|0;c[a>>2]=-1;En(1,g);a=c[a>>2]|0;if(a)if((a|0)>0){c[(Xd()|0)>>2]=a;a=-1}else a=-1;else a=0;l=f;return a|0}function Dn(a){a=a|0;a=a+16|0;if((c[a>>2]|0)<=0)c[a>>2]=1;return}function En(a,b){a=a|0;b=b|0;hd[a&7](b);return}function Fn(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0;e=l;l=l+16|0;f=e;c[f>>2]=a;c[f+4>>2]=b;c[f+8>>2]=d;d=Wd(za(145,f|0)|0)|0;l=e;return d|0}function Gn(a){a=a|0;var b=0,d=0;b=l;l=l+32|0;d=b;c[d>>2]=a;c[d+4>>2]=21523;c[d+8>>2]=b+16;a=(Wd(Wb(54,d|0)|0)|0)==0&1;l=b;return a|0}function Hn(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,g=0;f=l;l=l+32|0;g=f;c[g>>2]=a;c[g+4>>2]=b;c[g+8>>2]=d;c[g+12>>2]=0;c[g+16>>2]=e;c[g+20>>2]=e>>31;e=Wd(La(181,g|0)|0)|0;l=f;return e|0}function In(a){a=a|0;var b=0,d=0;b=l;l=l+16|0;d=b;c[d>>2]=a;a=Wd(Rb(40,d|0)|0)|0;l=b;return a|0}function Jn(a,b){a=a|0;b=b|0;var d=0,e=0,f=0;e=l;l=l+16|0;f=e;c[f>>2]=0;c[f+4>>2]=b;d=f+8|0;c[d>>2]=0;b=f+12|0;c[b>>2]=a;Tc(0,f|0,f|0)|0;l=e;return ((c[d>>2]|0)*1e6|0)+(c[b>>2]|0)|0}function Kn(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0;e=l;l=l+16|0;f=e;c[f>>2]=a;c[f+4>>2]=b;c[f+8>>2]=d;d=Wd(sb(3,f|0)|0)|0;l=e;return d|0}function Ln(a){a=a|0;var b=0,d=0;b=l;l=l+16|0;d=b;c[d>>2]=a;a=Wd(Kb(34,d|0)|0)|0;l=b;return a|0}function Mn(a,b){a=a|0;b=b|0;var d=0,e=0;d=l;l=l+16|0;e=d;c[e>>2]=a;c[e+4>>2]=b;b=Wd(ab(205,e|0)|0)|0;l=d;return b|0}function Nn(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0;g=l;l=l+4112|0;e=g+4096|0;d=g;if(a)if(!b){c[(Xd()|0)>>2]=22;a=0}else f=4;else{b=4096;a=d;f=4}if((f|0)==4){c[e>>2]=a;c[e+4>>2]=b;if((Wd(Ma(183,e|0)|0)|0)>=0){if((a|0)==(d|0))a=bd[3&7](d)|0}else a=0}l=g;return a|0}function On(a){a=a|0;var b=0,c=0;b=(df(a)|0)+1|0;c=ud(b)|0;if(!c)a=0;else a=bD(c|0,a|0,b|0)|0;return a|0}function Pn(a){a=a|0;return Cn(208,-1,a,-1)|0}function Qn(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,i=0;i=l;l=l+80|0;f=i+56|0;e=i+40|0;h=i+24|0;g=i+8|0;d=i;do if(b){c[d>>2]=a;c[d+4>>2]=b;d=Gb(331,d|0)|0;if((d|0)!=-38){d=Wd(d)|0;break}d=Rn(a)|0;if(!d){if(b&524288|0){c[g>>2]=c[a>>2];c[g+4>>2]=2;c[g+8>>2]=1;jb(221,g|0)|0;c[h>>2]=c[a+4>>2];c[h+4>>2]=2;c[h+8>>2]=1;jb(221,h|0)|0}if(!(b&2048))d=0;else{c[e>>2]=c[a>>2];c[e+4>>2]=4;c[e+8>>2]=2048;jb(221,e|0)|0;c[f>>2]=c[a+4>>2];c[f+4>>2]=4;c[f+8>>2]=2048;jb(221,f|0)|0;d=0}}}else d=Rn(a)|0;while(0);l=i;return d|0}function Rn(a){a=a|0;var b=0,d=0;b=l;l=l+16|0;d=b;c[d>>2]=a;a=Wd(Tb(42,d|0)|0)|0;l=b;return a|0}function Sn(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,g=0;f=l;l=l+16|0;g=f;c[g>>2]=a;c[g+4>>2]=b;c[g+8>>2]=d;c[g+12>>2]=e;e=Wd(yb(305,g|0)|0)|0;l=f;return e|0}function Tn(a){a=a|0;var b=0,d=0;b=l;l=l+16|0;d=b;c[d>>2]=a;a=Wd(Vb(51,d|0)|0)|0;l=b;return a|0}function Un(){var a=0,b=0;b=l;l=l+16|0;a=Za(202,b|0)|0;l=b;return a|0}function Vn(a,b){a=a|0;b=b|0;var d=0,e=0;d=l;l=l+16|0;e=d;c[e>>2]=a;c[e+4>>2]=0;c[e+8>>2]=b;c[e+12>>2]=b>>31;b=Wd(Pa(193,e|0)|0)|0;l=d;return b|0}function Wn(a,b){a=a|0;b=b|0;var d=0,e=0;d=l;l=l+16|0;e=d;c[e>>2]=a;c[e+4>>2]=b;b=Wd(Xb(57,e|0)|0)|0;l=d;return b|0}function Xn(a){a=a|0;var b=0,d=0;b=l;l=l+16|0;d=b;c[d>>2]=a;a=Wd(ta(132,d|0)|0)|0;l=b;return a|0}function Yn(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0;g=l;l=l+32|0;f=g;do if(Gn(b)|0){de(f,b);b=tn(f,d,e)|0;if((b|0)<0){b=c[(Xd()|0)>>2]|0;break}if((b|0)==(e|0))b=34;else{a[d+b>>0]=0;b=0}}else b=25;while(0);l=g;return b|0}function Zn(a,b){a=a|0;b=b|0;var d=0,e=0;d=l;l=l+16|0;e=d;c[e>>2]=a;c[e+4>>2]=b;b=Wd(Eb(33,e|0)|0)|0;l=d;return b|0}function _n(a){a=a|0;var b=0,d=0,e=0,f=0;f=l;l=l+48|0;e=f+40|0;d=f;b=f+32|0;c[b>>2]=a;b=ua(133,b|0)|0;if((b|0)==-9?(c[d>>2]=a,c[d+4>>2]=1,(jb(221,d|0)|0)>=0):0){de(d,a);c[e>>2]=d;a=Wd(pa(12,e|0)|0)|0}else a=Wd(b)|0;l=f;return a|0}function $n(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,i=0,j=0,k=0,m=0,n=0,o=0;n=l;l=l+1216|0;j=n+1048|0;i=n+1040|0;h=n+1024|0;f=n;k=n+1080|0;g=n+1064|0;a:do switch(e|0){case 0:{m=4;break}case 512:{if((ao()|0)==(bo()|0)?(o=co()|0,(o|0)==(Un()|0)):0){m=4;break a}c[g>>2]=a;c[g+4>>2]=b;c[g+8>>2]=d;ba(k|0);a=da(4,f+1024|0,0,g|0,i|0)|0;if((a|0)>0){b=i;while(1){c[j>>2]=a;c[j+4>>2]=b;c[j+8>>2]=-2147483648;c[j+12>>2]=0;na(114,j|0)|0;d=c[i>>2]|0;if(!(d&127)){m=10;break}if(((d&65535)+-1|0)>>>0<=254){a=-16;break}}if((m|0)==10)a=c[142912+((d>>>8&255)<<2)>>2]|0}else a=-16;ia(k|0);a=Wd(a)|0;break}default:a=Wd(-22)|0}while(0);if((m|0)==4){c[h>>2]=a;c[h+4>>2]=b;c[h+8>>2]=d;c[h+12>>2]=e;a=Wd(Ab(307,h|0)|0)|0}l=n;return a|0}function ao(){var a=0,b=0;b=l;l=l+16|0;a=Va(199,b|0)|0;l=b;return a|0}function bo(){var a=0,b=0;b=l;l=l+16|0;a=Ya(201,b|0)|0;l=b;return a|0}function co(){var a=0,b=0;b=l;l=l+16|0;a=Xa(200,b|0)|0;l=b;return a|0}function eo(a){a=a|0;var b=0,d=0,e=0,f=0,g=0;f=l;l=l+64|0;d=f+40|0;b=f+32|0;e=f+24|0;g=f+8|0;c[g>>2]=Za(202,f|0)|0;c[g+4>>2]=-1;if(!(($a(204,g|0)|0)==0?(c[e>>2]=Ya(201,f+16|0)|0,c[e+4>>2]=-1,!(_a(203,e|0)|0)):0)){c[b>>2]=1;ka(1,b|0)|0}g=c[a+4>>2]|0;b=c[a+8>>2]|0;c[d>>2]=c[a>>2];c[d+4>>2]=g;c[d+8>>2]=b;c[d+12>>2]=0;b=Ab(307,d|0)|0;a=0;while(1){if((b|0)==(c[142912+(a<<2)>>2]|0))break;a=a+1|0;if(a>>>0>=13){a=13;break}}l=f;return a|0}function fo(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,g=0;f=l;l=l+32|0;g=f;c[g>>2]=a;c[g+4>>2]=b;c[g+8>>2]=d;c[g+12>>2]=e;c[g+16>>2]=0;e=Wd(Ib(334,g|0)|0)|0;l=f;return e|0}function go(a,b,c){a=a|0;b=b|0;c=c|0;return Cn(210,a,b,c)|0}function ho(b,c){b=b|0;c=c|0;var d=0,e=0,f=0,g=0;f=l;l=l+400|0;d=f;if(!(io(d)|0)){e=c>>>0<65?c:65;a:do if(!e)c=0;else{c=0;do{g=a[d+65+c>>0]|0;a[b+c>>0]=g;if(!(g<<24>>24))break a;c=c+1|0}while(c>>>0<e>>>0)}while(0);if((c|0)==(e|0)){a[b+(e+-1)>>0]=0;c=0}else c=0}else c=-1;l=f;return c|0}function io(a){a=a|0;var b=0,d=0;b=l;l=l+16|0;d=b;c[d>>2]=a;a=Wd(ra(122,d|0)|0)|0;l=b;return a|0}function jo(a,b){a=a|0;b=b|0;var d=0,e=0;d=l;l=l+16|0;e=d;c[e>>2]=a;c[e+4>>2]=b;b=Wd(dc(83,e|0)|0)|0;l=d;return b|0}function ko(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0;j=l;l=l+48|0;i=j+24|0;h=j+16|0;f=j;a:do if((a|0)!=(b|0)){g=(d&524288|0)!=0;b:do if(g)while(1){c[f>>2]=a;c[f+4>>2]=b;c[f+8>>2]=d;e=Fb(330,f|0)|0;switch(e|0){case -38:break b;case -16:break;default:break a}}while(0);do{c[h>>2]=a;c[h+4>>2]=b;e=_b(63,h|0)|0}while((e|0)==-16);if(g){c[i>>2]=b;c[i+4>>2]=2;c[i+8>>2]=1;jb(221,i|0)|0}}else e=-22;while(0);i=Wd(e)|0;l=j;return i|0}function lo(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,g=0;f=l;l=l+16|0;g=f;c[g>>2]=a;c[g+4>>2]=b;c[g+8>>2]=d;c[g+12>>2]=e;e=Wd(vb(302,g|0)|0)|0;l=f;return e|0}function mo(){var a=0,b=0;b=l;l=l+16|0;a=Wa(20,b|0)|0;l=b;return a|0}function no(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0;e=l;l=l+16|0;f=e;c[f>>2]=a;c[f+4>>2]=b;c[f+8>>2]=d;d=Wd(Aa(146,f|0)|0)|0;l=e;return d|0}function oo(a){a=a|0;if(!a)a=167016;else mh(a,167016)|0;return a|0}function po(a,b){a=a|0;b=b|0;var c=0;c=qo()|0;if(c)if((df(c)|0)>>>0<b>>>0){mh(a,c)|0;a=0}else a=34;else a=6;return a|0}function qo(){return Dc(167025)|0}function ro(a){a=a|0;return Cn(210,-1,a,-1)|0}function so(a,b){a=a|0;b=b|0;var d=0,e=0;d=l;l=l+16|0;e=d;c[e>>2]=a;c[e+4>>2]=b;b=Wd(fc(9,e|0)|0)|0;l=d;return b|0}function to(a){a=a|0;var b=0,d=0;b=l;l=l+16|0;d=b;c[d>>2]=a;a=Wd(pa(12,d|0)|0)|0;l=b;return a|0}function uo(a){a=a|0;a=Yn(a,170304,32)|0;if(!a)a=170304;else{c[(Xd()|0)>>2]=a;a=0}return a|0}function vo(a,b){a=a|0;b=b|0;return wo(a)|0}function wo(a){a=a|0;var b=0,d=0;b=l;l=l+16|0;d=b;c[d>>2]=bd[2&7](a)|0;a=Yb(6,d|0)|0;a=Wd((a|0)==-4?0:a)|0;l=b;return a|0}function xo(a){a=a|0;var b=0,d=0;b=l;l=l+16|0;d=b;c[d>>2]=a;a=Wd(oa(118,d|0)|0)|0;l=b;return a|0}function yo(){var a=0,b=0;b=l;l=l+16|0;a=Wd(ac(66,b|0)|0)|0;l=b;return a|0}function zo(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,g=0;f=l;l=l+32|0;g=f;c[g>>2]=a;c[g+4>>2]=b;c[g+8>>2]=d;c[g+12>>2]=e;c[g+16>>2]=0;e=Wd(Hb(333,g|0)|0)|0;l=f;return e|0}function Ao(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,g=0;f=l;l=l+32|0;g=f;c[g>>2]=a;c[g+4>>2]=b;c[g+8>>2]=d;c[g+12>>2]=0;c[g+16>>2]=e;c[g+20>>2]=e>>31;e=Wd(Ka(180,g|0)|0)|0;l=f;return e|0}function Bo(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0;e=l;l=l+16|0;f=e;c[f>>2]=a;c[f+4>>2]=b;c[f+8>>2]=d;d=Wd(Qb(4,f|0)|0)|0;l=e;return d|0}function Co(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0;h=l;l=l+64|0;g=h+48|0;f=h;e=h+32|0;c[e>>2]=a;c[e+4>>2]=b;c[e+8>>2]=d;e=bb(207,e|0)|0;if((e|0)==-9?(c[f>>2]=a,c[f+4>>2]=1,(jb(221,f|0)|0)>=0):0){de(f,a);c[g>>2]=f;c[g+4>>2]=b;c[g+8>>2]=d;a=Wd(eb(212,g|0)|0)|0}else a=Wd(e)|0;l=h;return a|0}function Do(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0;e=l;l=l+16|0;f=e;c[f>>2]=a;c[f+4>>2]=b;c[f+8>>2]=d;d=Wd(xb(304,f|0)|0)|0;l=e;return d|0}function Eo(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0;g=l;l=l+32|0;h=g;c[h>>2]=a;c[h+4>>2]=b;c[h+8>>2]=d;c[h+12>>2]=e;c[h+16>>2]=f;f=Wd(rb(298,h|0)|0)|0;l=g;return f|0}function Fo(a,b){a=a|0;b=b|0;return Cn(203,a,b,0)|0}function Go(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0;g=l;l=l+32|0;h=g;c[h>>2]=a;c[h+4>>2]=b;c[h+8>>2]=d;c[h+12>>2]=e;c[h+16>>2]=f;f=Wd(wb(303,h|0)|0)|0;l=g;return f|0}function Ho(a){a=a|0;var b=0,d=0;d=l;l=l+16|0;b=d;c[b>>2]=a;c[b+4>>2]=0;a=(Lc(b|0,b|0)|0)==0;l=d;return (a?0:c[b>>2]|0)|0}function Io(a,b){a=a|0;b=b|0;var d=0,e=0,f=0;d=l;l=l+16|0;e=d;f=d+4|0;c[f>>2]=b;c[e>>2]=f;b=zn(a,21520,e)|0;l=d;return b|0}function Jo(a){a=a|0;var b=0,d=0;b=l;l=l+16|0;d=b;c[d>>2]=a;a=Wd(Ba(147,d|0)|0)|0;l=b;return a|0}function Ko(a,b){a=a|0;b=b|0;return Cn(204,a,b,0)|0}function Lo(){var a=0,b=0;b=l;l=l+16|0;a=$b(64,b|0)|0;l=b;return a|0}function Mo(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0;e=l;l=l+16|0;f=e;c[f>>2]=a;c[f+4>>2]=b;c[f+8>>2]=d;d=Wd(eb(212,f|0)|0)|0;l=e;return d|0}function No(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0;e=l;l=l+16|0;f=e;c[f>>2]=a;c[f+4>>2]=b;c[f+8>>2]=d;d=Wd(ub(301,f|0)|0)|0;l=e;return d|0}function Oo(a){a=a|0;return Cn(213,a,0,0)|0}function Po(){return Wn(0,0)|0}function Qo(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0;f=l;l=l+32|0;g=f;e=f+20|0;c[g>>2]=a;c[g+4>>2]=0;c[g+8>>2]=b;c[g+12>>2]=e;c[g+16>>2]=d;d=(Wd(wa(140,g|0)|0)|0)==0;l=f;return (d?c[e>>2]|0:-1)|0}function Ro(a){a=a|0;return Cn(214,a,0,0)|0}function So(a,b){a=a|0;b=b|0;var d=0,e=0;d=l;l=l+16|0;e=d;c[e>>2]=a;c[e+4>>2]=0;c[e+8>>2]=b;c[e+12>>2]=b>>31;b=Wd(Qa(194,e|0)|0)|0;l=d;return b|0}function To(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0;e=l;l=l+16|0;f=e;c[f>>2]=a;c[f+4>>2]=b;c[f+8>>2]=d;d=Wd(Ua(198,f|0)|0)|0;l=e;return d|0}function Uo(b,c){b=b|0;c=c|0;var d=0;d=Vg(b,c)|0;c=ud(d+1|0)|0;if(!c)c=0;else{bD(c|0,b|0,d|0)|0;a[c+d>>0]=0}return c|0}function Vo(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;return Wo(a,b,c)|0}function Wo(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0;if(!d)e=0;else{e=c[a>>2]|0;a:do if(!e)e=0;else{f=d;while(1){f=f+-1|0;d=c[b>>2]|0;if(!((f|0)!=0&(d|0)!=0))break a;if((e|0)!=(d|0)?(d=of(e)|0,(d|0)!=(of(c[b>>2]|0)|0)):0)break;a=a+4|0;b=b+4|0;e=c[a>>2]|0;if(!e){e=0;break a}}e=c[a>>2]|0}while(0);e=of(e)|0;e=e-(of(c[b>>2]|0)|0)|0}return e|0}function Xo(b,c){b=b|0;c=c|0;var e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0;h=a[b>>0]|0;f=h&255;a:do if(h<<24>>24==(a[c>>0]|0)){e=1;i=0;g=0;do{if(!(h<<24>>24)){e=0;break a}n=(uf(f)|0)==0;g=g+1|0;i=n?g:i;e=n?1:h<<24>>24==48?e:0;h=a[b+g>>0]|0;f=h&255}while(h<<24>>24==(a[c+g>>0]|0));k=e;l=i;m=g;n=c+g|0;j=b+g|0;g=a[b+i>>0]|0;e=h;o=6}else{k=1;l=0;m=0;n=c;j=b;g=h;e=h;o=6}while(0);b:do if((o|0)==6){if(g<<24>>24!=48?(a[c+l>>0]|0)!=48:0){i=(uf(e&255)|0)==0;e=(uf(d[c+m>>0]|0)|0)!=0;if(!i){g=m;do{g=g+1|0;if(!e){e=1;break b}i=(uf(d[b+g>>0]|0)|0)==0;e=(uf(d[c+g>>0]|0)|0)!=0}while(!i)}if(e){e=-1;break}}else o=13;do if((o|0)==13?l>>>0<m>>>0&(k|0)!=0:0){if((uf(f)|0)==0?(uf(d[n>>0]|0)|0)==0:0)break;e=((a[j>>0]|0)+-48&255)-((a[n>>0]|0)+-48&255)|0;break b}while(0);e=(d[j>>0]|0)-(d[n>>0]|0)|0}while(0);return e|0}function Yo(a,b){a=a|0;b=b|0;var d=0,e=0;d=c[b>>2]|0;do if(!d)d=Gg(a)|0;else{if(!(c[b+4>>2]|0)){d=Fg(a,d)|0;if(!d){d=Gg(a)|0;break}else{d=d-a>>2;break}}e=c[a>>2]|0;a:do if(!e)d=a;else{d=a;do{if(Fg(b,e)|0)break a;d=d+4|0;e=c[d>>2]|0}while((e|0)!=0)}while(0);d=d-a>>2}while(0);return d|0}function Zo(a,b){a=a|0;b=b|0;_o(a,b)|0;return a+((Gg(b)|0)<<2)|0}function _o(a,b){a=a|0;b=b|0;var d=0,e=0;d=c[b>>2]|0;c[a>>2]=d;if(d|0){d=a;do{d=d+4|0;b=b+4|0;e=c[b>>2]|0;c[d>>2]=e}while((e|0)!=0)}return a|0}function $o(b,c){b=b|0;c=c|0;var d=0;d=a[c>>0]|0;do if(d<<24>>24){b=Tg(b,d<<24>>24)|0;if(b){if(a[c+1>>0]|0)if(a[b+1>>0]|0){if(!(a[c+2>>0]|0)){b=ap(b,c)|0;break}if(a[b+2>>0]|0){if(!(a[c+3>>0]|0)){b=bp(b,c)|0;break}if(a[b+3>>0]|0)if(!(a[c+4>>0]|0)){b=cp(b,c)|0;break}else{b=dp(b,c)|0;break}else b=0}else b=0}else b=0}else b=0}while(0);return b|0}function ap(b,c){b=b|0;c=c|0;var e=0,f=0;f=(d[c>>0]|0)<<8|(d[c+1>>0]|0);c=b+1|0;e=a[c>>0]|0;a:do if(!(e<<24>>24))c=0;else{e=(d[b>>0]|0)<<8|e&255;while(1){b=e&65535;if((b|0)==(f|0))break;c=c+1|0;e=a[c>>0]|0;if(!(e<<24>>24)){c=0;break a}else e=b<<8|e&255}c=c+-1|0}while(0);return c|0}function bp(b,c){b=b|0;c=c|0;var e=0,f=0;f=(d[c+1>>0]|0)<<16|(d[c>>0]|0)<<24|(d[c+2>>0]|0)<<8;e=b+2|0;c=a[e>>0]|0;b=(d[b+1>>0]|0)<<16|(d[b>>0]|0)<<24|(c&255)<<8;c=c<<24>>24==0;if(!((b|0)==(f|0)|c))do{e=e+1|0;c=a[e>>0]|0;b=(b|c&255)<<8;c=c<<24>>24==0}while(!((b|0)==(f|0)|c));return (c?0:e+-2|0)|0}function cp(b,c){b=b|0;c=c|0;var e=0,f=0;f=(d[c+1>>0]|0)<<16|(d[c>>0]|0)<<24|(d[c+2>>0]|0)<<8|(d[c+3>>0]|0);e=b+3|0;c=a[e>>0]|0;b=(d[b+1>>0]|0)<<16|(d[b>>0]|0)<<24|(d[b+2>>0]|0)<<8|c&255;c=c<<24>>24==0;if(!((b|0)==(f|0)|c))do{e=e+1|0;c=a[e>>0]|0;b=b<<8|c&255;c=c<<24>>24==0}while(!((b|0)==(f|0)|c));return (c?0:e+-3|0)|0}function dp(b,e){b=b|0;e=e|0;var f=0,g=0,h=0,i=0,j=0,k=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0;x=l;l=l+1056|0;v=x+1024|0;w=x;c[v>>2]=0;c[v+4>>2]=0;c[v+8>>2]=0;c[v+12>>2]=0;c[v+16>>2]=0;c[v+20>>2]=0;c[v+24>>2]=0;c[v+28>>2]=0;f=a[e>>0]|0;a:do if(f<<24>>24){q=0;do{if(!(a[b+q>>0]|0)){f=0;break a}u=f&255;t=v+(u>>>5<<2)|0;c[t>>2]=c[t>>2]|1<<(u&31);q=q+1|0;c[w+(u<<2)>>2]=q;f=a[e+q>>0]|0}while(f<<24>>24!=0);n=q>>>0>1;if(n){k=1;j=1;m=0;i=-1;o=1;while(1){f=a[e+(j+i)>>0]|0;g=a[e+o>>0]|0;do if(f<<24>>24==g<<24>>24)if((j|0)==(k|0)){h=k;f=1;g=k+m|0;break}else{h=k;f=j+1|0;g=m;break}else if((f&255)>(g&255)){h=o-i|0;f=1;g=o;break}else{h=1;f=1;g=m+1|0;i=m;break}while(0);o=f+g|0;if(o>>>0>=q>>>0)break;else{k=h;j=f;m=g}}if(n){n=1;m=1;o=0;g=-1;p=1;while(1){f=a[e+(m+g)>>0]|0;j=a[e+p>>0]|0;do if(f<<24>>24==j<<24>>24)if((m|0)==(n|0)){f=n;j=1;k=n+o|0;break}else{f=n;j=m+1|0;k=o;break}else if((f&255)<(j&255)){f=p-g|0;j=1;k=p;break}else{f=1;j=1;k=o+1|0;g=o;break}while(0);p=j+k|0;if(p>>>0>=q>>>0){u=q;j=25;break}else{n=f;m=j;o=k}}}else{u=q;f=1;g=-1;j=25}}else{h=1;i=-1;u=q;f=1;g=-1;j=25}}else{h=1;i=-1;u=0;f=1;g=-1;j=25}while(0);b:do if((j|0)==25){s=(g+1|0)>>>0>(i+1|0)>>>0;f=s?f:h;s=s?g:i;t=s+1|0;if(!(ef(e,e+f|0,t)|0)){n=u-f|0;r=n;m=f}else{n=u-s+-1|0;n=(s>>>0>n>>>0?s:n)+1|0;r=0;m=n;n=u-n|0}o=u|63;p=u+-1|0;q=(r|0)!=0;f=b;k=0;g=b;while(1){h=f;do if((g-h|0)>>>0<u>>>0){i=Wg(g,0,o)|0;if(i)if((i-h|0)>>>0<u>>>0){f=0;break b}else break;else{i=g+o|0;break}}else i=g;while(0);g=d[f+p>>0]|0;c:do if(!(1<<(g&31)&c[v+(g>>>5<<2)>>2])){h=0;g=u}else{g=u-(c[w+(g<<2)>>2]|0)|0;if(g|0){h=0;g=q&(k|0)!=0&g>>>0<m>>>0?n:g;break}j=t>>>0>k>>>0;g=j?t:k;h=a[e+g>>0]|0;d:do if(h<<24>>24){while(1){if(h<<24>>24!=(a[f+g>>0]|0))break;g=g+1|0;h=a[e+g>>0]|0;if(!(h<<24>>24))break d}h=0;g=g-s|0;break c}while(0);if(!j)break b;g=t;while(1){g=g+-1|0;if((a[e+g>>0]|0)!=(a[f+g>>0]|0)){h=r;g=m;break c}if(g>>>0<=k>>>0)break b}}while(0);f=f+g|0;k=h;g=i}}while(0);l=x;return f|0}function ep(a,b){a=a|0;b=b|0;return fp(a,b)|0}function fp(a,b){a=a|0;b=b|0;var d=0,e=0;d=c[b>>2]|0;if(d)if((c[a>>2]|0)!=0?(e=Fg(a,d)|0,(e|0)!=0):0)if(c[b+4>>2]|0)if(!(c[e+4>>2]|0))a=0;else a=gp(e,b)|0;else a=e;else a=0;return a|0}function gp(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0;a:do if(c[b>>2]|0){n=0;do{if(!(c[a+(n<<2)>>2]|0)){d=0;break a}n=n+1|0}while((c[b+(n<<2)>>2]|0)!=0);k=n>>>0>1;if(k){i=1;h=1;j=0;g=-1;l=1;while(1){d=c[b+(h+g<<2)>>2]|0;e=c[b+(l<<2)>>2]|0;do if((d|0)==(e|0))if((h|0)==(i|0)){f=i;d=1;e=i+j|0;break}else{f=i;d=h+1|0;e=j;break}else if((d|0)>(e|0)){f=l-g|0;d=1;e=l;break}else{f=1;d=1;e=j+1|0;g=j;break}while(0);l=d+e|0;if(l>>>0>=n>>>0)break;else{i=f;h=d;j=e}}if(k){k=1;j=1;l=0;e=-1;m=1;while(1){d=c[b+(j+e<<2)>>2]|0;h=c[b+(m<<2)>>2]|0;do if((d|0)==(h|0))if((j|0)==(k|0)){d=k;h=1;i=k+l|0;break}else{d=k;h=j+1|0;i=l;break}else if((d|0)<(h|0)){d=m-e|0;h=1;i=m;break}else{d=1;h=1;i=l+1|0;e=l;break}while(0);m=h+i|0;if(m>>>0>=n>>>0){o=n;p=25;break}else{k=d;j=h;l=i}}}else{o=n;d=1;e=-1;p=25}}else{f=1;g=-1;o=n;d=1;e=-1;p=25}}else{f=1;g=-1;o=0;d=1;e=-1;p=25}while(0);b:do if((p|0)==25){m=(e+1|0)>>>0>(g+1|0)>>>0;d=m?d:f;m=m?e:g;n=m+1|0;if(!(hp(b,b+(d<<2)|0,n)|0)){l=o-d|0;j=d}else{j=o-m+-1|0;l=0;j=(m>>>0>j>>>0?m:j)+1|0}k=o|63;d=a;f=0;e=a;while(1){g=d;do if(e-g>>2>>>0<o>>>0){h=ip(e,0,k)|0;if(h)if(h-g>>2>>>0<o>>>0){d=0;break b}else break;else{h=e+(k<<2)|0;break}}else h=e;while(0);i=n>>>0>f>>>0;e=i?n:f;g=c[b+(e<<2)>>2]|0;c:do if(!g)p=39;else{while(1){if((g|0)!=(c[d+(e<<2)>>2]|0))break;e=e+1|0;g=c[b+(e<<2)>>2]|0;if(!g){p=39;break c}}f=0;e=e-m|0}while(0);d:do if((p|0)==39){p=0;if(!i)break b;e=n;while(1){e=e+-1|0;if((c[b+(e<<2)>>2]|0)!=(c[d+(e<<2)>>2]|0)){f=l;e=j;break d}if(e>>>0<=f>>>0)break b}}while(0);d=d+(e<<2)|0;e=h}}while(0);return d|0}function hp(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0;a:do if(!d)d=0;else{while(1){e=c[a>>2]|0;f=c[b>>2]|0;if((e|0)!=(f|0))break;d=d+-1|0;if(!d){d=0;break a}else{b=b+4|0;a=a+4|0}}d=e-f|0}while(0);return d|0}function ip(a,b,d){a=a|0;b=b|0;d=d|0;a:do if(!d)a=0;else while(1){if((c[a>>2]|0)==(b|0))break a;d=d+-1|0;if(!d){a=0;break}else a=a+4|0}while(0);return a|0}function jp(b,c){b=b|0;c=c|0;var d=0;d=df(c)|0;a:do if(!(a[b>>0]|0))b=0;else while(1){if(!(bh(b,c,d)|0))break a;b=b+1|0;if(!(a[b>>0]|0)){b=0;break}}while(0);return b|0}function kp(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0;e=a+((Gg(a)|0)<<2)|0;a:do if(d)while(1){g=c[b>>2]|0;if(!g)break a;d=d+-1|0;f=e+4|0;c[e>>2]=g;if(!d){e=f;break}else{b=b+4|0;e=f}}while(0);c[e>>2]=0;return a|0}function lp(a,b,c){a=a|0;b=b|0;c=c|0;cD(b|0,a|0,c|0)|0;return}function mp(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;return bh(a,b,c)|0}function np(a,b){a=a|0;b=b|0;_o(a+((Gg(a)|0)<<2)|0,b)|0;return a|0}function op(a,b,c){a=a|0;b=b|0;c=c|0;return qi(a,b)|0}function pp(a,b){a=a|0;b=b|0;return qp(a,b,(df(a)|0)+1|0)|0}function qp(b,c,d){b=b|0;c=c|0;d=d|0;a:do if(!d)d=0;else{c=c&255;while(1){d=d+-1|0;if((a[b+d>>0]|0)==c<<24>>24)break;if(!d){d=0;break a}}d=b+d|0}while(0);return d|0}function rp(b,c){b=b|0;c=c|0;c=b+(Qj(b,c)|0)|0;return ((a[c>>0]|0)==0?0:c)|0}function sp(a,b,c){a=a|0;b=b|0;c=c|0;var d=0;d=Vg(a,c)|0;if((d|0)==(c|0))a=df(b)|0;else a=tp(a+d|0,b,c-d|0)|0;return a+d|0}function tp(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,i=0;f=e+-1|0;if(!e){e=b;b=e}else{h=d;e=b;do if(!((h^e)&3)){g=(f|0)!=0;a:do if(g&(h&3|0)!=0)while(1){h=a[d>>0]|0;a[b>>0]=h;if(!(h<<24>>24))break a;f=f+-1|0;d=d+1|0;b=b+1|0;g=(f|0)!=0;if(!(g&(d&3|0)!=0)){i=8;break}}else i=8;while(0);if((i|0)==8)if(!g)break;if(!(a[d>>0]|0))i=15;else{b:do if(f>>>0>3){g=f;while(1){f=c[d>>2]|0;if((f&-2139062144^-2139062144)&f+-16843009|0){f=g;break b}c[b>>2]=f;f=g+-4|0;d=d+4|0;b=b+4|0;if(f>>>0>3)g=f;else break}}while(0);i=15}}else i=15;while(0);c:do if((i|0)==15)if(f)do{i=a[d>>0]|0;a[b>>0]=i;if(!(i<<24>>24))break c;f=f+-1|0;d=d+1|0;b=b+1|0}while((f|0)!=0);while(0);a[b>>0]=0}return b-e+(df(d)|0)|0}function up(a,b){a=a|0;b=b|0;dD(a|0,0,b|0)|0;return}function vp(b,c,d){b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0;e=b+(df(b)|0)|0;a:do if(d)while(1){g=a[c>>0]|0;if(!(g<<24>>24))break a;d=d+-1|0;f=e+1|0;a[e>>0]=g;if(!d){e=f;break}else{c=c+1|0;e=f}}while(0);a[e>>0]=0;return b|0}function wp(a,b){a=a|0;b=b|0;mh(a+(df(a)|0)|0,b)|0;return a|0}function xp(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0;g=d;a:do if(!((g^b)&3)){f=(e|0)!=0;if(f&(g&3|0)!=0)do{g=a[d>>0]|0;a[b>>0]=g;if(!(g<<24>>24))break a;e=e+-1|0;d=d+1|0;b=b+1|0;f=(e|0)!=0}while(f&(d&3|0)!=0);if(f){if(a[d>>0]|0){b:do if(e>>>0>3){f=d;while(1){d=c[f>>2]|0;if((d&-2139062144^-2139062144)&d+-16843009|0){d=f;break b}c[b>>2]=d;e=e+-4|0;d=f+4|0;b=b+4|0;if(e>>>0>3)f=d;else break}}while(0);h=13}}else e=0}else h=13;while(0);c:do if((h|0)==13)if(!e)e=0;else while(1){h=a[d>>0]|0;a[b>>0]=h;if(!(h<<24>>24))break c;e=e+-1|0;b=b+1|0;if(!e){e=0;break}else d=d+1|0}while(0);dD(b|0,0,e|0)|0;return b|0}function yp(a,b,c){a=a|0;b=b|0;c=c|0;return zp(a,b)|0}function zp(a,b){a=a|0;b=b|0;return Wo(a,b,-1)|0}function Ap(b,d){b=b|0;d=d|0;var e=0;e=c[b>>2]|0;if(!e)e=0;else{d=e+(Qj(e,d)|0)|0;if(!(a[d>>0]|0))d=0;else{a[d>>0]=0;d=d+1|0}c[b>>2]=d}return e|0}function Bp(a,b,c){a=a|0;b=b|0;c=c|0;Cp(a,b,c)|0;return a+((Dp(b,c)|0)<<2)|0}function Cp(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0;a:do if(!d){b=a;d=0}else{g=a;while(1){e=c[b>>2]|0;if(!e){b=g;break a}d=d+-1|0;f=g+4|0;c[g>>2]=e;if(!d){b=f;d=0;break}else{b=b+4|0;g=f}}}while(0);Ep(b,0,d)|0;return a|0}function Dp(a,b){a=a|0;b=b|0;var c=0;c=ip(a,0,b)|0;return ((c|0)==0?b:c-a>>2)|0}function Ep(a,b,d){a=a|0;b=b|0;d=d|0;var e=0;if(d|0){e=a;while(1){d=d+-1|0;c[e>>2]=b;if(!d)break;else e=e+4|0}}return a|0}function Fp(b,c,d){b=b|0;c=c|0;d=d|0;var e=0;e=xf(b)|0;b=df(e)|0;if(b>>>0>=d>>>0){b=d+-1|0;if(!d)b=34;else{bD(c|0,e|0,b|0)|0;a[c+b>>0]=0;b=34}}else{bD(c|0,e|0,b+1|0)|0;b=0}return b|0}function Gp(a,b,c){a=a|0;b=b|0;c=c|0;return ef(a,b,c)|0}function Hp(a,b,c,e){a=a|0;b=b|0;c=c|0;e=e|0;var f=0;a:do if(e)if(b>>>0>=e>>>0){f=Wg(a,d[c>>0]|0,b)|0;if(!((e|0)==1|(f|0)==0)){a=a-f+b|0;if(a>>>0<e>>>0)a=0;else switch(e|0){case 2:{a=Ip(f,a,c)|0;break a}case 3:{a=Jp(f,a,c)|0;break a}case 4:{a=Kp(f,a,c)|0;break a}default:{a=Lp(f,f+a|0,c,e)|0;break a}}}else a=f}else a=0;while(0);return a|0}function Ip(a,b,c){a=a|0;b=b|0;c=c|0;var e=0,f=0,g=0;g=(d[c>>0]|0)<<8|(d[c+1>>0]|0);e=a+1|0;c=b+-1|0;a:do if(!c)c=0;else{f=(d[a>>0]|0)<<8|(d[e>>0]|0);b=e;a=c;while(1){c=f&65535;if((c|0)==(g|0))break;b=b+1|0;a=a+-1|0;if(!a){c=0;break a}else f=c<<8|(d[b>>0]|0)}c=b+-1|0}while(0);return c|0}function Jp(a,b,c){a=a|0;b=b|0;c=c|0;var e=0,f=0,g=0,h=0;h=(d[c+1>>0]|0)<<16|(d[c>>0]|0)<<24|(d[c+2>>0]|0)<<8;f=a+2|0;c=b+-2|0;a:do if(!c)c=0;else{g=f;e=c;c=(d[a+1>>0]|0)<<16|(d[a>>0]|0)<<24|(d[f>>0]|0)<<8;while(1){if((c|0)==(h|0))break;e=e+-1|0;b=g+1|0;if(!e){c=0;break a}else{g=b;c=(c|(d[b>>0]|0))<<8}}c=g+-2|0}while(0);return c|0}function Kp(a,b,c){a=a|0;b=b|0;c=c|0;var e=0,f=0,g=0,h=0;h=(d[c+1>>0]|0)<<16|(d[c>>0]|0)<<24|(d[c+2>>0]|0)<<8|(d[c+3>>0]|0);f=a+3|0;c=b+-3|0;a:do if(!c)c=0;else{g=f;e=c;c=(d[a+1>>0]|0)<<16|(d[a>>0]|0)<<24|(d[a+2>>0]|0)<<8|(d[f>>0]|0);while(1){if((c|0)==(h|0))break;e=e+-1|0;b=g+1|0;if(!e){c=0;break a}else{g=b;c=c<<8|(d[b>>0]|0)}}c=g+-3|0}while(0);return c|0}function Lp(b,e,f,g){b=b|0;e=e|0;f=f|0;g=g|0;var h=0,i=0,j=0,k=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0;v=l;l=l+1056|0;t=v+1024|0;u=v;c[t>>2]=0;c[t+4>>2]=0;c[t+8>>2]=0;c[t+12>>2]=0;c[t+16>>2]=0;c[t+20>>2]=0;c[t+24>>2]=0;c[t+28>>2]=0;if(g){h=0;do{s=d[f+h>>0]|0;r=t+(s>>>5<<2)|0;c[r>>2]=1<<(s&31)|c[r>>2];h=h+1|0;c[u+(s<<2)>>2]=h}while((h|0)!=(g|0));p=g>>>0>1;if(p){n=1;m=1;o=0;k=-1;q=1;while(1){h=a[f+(m+k)>>0]|0;i=a[f+q>>0]|0;do if(h<<24>>24==i<<24>>24)if((m|0)==(n|0)){j=n;h=1;i=n+o|0;break}else{j=n;h=m+1|0;i=o;break}else if((h&255)>(i&255)){j=q-k|0;h=1;i=q;break}else{j=1;h=1;i=o+1|0;k=o;break}while(0);q=h+i|0;if(q>>>0>=g>>>0)break;else{n=j;m=h;o=i}}if(p){o=1;p=0;i=-1;n=1;q=1;while(1){h=a[f+(o+i)>>0]|0;m=a[f+q>>0]|0;do if(h<<24>>24==m<<24>>24)if((o|0)==(n|0)){h=n;m=1;n=n+p|0;break}else{h=n;m=o+1|0;n=p;break}else if((h&255)<(m&255)){h=q-i|0;m=1;n=q;break}else{h=1;m=1;n=p+1|0;i=p;break}while(0);q=m+n|0;if(q>>>0>=g>>>0)break;else{o=m;p=n;n=h}}}else{h=1;i=-1}}else{j=1;k=-1;h=1;i=-1}}else{j=1;k=-1;h=1;i=-1}r=(i+1|0)>>>0>(k+1|0)>>>0;h=r?h:j;r=r?i:k;s=r+1|0;if(!(ef(f,f+h|0,s)|0))q=g-h|0;else{h=g-r+-1|0;q=0;h=(r>>>0>h>>>0?r:h)+1|0}m=e;a:do if((m-b|0)>>>0<g>>>0)b=0;else{n=g+-1|0;o=(q|0)!=0;p=g-h|0;k=0;while(1){i=d[b+n>>0]|0;b:do if(!(1<<(i&31)&c[t+(i>>>5<<2)>>2])){j=0;i=g}else{i=g-(c[u+(i<<2)>>2]|0)|0;if(i|0){j=0;i=o&(k|0)!=0&i>>>0<h>>>0?p:i;break}j=s>>>0>k>>>0;i=j?s:k;c:do if(i>>>0<g>>>0){while(1){if((a[f+i>>0]|0)!=(a[b+i>>0]|0))break;i=i+1|0;if(i>>>0>=g>>>0)break c}j=0;i=i-r|0;break b}while(0);if(!j)break a;i=s;while(1){i=i+-1|0;if((a[f+i>>0]|0)!=(a[b+i>>0]|0)){j=q;i=h;break b}if(i>>>0<=k>>>0)break a}}while(0);b=b+i|0;if((m-b|0)>>>0<g>>>0){b=0;break}else k=j}}while(0);l=v;return b|0}function Mp(a,b){a=a|0;b=b|0;return Tg(a,b)|0}function Np(b,d){b=b|0;d=d|0;var e=0;if(!b){b=c[42905]|0;if(!b)b=0;else e=3}else e=3;do if((e|0)==3){b=b+(Pj(b,d)|0)|0;if(!(a[b>>0]|0)){c[42905]=0;b=0;break}d=b+(Qj(b,d)|0)|0;c[42905]=d;if(!(a[d>>0]|0)){c[42905]=0;break}else{c[42905]=d+1;a[d>>0]=0;break}}while(0);return b|0}function Op(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0;a:do if(!d)b=0;else{while(1){e=c[a>>2]|0;f=c[b>>2]|0;if((f|0)==0|((e|0)==0|(e|0)!=(f|0)))break;d=d+-1|0;if(!d){b=0;break a}else{b=b+4|0;a=a+4|0}}b=e-f|0}while(0);return b|0}function Pp(a,b){a=a|0;b=b|0;return pp(a,b)|0}function Qp(a,b){a=a|0;b=b|0;var d=0;d=Gg(a)|0;a:do if((d|0)>-1){d=a+(d<<2)|0;while(1){if((c[d>>2]|0)==(b|0))break a;d=d+-4|0;if(d>>>0<a>>>0){d=0;break}}}else d=0;while(0);return d|0}function Rp(a,b,d){a=a|0;b=b|0;d=d|0;var e=0;if(a-b>>2>>>0>=d>>>0){if(d|0){e=a;while(1){d=d+-1|0;c[e>>2]=c[b>>2];if(!d)break;else{b=b+4|0;e=e+4|0}}}}else do{d=d+-1|0;c[a+(d<<2)>>2]=c[b+(d<<2)>>2]}while((d|0)!=0);return a|0}function Sp(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,i=0,j=0;i=e&255;g=d;a:do if(!((g^b)&3)){g=(g&3|0)!=0;if((f|0)!=0&g){h=e&255;do{g=a[d>>0]|0;a[b>>0]=g;if(g<<24>>24==h<<24>>24)break a;f=f+-1|0;d=d+1|0;b=b+1|0;g=(d&3|0)!=0}while((f|0)!=0&g)}if(!g){h=N(i,16843009)|0;b:do if(f>>>0>3)do{g=c[d>>2]|0;j=g^h;if((j&-2139062144^-2139062144)&j+-16843009|0)break b;c[b>>2]=g;f=f+-4|0;d=d+4|0;b=b+4|0}while(f>>>0>3);while(0);j=12}}else j=12;while(0);c:do if((j|0)==12)if(f){g=e&255;do{j=a[d>>0]|0;a[b>>0]=j;if(j<<24>>24==g<<24>>24)break c;f=f+-1|0;d=d+1|0;b=b+1|0}while((f|0)!=0)}while(0);return ((a[d>>0]|0)==(e&255)<<24>>24?b+1|0:0)|0}function Tp(a){a=a|0;var b=0,c=0;c=(Gg(a)|0)+1|0;b=ud(c<<2)|0;if(!b)b=0;else Ki(b,a,c)|0;return b|0}function Up(b,c,d){b=b|0;c=c|0;d=d|0;if((d|0)>1)while(1){a[c>>0]=a[b+1>>0]|0;a[c+1>>0]=a[b>>0]|0;if((d|0)>3){b=b+2|0;d=d+-2|0;c=c+2|0}else break}return}function Vp(b,d,e){b=b|0;d=d|0;e=e|0;var f=0;if(!b){b=c[e>>2]|0;if(!b)b=0;else f=3}else f=3;do if((f|0)==3){b=b+(Pj(b,d)|0)|0;if(!(a[b>>0]|0)){c[e>>2]=0;b=0;break}d=b+(Qj(b,d)|0)|0;c[e>>2]=d;if(!(a[d>>0]|0)){c[e>>2]=0;break}else{c[e>>2]=d+1;a[d>>0]=0;break}}while(0);return b|0}function Wp(b){b=b|0;var c=0,d=0;if((b+-1|0)>>>0>63|(b|0)==0)c=142976;else{c=142976;do{do{d=c;c=c+1|0}while((a[d>>0]|0)!=0);b=b+-1|0}while((b|0)!=0)}return Mf(c)|0}function Xp(a,b){a=a|0;b=b|0;b=a+((Yo(a,b)|0)<<2)|0;return ((c[b>>2]|0)==0?0:b)|0}function Yp(a,b,d){a=a|0;b=b|0;d=d|0;var e=0;if(!a){a=c[d>>2]|0;if(!a)a=0;else e=3}else e=3;do if((e|0)==3){a=a+((Zp(a,b)|0)<<2)|0;if(!(c[a>>2]|0)){c[d>>2]=0;a=0;break}b=a+((Yo(a,b)|0)<<2)|0;c[d>>2]=b;if(!(c[b>>2]|0)){c[d>>2]=0;break}else{c[d>>2]=b+4;c[b>>2]=0;break}}while(0);return a|0}function Zp(a,b){a=a|0;b=b|0;var d=0,e=0;e=c[a>>2]|0;a:do if(!e)d=a;else{d=a;do{if(!(Fg(b,e)|0))break a;d=d+4|0;e=c[d>>2]|0}while((e|0)!=0)}while(0);return d-a>>2|0}function _p(a,b,c){a=a|0;b=b|0;c=c|0;return (bD(a|0,b|0,c|0)|0)+c|0}function $p(a,b,c){a=a|0;b=b|0;c=c|0;xp(a,b,c)|0;return a|0}function aq(a,b){a=a|0;b=b|0;return Uh((c[a>>2]|0)+11|0,(c[b>>2]|0)+11|0)|0}function bq(a,b,d,f){a=a|0;b=b|0;d=d|0;f=f|0;var g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0;p=cq(a)|0;q=c[(Xd()|0)>>2]|0;do if(!p)a=-1;else{c[(Xd()|0)>>2]=0;j=dq(p)|0;a:do if(!j){a=0;i=0;h=0;g=0}else{o=(d|0)==0;l=0;a=0;i=0;h=0;n=0;g=0;while(1){k=j;while(1){if(o)break;if(bd[d&7](k)|0){j=k;break}c[(Xd()|0)>>2]=0;k=dq(p)|0;if(!k)break a}if(a>>>0<l>>>0)k=l;else{k=l<<1|1;if(k>>>0>1073741823)break a;l=xd(n,k<<2)|0;if(!l)break a;i=l;g=l;h=l;n=l}l=j+8|0;m=ud(e[l>>1]|0)|0;c[i+(a<<2)>>2]=m;if(!m)break a;a=a+1|0;bD(m|0,j|0,e[l>>1]|0|0)|0;c[(Xd()|0)>>2]=0;j=dq(p)|0;if(!j)break;else l=k}}while(0);eq(p)|0;if(!(c[(Xd()|0)>>2]|0)){c[(Xd()|0)>>2]=q;if(f|0)sk(g,a,4,f);c[b>>2]=g;break}if(!((i|0)==0|(a|0)==0))do{a=a+-1|0;vd(c[i+(a<<2)>>2]|0)}while((a|0)!=0);vd(h);a=-1}while(0);return a|0}function cq(a){a=a|0;var b=0,d=0,e=0;e=l;l=l+16|0;d=e+8|0;b=gf(a,589824,e)|0;do if((b|0)>=0){a=wd(1,2072)|0;if(!a){c[d>>2]=b;Yb(6,d|0)|0;a=0;break}else{c[a>>2]=b;break}}else a=0;while(0);l=e;return a|0}function dq(a){a=a|0;var b=0,d=0,f=0,g=0,h=0,i=0,j=0;j=l;l=l+16|0;f=j;h=a+8|0;d=c[h>>2]|0;g=a+12|0;a:do if((d|0)<(c[g>>2]|0)){b=a+24+d|0;i=7}else{b=a+24|0;c[f>>2]=c[a>>2];c[f+4>>2]=b;c[f+8>>2]=2048;d=ib(220,f|0)|0;if((d|0)>=1){c[g>>2]=d;c[h>>2]=0;d=0;i=7;break}switch(d|0){case 0:case -2:{b=0;break a}default:{}}c[(Xd()|0)>>2]=0-d;b=0}while(0);if((i|0)==7){c[h>>2]=d+(e[b+8>>1]|0);c[a+4>>2]=c[b+4>>2]}l=j;return b|0}function eq(a){a=a|0;var b=0;b=wo(c[a>>2]|0)|0;vd(a);return b|0}function fq(a){a=a|0;var b=0,d=0,e=0;e=l;l=l+80|0;d=e;b=e+4|0;do if((me(a,b)|0)>=0){if((c[b+12>>2]&61440|0)!=16384){c[(Xd()|0)>>2]=20;b=0;break}b=wd(1,2072)|0;if(b){c[d>>2]=1;pj(a,2,d)|0;c[b>>2]=a}else b=0}else b=0;while(0);l=e;return b|0}function gq(a){a=a|0;return c[a>>2]|0}function hq(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0;e=l;l=l+16|0;f=e;c[f>>2]=a;c[f+4>>2]=b;c[f+8>>2]=d;d=Wd(ib(220,f|0)|0)|0;l=e;return d|0}function iq(a,b){a=a|0;b=b|0;var d=0;d=a+16|0;ea(d|0);c[a+4>>2]=Qo(c[a>>2]|0,b,0)|0;c[a+12>>2]=0;c[a+8>>2]=0;kc(d|0);return}function jq(a,b,d){a=a|0;b=b|0;d=d|0;var f=0,g=0,h=0;g=c[(Xd()|0)>>2]|0;h=a+16|0;ea(h|0);c[(Xd()|0)>>2]=0;f=dq(a)|0;a=c[(Xd()|0)>>2]|0;if(!a){c[(Xd()|0)>>2]=g;if(!f)a=0;else{bD(b|0,f|0,e[f+8>>1]|0|0)|0;a=b}kc(h|0);c[d>>2]=a;a=0}else kc(h|0);return a|0}function kq(a,b){a=a|0;b=b|0;return Xo((c[a>>2]|0)+11|0,(c[b>>2]|0)+11|0)|0}function lq(a){a=a|0;var b=0;b=a+16|0;ea(b|0);Qo(c[a>>2]|0,0,0)|0;c[a+12>>2]=0;c[a+8>>2]=0;c[a+4>>2]=0;kc(b|0);return}function mq(a){a=a|0;return c[a+4>>2]|0}function nq(){return 167033}function oq(a){a=+a;var b=0;h[j>>3]=a;b=ZC(c[j>>2]|0,c[j+4>>2]|0,63)|0;return b|0}function pq(a,b){a=+a;b=b|0;var d=0,e=0.0,f=0.0,g=0.0,i=0,k=0.0,m=0,n=0,o=0,p=0,q=0,r=0,s=0.0;r=l;l=l+48|0;m=r+16|0;n=r;h[j>>3]=a;d=c[j>>2]|0;i=c[j+4>>2]|0;o=ZC(d|0,i|0,63)|0;q=i&2147483647;do if(q>>>0<1074752123)if((i&1048575|0)!=598523){d=(o|0)!=0;if(q>>>0<1073928573)if(d){g=a+1.5707963267341256;k=g+6.077100506506192e-11;h[b>>3]=k;h[b+8>>3]=g-k+6.077100506506192e-11;d=-1;break}else{g=a+-1.5707963267341256;k=g+-6.077100506506192e-11;h[b>>3]=k;h[b+8>>3]=g-k+-6.077100506506192e-11;d=1;break}else if(d){g=a+3.1415926534682512;k=g+1.2154201013012384e-10;h[b>>3]=k;h[b+8>>3]=g-k+1.2154201013012384e-10;d=-2;break}else{g=a+-3.1415926534682512;k=g+-1.2154201013012384e-10;h[b>>3]=k;h[b+8>>3]=g-k+-1.2154201013012384e-10;d=2;break}}else p=21;else{if(q>>>0<1075594812)if(q>>>0<1075183037){if((q|0)==1074977148){p=21;break}if(!o){g=a+-4.712388980202377;k=g+-1.8231301519518578e-10;h[b>>3]=k;h[b+8>>3]=g-k+-1.8231301519518578e-10;d=3;break}else{g=a+4.712388980202377;k=g+1.8231301519518578e-10;h[b>>3]=k;h[b+8>>3]=g-k+1.8231301519518578e-10;d=-3;break}}else{if((q|0)==1075388923){p=21;break}if(!o){g=a+-6.2831853069365025;k=g+-2.430840202602477e-10;h[b>>3]=k;h[b+8>>3]=g-k+-2.430840202602477e-10;d=4;break}else{g=a+6.2831853069365025;k=g+2.430840202602477e-10;h[b>>3]=k;h[b+8>>3]=g-k+2.430840202602477e-10;d=-4;break}}if(q>>>0>=1094263291){if(q>>>0>2146435071){k=a-a;h[b+8>>3]=k;h[b>>3]=k;d=0;break}c[j>>2]=d;c[j+4>>2]=i&1048575|1096810496;a=+h[j>>3];d=0;do{k=+(~~a|0);h[m+(d<<3)>>3]=k;a=(a-k)*16777216.0;d=d+1|0}while((d|0)!=2);h[m+16>>3]=a;if(a==0.0){d=1;while(1)if(+h[m+(d<<3)>>3]==0.0)d=d+-1|0;else break}else d=2;d=qq(m,n,(q>>>20)+-1046|0,d+1|0,1)|0;a=+h[n>>3];if(!o){h[b>>3]=a;h[b+8>>3]=+h[n+8>>3];break}else{h[b>>3]=-a;h[b+8>>3]=-+h[n+8>>3];d=0-d|0;break}}else p=21}while(0);if((p|0)==21){g=a*.6366197723675814+6755399441055744.0+-6755399441055744.0;d=~~g;e=a-g*1.5707963267341256;f=g*6.077100506506192e-11;a=e-f;h[b>>3]=a;h[j>>3]=a;p=ZC(c[j>>2]|0,c[j+4>>2]|0,52)|0;i=q>>>20;if((i-(p&2047)|0)>16){f=g*6.077100506303966e-11;k=e-f;f=g*2.0222662487959506e-21-(e-k-f);a=k-f;h[b>>3]=a;h[j>>3]=a;q=ZC(c[j>>2]|0,c[j+4>>2]|0,52)|0;s=g*2.0222662487111665e-21;e=k-s;g=g*8.4784276603689e-32-(k-e-s);if((i-(q&2047)|0)>49){a=e-g;h[b>>3]=a;f=g}else e=k}h[b+8>>3]=e-a-f}l=r;return d|0}function qq(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var g=0.0,i=0.0,j=0,k=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0.0;H=l;l=l+560|0;D=H+480|0;y=H+320|0;G=H+160|0;F=H;E=c[143648+(f<<2)>>2]|0;p=e+-1|0;A=(d+-3|0)/24|0;A=(A|0)>0?A:0;B=N(A,-24)|0;j=d+-24+B|0;if((E+p|0)>=0){n=E+e|0;k=A-p|0;m=0;while(1){if((k|0)<0)g=0.0;else g=+(c[143664+(k<<2)>>2]|0);h[y+(m<<3)>>3]=g;m=m+1|0;if((m|0)==(n|0))break;else k=k+1|0}}o=(e|0)>0;n=0;while(1){if(o){m=n+p|0;g=0.0;k=0;do{g=g+ +h[a+(k<<3)>>3]*+h[y+(m-k<<3)>>3];k=k+1|0}while((k|0)!=(e|0))}else g=0.0;h[F+(n<<3)>>3]=g;if((n|0)<(E|0))n=n+1|0;else break}t=(j|0)>0;u=24-j|0;v=23-j|0;w=(j|0)==0;x=(e|0)>0;k=E;while(1){g=+h[F+(k<<3)>>3];o=(k|0)>0;if(o){m=k;n=0;while(1){i=+(~~(g*5.9604644775390625e-08)|0);c[D+(n<<2)>>2]=~~(g-i*16777216.0);s=m;m=m+-1|0;g=+h[F+(m<<3)>>3]+i;if((s|0)<=1)break;else n=n+1|0}}g=+zj(g,j);g=g-+z(+(g*.125))*8.0;m=~~g;g=g-+(m|0);do if(!t)if(!w)if(!(g>=.5)){p=0;s=m;break}else{n=2;C=22;break}else{n=c[D+(k+-1<<2)>>2]>>23;C=21;break}else{s=D+(k+-1<<2)|0;n=c[s>>2]|0;C=n>>u;n=n-(C<<u)|0;c[s>>2]=n;n=n>>v;m=C+m|0;C=21}while(0);if((C|0)==21){C=0;if((n|0)>0)C=22;else{p=n;s=m}}if((C|0)==22){C=0;s=m+1|0;if(o){m=0;r=0;do{p=D+(r<<2)|0;q=c[p>>2]|0;if(!m)if(!q)m=0;else{m=1;o=16777216;C=26}else{o=16777215;C=26}if((C|0)==26){C=0;c[p>>2]=o-q}r=r+1|0}while((r|0)!=(k|0))}else m=0;a:do if(t)switch(j|0){case 1:{r=D+(k+-1<<2)|0;c[r>>2]=c[r>>2]&8388607;break a}case 2:{r=D+(k+-1<<2)|0;c[r>>2]=c[r>>2]&4194303;break a}default:break a}while(0);if((n|0)==2){g=1.0-g;if(!m)p=2;else{p=2;g=g-+zj(1.0,j)}}else p=n}if(!(g==0.0)){C=49;break}if((k|0)>(E|0)){m=0;n=k;do{n=n+-1|0;m=c[D+(n<<2)>>2]|m}while((n|0)>(E|0));if(m|0){C=41;break}}m=1;while(1)if(!(c[D+(E-m<<2)>>2]|0))m=m+1|0;else break;o=m+k|0;do{n=k+e|0;k=k+1|0;h[y+(n<<3)>>3]=+(c[143664+(k+A<<2)>>2]|0);if(x){g=0.0;m=0;do{g=g+ +h[a+(m<<3)>>3]*+h[y+(n-m<<3)>>3];m=m+1|0}while((m|0)!=(e|0))}else g=0.0;h[F+(k<<3)>>3]=g}while((k|0)<(o|0));k=o}if((C|0)==41){do{j=j+-24|0;k=k+-1|0}while((c[D+(k<<2)>>2]|0)==0);o=k}else if((C|0)==49){g=+zj(g,0-j|0);if(!(g>=16777216.0))m=~~g;else{m=~~(g*5.9604644775390625e-08);c[D+(k<<2)>>2]=~~(g-+(m|0)*16777216.0);j=B+d|0;k=k+1|0}c[D+(k<<2)>>2]=m;o=k}g=+zj(1.0,j);n=(o|0)>-1;if(n){j=o;while(1){h[F+(j<<3)>>3]=g*+(c[D+(j<<2)>>2]|0);if((j|0)>0){g=g*5.9604644775390625e-08;j=j+-1|0}else break}if(n){k=o;while(1){m=o-k|0;j=0;g=0.0;while(1){g=g+ +h[143936+(j<<3)>>3]*+h[F+(j+k<<3)>>3];if((j|0)>=(E|0)|j>>>0>=m>>>0)break;else j=j+1|0}h[G+(m<<3)>>3]=g;if((k|0)>0)k=k+-1|0;else break}}}b:do switch(f|0){case 0:{if(n){g=0.0;j=o;while(1){g=g+ +h[G+(j<<3)>>3];if((j|0)>0)j=j+-1|0;else break}}else g=0.0;h[b>>3]=(p|0)==0?g:-g;break}case 2:case 1:{if(n){g=0.0;j=o;while(1){g=g+ +h[G+(j<<3)>>3];if((j|0)>0)j=j+-1|0;else break}}else g=0.0;k=(p|0)==0;h[b>>3]=k?g:-g;g=+h[G>>3]-g;if((o|0)>=1){j=1;while(1){g=g+ +h[G+(j<<3)>>3];if((j|0)==(o|0))break;else j=j+1|0}}h[b+8>>3]=k?g:-g;break}case 3:{if((o|0)>0){j=o;g=+h[G+(o<<3)>>3];do{F=j;j=j+-1|0;f=G+(j<<3)|0;i=+h[f>>3];I=g;g=i+g;h[G+(F<<3)>>3]=I+(i-g);h[f>>3]=g}while((F|0)>1);k=(o|0)>1;if(k){j=o;g=+h[G+(o<<3)>>3];do{F=j;j=j+-1|0;f=G+(j<<3)|0;I=+h[f>>3];i=g;g=I+g;h[G+(F<<3)>>3]=i+(I-g);h[f>>3]=g}while((F|0)>2);if(k){j=o;g=0.0;while(1){g=g+ +h[G+(j<<3)>>3];if((j|0)>2)j=j+-1|0;else break}}else g=0.0}else g=0.0}else g=0.0;i=+h[G>>3];if(!p){h[b>>3]=i;h[b+8>>3]=+h[G+8>>3];h[b+16>>3]=g;break b}else{h[b>>3]=-i;h[b+8>>3]=-+h[G+8>>3];h[b+16>>3]=-g;break b}}default:{}}while(0);l=H;return s&7|0}function rq(a,b,d){a=+a;b=+b;d=d|0;var e=0,f=0,g=0,i=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0.0;h[j>>3]=a;i=c[j>>2]|0;k=c[j+4>>2]|0;h[j>>3]=b;m=c[j>>2]|0;n=c[j+4>>2]|0;g=ZC(i|0,k|0,52)|0;g=g&2047;l=ZC(m|0,n|0,52)|0;l=l&2047;p=ZC(i|0,k|0,63)|0;q=y;r=ZC(m|0,n|0,63)|0;s=y;c[d>>2]=0;do if(!((m|0)==0&(n&2147483647|0)==0)?(f=sq(b)|0,e=y&2147483647,!((g|0)==2047|(e>>>0>2146435072|(e|0)==2146435072&f>>>0>0))):0){if(!((i|0)==0&(k&2147483647|0)==0)){if(!g){e=_C(i|0,k|0,12)|0;f=y;if((f|0)>-1|(f|0)==-1&e>>>0>4294967295){g=0;do{g=g+-1|0;e=_C(e|0,f|0,1)|0;f=y}while((f|0)>-1|(f|0)==-1&e>>>0>4294967295)}else g=0;i=_C(i|0,k|0,1-g|0)|0;f=y}else f=k&1048575|1048576;if(!l){k=_C(m|0,n|0,12)|0;l=y;if((l|0)>-1|(l|0)==-1&k>>>0>4294967295){e=0;do{e=e+-1|0;k=_C(k|0,l|0,1)|0;l=y}while((l|0)>-1|(l|0)==-1&k>>>0>4294967295)}else e=0;m=_C(m|0,n|0,1-e|0)|0;l=e;k=y}else k=n&1048575|1048576;if((g|0)<(l|0))if((g+1|0)==(l|0)){e=0;o=26}else break;else{t=RC(i|0,f|0,m|0,k|0)|0;o=y;n=(o|0)>-1|(o|0)==-1&t>>>0>4294967295;e=ZC(t|0,o|0,63)|0;e=e^1;i=n?t:i;f=n?o:f;if((g|0)>(l|0)){do{i=_C(i|0,f|0,1)|0;f=y;g=g+-1|0;n=RC(i|0,f|0,m|0,k|0)|0;t=y;o=(t|0)>-1|(t|0)==-1&n>>>0>4294967295;u=ZC(n|0,t|0,63)|0;e=(e<<1|u)^1;i=o?n:i;f=o?t:f}while((g|0)>(l|0));g=l}if(!((i|0)==0&(f|0)==0))if(f>>>0<1048576|(f|0)==1048576&i>>>0<0){do{i=_C(i|0,f|0,1)|0;f=y;g=g+-1|0}while(f>>>0<1048576|(f|0)==1048576&i>>>0<0);o=26}else o=26;else{g=-60;i=0;f=0;o=28}}if((o|0)==26)if((g|0)>0){u=QC(i|0,f|0,0,-1048576)|0;f=y;i=_C(g|0,0,52)|0;f=f|y;i=u|i}else o=28;if((o|0)==28){i=ZC(i|0,f|0,1-g|0)|0;f=y}c[j>>2]=i;c[j+4>>2]=f;a=+h[j>>3];b=(r|0)==0&(s|0)==0?b:-b;if((g|0)!=(l|0)){if((g+1|0)==(l|0)){v=a*2.0;if(!(!(v>b)?(e&1|0)==0|v!=b:0))o=33}}else o=33;if((o|0)==33){a=a-b;e=e+1|0}u=e&2147483647;c[d>>2]=(p|0)==(r|0)&(q|0)==(s|0)?u:0-u|0;a=(p|0)==0&(q|0)==0?a:-a}}else o=3;while(0);if((o|0)==3){a=a*b;a=a/a}return +a}function sq(a){a=+a;var b=0;h[j>>3]=a;b=c[j>>2]|0;y=c[j+4>>2]|0;return b|0}function tq(a,b,c){a=+a;b=+b;c=c|0;var d=0.0,e=0.0,f=0.0;f=a*a;d=f*(f*f)*(f*1.58969099521155e-10+-2.5050760253406863e-08)+(f*(f*2.7557313707070068e-06+-1.984126982985795e-04)+.00833333333332249);e=f*a;if(!c)a=e*(f*d+-.16666666666666632)+a;else a=a-(e*.16666666666666632+(f*(b*.5-e*d)-b));return +a}function uq(a,b){a=+a;b=b|0;return +(+zj(a,b))}function vq(a){a=+a;var b=0,d=0,e=0.0;d=(g[j>>2]=a,c[j>>2]|0);b=d&2147483647;a=(c[j>>2]=b,+g[j>>2]);do if(b>>>0<=1166016511){if(b>>>0>1073741823){a=+L(+(a*2.0+1.0/(+B(+(a*a+1.0))+a)));break}if(b>>>0>964689919){e=a*a;a=+wq(e/(+B(+(e+1.0))+1.0)+a)}}else a=+L(+a)+.6931471824645996;while(0);return +((d|0)<0?-a:a)}function wq(a){a=+a;var b=0,d=0.0,e=0.0,f=0,h=0.0,i=0.0,k=0.0,l=0.0;b=(g[j>>2]=a,c[j>>2]|0);do if(b>>>0<1054086096|(b|0)<0)if(b>>>0<=3212836863){if(b<<1>>>0<1728053248)break;if(b>>>0<3197498906){e=0.0;d=0.0;f=11;break}else{f=8;break}}else{if(a==-1.0){a=-s;break}a=(a-a)/0.0;break}else if(b>>>0<=2139095039)f=8;while(0);if((f|0)==8){d=a+1.0;b=(g[j>>2]=d,c[j>>2]|0)+4913933|0;if(b>>>0<1275068416)d=(b>>>0>1082130431?1.0-(d-a):a-(d+-1.0))/d;else d=0.0;e=+((b>>>23)+-127|0);a=(c[j>>2]=(b&8388607)+1060439283,+g[j>>2])+-1.0;f=11}if((f|0)==11){l=a/(a+2.0);k=l*l;i=k*k;h=a*(a*.5);a=e*.6931381225585938+(a+(d+e*9.05800061445916e-06+l*(h+(k*(i*.2849878668785095+.6666666269302368)+i*(i*.24279078841209412+.40000972151756287)))-h))}return +a}function xq(a){a=+a;var b=0.0,d=0,e=0;e=(g[j>>2]=a,c[j>>2]|0);d=e>>>31;e=e&2147483647;do if(e>>>0>2139095039)b=1.0/(a*a);else{if(e>>>0>1073741823){b=+yq(e,+A(+a),0,d);break}if(e>>>0>838860799){b=a*a;b=b*(b*(b*(b*4.9672799207201024e-08+-1.5995563444448635e-05)+1.4070566976442933e-03)+-.0625)/(b*(b*(b*(b*(b*1.2354227016397878e-11+5.046362439031782e-09)+1.177184685730026e-06)+1.8594678840599954e-04)+.019153760746121407)+1.0)}else b=a;b=(b+.5)*a}while(0);return +b}function yq(a,b,c,d){a=a|0;b=+b;c=c|0;d=d|0;var e=0.0,f=0.0,g=0.0,h=0.0,i=0.0;g=+E(+b);c=(c|0)!=0;g=c?-g:g;e=+D(+b);h=g-e;if(a>>>0<2130706432){f=-g-e;i=+D(+(b*2.0));if(g*e>0.0)e=i/f;else{e=h;f=i/h}if(a>>>0<1484783616){e=e*+zq(b);e=e-(c?-f:f)*+Aq(b)}}else e=h;return +(((d|0)==0?e:-e)*.564189612865448/+B(+b))}function zq(a){a=+a;var b=0,d=0,e=0;b=(g[j>>2]=a,c[j>>2]|0)&2147483647;if(b>>>0<=1090519039){e=b>>>0>1077336935;if(b>>>0>1089936471){d=144352;b=144288}else{d=e?144128:144160;b=e?144192:144224}}else{d=144320;b=144256}a=1.0/(a*a);return +((+g[d>>2]+a*(+g[d+4>>2]+a*(+g[d+8>>2]+a*(+g[d+12>>2]+a*(+g[d+16>>2]+a*+g[d+20>>2])))))/(a*(+g[b>>2]+a*(+g[b+4>>2]+a*(+g[b+8>>2]+a*(+g[b+12>>2]+a*+g[b+16>>2]))))+1.0)+1.0)}function Aq(a){a=+a;var b=0,d=0.0,e=0;e=((g[j>>2]=a,c[j>>2]|0)&2145386496)>>>0>1075838975;b=e?144e3:144032;e=e?144064:144096;d=1.0/(a*a);return +(((+g[e>>2]+d*(+g[e+4>>2]+d*(+g[e+8>>2]+d*(+g[e+12>>2]+d*(+g[e+16>>2]+d*+g[e+20>>2])))))/(d*(+g[b>>2]+d*(+g[b+4>>2]+d*(+g[b+8>>2]+d*(+g[b+12>>2]+d*(+g[b+16>>2]+d*+g[b+20>>2])))))+1.0)+.375)/a)}function Bq(a){a=+a;var b=0,d=0.0;b=(g[j>>2]=a,c[j>>2]|0);do if(b&2147483647)if((b|0)>=0){if(b>>>0>2139095039){a=1.0/a;break}if(b>>>0>1073741823){a=+yq(b,a,1,0);break}if(b>>>0<838860800){a=-.6366197466850281/a;break}else{d=a*a;a=(d*(d*(d*(2.3525259166490287e-05-d*9.190991789864711e-08)+-1.9125689286738634e-03)+.050443872809410095)+-.19605709612369537)/(d*(d*(d*(d*(d*1.6655924903186126e-11+6.227414584003554e-09)+1.3560879779106472e-06)+2.0255257550161332e-04)+.019916731864213943)+1.0)*a+(+xq(a)*+L(+a)-1.0/a)*.6366197466850281;break}}else a=r;else a=-s;while(0);return +a}function Cq(a){a=+a;var b=0,d=0,e=0,f=0.0,g=0.0;h[j>>3]=a;d=c[j+4>>2]|0;b=d&2147483647;do if(b>>>0>2146435071)a=a+a;else{if(b>>>0<1048576){h[j>>3]=a*18014398509481984.0;d=c[j+4>>2]|0;b=d&2147483647;if(!b)break;else e=696219795}else e=715094163;c[j>>2]=0;c[j+4>>2]=((b>>>0)/3|0)+e|d&-2147483648;f=+h[j>>3];g=f*f*(f/a);h[j>>3]=(g*(g*g)*(g*.14599619288661245+-.758397934778766)+(g*(g*1.6214297201053545+-1.8849797954337717)+1.87595182427177))*f;d=QC(c[j>>2]|0,c[j+4>>2]|0,-2147483648,0)|0;e=y;c[j>>2]=d&-1073741824;c[j+4>>2]=e;f=+h[j>>3];a=a/(f*f);a=(a-f)/(f+f+a)*f+f}while(0);return +a}function Dq(a){a=+a;a=+Eq(a);y=+A(a)>=1.0?(a>0.0?~~+O(+z(a/4294967296.0),4294967295.0)>>>0:~~+M((a-+(~~a>>>0))/4294967296.0)>>>0):0;return ~~a>>>0|0}function Eq(a){a=+a;return +(+eD(+a))}function Fq(a){a=+a;var b=0.0,d=0.0,e=0,f=0;e=l;l=l+16|0;f=e;b=+Gq(a,f);d=+g[f>>2];do if(((g[j>>2]=d,c[j>>2]|0)&2130706432)>>>0<1090519040)if(b!=0.0){a=+Hq(b*3.321928024291992);a=a*+g[144384+(~~d+7<<2)>>2];break}else{a=+g[144384+(~~d+7<<2)>>2];break}else a=+Iq(a*3.321928094887362);while(0);l=e;return +a}function Gq(a,b){a=+a;b=b|0;var d=0,e=0,f=0,h=0.0;d=(g[j>>2]=a,c[j>>2]|0);e=d>>>23&255;f=e+-127|0;if(e>>>0>149){g[b>>2]=a;return +((d&8388607|0)==0|(f|0)!=128?(c[j>>2]=d&-2147483648,+g[j>>2]):a)}do if(e>>>0>=127)if(!(8388607>>>f&d)){g[b>>2]=a;a=(c[j>>2]=d&-2147483648,+g[j>>2]);break}else{f=-8388608>>f&d;h=(c[j>>2]=f,+g[j>>2]);c[b>>2]=f;a=a-h;break}else c[b>>2]=d&-2147483648;while(0);return +a}function Hq(a){a=+a;var b=0,d=0,e=0,f=0.0,i=0.0;b=(g[j>>2]=a,c[j>>2]|0);d=b&2147483647;do if(d>>>0>1123811328){if(d>>>0<=2139095040)if(!(b>>>0>1124073471&(b|0)>-1))if(b>>>0>3272998911){a=0.0;break}else{e=8;break}else{a=a*1701411834604692317316873.0e14;break}}else if(d>>>0<855638017)a=a+1.0;else e=8;while(0);if((e|0)==8){f=a+786432.0;b=(g[j>>2]=f,c[j>>2]|0)+8|0;d=_C((b>>>4)+1023|0,0,52)|0;e=y;f=a-(f+-786432.0);i=+h[148544+((b&15)<<3)>>3];a=i*f;c[j>>2]=d;c[j+4>>2]=e;a=(i+(f*.24022650718688965+.6931471824645996)*a+(f*.009618354961276054+.055505409836769104)*(f*f*a))*+h[j>>3]}return +a}function Iq(a){a=+a;var b=0,d=0,e=0,f=0.0,g=0.0;h[j>>3]=a;b=c[j+4>>2]|0;d=b&2147483647;do if(d>>>0>1083174911){b=(b|0)>-1|(b|0)==-1&(c[j>>2]|0)>>>0>4294967295;if(b&d>>>0>1083179007){a=a*8988465674311579538646525.0e283;break}if(d>>>0<=2146435071)if(!(a<=-1075.0)|b){e=9;break}else{a=0.0;break}else{a=-1.0/a;break}}else if(d>>>0<1016070144)a=a+1.0;else e=9;while(0);if((e|0)==9){g=a+26388279066624.0;h[j>>3]=g;e=(c[j>>2]|0)+128|0;d=e<<1&510;f=+h[144448+(d<<3)>>3];a=a-(g+-26388279066624.0)-+h[144448+((d|1)<<3)>>3];a=+zj(f+f*a*(a*(a*(a*(a*1.3333559164630223e-03+.009618129842126066)+.0555041086648214)+.2402265069591)+.6931471805599453),(e&-256|0)/256|0)}return +a}function Jq(a,b){a=+a;b=+b;return +(+Kq(a,b))}function Kq(a,b){a=+a;b=+b;var c=0;c=l;l=l+16|0;b=+rq(a,b,c);l=c;return +b}function Lq(a,b){a=+a;b=b|0;var d=0.0,e=0.0,f=0,g=0,i=0,k=0.0,l=0,m=0.0;h[j>>3]=a;g=c[j>>2]|0;f=c[j+4>>2]|0;c[b>>2]=1;i=f&2147483647;do if(i>>>0>2146435071)a=a*a;else{l=(f|0)<0;if(i>>>0<999292928){if(l){c[b>>2]=-1;a=-a}a=-+L(+a);break}if(l){e=-a;d=+Mq(e);if(d==0.0){a=1.0/(a-a);break}if(d>0.0){c[b>>2]=-1;a=d}else a=-d;k=+L(+(3.141592653589793/(a*e)));a=e}else k=0.0;a:do if((f|0)<1072693248)if((f|0)<-1073741824)switch(f|0){case -1074790400:{b=15;break a}default:{b=16;break a}}else switch(f|0){case -1073741824:{b=15;break a}default:{b=16;break a}}else if((f|0)<1073741824)switch(f|0){case 1072693248:{b=15;break a}default:{b=16;break a}}else switch(f|0){case 1073741824:{b=15;break a}default:{b=16;break a}}while(0);if((b|0)==15)if(!g)a=0.0;else b=16;b:do if((b|0)==16)if(i>>>0<1073741824){do if(i>>>0<1072483533){d=-+L(+a);if(i>>>0<=1072130371)if(i>>>0>1070442080){a=a+-.46163214496836225;b=25}else b=26;else{e=1.0;b=24}}else if(i>>>0<=1073460418)if(i>>>0>1072936131){d=0.0;a=a+-1.4616321449683622;b=25;break}else{d=0.0;a=a+-1.0;b=26;break}else{d=0.0;e=2.0;b=24}while(0);if((b|0)==24){a=e-a;e=a*a;a=d+(a*(e*(e*(e*(e*(e*2.5214456545125733e-05+2.2086279071390839e-04)+1.1927076318336207e-03)+.007385550860814029)+.06735230105312927)+.07721566490153287)+e*(e*(e*(e*(e*(e*4.4864094961891516e-05+1.0801156724758394e-04)+5.100697921535113e-04)+2.8905138367341563e-03)+.020580808432516733)+.3224670334241136)-a*.5);break}else if((b|0)==25){m=a*a;e=a*m;a=d+(m*(e*(e*(e*(e*3.1563207090362595e-04+-1.4034646998923284e-03)+.006100538702462913)+-.032788541075985965)+.48383612272381005)-(-3.638676997039505e-18-e*(e*(e*(e*(.000881081882437654-e*3.1275416837512086e-04)+-3.6845201678113826e-03)+.01797067508118204)+-.1475877229945939+a*(e*(e*(e*(e*3.355291926355191e-04+-5.385953053567405e-04)+2.2596478090061247e-03)+-.010314224129834144)+.06462494023913339)))+-.12148629053584961);break}else if((b|0)==26){a=d+(a*(a*(a*(a*(a*(a*.013381091853678766+.22896372806469245)+.9777175279633727)+1.4549225013723477)+.6328270640250934)+-.07721566490153287)/(a*(a*(a*(a*(a*.003217092422824239+.10422264559336913)+.7692851504566728)+2.128489763798934)+2.4559779371304113)+1.0)-a*.5);break}}else{if(i>>>0>=1075838976){d=+L(+a);if(i>>>0<1133510656){e=1.0/a;m=e*e;a=e*(m*(m*(m*(m*(8.363399189962821e-04-m*1.6309293409657527e-03)+-.00059518755745034)+7.936505586430196e-04)+-2.7777777772877554e-03)+.08333333333333297)+.4189385332046727+(a+-.5)*(d+-1.0);break}else{a=a*(d+-1.0);break}}i=~~a;e=a-+(i|0);a=e*.5+e*(e*(e*(e*(e*(e*(e*3.194753265841009e-05+1.8402845140733772e-03)+.02664227030336386)+.14635047265246445)+.325778796408931)+.21498241596060885)+-.07721566490153287)/(e*(e*(e*(e*(e*(e*7.326684307446256e-06+7.779424963818936e-04)+.01864591917156529)+.17193386563280308)+.7219355475671381)+1.3920053346762105)+1.0);switch(i|0){case 7:{d=e+6.0;b=30;break}case 6:{d=1.0;b=30;break}case 5:{d=1.0;b=31;break}case 4:{d=1.0;b=32;break}case 3:{d=1.0;break}default:break b}if((b|0)==30){d=(e+5.0)*d;b=31}if((b|0)==31){d=(e+4.0)*d;b=32}if((b|0)==32)d=(e+3.0)*d;a=a+ +L(+((e+2.0)*d));break}while(0);a=l?k-a:a}while(0);return +a}function Mq(a){a=+a;var b=0;a=a*.5;a=(a-+z(+a))*2.0;b=(~~(a*4.0)+1|0)/2|0;a=(a-+(b|0)*.5)*3.141592653589793;switch(b|0){case 3:{a=-+Nq(a,0.0);break}case 1:{a=+Nq(a,0.0);break}case 2:{a=+tq(-a,0.0,0);break}default:a=+tq(a,0.0,0)}return +a}function Nq(a,b){a=+a;b=+b;var c=0.0,d=0.0,e=0.0,f=0.0;c=a*a;d=c*c;e=c*.5;f=1.0-e;return +(f+(1.0-f-e+(c*(c*(c*(c*2.480158728947673e-05+-.001388888888887411)+.0416666666666666)+d*d*(c*(2.087572321298175e-09-c*1.1359647557788195e-11)+-2.7557314351390663e-07))-a*b)))}function Oq(a){a=a|0;return +r}function Pq(a){a=+a;do if(((Qq(a)|0)&2139095040|0)!=2139095040)if(a==0.0){a=-1.0/(a*a);break}else{a=+(Rq(a)|0);break}else a=a*a;while(0);return +a}function Qq(a){a=+a;return (g[j>>2]=a,c[j>>2]|0)|0}function Rq(a){a=+a;var b=0,d=0;b=(g[j>>2]=a,c[j>>2]|0);d=b>>>23;switch((d&255)<<24>>24){case 0:{b=b<<9;if(b)if((b|0)>-1){d=b;b=-127;do{b=b+-1|0;d=d<<1}while((d|0)>-1)}else b=-127;else b=-2147483648;break}case -1:{b=(b&8388607|0)==0?2147483647:-2147483648;break}default:b=(d&255)+-127|0}return b|0}function Sq(a,b,d){a=+a;b=b|0;d=d|0;var e=0.0,f=0,g=0,i=0,k=0;i=l;l=l+16|0;g=i;h[j>>3]=a;f=c[j+4>>2]&2147483647;a:do if(f>>>0<1072243196)if(f>>>0<1044816030){h[b>>3]=a;h[d>>3]=1.0;break}else{h[b>>3]=+tq(a,0.0,0);h[d>>3]=+Nq(a,0.0);break}else{if(f>>>0>2146435071){e=a-a;h[d>>3]=e;h[b>>3]=e;break}f=pq(a,g)|0;k=g+8|0;e=+tq(+h[g>>3],+h[k>>3],1);a=+Nq(+h[g>>3],+h[k>>3]);switch(f&3){case 0:{h[b>>3]=e;h[d>>3]=a;break a}case 1:{h[b>>3]=a;h[d>>3]=-e;break a}case 2:{h[b>>3]=-e;h[d>>3]=-a;break a}case 3:{h[b>>3]=-a;h[d>>3]=e;break a}default:{}}}while(0);l=i;return}function Tq(a,b){a=+a;b=+b;return +(+Uq(a,b))}function Uq(a,b){a=+a;b=+b;var c=0,d=0,e=0,f=0,g=0;e=Vq(a)|0;f=y;d=f&2147483647;do if(!(d>>>0>2146435072|(d|0)==2146435072&e>>>0>0)){c=Vq(b)|0;d=y;g=d&2147483647;if(!(g>>>0>2146435072|(g|0)==2146435072&c>>>0>0)){e=ZC(e|0,f|0,63)|0;g=ZC(c|0,d|0,63)|0;if((e|0)==(g|0)){a=a<b?b:a;break}else{a=(f|0)<0?b:a;break}}}else a=b;while(0);return +a}function Vq(a){a=+a;var b=0;h[j>>3]=a;b=c[j>>2]|0;y=c[j+4>>2]|0;return b|0}function Wq(a){a=+a;return +(+Sk(a))}function Xq(a,b){a=+a;b=b|0;var d=0,e=0,f=0,i=0,k=0,m=0,n=0.0;k=l;l=l+16|0;d=k+8|0;f=k;i=(g[j>>2]=a,c[j>>2]|0);e=i&2147483647;do if(e>>>0>=1305022427){if(e>>>0>2139095039){h[b>>3]=a-a;d=0;break}m=(e>>>23)+-150|0;h[d>>3]=(c[j>>2]=e-(m<<23),+g[j>>2]);d=qq(d,f,m,1,0)|0;a=+h[f>>3];if((i|0)<0){h[b>>3]=-a;d=0-d|0;break}else{h[b>>3]=a;break}}else{n=a;a=n*.6366197723675814+6755399441055744.0+-6755399441055744.0;h[b>>3]=n-a*1.5707963109016418-a*1.5893254773528196e-08;d=~~a}while(0);l=k;return d|0}function Yq(a){a=+a;return +(+Zq(a,0-(Rq(a)|0)|0))}function Zq(a,b){a=+a;b=b|0;var d=0,e=0;if((b|0)<=127){if((b|0)<-126){a=a*1.1754943508222875e-38;e=(b|0)<-252;d=b+252|0;a=e?a*1.1754943508222875e-38:a;b=e?((d|0)>-126?d:-126):b+126|0}}else{a=a*1701411834604692317316873.0e14;d=(b|0)>254;e=b+-254|0;a=d?a*1701411834604692317316873.0e14:a;b=d?((e|0)<127?e:127):b+-127|0}return +(a*(c[j>>2]=(b<<23)+1065353216,+g[j>>2]))}function _q(a){a=+a;return ~~+Eq(a)|0}function $q(a,b){a=+a;b=b|0;var c=0,d=0;c=l;l=l+16|0;d=c;a=+ar(a,d);h[b>>3]=+h[d>>3];l=c;return +a}function ar(a,b){a=+a;b=b|0;var d=0,e=0,f=0,g=0,i=0.0;h[j>>3]=a;d=c[j>>2]|0;e=c[j+4>>2]|0;f=ZC(d|0,e|0,52)|0;f=f&2047;g=f+-1023|0;if(f>>>0>1074){h[b>>3]=a;c[j>>2]=0;c[j+4>>2]=e&-2147483648;return +((d|0)==0&(e&1048575|0)==0|(g|0)!=1024?+h[j>>3]:a)}do if(f>>>0>=1023){f=ZC(-1,1048575,g|0)|0;if((f&d|0)==0&(y&e|0)==0){h[b>>3]=a;c[j>>2]=0;c[j+4>>2]=e&-2147483648;a=+h[j>>3];break}else{f=YC(0,-1048576,g|0)|0;d=f&d;f=y&e;c[j>>2]=d;c[j+4>>2]=f;i=+h[j>>3];g=b;c[g>>2]=d;c[g+4>>2]=f;a=a-i;break}}else{g=b;c[g>>2]=0;c[g+4>>2]=e&-2147483648}while(0);return +a}function br(a,b){a=+a;b=+b;return +(+cr(a,b))}function cr(a,b){a=+a;b=+b;var d=0,e=0,f=0,g=0,i=0,k=0,l=0;h[j>>3]=a;f=c[j>>2]|0;g=c[j+4>>2]|0;h[j>>3]=b;i=c[j>>2]|0;k=c[j+4>>2]|0;e=dr(a)|0;d=y&2147483647;a:do if(!(d>>>0>2146435072|(d|0)==2146435072&e>>>0>0)?(e=dr(b)|0,d=y&2147483647,!(d>>>0>2146435072|(d|0)==2146435072&e>>>0>0)):0){if(!((f|0)==(i|0)&(g|0)==(k|0))){d=g&2147483647;e=k&2147483647;do if(!((f|0)==0&(d|0)==0))if(d>>>0>e>>>0|(d|0)==(e|0)&f>>>0>i>>>0|(k^g|0)<0){e=QC(f|0,g|0,-1,-1)|0;d=y;break}else{e=QC(f|0,g|0,1,0)|0;d=y;break}else{if((i|0)==0&(e|0)==0)break a;d=k&-2147483648;e=1}while(0);c[j>>2]=e;c[j+4>>2]=d;b=+h[j>>3]}}else l=3;while(0);if((l|0)==3)b=a+b;return +b}function dr(a){a=+a;var b=0;h[j>>3]=a;b=c[j>>2]|0;y=c[j+4>>2]|0;return b|0}function er(a){a=+a;var b=0;b=(g[j>>2]=a,c[j>>2]|0);switch((b>>>23&255)<<24>>24){case 0:{b=(b&2147483647|0)==0?2:3;break}case -1:{b=(b&8388607|0)==0&1;break}default:b=4}return b|0}function fr(a){a=+a;var b=0;b=gr(a)|0;return b|0}function gr(a){a=+a;a=+hr(a);y=+A(a)>=1.0?(a>0.0?~~+O(+z(a/4294967296.0),4294967295.0)>>>0:~~+M((a-+(~~a>>>0))/4294967296.0)>>>0):0;return ~~a>>>0|0}function hr(a){a=+a;var b=0,d=0;h[j>>3]=a;b=c[j+4>>2]|0;d=b&2146435072;if(!(d>>>0>1126170624|(d|0)==1126170624&0>0)){b=(b|0)<0;a=b?a+-4503599627370496.0+4503599627370496.0:a+4503599627370496.0+-4503599627370496.0;if(a==0.0)a=b?-0.0:0.0}return +a}function ir(a){a=+a;var b=0.0,d=0.0,e=0,f=0;e=l;l=l+16|0;f=e;b=+ar(a,f);d=+h[f>>3];h[j>>3]=d;f=c[j+4>>2]&2146435072;do if(f>>>0<1076887552|(f|0)==1076887552&0<0)if(b!=0.0){a=+Iq(b*3.321928094887362);a=a*+h[148672+(~~d+15<<3)>>3];break}else{a=+h[148672+(~~d+15<<3)>>3];break}else a=+C(10.0,+a);while(0);l=e;return +a}function jr(a){a=+a;return +(+kr(a))}function kr(a){a=+a;var b=0.0,d=0,e=0.0,f=0,g=0,i=0.0,k=0.0,l=0.0,m=0.0;h[j>>3]=a;d=c[j+4>>2]|0;do if((d|0)<0|d>>>0<1071284858)if(d>>>0<=3220176895){g=_C(d|0,0,1)|0;if(g>>>0<2034237440)break;if(d>>>0<3218259653){e=0.0;b=0.0;f=11;break}else{f=8;break}}else{if(a==-1.0){a=-s;break}a=(a-a)/0.0;break}else if(d>>>0<=2146435071)f=8;while(0);if((f|0)==8){b=a+1.0;h[j>>3]=b;d=(c[j+4>>2]|0)+614242|0;if(d>>>0<1129316352)b=(d>>>0>1074790399?1.0-(b-a):a-(b+-1.0))/b;else b=0.0;c[j>>2]=c[j>>2];c[j+4>>2]=(d&1048575)+1072079006;e=+((d>>>20)+-1023|0);a=+h[j>>3]+-1.0;f=11}if((f|0)==11){i=a*(a*.5);m=a/(a+2.0);l=m*m;k=l*l;a=e*.6931471803691238+(a+(b+e*1.9082149292705877e-10+m*(i+(k*(k*(k*.15313837699209373+.22222198432149784)+.3999999999940942)+l*(k*(k*(k*.14798198605116586+.1818357216161805)+.2857142874366239)+.6666666666666735)))-i))}return +a}function lr(a){a=+a;var b=0,d=0,e=0,f=0,g=0,i=0.0,k=0.0,l=0.0,m=0.0,n=0.0;h[j>>3]=a;b=c[j>>2]|0;e=c[j+4>>2]|0;d=(e|0)<0;do if(d|e>>>0<1048576){if((b|0)==0&(e&2147483647|0)==0){a=-1.0/(a*a);break}if(d){a=(a-a)/0.0;break}else{h[j>>3]=a*18014398509481984.0;f=-1077;d=c[j+4>>2]|0;e=0;b=c[j>>2]|0;g=9;break}}else if(e>>>0<=2146435071)if((b|0)==0&0==0&(e|0)==1072693248)a=0.0;else{f=-1023;d=e;e=0;g=9}while(0);if((g|0)==9){g=d+614242|0;c[j>>2]=b;c[j+4>>2]=(g&1048575)+1072079006|e;n=+h[j>>3]+-1.0;l=n*(n*.5);k=n/(n+2.0);m=k*k;i=m*m;h[j>>3]=n-l;e=c[j+4>>2]|0;c[j>>2]=0;c[j+4>>2]=e;a=+h[j>>3];i=n-a-l+k*(l+(i*(i*(i*.15313837699209373+.22222198432149784)+.3999999999940942)+m*(i*(i*(i*.14798198605116586+.1818357216161805)+.2857142874366239)+.6666666666666735)));m=a*1.4426950407214463;l=+(f+(g>>>20)|0);k=m+l;a=k+(m+(l-k)+(i*1.4426950407214463+(i+a)*1.6751713164886512e-10))}return +a}function mr(a){a=+a;return ~~+eD(+a)|0}function nr(a,b){a=+a;b=+b;var c=0;c=l;l=l+16|0;b=+or(a,b,c);l=c;return +b}function or(a,b,d){a=+a;b=+b;d=d|0;var e=0,f=0,h=0,i=0,k=0,l=0,m=0,n=0,o=0,p=0.0;f=(g[j>>2]=a,c[j>>2]|0);k=(g[j>>2]=b,c[j>>2]|0);h=f>>>23&255;i=k>>>23&255;o=f>>>31;n=k>>>31;c[d>>2]=0;do if((k&2147483647|0)!=0?!((h|0)==255|((pr(b)|0)&2147483647)>>>0>2139095040):0){if(f&2147483647){if(!h){e=f<<9;if((e|0)>-1){h=0;do{h=h+-1|0;e=e<<1}while((e|0)>-1)}else h=0;f=f<<1-h}else f=f&8388607|8388608;if(!i){i=k<<9;if((i|0)>-1){e=0;do{e=e+-1|0;i=i<<1}while((i|0)>-1)}else e=0;l=e;i=k<<1-e}else{l=i;i=k&8388607|8388608}if((h|0)<(l|0))if((h+1|0)==(l|0)){e=0;m=26}else break;else{m=f-i|0;e=m>>>31^1;f=(m|0)>-1?m:f;if((h|0)>(l|0)){do{f=f<<1;h=h+-1|0;m=f-i|0;e=(m>>>31|e<<1)^1;f=(m|0)>-1?m:f}while((h|0)>(l|0));h=l}if(f)if(f>>>0<8388608){do{f=f<<1;h=h+-1|0}while(f>>>0<8388608);m=26}else m=26;else{h=-30;f=0;m=28}}if((m|0)==26)if((h|0)>0){i=h;f=f+-8388608|h<<23}else m=28;if((m|0)==28){i=h;f=f>>>(1-h|0)}a=(c[j>>2]=f,+g[j>>2]);b=(n|0)==0?b:-b;if((i|0)!=(l|0)){if((i+1|0)==(l|0)){p=a*2.0;if(!(!(p>b)?(e&1|0)==0|p!=b:0))m=33}}else m=33;if((m|0)==33){a=a-b;e=e+1|0}l=e&2147483647;c[d>>2]=(o|0)==(n|0)?l:0-l|0;a=(o|0)==0?a:-a}}else m=3;while(0);if((m|0)==3){a=a*b;a=a/a}return +a}function pr(a){a=+a;return (g[j>>2]=a,c[j>>2]|0)|0}function qr(a){a=+a;return +(+Iq(a))}function rr(a){a=+a;return +(+sr(a))}function sr(a){a=+a;var b=0,d=0,e=0,f=0.0;h[j>>3]=a;b=c[j+4>>2]|0;d=ZC(c[j>>2]|0,b|0,63)|0;e=y;b=b&2147483647;do if(b>>>0<=2146435071)if(b>>>0<1072365568)if(b>>>0<1043333120){a=(a*8.0+a*1.0270333367641007)*.125;break}else{f=a*a;a=(f*(f*(f*(-.005770270296489442-f*2.3763016656650163e-05)+-.02848174957559851)+-.3250421072470015)+.12837916709551256)/(f*(f*(f*(f*(1.3249473800432164e-04-f*3.960228278775368e-06)+.005081306281875766)+.0650222499887673)+.39791722395915535)+1.0)*a+a;break}else{if(b>>>0<1075314688)a=1.0-+tr(b,a);else a=1.0;a=(d|0)==0&(e|0)==0?a:-a;break}else{e=_C(d|0,e|0,1)|0;a=1.0/a+ +(1-e|0)}while(0);return +a}function tr(a,b){a=a|0;b=+b;var d=0.0,e=0.0,f=0.0,g=0.0,i=0.0,k=0.0,l=0.0,m=0.0,n=0.0;if(a>>>0<1072955392)b=+ur(b);else{l=+A(+b);m=1.0/(l*l);if(a>>>0<1074191213){b=m*(m*(m*(m*(m*(m*(-81.2874355063066-m*9.814329344169145)+-184.60509290671104)+-162.39666946257347)+-62.375332450326006)+-10.558626225323291)+-.6938585727071818)+-.009864944034847148;d=19.651271667439257;e=137.65775414351904;f=434.56587747522923;g=645.3872717332679;i=429.00814002756783;k=m*(6.570249770319282-m*.0604244152148581)+108.63500554177944}else{b=m*(m*(m*(m*(m*(-1025.0951316110772-m*483.5191916086514)+-637.5664433683896)+-160.63638485582192)+-17.757954917754752)+-.799283237680523)+-.0098649429247001;d=30.33806074348246;e=325.7925129965739;f=1536.729586084437;g=3199.8582195085955;i=2553.0504064331644;k=474.52854120695537-m*22.44095244658582}h[j>>3]=l;a=c[j+4>>2]|0;c[j>>2]=0;c[j+4>>2]=a;n=+h[j>>3];b=+K(+(-.5625-n*n))*+K(+((n-l)*(l+n)+b/(m*(m*(m*(m*(m*(m*k+i)+g)+f)+e)+d)+1.0)))/l}return +b}function ur(a){a=+a;a=+A(+a)+-1.0;return +(.15493708848953247-(a*(a*(a*(a*(a*(.035478304325618236-a*.002166375594868791)+-.11089469428239668)+.31834661990116175)+-.3722078760357013)+.41485611868374833)+-2.3621185607526594e-03)/(a*(a*(a*(a*(a*(a*.011984499846799107+.01363708391202905)+.12617121980876164)+.07182865441419627)+.540397917702171)+.10642088040084423)+1.0))}function vr(a){a=+a;return +(+wr(a))}function wr(a){a=+a;var b=0.0,d=0,e=0;h[j>>3]=a;e=c[j+4>>2]|0;d=ZC(c[j>>2]|0,e|0,63)|0;e=e&2147483647;do if(e>>>0<=2146435071){if(e>>>0>=1072365568){d=(d|0)!=0;if(e>>>0<1077673984){b=+tr(e,a);b=d?2.0-b:b;break}else{b=d?2.0:0.0;break}}if(e>>>0<1013972992){b=1.0-a;break}b=a*a;b=(b*(b*(b*(-.005770270296489442-b*2.3763016656650163e-05)+-.02848174957559851)+-.3250421072470015)+.12837916709551256)/(b*(b*(b*(b*(1.3249473800432164e-04-b*3.960228278775368e-06)+.005081306281875766)+.0650222499887673)+.39791722395915535)+1.0);if((d|0)!=0|e>>>0<1070596096){b=1.0-(b*a+a);break}else{b=.5-(a+-.5+b*a);break}}else{e=_C(d|0,y|0,1)|0;b=1.0/a+ +(e|0)}while(0);return +b}function xr(a){a=+a;var b=0,d=0,e=0,f=0,g=0,i=0.0,k=0.0,l=0.0,m=0.0,n=0.0;h[j>>3]=a;b=c[j>>2]|0;e=c[j+4>>2]|0;d=(e|0)<0;do if(d|e>>>0<1048576){if((b|0)==0&(e&2147483647|0)==0){a=-1.0/(a*a);break}if(d){a=(a-a)/0.0;break}else{h[j>>3]=a*18014398509481984.0;f=-1077;d=c[j+4>>2]|0;e=0;b=c[j>>2]|0;g=9;break}}else if(e>>>0<=2146435071)if((b|0)==0&0==0&(e|0)==1072693248)a=0.0;else{f=-1023;d=e;e=0;g=9}while(0);if((g|0)==9){g=d+614242|0;c[j>>2]=b;c[j+4>>2]=(g&1048575)+1072079006|e;l=+h[j>>3]+-1.0;k=l*(l*.5);m=l/(l+2.0);n=m*m;i=n*n;h[j>>3]=l-k;e=c[j+4>>2]|0;c[j>>2]=0;c[j+4>>2]=e;a=+h[j>>3];i=l-a-k+m*(k+(i*(i*(i*.15313837699209373+.22222198432149784)+.3999999999940942)+n*(i*(i*(i*.14798198605116586+.1818357216161805)+.2857142874366239)+.6666666666666735)));n=a*.4342944818781689;k=+(f+(g>>>20)|0);m=k*.30102999566361177;l=m+n;a=l+(n+(m-l)+(i*.4342944818781689+(k*3.694239077158931e-13+(i+a)*2.5082946711645275e-11)))}return +a}function yr(a,b){a=+a;b=+b;var c=0,d=0;do if(((zr(a)|0)&2147483647)>>>0<=2139095040?(c=zr(b)|0,(c&2147483647)>>>0<=2139095040):0){if((c&2139095040|0)==2139095040)if(b>0.0){a=a*b;break}else{a=a/-b;break}if(+fD(+b)!=b){a=b-b;a=a/a;break}if(b>65.0e3){a=+Zq(a,65e3);break}if(b<-65.0e3){a=+Zq(a,-65e3);break}else{a=+Zq(a,~~b);break}}else d=3;while(0);if((d|0)==3)a=a*b;return +a}function zr(a){a=+a;return (g[j>>2]=a,c[j>>2]|0)|0}function Ar(a){a=+a;var b=0;b=Ti(32)|0;a=+fD(+a);return +a}function Br(a){a=+a;var b=0,d=0.0;b=(g[j>>2]=a,c[j>>2]|0)&2147483647;do if(b>>>0<=2139095039){a=+A(+a);if(b>>>0>1073741823){a=+Cr(b,a,0);break}if(b>>>0>973078527){d=a*a;a=a*.5;a=(a+1.0)*(1.0-a)+d*(d*(d*(d*(1.8295404515811242e-06-d*4.618327054117799e-09)+-1.8997929873876274e-04)+.015625)/(d*(d*(d*(d*1.1661400733942173e-09+5.135465244165971e-07)+1.1692678526742384e-04)+.015619102865457535)+1.0));break}else{a=1.0-(b>>>0>562036735?a*(a*.25):a);break}}else a=1.0/(a*a);while(0);return +a}function Cr(a,b,c){a=a|0;b=+b;c=c|0;var d=0.0,e=0.0,f=0.0,g=0.0,h=0.0;g=+E(+b);d=+D(+b);c=(c|0)!=0;d=c?-d:d;h=g+d;if(a>>>0<2130706432){e=g-d;f=-+D(+(b*2.0));if(g*d<0.0)d=f/e;else{d=h;e=f/h}if(a>>>0<1484783616){d=d*+Dr(b);d=d-(c?-e:e)*+Er(b)}}else d=h;return +(d*.564189612865448/+B(+b))}function Dr(a){a=+a;var b=0,d=0,e=0;b=(g[j>>2]=a,c[j>>2]|0)&2147483647;if(b>>>0<=1090519039){e=b>>>0>1077336935;if(b>>>0>1089936471){d=149408;b=149344}else{d=e?149184:149216;b=e?149248:149280}}else{d=149376;b=149312}a=1.0/(a*a);return +((+g[d>>2]+a*(+g[d+4>>2]+a*(+g[d+8>>2]+a*(+g[d+12>>2]+a*(+g[d+16>>2]+a*+g[d+20>>2])))))/(a*(+g[b>>2]+a*(+g[b+4>>2]+a*(+g[b+8>>2]+a*(+g[b+12>>2]+a*+g[b+16>>2]))))+1.0)+1.0)}function Er(a){a=+a;var b=0,d=0,e=0,f=0.0;b=(g[j>>2]=a,c[j>>2]|0)&2147483647;if(b>>>0<=1090519039){e=b>>>0>1077336935;if(b>>>0>1089936471){d=149152;b=149088}else{d=e?148928:148960;b=e?148992:149024}}else{d=149120;b=149056}f=1.0/(a*a);return +(((+g[d>>2]+f*(+g[d+4>>2]+f*(+g[d+8>>2]+f*(+g[d+12>>2]+f*(+g[d+16>>2]+f*+g[d+20>>2])))))/(f*(+g[b>>2]+f*(+g[b+4>>2]+f*(+g[b+8>>2]+f*(+g[b+12>>2]+f*(+g[b+16>>2]+f*+g[b+20>>2])))))+1.0)+-.125)/a)}function Fr(a){a=+a;var b=0,d=0.0;b=(g[j>>2]=a,c[j>>2]|0);do if(b&2147483647)if((b|0)>=0){if(b>>>0>2139095039){a=1.0/a;break}if(b>>>0>1073741823){a=+Cr(b,a,1);break}if(b>>>0>956301311){d=a*a;a=(d*(d*(d*(d*(d*(1.955901396399895e-08-d*3.9820518410449424e-11)+-3.8140706237754785e-06)+3.4745343145914376e-04)+-.013818567618727684)+.17666645348072052)+-.07380429655313492)/(d*(d*(d*(d*4.4111031494153963e-10+2.5915085188898956e-07)+7.600686512887478e-05)+.012730483897030354)+1.0)+ +Br(a)*+L(+a)*.6366197466850281;break}else{a=+L(+a)*.6366197466850281+-.07380429655313492;break}}else a=r;else a=-s;while(0);return +a}function Gr(a){a=+a;return +(+Hr(a))}function Hr(a){a=+a;var b=0;b=Ti(32)|0;a=+hr(a);return +a}function Ir(a,b,c){a=+a;b=+b;c=+c;return +(+Jr(a,b,c))}function Jr(a,b,d){a=+a;b=+b;d=+d;var e=0,f=0.0,g=0.0,i=0,j=0,k=0,m=0,n=0.0,o=0.0,p=0,q=0,r=0,t=0,u=0,v=0;v=l;l=l+64|0;e=v+48|0;i=v+44|0;j=v+40|0;p=v+16|0;q=v;r=v+32|0;Kr(a)|0;a:do if(!(0==0&(y&2146435072|0)==2146435072)?(Kr(b)|0,!(0==0&(y&2146435072|0)==2146435072)):0){k=Kr(d)|0;m=y;if(!(0==0&(m&2146435072|0)==2146435072)){if(a==0.0|b==0.0){d=a*b+d;break}if(d==0.0){d=a*b;break}n=+Jh(a,e);o=+Jh(b,i);f=+Jh(d,j);t=Yi()|0;i=(c[i>>2]|0)+(c[e>>2]|0)|0;e=i-(c[j>>2]|0)|0;if((e|0)<-53){QC(k|0,m|0,0,1048576)|0;switch(t|0){case 3072:{if(a>0.0^b<0.0^d<0.0)break a;d=+cr(d,0.0);break a}case 1024:{if(a>0.0^b<0.0)break a;d=+cr(d,-s);break a}case 2048:{if(!(a>0.0^b<0.0))break a;d=+cr(d,s);break a}default:break a}}if((e|0)<107)g=+zj(f,0-e|0);else g=+Fj(2.2250738585072014e-308,f);Ni(0)|0;Lr(p,n,o);a=+h[p>>3];b=+h[p+8>>3];Mr(q,a,g);f=+h[q>>3];d=+h[q+8>>3];if(f==0.0){Ni(t)|0;h[r>>3]=g;d=a+ +h[r>>3];d=d+ +zj(b,i);break}if(!t){d=+Or(d,b);if(((Nr(f)|0)+i|0)>-1023){d=+zj(f+d,i);break}else{d=+Pr(f,d,i);break}}e=Ti(32)|0;Ni(t)|0;d=+zj(f+(b+d),i);if((Nr(d)|0)<-1022?Ti(32)|0:0)break}}else u=3;while(0);if((u|0)==3)d=a*b+d;l=v;return +d}function Kr(a){a=+a;var b=0;h[j>>3]=a;b=c[j>>2]|0;y=c[j+4>>2]|0;return b|0}function Lr(a,b,c){a=a|0;b=+b;c=+c;var d=0.0,e=0.0,f=0.0,g=0.0;d=b*134217729.0;d=d+(b-d);f=b-d;g=c*134217729.0;g=g+(c-g);e=c-g;b=d*g;d=f*g+d*e;c=b+d;h[a>>3]=c;h[a+8>>3]=f*e+(d+(b-c));return}function Mr(a,b,c){a=a|0;b=+b;c=+c;var d=0.0,e=0.0;e=b+c;d=e-b;h[a>>3]=e;h[a+8>>3]=c-d+(b-(e-d));return}function Nr(a){a=+a;var b=0,d=0,e=0;h[j>>3]=a;b=c[j>>2]|0;d=c[j+4>>2]|0;e=ZC(b|0,d|0,52)|0;switch(e&2047){case 0:{d=_C(b|0,d|0,12)|0;e=y;if(!((d|0)==0&(e|0)==0))if((e|0)>-1|(e|0)==-1&d>>>0>4294967295){b=-1023;do{b=b+-1|0;d=_C(d|0,e|0,1)|0;e=y}while((e|0)>-1|(e|0)==-1&d>>>0>4294967295)}else b=-1023;else b=-2147483648;break}case 2047:{b=(b|0)==0&(d&1048575|0)==0?2147483647:-2147483648;break}default:b=(e&2047)+-1023|0}return b|0}function Or(a,b){a=+a;b=+b;var d=0,e=0,f=0,g=0,i=0;d=l;l=l+16|0;e=d;Mr(e,a,b);a=+h[e>>3];b=+h[e+8>>3];if(b!=0.0){h[j>>3]=a;e=c[j>>2]|0;i=c[j+4>>2]|0;h[j>>3]=b;f=ZC(c[j>>2]^e|0,c[j+4>>2]^i|0,62)|0;g=y;i=QC(e|0,i|0,1,0)|0;g=RC(i|0,y|0,f|0,g|0)|0;f=y;c[j>>2]=g;c[j+4>>2]=f;b=(e&1|0)==0&0==0?+h[j>>3]:a;l=d;return +b}else{l=d;return +a}return 0.0}function Pr(a,b,d){a=+a;b=+b;d=d|0;var e=0,f=0,g=0,i=0,k=0;e=l;l=l+16|0;f=e;Mr(f,a,b);a=+h[f>>3];b=+h[f+8>>3];if(b!=0.0){h[j>>3]=a;g=c[j>>2]|0;i=c[j+4>>2]|0;f=ZC(g|0,i|0,52)|0;h[j>>3]=b;k=ZC(c[j>>2]^g|0,c[j+4>>2]^i|0,62)|0;i=QC(g|0,i|0,1,0)|0;k=RC(i|0,y|0,k&2|0,0)|0;i=y;c[j>>2]=k;c[j+4>>2]=i;a=((g&1|0)!=0|0!=0)^(0-(f&2047)|0)!=(d|0)?+h[j>>3]:a}b=+zj(a,d);l=e;return +b}function Qr(a){a=+a;return Rr(a)|0}function Rr(a){a=+a;var b=0,d=0,e=0;h[j>>3]=a;b=c[j>>2]|0;d=c[j+4>>2]|0;e=ZC(b|0,d|0,52)|0;switch(e&2047){case 0:{b=(b|0)==0&(d&2147483647|0)==0?2:3;break}case 2047:{b=(b|0)==0&(d&1048575|0)==0&1;break}default:b=4}return b|0}function Sr(a){a=+a;return +(+Tr(a))}function Tr(a){a=+a;var b=0;h[j>>3]=a;b=ZC(c[j>>2]|0,c[j+4>>2]|0,52)|0;b=b&2047;do if(b>>>0>=1024)if(b>>>0<1049){a=+L(+(a*2.0-1.0/(+B(+(a*a+-1.0))+a)));break}else{a=+L(+a)+.6931471805599453;break}else{a=a+-1.0;a=+kr(a+ +B(+(a*a+a*2.0)))}while(0);return +a}function Ur(a,b){a=+a;b=+b;return +(+cr(a,b))}function Vr(a){a=+a;return +(+Lq(a,171504))}function Wr(a){a=+a;var b=0;b=Ti(32)|0;a=+hr(a);return ~~a|0}function Xr(a,b){a=+a;b=+b;var c=0,d=0;c=Yr(a)|0;do if((c&2147483647)>>>0<=2139095040){d=Yr(b)|0;if((d&2147483647)>>>0<=2139095040)if((d^c|0)<0){a=(c|0)<0?a:b;break}else{a=a<b?a:b;break}}else a=b;while(0);return +a}function Yr(a){a=+a;return (g[j>>2]=a,c[j>>2]|0)|0}function Zr(a,b){a=+a;b=+b;return +(+Zk(a,b))}function _r(a){a=+a;return +(+xr(a))}function $r(a,b){a=+a;b=b|0;return +(+zj(a,b))}function as(a){a=+a;return oq(a)|0}function bs(a){a=+a;var b=0,d=0,e=0,f=0.0;h[j>>3]=a;e=c[j>>2]|0;d=c[j+4>>2]|0;b=ZC(e|0,d|0,52)|0;b=b&2047;c[j>>2]=e;c[j+4>>2]=d&2147483647;a=+h[j>>3];do if(b>>>0<=1048){if(b>>>0>1023){a=+L(+(a*2.0+1.0/(+B(+(a*a+1.0))+a)));break}if(b>>>0>996){f=a*a;a=+kr(f/(+B(+(f+1.0))+1.0)+a)}}else a=+L(+a)+.6931471805599453;while(0);return +((d|0)<0?-a:a)}function cs(a){a=+a;return +(+ds(a))}function ds(a){a=+a;var b=0.0,d=0,e=0,f=0.0,g=0.0,i=0.0,k=0.0;h[j>>3]=a;d=c[j+4>>2]|0;e=d&2147483647;d=ZC(c[j>>2]|0,d|0,63)|0;do if(e>>>0<=2146435071){if(e>>>0<1016070144){b=1.0/a;break}if(+z(+a)==a){if(d|0){b=r;break}if(a<=23.0){b=+h[149440+(~~a+-1<<3)>>3];break}}d=(d|0)!=0;if(e>>>0>1080492031)if(d){e=+z(+a)*.5==+z(+(a*.5));b=e?0.0:-0.0;break}else{b=a*8988465674311579538646525.0e283;break}else{i=d?-a:a;k=i+5.52468004077673;b=i>5.52468004077673?k-i+-5.52468004077673:k+-5.52468004077673-i;f=i+-.5;g=+es(i)*+K(+-k);if(a<0.0){g=-3.141592653589793/(g*(i*+fs(i)));f=-f;b=-b}a=+C(+k,+(f*.5));b=a*(a*(g+b*6.02468004077673*g/k));break}}else b=a+s;while(0);return +b}function es(a){a=+a;var b=0.0,c=0.0,d=0;if(a<8.0){c=0.0;b=0.0;d=12;while(1){b=b*a+ +h[149632+(d<<3)>>3];c=c*a+ +h[149744+(d<<3)>>3];if(!d)break;else d=d+-1|0}}else{c=0.0;b=0.0;d=0;do{b=b/a+ +h[149632+(d<<3)>>3];c=c/a+ +h[149744+(d<<3)>>3];d=d+1|0}while((d|0)!=13)}return +(b/c)}function fs(a){a=+a;var b=0;a=a*.5;a=(a-+z(+a))*2.0;b=(~~(a*4.0)+1|0)/2|0;a=(a-+(b|0)*.5)*3.141592653589793;switch(b|0){case 3:{a=-+Nq(a,0.0);break}case 1:{a=+Nq(a,0.0);break}case 2:{a=+tq(-a,0.0,0);break}default:a=+tq(a,0.0,0)}return +a}function gs(a){a=+a;return +(+hs(a))}function hs(a){a=+a;var b=0,d=0;h[j>>3]=a;d=c[j+4>>2]|0;b=d&2147483647;c[j>>2]=c[j>>2];c[j+4>>2]=b;a=+h[j>>3];do if(b>>>0>1071748074)if(b>>>0>1077149696){a=1.0-0.0/a;break}else{a=1.0-2.0/(+Uk(a*2.0)+2.0);break}else{if(b>>>0>1070618798){a=+Uk(a*2.0);a=a/(a+2.0);break}if(b>>>0>1048575){a=+Uk(a*-2.0);a=-a/(a+2.0)}}while(0);return +((d|0)<0?-a:a)}function is(a,b,c){a=+a;b=+b;c=c|0;return +(+rq(a,b,c))}function js(a){a=+a;var b=0,d=0.0;h[j>>3]=a;b=c[j+4>>2]&2147483647;do if(b>>>0<=2146435071){a=+A(+a);if(b>>>0>1073741823){a=+ks(b,a,0);break}if(b>>>0>1059061759){d=a*a;a=a*.5;a=(a+1.0)*(1.0-a)+d*(d*(d*(d*(1.8295404953270067e-06-d*4.618326885321032e-09)+-1.8997929423885472e-04)+.015624999999999995)/(d*(d*(d*(d*1.1661400333379e-09+5.135465502073181e-07)+1.1692678466333745e-04)+.015619102946489001)+1.0));break}else{a=1.0-(b>>>0>939524095?a*(a*.25):a);break}}else a=1.0/(a*a);while(0);return +a}function ks(a,b,c){a=a|0;b=+b;c=c|0;var d=0.0,e=0.0,f=0.0,g=0.0,h=0.0;g=+E(+b);d=+D(+b);c=(c|0)!=0;d=c?-d:d;h=g+d;if(a>>>0<2145386496){e=g-d;f=-+D(+(b*2.0));if(g*d<0.0)d=f/e;else{d=h;e=f/h}if(a>>>0<1207959552){d=d*+ls(b);d=d-(c?-e:e)*+ms(b)}}else d=h;return +(d*.5641895835477563/+B(+b))}function ls(a){a=+a;var b=0,d=0,e=0;h[j>>3]=a;b=c[j+4>>2]&2147483647;if(b>>>0<=1075838975){e=b>>>0>1074191212;if(b>>>0>1074933386){d=150576;b=150480}else{d=e?150240:150288;b=e?150336:150384}}else{d=150528;b=150432}a=1.0/(a*a);return +((+h[d>>3]+a*(+h[d+8>>3]+a*(+h[d+16>>3]+a*(+h[d+24>>3]+a*(+h[d+32>>3]+a*+h[d+40>>3])))))/(a*(+h[b>>3]+a*(+h[b+8>>3]+a*(+h[b+16>>3]+a*(+h[b+24>>3]+a*+h[b+32>>3]))))+1.0)+1.0)}function ms(a){a=+a;var b=0,d=0,e=0,f=0.0;h[j>>3]=a;b=c[j+4>>2]&2147483647;if(b>>>0<=1075838975){e=b>>>0>1074191212;if(b>>>0>1074933386){d=150192;b=150096}else{d=e?149856:149904;b=e?149952:15e4}}else{d=150144;b=150048}f=1.0/(a*a);return +(((+h[d>>3]+f*(+h[d+8>>3]+f*(+h[d+16>>3]+f*(+h[d+24>>3]+f*(+h[d+32>>3]+f*+h[d+40>>3])))))/(f*(+h[b>>3]+f*(+h[b+8>>3]+f*(+h[b+16>>3]+f*(+h[b+24>>3]+f*(+h[b+32>>3]+f*+h[b+40>>3])))))+1.0)+-.125)/a)}function ns(a){a=+a;var b=0,d=0,e=0,f=0.0;h[j>>3]=a;d=c[j>>2]|0;b=c[j+4>>2]|0;e=_C(b|0,0,1)|0;do if(e|d)if((b|0)>=0){if(b>>>0>2146435071){a=1.0/a;break}if(b>>>0>1073741823){a=+ks(b,a,1);break}if(b>>>0>1044381695){f=a*a;a=(f*(f*(f*(f*(f*(1.9559013703502292e-08-f*3.982051941321034e-11)+-3.8140705372436416e-06)+3.4745343209368365e-04)+-.01381856719455969)+.17666645250918112)+-.07380429510868723)/(f*(f*(f*(f*4.4111031133267547e-10+2.591508518404578e-07)+7.600686273503533e-05)+.01273048348341237)+1.0)+ +js(a)*+L(+a)*.6366197723675814;break}else{a=+L(+a)*.6366197723675814+-.07380429510868723;break}}else a=r;else a=-s;while(0);return +a}function os(a){a=+a;return +(+ir(a))}function ps(a,b,d){a=+a;b=+b;d=d|0;var e=0,f=0.0,g=0,i=0,k=0.0,l=0.0;h[j>>3]=a;e=c[j+4>>2]|0;g=e&2147483640;g=g>>>0>1072010279|(g|0)==1072010279&0>0;if(g){e=ZC(c[j>>2]|0,e|0,63)|0;i=(e|0)==0;a=.7853981633974483-(i?a:-a)+(3.061616997868383e-17-(i?b:-b));b=0.0}else e=0;k=a*a;f=k*k;l=a*k;f=l*.3333333333333341+(b+k*(b+l*(f*(f*(f*(f*(7.817944429395571e-05-f*1.8558637485527546e-05)+5.880412408202641e-04)+3.5920791075913124e-03)+.021869488294859542)+.13333333333320124+k*(f*(f*(f*(f*(f*2.590730518636337e-05+7.140724913826082e-05)+2.464631348184699e-04)+1.4562094543252903e-03)+.0088632398235993)+.05396825397622605))));b=a+f;if(!g){if(d){h[j>>3]=b;i=c[j+4>>2]|0;c[j>>2]=0;c[j+4>>2]=i;l=+h[j>>3];k=-1.0/b;h[j>>3]=k;i=c[j+4>>2]|0;c[j>>2]=0;c[j+4>>2]=i;b=+h[j>>3];b=k*(l*b+1.0+(f-(l-a))*b)+b}}else{l=+(1-(d<<1)|0);b=l-(a+(f-b*b/(b+l)))*2.0;b=(e|0)==0?b:-b}return +b}
function Mx(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0,k=0,m=0,n=0,o=0;o=l;l=l+16|0;j=o+4|0;k=o;m=Qx(b)|0;d=Rx(b,d)|0;a:do if(!d){d=Sx(b,0)|0;if(!d)if((Qx(b)|0)>(m|0)){b:while(1){h=Tx(b)|0;i=Ux(b)|0;c:do switch(h|0){case 0:switch(c[i>>2]|0){case 0:{g=c[i+4>>2]|0;f=c[g>>2]|0;if((f|0)==-4){c[i+8>>2]=0;d=g+8|0;h=Vx(a,c[d>>2]|0,0,1114111,0,0,-1)|0;c[i+24>>2]=h;if(!h){d=12;break a}h=Vx(a,c[d>>2]|0,0,1114111,0,0,c[g+4>>2]|0)|0;c[i+28>>2]=h;if(!h){d=12;break a}else break c}d=i+8|0;if((f|0)<0){c[d>>2]=1;h=Wx(a)|0;c[i+24>>2]=h;if(!h){d=12;break a}h=Wx(a)|0;c[i+28>>2]=h;if(!h){d=12;break a}else break c}else{c[d>>2]=0;d=g+8|0;e=g+4|0;h=Vx(a,c[d>>2]|0,f,c[e>>2]|0,0,0,-1)|0;c[i+24>>2]=h;if(!h){d=12;break a}h=Vx(a,c[d>>2]|0,c[g>>2]|0,c[e>>2]|0,c[g+12>>2]|0,c[g+16>>2]|0,-1)|0;c[i+28>>2]=h;if(!h){d=12;break a}else break c}}case 3:{d=Rx(b,i)|0;if(d|0)break a;d=Sx(b,1)|0;if(d|0)break a;e=i+4|0;d=Rx(b,c[(c[e>>2]|0)+4>>2]|0)|0;if(d|0)break a;d=Sx(b,0)|0;if(d|0)break a;d=Rx(b,c[c[e>>2]>>2]|0)|0;if(d|0)break a;d=Sx(b,0)|0;if(!d)break c;else break a}case 1:{d=Rx(b,i)|0;if(d|0)break a;d=Sx(b,2)|0;if(d|0)break a;e=i+4|0;d=Rx(b,c[(c[e>>2]|0)+4>>2]|0)|0;if(d|0)break a;d=Sx(b,0)|0;if(d|0)break a;d=Rx(b,c[c[e>>2]>>2]|0)|0;if(d|0)break a;d=Sx(b,0)|0;if(!d)break c;else break a}case 2:{d=Rx(b,i)|0;if(d|0)break a;d=Sx(b,3)|0;if(d|0)break a;d=Rx(b,c[c[i+4>>2]>>2]|0)|0;if(d|0)break a;d=Sx(b,0)|0;if(!d)break c;else break a}default:break c}case 1:{d=c[i+4>>2]|0;e=c[d>>2]|0;f=d+4|0;g=c[f>>2]|0;if(!(c[e+8>>2]|0))h=(c[g+8>>2]|0)!=0;else h=1;c[i+8>>2]=h&1;h=Xx(a,c[e+24>>2]|0,c[g+24>>2]|0,0,0)|0;c[i+24>>2]=h;if(!h){d=12;break a}h=Xx(a,c[(c[d>>2]|0)+28>>2]|0,c[(c[f>>2]|0)+28>>2]|0,0,0)|0;c[i+28>>2]=h;if(!h){d=12;break a}break}case 3:{h=c[i+4>>2]|0;d=c[h>>2]|0;if(!(c[h+4>>2]|0))e=1;else e=(c[d+8>>2]|0)!=0&1;c[i+8>>2]=e;c[i+24>>2]=c[d+24>>2];c[i+28>>2]=c[d+28>>2];break}case 2:{g=c[i+4>>2]|0;d=c[g>>2]|0;e=d+8|0;if(!(c[e>>2]|0))f=0;else f=(c[(c[g+4>>2]|0)+8>>2]|0)!=0;c[i+8>>2]=f&1;if(c[e>>2]|0){d=Yx(b,d,0,0,j)|0;if(d|0)break b;e=ud((c[j>>2]<<2)+4|0)|0;if(!e){d=12;break b}c[e>>2]=-1;c[k>>2]=0;d=Yx(b,c[g>>2]|0,e,k,0)|0;if(d|0){n=44;break b}d=g+4|0;h=i+24|0;c[h>>2]=Xx(a,c[(c[d>>2]|0)+24>>2]|0,c[(c[g>>2]|0)+24>>2]|0,e,c[k>>2]|0)|0;vd(e);if(!(c[h>>2]|0)){d=12;break b}else f=d}else{c[i+24>>2]=c[d+24>>2];f=g+4|0}d=c[f>>2]|0;if(c[d+8>>2]|0){d=Yx(b,d,0,0,j)|0;if(d|0)break b;e=ud((c[j>>2]<<2)+4|0)|0;if(!e){d=12;break b}c[e>>2]=-1;c[k>>2]=0;d=Yx(b,c[f>>2]|0,e,k,0)|0;if(d|0){n=51;break b}i=i+28|0;c[i>>2]=Xx(a,c[(c[g>>2]|0)+28>>2]|0,c[(c[f>>2]|0)+28>>2]|0,e,c[k>>2]|0)|0;vd(e);if(!(c[i>>2]|0)){d=12;break b}}else c[i+28>>2]=c[d+28>>2];break}default:{}}while(0);if((Qx(b)|0)<=(m|0)){d=0;break a}}if((n|0)==44)vd(e);else if((n|0)==51)vd(e)}else d=0}while(0);l=o;return d|0}function Nx(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0;a:while(1){switch(c[a>>2]|0){case 2:{a=c[a+4>>2]|0;if((c[a+8>>2]|0)==-1?(h=c[a>>2]|0,h=Px(c[h+28>>2]|0,c[h+24>>2]|0,b,d,e)|0,(h|0)!=0):0){a=h;break a}break}case 3:{f=c[a+4>>2]|0;a=Nx(c[f>>2]|0,b,d,e)|0;if(a|0)break a;a=f+4|0;break}case 1:{f=c[a+4>>2]|0;g=f+4|0;a=Px(c[(c[f>>2]|0)+28>>2]|0,c[(c[g>>2]|0)+24>>2]|0,b,d,e)|0;if(a|0)break a;a=Nx(c[f>>2]|0,b,d,e)|0;if(!a)a=g;else break a;break}default:{a=0;break a}}a=c[a>>2]|0}return a|0}function Ox(a){a=a|0;var b=0,d=0,e=0,f=0,g=0,h=0;h=c[a+4>>2]|0;if(h|0){e=h+4|0;a=c[h>>2]|0;if(c[e>>2]|0){d=0;do{if(c[a+(d<<5)+8>>2]|0){b=c[a+(d<<5)+16>>2]|0;if(b){vd(b);a=c[h>>2]|0}b=c[a+(d<<5)+28>>2]|0;if(b){vd(b);a=c[h>>2]|0}}d=d+1|0}while(d>>>0<(c[e>>2]|0)>>>0)}if(a|0)vd(a);d=h+8|0;a=c[d>>2]|0;if(a|0){if(c[a+8>>2]|0){while(1){b=c[a+16>>2]|0;if(b|0)vd(b);if(!(c[a+40>>2]|0))break;else a=a+32|0}a=c[d>>2]|0}vd(a)}f=h+16|0;a=c[f>>2]|0;if(a|0){g=h+28|0;b=c[g>>2]|0;if(b){e=0;do{d=c[a+(e*12|0)+8>>2]|0;if(d){vd(d);b=c[g>>2]|0;a=c[f>>2]|0}e=e+1|0}while(e>>>0<b>>>0)}vd(a)}a=c[h+32>>2]|0;if(a|0)vd(a);a=c[h+20>>2]|0;if(a|0)vd(a);a=c[h+36>>2]|0;if(a|0)vd(a);vd(h)}return}function Px(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0;g=c[a>>2]|0;h=(g|0)>-1;a:do if(!d)if(h){h=b+32|0;do{if((c[b>>2]|0)>-1?(y=e+(g<<2)|0,c[y>>2]=(c[y>>2]|0)+1,(c[h>>2]|0)>-1):0){g=h;do{y=e+(c[a>>2]<<2)|0;c[y>>2]=(c[y>>2]|0)+1;g=g+32|0}while((c[g>>2]|0)>-1)}a=a+32|0;g=c[a>>2]|0}while((g|0)>-1);g=0}else g=0;else if(h)while(1){h=c[b>>2]|0;b:do if((h|0)>-1){p=a+4|0;q=a+8|0;r=a+16|0;s=a+20|0;t=a+24|0;u=a+28|0;v=a+12|0;e=-1;g=b;while(1){o=h;while(1){if((o|0)!=(e|0))break;g=g+32|0;h=c[g>>2]|0;if((h|0)>-1)o=h;else break b}l=d+(c[f+(c[a>>2]<<2)>>2]<<5)|0;while(1)if(!(c[l+8>>2]|0))break;else l=l+32|0;c[l+40>>2]=0;c[l>>2]=c[p>>2];c[l+4>>2]=c[q>>2];c[l+8>>2]=d+(c[f+(o<<2)>>2]<<5);c[l+12>>2]=o;h=c[s>>2]|0;e=c[g+16>>2]|c[r>>2]|((h|0)==0?0:4)|((c[t>>2]|0)==0?0:8);i=l+20|0;c[i>>2]=e;j=c[u>>2]|0;k=l+24|0;if((j|0)>-1){c[k>>2]=j;c[i>>2]=e|256}else c[k>>2]=h;e=c[t>>2]|0;if(!e)c[l+28>>2]=0;else{h=0;do{n=h;h=h+1|0}while((c[e+(n<<2)>>2]|0)!=0);h=ud(h<<2)|0;c[l+28>>2]=h;if(!h){g=12;break a}k=c[t>>2]|0;e=c[k>>2]|0;if(e){j=0;i=h;do{c[i>>2]=e;j=j+1|0;e=c[k+(j<<2)>>2]|0;i=h+(j<<2)|0}while((e|0)!=0);h=i}c[h>>2]=0}e=c[v>>2]|0;if(!e)h=0;else{h=0;while(1)if((c[e+(h<<2)>>2]|0)>-1)h=h+1|0;else break}k=g+12|0;i=c[k>>2]|0;if(!i)e=0;else{e=0;while(1)if((c[i+(e<<2)>>2]|0)>-1)e=e+1|0;else break}j=l+16|0;i=c[j>>2]|0;if(i|0)vd(i);c[j>>2]=0;h=e+h|0;if(h|0){n=ud((h<<2)+4|0)|0;c[j>>2]=n;if(!n){g=12;break a}e=c[v>>2]|0;if((e|0)!=0?(w=c[e>>2]|0,(w|0)>-1):0){h=0;i=w;do{c[n+(h<<2)>>2]=i;h=h+1|0;i=c[e+(h<<2)>>2]|0}while((i|0)>-1);m=h}else m=0;j=c[k>>2]|0;if((j|0)!=0?(x=c[j>>2]|0,(x|0)>-1):0){k=(m|0)==0;h=m;i=0;l=x;do{c:do if(k)y=44;else{e=0;while(1){if((c[n+(e<<2)>>2]|0)==(l|0))break c;e=e+1|0;if(e>>>0>=m>>>0){y=44;break}}}while(0);if((y|0)==44){y=0;c[n+(h<<2)>>2]=l;h=h+1|0}i=i+1|0;l=c[j+(i<<2)>>2]|0}while((l|0)>-1)}else h=m;c[n+(h<<2)>>2]=-1}g=g+32|0;h=c[g>>2]|0;if((h|0)<=-1)break;else e=o}}while(0);a=a+32|0;if((c[a>>2]|0)<=-1){g=0;break}}else g=0;while(0);return g|0}function Qx(a){a=a|0;return c[a+12>>2]|0}function Rx(a,b){a=a|0;b=b|0;var d=0,e=0,f=0;d=l;l=l+16|0;e=d+4|0;f=d;c[f>>2]=b;c[e>>2]=c[f>>2];b=Zx(a,e)|0;l=d;return b|0}function Sx(a,b){a=a|0;b=b|0;var d=0,e=0,f=0;d=l;l=l+16|0;e=d+4|0;f=d;c[f>>2]=b;c[e>>2]=c[f>>2];b=Zx(a,e)|0;l=d;return b|0}function Tx(a){a=a|0;var b=0,d=0;b=c[a+16>>2]|0;d=a+12|0;a=(c[d>>2]|0)+-1|0;c[d>>2]=a;return c[b+(a<<2)>>2]|0}function Ux(a){a=a|0;var b=0,d=0;b=c[a+16>>2]|0;d=a+12|0;a=(c[d>>2]|0)+-1|0;c[d>>2]=a;return c[b+(a<<2)>>2]|0}function Vx(a,b,d,e,f,g,h){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;a=Cx(a,0,0,1,64)|0;if(!a)a=0;else{c[a>>2]=b;c[a+4>>2]=d;c[a+8>>2]=e;c[a+20>>2]=f;c[a+24>>2]=g;c[a+28>>2]=h;c[a+32>>2]=-1;c[a+36>>2]=-1;c[a+40>>2]=-1}return a|0}function Wx(a){a=a|0;a=Cx(a,0,0,1,32)|0;if(!a)a=0;else{c[a>>2]=-1;c[a+4>>2]=-1;c[a+8>>2]=-1}return a|0}function Xx(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0;o=(e|0)==0;if(o)n=0;else{g=0;while(1)if((c[e+(g<<2)>>2]|0)>-1)g=g+1|0;else{n=g;break}}h=0;while(1)if((c[b+(h<<5)>>2]|0)>-1)h=h+1|0;else break;g=0;while(1)if((c[d+(g<<5)>>2]|0)>-1)g=g+1|0;else break;g=Cx(a,0,0,1,(g+h<<5)+32|0)|0;a:do if(!g)g=0;else{h=c[b>>2]|0;if((h|0)>-1){m=(n|0)==0;i=0;while(1){c[g+(i<<5)>>2]=h;c[g+(i<<5)+4>>2]=c[b+(i<<5)+4>>2];c[g+(i<<5)+8>>2]=c[b+(i<<5)+8>>2];c[g+(i<<5)+16>>2]=c[b+(i<<5)+16>>2]|f;c[g+(i<<5)+20>>2]=c[b+(i<<5)+20>>2];c[g+(i<<5)+24>>2]=c[b+(i<<5)+24>>2];c[g+(i<<5)+28>>2]=c[b+(i<<5)+28>>2];k=b+(i<<5)+12|0;j=c[k>>2]|0;h=(j|0)==0;if(o&h)c[g+(i<<5)+12>>2]=0;else{if(h)h=0;else{h=0;while(1)if((c[j+(h<<2)>>2]|0)>-1)h=h+1|0;else break}l=Cx(a,0,0,0,(h+n<<2)+4|0)|0;if(!l){g=0;break a}if(!h)h=0;else{k=c[k>>2]|0;j=0;do{c[l+(j<<2)>>2]=c[k+(j<<2)>>2];j=j+1|0}while((j|0)!=(h|0))}if(m)j=0;else{j=0;do{c[l+(j+h<<2)>>2]=c[e+(j<<2)>>2];j=j+1|0}while((j|0)!=(n|0));j=n}c[l+(j+h<<2)>>2]=-1;c[g+(i<<5)+12>>2]=l}i=i+1|0;h=c[b+(i<<5)>>2]|0;if((h|0)<=-1){n=i;break}}}else n=0;i=c[d>>2]|0;h=g+(n<<5)|0;if((i|0)>-1){m=0;l=n;do{c[h>>2]=i;c[g+(l<<5)+4>>2]=c[d+(m<<5)+4>>2];c[g+(l<<5)+8>>2]=c[d+(m<<5)+8>>2];c[g+(l<<5)+16>>2]=c[d+(m<<5)+16>>2];c[g+(l<<5)+20>>2]=c[d+(m<<5)+20>>2];c[g+(l<<5)+24>>2]=c[d+(m<<5)+24>>2];c[g+(l<<5)+28>>2]=c[d+(m<<5)+28>>2];j=d+(m<<5)+12|0;i=c[j>>2]|0;if(!i)c[g+(l<<5)+12>>2]=0;else{h=0;while(1)if((c[i+(h<<2)>>2]|0)>-1)h=h+1|0;else break;k=Cx(a,0,0,0,(h<<2)+4|0)|0;if(!k){g=0;break a}if(!h)h=0;else{j=c[j>>2]|0;i=0;do{c[k+(i<<2)>>2]=c[j+(i<<2)>>2];i=i+1|0}while((i|0)!=(h|0))}c[k+(h<<2)>>2]=-1;c[g+(l<<5)+12>>2]=k}m=m+1|0;i=c[d+(m<<5)>>2]|0;l=m+n|0;h=g+(l<<5)|0}while((i|0)>-1)}c[h>>2]=-1}while(0);return g|0}function Yx(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,i=0,j=0,k=0,l=0,m=0;l=Qx(a)|0;m=(f|0)!=0;if(m)c[f>>2]=0;b=Rx(a,b)|0;a:do if(!b){k=(e|0)==0;j=(d|0)==0;while(1){if((Qx(a)|0)<=(l|0)){b=0;break a}b=Ux(a)|0;b:do switch(c[b>>2]|0){case 0:{b=c[b+4>>2]|0;switch(c[b>>2]|0){case -3:break;case -2:{if(k){b=0;break b}c[e>>2]=c[e>>2]|c[b+4>>2];b=0;break b}default:{b=0;break b}}i=c[b+4>>2]|0;if((i|0)>-1){c:do if(!j){b=c[d>>2]|0;if((b|0)>-1){g=0;h=b;do{if((h|0)==(i|0))break c;g=g+1|0;b=d+(g<<2)|0;h=c[b>>2]|0}while((h|0)>-1)}else{g=0;b=d}c[b>>2]=i;c[d+(g+1<<2)>>2]=-1}while(0);if(m){c[f>>2]=(c[f>>2]|0)+1;b=0}else b=0}else b=0;break}case 3:{b=c[b+4>>2]|0;g=c[b>>2]|0;if(c[g+8>>2]|0){b=Rx(a,g)|0;break b}b=c[b+4>>2]|0;if(!(c[b+8>>2]|0))b=0;else b=Rx(a,b)|0;break}case 1:{g=c[b+4>>2]|0;b=Rx(a,c[g>>2]|0)|0;if(!b)b=Rx(a,c[g+4>>2]|0)|0;break}case 2:{b=c[c[b+4>>2]>>2]|0;if(!(c[b+8>>2]|0))b=0;else b=Rx(a,b)|0;break}default:b=0}while(0);if(b|0)break a}}while(0);return b|0}function Zx(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0;k=l;l=l+16|0;f=k;d=a+12|0;e=c[d>>2]|0;i=c[a>>2]|0;if((e|0)>=(i|0)){d=c[a+4>>2]|0;if((i|0)<(d|0)?(j=(c[a+8>>2]|0)+i|0,j=(j|0)>(d|0)?d:j,g=a+16|0,h=xd(c[g>>2]|0,j<<2)|0,(h|0)!=0):0){c[a>>2]=j;c[g>>2]=h;c[f>>2]=c[b>>2];Zx(a,f)|0;d=0}else d=12}else{c[(c[a+16>>2]|0)+(e<<2)>>2]=c[b>>2];c[d>>2]=(c[d>>2]|0)+1;d=0}l=k;return d|0}function _x(a,b,d){a=a|0;b=b|0;d=d|0;a=Cx(a,0,0,1,32)|0;if((d|0)!=0&(a|0)!=0){c[a+4>>2]=d;c[a>>2]=b;c[a+8>>2]=-1;c[a+12>>2]=-1}else a=0;return a|0}function $x(b,d,e,f,g,h,i,j){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;i=i|0;j=j|0;var k=0,l=0,m=0,n=0,o=0,p=0,q=0;q=Qx(d)|0;Rx(d,e)|0;k=Sx(d,0)|0;a:do if(!k){p=(f&1|0)==0;o=(f&2|0)!=0;e=0;m=1;while(1){if((Qx(d)|0)<=(q|0)){k=0;break a}b:do switch(Tx(d)|0){case 1:{i=Ux(d)|0;k=0;break}case 0:{k=Ux(d)|0;switch(c[k>>2]|0){case 0:{n=c[k+4>>2]|0;l=c[n+8>>2]|0;f=c[n>>2]|0;k=c[n+4>>2]|0;if(!((f|0)>-1|(f|0)==-4))if(p|(f|0)!=-3){if((f|0)==-3)if(o&(m|0)!=0){c[h+(k<<2)>>2]=1;f=-3;m=0}else f=-3}else{k=-1;f=-1;l=-1}else{l=(c[g>>2]|0)+l|0;e=e+1|0}k=Kx(b,f,k,l)|0;c[i>>2]=k;if(!k)k=12;else{k=c[k+4>>2]|0;c[k+12>>2]=c[n+12>>2];c[k+16>>2]=c[n+16>>2];k=0}if((l|0)<=(c[j>>2]|0))break b;c[j>>2]=l;break b}case 3:{l=c[k+4>>2]|0;f=l+4|0;k=by(b,c[l>>2]|0,c[f>>2]|0)|0;c[i>>2]=k;if(!k){k=12;break a}i=c[k+4>>2]|0;k=Rx(d,c[f>>2]|0)|0;if(k|0)break a;k=Sx(d,0)|0;if(k|0)break a;k=Rx(d,i+4|0)|0;if(k|0)break a;k=Sx(d,1)|0;if(k|0)break a;k=Rx(d,c[l>>2]|0)|0;if(k|0)break a;k=Sx(d,0)|0;break b}case 1:{n=c[k+4>>2]|0;f=n+4|0;k=Lx(b,c[n>>2]|0,c[f>>2]|0)|0;c[i>>2]=k;if(!k){k=12;break a}i=c[k+4>>2]|0;c[i>>2]=0;l=i+4|0;c[l>>2]=0;k=Rx(d,c[f>>2]|0)|0;if(k|0)break a;k=Sx(d,0)|0;if(k|0)break a;k=Rx(d,l)|0;if(k|0)break a;k=Sx(d,1)|0;if(k|0)break a;k=Rx(d,c[n>>2]|0)|0;if(k|0)break a;k=Sx(d,0)|0;break b}case 2:{f=c[k+4>>2]|0;k=Rx(d,c[f>>2]|0)|0;if(k|0)break a;k=Sx(d,0)|0;if(k|0)break a;k=ay(b,c[f>>2]|0,c[f+4>>2]|0,c[f+8>>2]|0,a[f+12>>0]&1)|0;c[i>>2]=k;if(!k){k=12;break a}i=c[k+4>>2]|0;k=0;break b}default:{k=0;break b}}}default:k=0}while(0);if(k)break a}}else e=0;while(0);c[g>>2]=(c[g>>2]|0)+e;return k|0}function ay(b,d,e,f,g){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0;h=Cx(b,0,0,1,16)|0;b=_x(b,2,h)|0;if(!b)b=0;else{c[h>>2]=d;c[h+4>>2]=e;c[h+8>>2]=f;h=h+12|0;a[h>>0]=a[h>>0]&-2|g&1;c[b+16>>2]=c[d+16>>2]}return b|0}function by(a,b,d){a=a|0;b=b|0;d=d|0;var e=0;if(b){e=Cx(a,0,0,1,8)|0;a=_x(a,3,e)|0;if((d|0)!=0&(a|0)!=0){c[e>>2]=b;c[e+4>>2]=d;c[a+16>>2]=(c[d+16>>2]|0)+(c[b+16>>2]|0);d=a}else d=0}return d|0}function cy(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0;e=Cx(a,0,0,0,8)|0;if(((e|0)!=0?(d=Kx(a,-3,d,-1)|0,c[e>>2]=d,(d|0)!=0):0)?(f=Cx(a,0,0,0,32)|0,c[e+4>>2]=f,(f|0)!=0):0){a=b+4|0;c[f+4>>2]=c[a>>2];c[f>>2]=c[b>>2];c[f+8>>2]=-1;c[f+12>>2]=-1;f=f+16|0;c[f>>2]=0;c[f+4>>2]=0;c[f+8>>2]=0;c[f+12>>2]=0;c[a>>2]=e;c[b>>2]=1;a=0}else a=12;return a|0}function dy(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0;f=c[a>>2]|0;if((f|0)>-1){g=c[b+16>>2]|0;e=0;b=f;do{f=b>>>1;c[((b&1|0)==0?g+(f*12|0)|0:g+(f*12|0)+4|0)>>2]=d;e=e+1|0;b=c[a+(e<<2)>>2]|0}while((b|0)>-1)}c[a>>2]=-1;return}function ey(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0;e=Cx(a,0,0,0,8)|0;if(((e|0)!=0?(d=Kx(a,-3,d,-1)|0,c[e+4>>2]=d,(d|0)!=0):0)?(f=Cx(a,0,0,0,32)|0,c[e>>2]=f,(f|0)!=0):0){a=b+4|0;c[f+4>>2]=c[a>>2];c[f>>2]=c[b>>2];c[f+8>>2]=-1;c[f+12>>2]=-1;f=f+16|0;c[f>>2]=0;c[f+4>>2]=0;c[f+8>>2]=0;c[f+12>>2]=0;c[a>>2]=e;c[b>>2]=1;a=0}else a=12;return a|0}function fy(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0,k=0,m=0,n=0;m=l;l=l+16|0;j=m;i=b+32|0;h=c[i>>2]|0;g=h&1;a:do switch(a[d>>0]|0){case 91:{e=jy(b,d+1|0)|0;break}case 92:{e=d+1|0;f=ky(e)|0;if(f|0){e=fy(b,f)|0;c[b+12>>2]=d+2;break a}f=a[e>>0]|0;switch(f|0){case 0:{e=5;break a}case 98:{f=Kx(c[b>>2]|0,-2,64,-1)|0;break}case 66:{f=Kx(c[b>>2]|0,-2,128,-1)|0;break}case 60:{f=Kx(c[b>>2]|0,-2,16,-1)|0;break}case 62:{f=Kx(c[b>>2]|0,-2,32,-1)|0;break}case 120:{h=d+2|0;i=(a[h>>0]|0)==123;g=i?8:2;h=i?d+3|0:h;e=0;f=0;do{d=ly(a[h+e>>0]|0)|0;if((d|0)<0)break;f=d+(f<<4)|0;e=e+1|0}while((f|0)<1114112&e>>>0<g>>>0);e=h+e|0;if(i){if((a[e>>0]|0)!=125){e=9;break a}e=e+1|0}j=c[b>>2]|0;i=b+24|0;k=c[i>>2]|0;c[i>>2]=k+1;f=Kx(j,f,f,k)|0;e=e+-1|0;break}case 63:case 43:case 123:if(!g){e=13;break a}else{k=37;break a}case 124:{if(g|0){k=37;break a}e=Kx(c[b>>2]|0,-1,-1,-1)|0;k=45;break a}default:{if(!((g|0)==0&(f+-49|0)>>>0<9)){k=37;break a}j=f+-48|0;k=c[b>>2]|0;i=b+24|0;f=c[i>>2]|0;c[i>>2]=f+1;f=Kx(k,-4,j,f)|0;k=b+28|0;i=c[k>>2]|0;c[k>>2]=(j|0)<(i|0)?i:j}}d=e+1|0;e=f;k=45;break}case 46:{e=c[b>>2]|0;g=b+24|0;f=c[g>>2]|0;c[g>>2]=f+1;if(h&4){f=Kx(e,0,9,f)|0;k=c[b>>2]|0;e=c[g>>2]|0;c[g>>2]=e+1;e=Kx(k,11,1114111,e)|0;if((f|0)!=0&(e|0)!=0)e=by(c[b>>2]|0,f,e)|0;else e=0}else e=Kx(e,0,1114111,f)|0;d=d+1|0;k=45;break}case 94:{if((g|0)==0?(c[b+16>>2]|0)!=(d|0):0){e=d;k=37;break a}d=d+1|0;e=Kx(c[b>>2]|0,-2,1,-1)|0;k=45;break}case 36:{e=d+1|0;if((g|0)==0?a[e>>0]|0:0){e=d;k=37;break a}d=e;e=Kx(c[b>>2]|0,-2,2,-1)|0;k=45;break}case 63:case 43:case 123:case 42:{if(!g){e=d;k=37}else e=13;break}case 124:{if(!g){e=d;k=37}else k=36;break}case 0:{k=36;break}default:{e=d;k=37}}while(0);if((k|0)==36){e=Kx(c[b>>2]|0,-1,-1,-1)|0;k=45}else if((k|0)==37){h=pn(j,e,-1)|0;if((h|0)<0)e=2;else{do if(c[i>>2]&2){if((nf(c[j>>2]|0)|0)==0?(ni(c[j>>2]|0)|0)==0:0){k=43;break}i=c[b>>2]|0;n=gg(c[j>>2]|0)|0;g=gg(c[j>>2]|0)|0;f=b+24|0;g=Kx(i,n,g,c[f>>2]|0)|0;n=c[b>>2]|0;i=of(c[j>>2]|0)|0;d=of(c[j>>2]|0)|0;d=Kx(n,i,d,c[f>>2]|0)|0;if((g|0)!=0&(d|0)!=0)g=by(c[b>>2]|0,g,d)|0;else g=0}else k=43;while(0);if((k|0)==43){g=c[j>>2]|0;f=b+24|0;g=Kx(c[b>>2]|0,g,g,c[f>>2]|0)|0}c[f>>2]=(c[f>>2]|0)+1;d=e+h|0;e=g;k=45}}if((k|0)==45)if(!e)e=12;else{c[b+8>>2]=e;c[b+12>>2]=d;e=0}l=m;return e|0}function gy(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,i=0,j=0;j=l;l=l+16|0;i=j+4|0;g=j;b=iy(b,i)|0;if((a[b>>0]|0)==44){b=iy(b+1|0,g)|0;h=c[g>>2]|0;g=c[i>>2]|0}else{i=c[i>>2]|0;c[g>>2]=i;h=i;g=i}do if(!(g>>>0>255|((h|0)>255|(h|0)>-1&(h|0)<(g|0)))){if(!d)if((a[b>>0]|0)==92)b=b+1|0;else{b=0;break}if((a[b>>0]|0)==125){c[e>>2]=g;c[f>>2]=h;b=b+1|0}else b=0}else b=0;while(0);l=j;return b|0}function hy(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0;e=b+12|0;if((c[e>>2]|0)>-1){e=Kx(c[a>>2]|0,-1,-1,-1)|0;if((e|0)!=0?(f=Lx(c[a>>2]|0,e,b)|0,(f|0)!=0):0){h=c[b+16>>2]|0;g=f+16|0;c[g>>2]=h;b=f;e=f+12|0;f=h;h=6}else e=12}else{f=b+16|0;g=f;f=c[f>>2]|0;h=6}if((h|0)==6){c[e>>2]=d;c[g>>2]=f+1;c[a+8>>2]=b;e=0}return e|0}function iy(b,d){b=b|0;d=d|0;var e=0;c[d>>2]=-1;a:do if(uf(a[b>>0]|0)|0){c[d>>2]=0;c[d>>2]=(a[b>>0]|0)+-48;b=b+1|0;if(uf(a[b>>0]|0)|0)do{e=c[d>>2]|0;if((e|0)>255)break a;c[d>>2]=(e*10|0)+-48+(a[b>>0]|0);b=b+1|0}while((uf(a[b>>0]|0)|0)!=0)}while(0);return b|0}function jy(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0,k=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0;s=l;l=l+288|0;e=s+264|0;g=s;c[e>>2]=c[b>>2];h=e+8|0;c[h>>2]=0;c[e+12>>2]=32;p=ud(128)|0;r=e+4|0;c[r>>2]=p;if(!p)d=12;else{f=g+4|0;c[f>>2]=0;p=(a[d>>0]|0)==94;c[g>>2]=p&1;d=my(b,p?d+1|0:d,e,g)|0;a:do if(!d){p=(c[g>>2]|0)==0;if(!p){sk(c[r>>2]|0,c[h>>2]|0,4,3);d=oy(e)|0;if(!d){d=12;e=0;break}c[d>>2]=1114112;c[d+4>>2]=1114112;c[d+8>>2]=-1;d=c[f>>2]|0;if(d){e=d<<2;f=Cx(c[b>>2]|0,0,0,0,e+4|0)|0;if(!f){d=12;e=0;break}bD(f|0,g+8|0,e|0)|0;c[f+(d<<2)>>2]=0}else f=0}else f=0;m=c[h>>2]|0;if((m|0)>0){n=c[r>>2]|0;o=b+24|0;e=0;d=0;k=0;while(1){j=c[n+(k<<2)>>2]|0;g=c[j>>2]|0;h=j+4|0;i=c[h>>2]|0;do if(!p)if((g|0)>(d|0)){c[j>>2]=d;c[h>>2]=g+-1;d=i+1|0;q=14;break}else{j=i+1|0;d=(j|0)<(d|0)?d:j;break}else q=14;while(0);if((q|0)==14){q=0;c[j+8>>2]=c[o>>2];c[j+16>>2]=f;j=_x(c[b>>2]|0,0,j)|0;e=by(c[b>>2]|0,e,j)|0;if(!e){d=12;e=0;break a}}k=k+1|0;if((k|0)>=(m|0)){d=0;break}}}else{d=0;e=0}}else e=0;while(0);vd(c[r>>2]|0);r=b+24|0;c[r>>2]=(c[r>>2]|0)+1;c[b+8>>2]=e}l=s;return d|0}function ky(b){b=b|0;var d=0;d=a[b>>0]|0;b=0;while(1){if((a[151984+(b<<3)>>0]|0)==d<<24>>24)break;b=b+1|0;if((b|0)==12){b=12;break}}return c[151984+(b<<3)+4>>2]|0}function ly(a){a=a|0;var b=0;b=a+-48|0;if(b>>>0<10)return b|0;else{b=a|32;return ((b+-97|0)>>>0<6?b+-87|0:-1)|0}return 0}function my(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,i=0,j=0,k=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0;t=l;l=l+32|0;o=t;q=t+4|0;i=pn(o,d,-1)|0;g=a[d>>0]|0;a:do if((i|0)>=1){r=b+32|0;n=f+4|0;h=d;j=i;b:while(1){i=(h|0)==(d|0);if(!(i|g<<24>>24!=93)){s=5;break}c:do if(i|g<<24>>24!=45)if(g<<24>>24==91){switch(a[h+1>>0]|0){case 61:case 46:{g=3;break a}case 58:break;default:{s=17;break c}}i=h+2|0;g=0;d:while(1){switch(a[i+g>>0]|0){case 0:{s=16;break b}case 58:break d;default:{}}g=g+1|0;if(g>>>0>=14){s=16;break b}}bD(q|0,i|0,g|0)|0;a[q+g>>0]=0;j=kh(q)|0;if(!j){s=16;break b}h=i+(g+2)|0;if((a[i+(g+1)>>0]|0)!=93){s=16;break b}if(!(c[f>>2]|0)){g=1114111;m=0;k=1;s=24}else{g=c[n>>2]|0;if((g|0)>63){g=12;break a}c[n>>2]=g+1;c[f+8+(g<<2)>>2]=j}}else s=17;else{switch(a[h+1>>0]|0){case 93:{s=17;break c}case 45:break;default:{g=11;break a}}if((a[h+2>>0]|0)==93){g=11;break a}else s=17}while(0);if((s|0)==17){s=0;i=c[o>>2]|0;h=h+j|0;if((a[h>>0]|0)==45?(p=h+1|0,(a[p>>0]|0)!=93):0){h=pn(o,p,-1)|0;g=c[o>>2]|0;if((h|0)<1|(i|0)>(g|0)){g=11;break a}j=0;m=i;h=p+h|0;k=0;s=24}else{j=0;g=i;m=i;k=0;s=24}}if((s|0)==24){s=0;i=oy(e)|0;if(!i){g=12;break a}c[i>>2]=m;c[i+4>>2]=g;c[i+12>>2]=j;c[i+8>>2]=-1;if(!(k|(c[r>>2]&2|0)==0)?(py(e,m,g)|0)!=0:0){g=12;break a}}j=pn(o,h,-1)|0;g=a[h>>0]|0;if((j|0)<1){s=3;break a}}if((s|0)==5){c[b+12>>2]=h+1;g=0;break}else if((s|0)==16){g=4;break}}else s=3;while(0);if((s|0)==3)g=g<<24>>24==0?7:2;l=t;return g|0}function ny(a,b){a=a|0;b=b|0;return (c[c[a>>2]>>2]|0)-(c[c[b>>2]>>2]|0)|0}function oy(a){a=a|0;var b=0,d=0,e=0,f=0,g=0,h=0,i=0;h=a+8|0;d=c[h>>2]|0;e=a+12|0;f=c[e>>2]|0;if((d|0)>=(f|0))if((f|0)<=32767?(c[e>>2]=f<<1,g=a+4|0,b=xd(c[g>>2]|0,f<<3)|0,(b|0)!=0):0){c[g>>2]=b;d=c[h>>2]|0;i=6}else b=0;else{b=c[a+4>>2]|0;i=6}if((i|0)==6){c[h>>2]=d+1;i=Cx(c[a>>2]|0,0,0,1,20)|0;c[b+(d<<2)>>2]=i;b=i}return b|0}function py(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0;a:do if((b|0)>(d|0))b=0;else while(1){b:do if(!(ni(b)|0)){if(!(nf(b)|0)){b=b+1|0;break}g=of(b)|0;f=b+1|0;e=g+1|0;if((b|0)<(d|0))while(1){if((of(f)|0)!=(e|0)){b=f;h=15;break b}b=f+1|0;e=e+1|0;if((f|0)<(d|0))f=b;else{h=15;break}}else{b=f;h=15}}else{g=gg(b)|0;f=b+1|0;e=g+1|0;if((b|0)<(d|0))while(1){if((gg(f)|0)!=(e|0)){b=f;h=15;break b}b=f+1|0;e=e+1|0;if((f|0)<(d|0))f=b;else{h=15;break}}else{b=f;h=15}}while(0);if((h|0)==15){h=0;f=oy(a)|0;if(!f){b=-1;break a}c[f>>2]=g;c[f+4>>2]=e+-1;c[f+8>>2]=-1}if((b|0)>(d|0)){b=0;break}}while(0);return b|0}function qy(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0;h=l;l=l+16|0;g=h;a:do if(!b)d=152096;else{d=152096;do{if(!(a[d>>0]|0))break a;b=b+-1|0;d=d+((df(d)|0)+1)|0}while((b|0)!=0)}while(0);c[g>>2]=Mf((a[d>>0]|0)==0?d+1|0:d)|0;f=(sh(e,f,167206,g)|0)+1|0;l=h;return f|0}function ry(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0;h=l;l=l+16|0;g=h;f=sy(16,524291,0)|0;if((f|0)<0)a=-1;else{a=ty(f,1,18,a,d,e)|0;if(!a)a=ty(f,2,22,b,d,e)|0;c[g>>2]=f;Yb(6,g|0)|0}l=h;return a|0}function sy(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0,k=0;j=l;l=l+96|0;h=j+32|0;i=j+16|0;g=j+8|0;e=j;k=j+72|0;f=j+48|0;c[k>>2]=a;c[k+4>>2]=b;c[k+8>>2]=d;c[k+12>>2]=0;c[k+16>>2]=0;c[k+20>>2]=0;c[e>>2]=1;c[e+4>>2]=k;e=Wd(ma(102,e|0)|0)|0;do if((e|0)<0){if((c[(Xd()|0)>>2]|0)==22){if(!(b&526336))break}else if((b&526336|0)==0|(c[(Xd()|0)>>2]|0)!=93)break;c[f>>2]=a;c[f+4>>2]=b&-526337;c[f+8>>2]=d;c[f+12>>2]=0;c[f+16>>2]=0;c[f+20>>2]=0;c[g>>2]=1;c[g+4>>2]=f;e=Wd(ma(102,g|0)|0)|0;if((e|0)>=0){if(b&524288|0){c[i>>2]=e;c[i+4>>2]=2;c[i+8>>2]=1;jb(221,i|0)|0}if(b&2048){c[h>>2]=e;c[h+4>>2]=4;c[h+8>>2]=2048;jb(221,h|0)|0}}}while(0);l=j;return e|0}function ty(d,e,f,g,h,i){d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;i=i|0;var j=0,k=0,m=0,n=0;n=l;l=l+8192|0;m=n;dD(m|0,0,20)|0;c[m>>2]=20;b[m+4>>1]=f;b[m+6>>1]=769;c[m+8>>2]=e;a[m+16>>0]=g;e=uy(d,m,20,0)|0;a:do if((e|0)>=0){e=vy(d,m,8192,64)|0;if((e|0)<1)e=-1;else{k=m;b:while(1){j=m+e|0;c:do if((j-k|0)>>>0>15){g=m;f=m;while(1){switch(b[g+4>>1]|0){case 2:{e=-1;break a}case 3:{e=0;break b}default:{}}e=cd[h&7](i,g)|0;if(e|0)break b;e=f+((c[g>>2]|0)+3&-4)|0;if((j-e|0)>>>0>15){g=e;f=e}else break c}}while(0);e=vy(d,m,8192,64)|0;if((e|0)<1){e=-1;break a}}}}while(0);l=n;return e|0}function uy(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;return xy(a,b,c,d,0,0)|0}function vy(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;return wy(a,b,c,d,0,0)|0}function wy(a,b,d,e,f,g){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0,i=0,j=0;h=l;l=l+32|0;i=h;j=h+8|0;c[j>>2]=a;c[j+4>>2]=b;c[j+8>>2]=d;c[j+12>>2]=e;c[j+16>>2]=f;c[j+20>>2]=g;c[i>>2]=12;c[i+4>>2]=j;g=Wd(ma(102,i|0)|0)|0;l=h;return g|0}function xy(a,b,d,e,f,g){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0,i=0,j=0;h=l;l=l+32|0;i=h;j=h+8|0;c[j>>2]=a;c[j+4>>2]=b;c[j+8>>2]=d;c[j+12>>2]=e;c[j+16>>2]=f;c[j+20>>2]=g;c[i>>2]=11;c[i+4>>2]=j;g=Wd(ma(102,i|0)|0)|0;l=h;return g|0}function yy(a){a=a|0;return}function zy(){return 0}function Ay(){return}function By(a,b){a=a|0;b=b|0;var d=0,e=0,f=0;d=l;l=l+32|0;e=d;f=d+8|0;c[f>>2]=a;c[f+4>>2]=b;b=f+8|0;c[b>>2]=0;c[b+4>>2]=0;c[b+8>>2]=0;c[b+12>>2]=0;c[e>>2]=4;c[e+4>>2]=f;b=Wd(ma(102,e|0)|0)|0;l=d;return b|0}function Cy(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0;e=l;l=l+32|0;f=e;g=e+8|0;c[g>>2]=a;c[g+4>>2]=b;c[g+8>>2]=d;c[g+12>>2]=0;c[g+16>>2]=0;c[g+20>>2]=0;c[f>>2]=6;c[f+4>>2]=g;d=Wd(ma(102,f|0)|0)|0;l=e;return d|0}function Dy(a){a=a|0;return (d[a>>0]|0)<<8|(d[a+1>>0]|0)|0}function Ey(a){a=a|0;return (d[a+1>>0]|0)<<16|(d[a>>0]|0)<<24|(d[a+2>>0]|0)<<8|(d[a+3>>0]|0)|0}function Fy(b,c){b=b|0;c=c|0;a[c>>0]=b>>>8;a[c+1>>0]=b;return}function Gy(b,c){b=b|0;c=c|0;a[c>>0]=b>>>24;a[c+1>>0]=b>>>16;a[c+2>>0]=b>>>8;a[c+3>>0]=b;return}function Hy(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,i=0;a:do if(!e){d=a;i=10}else{h=b;g=(d|0)==0;d=a;f=e;while(1){f=f+-1|0;e=Iy(d,b)|0;if((e|0)<0)break;e=e+4|0;if((e|0)>(h-d|0))break;d=d+e|0;if(!g){if((h-d|0)<6)break;d=d+4+2|0;e=Dy(d+-2|0)|0;if((e|0)>(h-d|0))break;d=d+e|0}if(!f){i=10;break a}}c[(Xd()|0)>>2]=90;d=-1}while(0);if((i|0)==10)d=d-a|0;return d|0}function Iy(b,c){b=b|0;c=c|0;var d=0,e=0,f=0,g=0;a:do if(b>>>0<c>>>0){f=b;while(1){e=a[f>>0]|0;if(!(e<<24>>24)){d=5;break}d=f+1|0;g=d>>>0<c>>>0;if((e&255)>191){d=7;break}if(g)f=d;else{c=-1;break a}}if((d|0)==5){c=1-b+f|0;break}else if((d|0)==7)return (g?2-b+f|0:-1)|0}else c=-1;while(0);return c|0}function Jy(a,d,e){a=a|0;d=d|0;e=e|0;var f=0,g=0,h=0,i=0;c[e>>2]=a;h=e+4|0;c[h>>2]=a+d;a:do if((d|0)>=12){b[e+8>>1]=Dy(a)|0;b[e+10>>1]=Dy(a+2|0)|0;d=0;f=a+4|0;while(1){b[e+12+(d<<1)>>1]=Dy(f)|0;d=d+1|0;if((d|0)==4)break;else f=f+2|0}d=a+12|0;g=0;do{f=b[e+12+(g<<1)>>1]|0;a=e+20+(g<<2)|0;if(!(f<<16>>16))c[a>>2]=0;else{c[a>>2]=d;f=Hy(d,c[h>>2]|0,g,f&65535)|0;if((f|0)<0){d=-1;break a}d=d+f|0}g=g+1|0}while(g>>>0<4);if((d|0)==(c[h>>2]|0)){c[e+36>>2]=4;c[e+40>>2]=-1;c[e+44>>2]=0;d=0}else i=12}else i=12;while(0);if((i|0)==12){c[(Xd()|0)>>2]=90;d=-1}return d|0}function Ky(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;a=fd[1&3](a,b,d,e,f)|0;if((a|0)<0)c[(Xd()|0)>>2]=90;return a|0}function Ly(b,c,e,f,g){b=b|0;c=c|0;e=e|0;f=f|0;g=g|0;var h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0;a:do if(!((e|0)==(c|0)|(g|0)<1)?(p=c,q=p-b|0,(q|0)>0):0){o=e;n=f+((g|0)<254?g:254)|0;m=0;l=-1;g=f;i=e;while(1){e=a[i>>0]|0;h=e&255;if(!(h&192)){if(!(e<<24>>24))break;if((g|0)==(f|0)){g=f;k=h}else{a[g>>0]=46;e=a[i>>0]|0;g=g+1|0;k=e&255}h=i+1|0;if((p-h|0)<=(k|0)){g=-1;break a}if((n-g|0)<=(k|0)){g=-1;break a}if(!(e<<24>>24))e=l;else{j=h+k|0;i=k;e=h;h=g;while(1){i=i+-1|0;a[h>>0]=a[e>>0]|0;if(!i)break;else{e=e+1|0;h=h+1|0}}h=j;e=l;g=g+k|0}}else{e=i+1|0;if((e|0)==(c|0)){g=-1;break a}e=h<<8&16128|(d[e>>0]|0);if((e|0)>=(q|0)){g=-1;break a}h=b+e|0;e=(l|0)<0?i+2-o|0:l}m=m+2|0;if((m|0)>=(q|0)){g=-1;break a}else{l=e;i=h}}a[g>>0]=0;g=(l|0)<0?i+1-o|0:l}else g=-1;while(0);return g|0}function My(a,d,f,g){a=a|0;d=d|0;f=f|0;g=g|0;var h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0;a:do if(d>>>0<=3){n=a+36|0;if((c[n>>2]|0)!=(d|0)){c[n>>2]=d;c[a+40>>2]=0;c[a+44>>2]=c[a+20+(d<<2)>>2]}if((f|0)==-1)f=c[a+40>>2]|0;if((f|0)>=0?(m=a+12+(d<<1)|0,(f|0)<(e[m>>1]|0|0)):0){l=a+40|0;h=c[l>>2]|0;if((f|0)<(h|0)){c[l>>2]=0;c[a+44>>2]=c[a+20+(d<<2)>>2];h=0}k=a+44|0;i=c[k>>2]|0;j=a+4|0;if((f|0)>(h|0)){h=Hy(i,c[j>>2]|0,d,f-h|0)|0;if((h|0)<0){f=-1;break}i=(c[k>>2]|0)+h|0;c[k>>2]=i;c[l>>2]=f;f=i}else f=i;f=Ky(c[a>>2]|0,c[j>>2]|0,f,g,1025)|0;if((f|0)<0)f=-1;else{f=(c[k>>2]|0)+f|0;c[k>>2]=f;i=c[j>>2]|0;do if((i-f|0)>=4){j=f+2|0;c[k>>2]=j;b[g+1026>>1]=Dy(j+-2|0)|0;f=j+2|0;c[k>>2]=f;b[g+1028>>1]=Dy(j)|0;if(!d){c[g+1032>>2]=0;b[g+1036>>1]=0;c[g+1040>>2]=0}else{if((i-f|0)<6)break;h=f+4|0;c[k>>2]=h;c[g+1032>>2]=Ey(f)|0;f=h+2|0;c[k>>2]=f;h=Dy(h)|0;b[g+1036>>1]=h;h=h&65535;if((h|0)>(i-f|0))break;c[g+1040>>2]=f;c[k>>2]=f+h}g=c[l>>2]|0;c[l>>2]=g+1;if((g|0)<(e[m>>1]|0|0)){f=0;break a}g=d+1|0;c[n>>2]=g;if((g|0)==4){c[l>>2]=-1;c[k>>2]=0;f=0;break a}else{c[l>>2]=0;f=0;break a}}while(0);c[(Xd()|0)>>2]=90;f=-1}}else o=24}else o=24;while(0);if((o|0)==24){c[(Xd()|0)>>2]=19;f=-1}return f|0}function Ny(b,c,d,e,f,g){b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0,i=0,j=0,k=0,m=0;m=l;l=l+256|0;i=m;j=Vg(b,255)|0;k=(Vg(c,255)|0)+1|0;h=i+j|0;if((k+j|0)>>>0>254)b=-1;else{bD(i|0,b|0,j|0)|0;a[h>>0]=46;bD(h+1|0,c|0,k|0)|0;b=Qc(i|0,d|0,e|0,f|0,g|0)|0}l=m;return b|0}function Oy(d,e,f,g,h,i,j){d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;i=i|0;j=j|0;var k=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0;K=l;l=l+144|0;F=K+108|0;G=K;t=K+104|0;D=K+96|0;r=K+88|0;E=K+84|0;c[F>>2]=c[42910];c[F+4>>2]=c[42911];c[F+8>>2]=c[42912];c[F+12>>2]=c[42913];c[F+16>>2]=c[42914];c[F+20>>2]=c[42915];c[F+24>>2]=c[42916];k=G;m=k+84|0;do{c[k>>2]=0;k=k+4|0}while((k|0)<(m|0));Oc(1,t|0)|0;C=(c[j+96>>2]|0)*1e3|0;s=c[j+88>>2]|0;q=j+84|0;if(!(c[q>>2]|0)){k=2;n=0;B=16}else{k=2;p=0;m=16;while(1){if((c[j+(p*28|0)>>2]|0)==2){bD(G+(p*28|0)+4|0,j+(p*28|0)+8|0,4)|0;n=2;o=Py(53)|0}else{bD(G+(p*28|0)+8|0,j+(p*28|0)+8|0,16)|0;o=Py(53)|0;c[G+(p*28|0)+24>>2]=c[j+(p*28|0)+4>>2];k=10;m=28;n=10}b[G+(p*28|0)+2>>1]=o;b[G+(p*28|0)>>1]=n;n=p+1|0;if(n>>>0<(c[q>>2]|0)>>>0)p=n;else{B=m;break}}}b[F>>1]=k;m=sy(k,526338,0)|0;if((k|0)==10&(m|0)<0)if((c[(Xd()|0)>>2]|0)==97){A=sy(2,526338,0)|0;k=2;J=10}else k=-1;else{A=m;J=10}if((J|0)==10)if((A|0)>=0?(Qy(A,F,B)|0)>=0:0){Nc(2,A|0);Oc(c[t>>2]|0,0)|0;if((k|0)==10?(c[r>>2]=0,Sy(A,41,26,r,4)|0,n|0):0){k=0;do{m=G+(k*28|0)|0;if((b[m>>1]|0)==2){z=G+(k*28|0)+4|0;bD(G+(k*28|0)+20|0,z|0,4)|0;bD(G+(k*28|0)+8|0,167437,12)|0;b[m>>1]=10;c[z>>2]=0;c[G+(k*28|0)+24>>2]=0}k=k+1|0}while((k|0)!=(n|0))}dD(h|0,0,d<<2|0)|0;c[D>>2]=A;b[D+4>>1]=1;v=(C|0)/(s|0)|0;w=Ty()|0;a:do if(C|0){x=(d|0)<1;y=d<<1;z=(n|0)==0;j=w;p=w-v|0;k=0;m=0;do{o=(j-p|0)>>>0<v>>>0;if(o|x){p=o?p:j;m=o?m:y}else{o=0;do{if(!((c[h+(o<<2)>>2]|0)!=0|z)){p=e+(o<<2)|0;q=f+(o<<2)|0;m=0;do{xy(A,c[p>>2]|0,c[q>>2]|0,16384,G+(m*28|0)|0,B)|0;m=m+1|0}while((m|0)!=(n|0))}o=o+1|0}while((o|0)!=(d|0));p=j;m=y}b:do if((De(D,1,v-j+p|0)|0)>=1?(H=g+(k<<2)|0,I=c[H>>2]|0,c[E>>2]=B,I=wy(A,I,i,0,F,E)|0,(I|0)>-1):0){o=I;q=H;do{u=q;c:while(1){t=(k|0)<(d|0);d:while(1){do if((o|0)>=4){e:do if(z)q=0;else{q=0;do{if(!(ef(G+(q*28|0)|0,F,B)|0))break e;q=q+1|0}while(q>>>0<n>>>0)}while(0);if((q|0)!=(n|0)){f:do if(t){s=c[u>>2]|0;j=a[s>>0]|0;s=s+1|0;r=k;do{L=c[e+(r<<2)>>2]|0;if(j<<24>>24==(a[L>>0]|0)?(a[s>>0]|0)==(a[L+1>>0]|0):0)break f;r=r+1|0}while((r|0)<(d|0))}else r=k;while(0);if((r|0)==(d|0))break;s=h+(r<<2)|0;if(!(c[s>>2]|0))break d}}while(0);o=c[u>>2]|0;c[E>>2]=B;o=wy(A,o,i,0,F,E)|0;if((o|0)<=-1)break b}j=c[u>>2]|0;switch(a[j+3>>0]&15){case 2:{J=47;break c}case 3:case 0:break;default:break c}c[s>>2]=o;g:do if((r|0)==(k|0)){if(t)do{if(!(c[h+(k<<2)>>2]|0))break g;k=k+1|0}while((k|0)<(d|0))}else bD(c[g+(r<<2)>>2]|0,j|0,o|0)|0;while(0);if((k|0)==(d|0))break a;u=g+(k<<2)|0;o=c[u>>2]|0;c[E>>2]=B;o=wy(A,o,i,0,F,E)|0;if((o|0)<=-1)break b}if((J|0)==47){J=0;if(!m)m=0;else{xy(A,c[e+(r<<2)>>2]|0,c[f+(r<<2)>>2]|0,16384,G+(q*28|0)|0,B)|0;m=m+-1|0}}q=g+(k<<2)|0;o=c[q>>2]|0;c[E>>2]=B;o=wy(A,o,i,0,F,E)|0}while((o|0)>-1)}while(0);j=Ty()|0}while((j-w|0)>>>0<C>>>0)}while(0);Mc(1);k=0}else k=-1;l=K;return k|0}function Py(a){a=a|0;return Uy(a)|0}function Qy(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0;e=l;l=l+32|0;f=e;g=e+8|0;c[g>>2]=a;c[g+4>>2]=b;c[g+8>>2]=d;c[g+12>>2]=0;c[g+16>>2]=0;c[g+20>>2]=0;c[f>>2]=2;c[f+4>>2]=g;d=Wd(ma(102,f|0)|0)|0;l=e;return d|0}function Ry(a){a=a|0;var b=0,d=0;b=l;l=l+16|0;d=b;c[d>>2]=a;Yb(6,d|0)|0;l=b;return}function Sy(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,i=0;g=l;l=l+32|0;h=g;i=g+8|0;c[i>>2]=a;c[i+4>>2]=b;c[i+8>>2]=d;c[i+12>>2]=e;c[i+16>>2]=f;c[i+20>>2]=0;c[h>>2]=14;c[h+4>>2]=i;f=Wd(ma(102,h|0)|0)|0;l=g;return f|0}function Ty(){var a=0,b=0;b=l;l=l+16|0;a=b;wc(0,a|0)|0;l=b;return ((c[a+4>>2]|0)/1e6|0)+((c[a>>2]|0)*1e3|0)|0}function Uy(a){a=a|0;return $C(a|0)|0}function Vy(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0;h=l;l=l+112|0;g=h;if((Wy(g,0,0)|0)<0)a=-1;else a=Oy(a,b,c,d,e,f,g)|0;l=h;return a|0}function Wy(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,i=0,j=0,k=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0;A=l;l=l+640|0;q=A+256|0;v=A+512|0;w=b+92|0;c[w>>2]=1;x=b+96|0;c[x>>2]=5;y=b+88|0;c[y>>2]=2;j=(d|0)!=0;if(j)a[d>>0]=0;k=su(167267,A+516|0,A,256)|0;do if(k){if(!(ju(q,256,k)|0)){Ow(k)|0;z=47;break}m=q+7|0;n=q+10|0;o=q+11|0;p=q+6|0;f=0;do{a:do if((Tg(q,10)|0)==0?(c[k>>2]&16|0)==0:0)while(1)switch(cw(k)|0){case 10:case -1:break a;default:{}}else z=12;while(0);do if((z|0)==12){z=0;if((Sg(q,167209,7)|0)==0?_f(a[m>>0]|0)|0:0){g=$o(q,167217)|0;if((g|0?(r=g+6|0,uf(a[r>>0]|0)|0):0)?(s=Vf(r,v,10)|0,(c[v>>2]|0)!=(r|0)):0)c[w>>2]=s>>>0<15?s:15;g=$o(q,167224)|0;if((g|0?(t=g+6|0,uf(a[t>>0]|0)|0):0)?(u=Vf(t,v,10)|0,(c[v>>2]|0)!=(t|0)):0)c[y>>2]=u>>>0<10?u:10;g=$o(q,167234)|0;if(!g)break;g=g+8|0;if((uf(a[g>>0]|0)|0)==0?(a[g>>0]|0)!=46:0)break;h=Vf(g,v,10)|0;if((c[v>>2]|0)==(g|0))break;c[x>>2]=h>>>0<60?h:60;break}if((Sg(q,167284,10)|0)==0?_f(a[n>>0]|0)|0:0){if((f|0)>2)break;i=o;while(1)if(!(_f(a[i>>0]|0)|0))break;else i=i+1|0;c[v>>2]=i;g=a[i>>0]|0;b:do if(!(g<<24>>24))g=i;else{h=i;while(1){if(_f(g<<24>>24)|0){g=h;break b}h=h+1|0;c[v>>2]=h;g=a[h>>0]|0;if(!(g<<24>>24)){g=h;break}}}while(0);a[g>>0]=0;f=f+((Xy(b+(f*28|0)|0,i,0)|0)>0&1)|0;break}if(j){if(Sg(q,167243,6)|0?Sg(q,167250,6)|0:0)break;if(_f(a[p>>0]|0)|0){g=m;while(1)if(!(_f(a[g>>0]|0)|0))break;else g=g+1|0;h=df(g)|0;if(h>>>0<e>>>0)bD(d|0,g|0,h+1|0)|0}}}while(0)}while((ju(q,256,k)|0)!=0);Ow(k)|0;if(!f)z=47;else z=48}else switch(c[(Xd()|0)>>2]|0){case 13:case 20:case 2:{z=47;break}default:f=-1}while(0);if((z|0)==47){Xy(b,167257,0)|0;f=1;z=48}if((z|0)==48){c[b+84>>2]=f;f=0}l=A;return f|0}function Xy(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,i=0,j=0,k=0,m=0;m=l;l=l+96|0;f=m+88|0;k=m+72|0;i=m;j=m+64|0;if((Yy(d,f)|0)>0)if((e|0)==10)d=-2;else{bD(b+8|0,f|0,4)|0;c[b>>2]=2;c[b+4>>2]=0;d=1}else{f=Tg(d,37)|0;g=(f|0)!=0;if(g?(h=f-d|0,(h|0)<64):0){bD(i|0,d|0,h|0)|0;a[i+h>>0]=0;d=i}a:do if((Zy(10,d,k)|0)>=1)if((e|0)==2)d=-2;else{bD(b+8|0,k|0,16)|0;c[b>>2]=10;do if(g){h=f+1|0;if(!(uf(a[h>>0]|0)|0)){c[j>>2]=f;g=0;d=0}else{d=fk(h,j,10)|0;f=c[j>>2]|0;g=y}if(!(a[f>>0]|0))if(g>>>0>0|(g|0)==0&d>>>0>4294967295){d=-2;break a}else break;switch(a[k>>0]|0){case -2:{if((a[k+1>>0]&-64)<<24>>24!=-128){d=-2;break a}break}case -1:{if((a[k+1>>0]&15)!=2){d=-2;break a}break}default:{d=-2;break a}}d=_y(h)|0;if(!d){d=-2;break a}}else d=0;while(0);c[b+4>>2]=d;d=1}else d=0;while(0)}l=m;return d|0}function Yy(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0;j=l;l=l+32|0;i=j;g=j+16|0;c[i>>2]=0;c[i+4>>2]=0;c[i+8>>2]=0;c[i+12>>2]=0;e=0;a:while(1){c[i+(e<<2)>>2]=Vf(b,g,0)|0;f=c[g>>2]|0;if((f|0)==(b|0)){b=0;break}switch(a[f>>0]|0){case 46:case 0:break;default:{b=0;break a}}if(!(uf(a[b>>0]|0)|0)){b=0;break}if(!(a[f>>0]|0)){h=7;break}e=e+1|0;if(e>>>0<4)b=f+1|0;else{b=0;break}}b:do if((h|0)==7){switch(e&2147483647|0){case 0:{h=c[i>>2]|0;e=h&16777215;b=i+4|0;c[b>>2]=e;c[i>>2]=h>>>24;h=11;break}case 1:{e=i+4|0;b=e;e=c[e>>2]|0;h=11;break}case 2:{e=i+8|0;b=e;e=c[e>>2]|0;h=12;break}default:{}}if((h|0)==11){g=e&65535;f=i+8|0;c[f>>2]=g;c[b>>2]=e>>>16;b=f;e=g;h=12}if((h|0)==12){c[i+12>>2]=e&255;c[b>>2]=e>>>8}b=0;while(1){e=c[i+(b<<2)>>2]|0;if(e>>>0>255){b=0;break b}a[d+b>>0]=e;b=b+1|0;if(b>>>0>=4){b=1;break}}}while(0);l=j;return b|0}function Zy(d,f,g){d=d|0;f=f|0;g=g|0;var h=0,i=0,j=0,k=0,m=0,n=0,o=0,p=0,q=0;q=l;l=l+16|0;p=q;a:do switch(d|0){case 2:{j=0;i=f;while(1){f=0;h=0;while(1){d=i+h|0;if(!(uf(a[d>>0]|0)|0)){d=h;break}f=(f*10|0)+-48+(a[d>>0]|0)|0;h=h+1|0;if(h>>>0>=3){d=3;break}}switch(d&2147483647|0){case 0:{f=0;break a}case 1:{if((f|0)>255){f=0;break a}break}default:if((f|0)>255|(a[i>>0]|0)==48){f=0;break a}}a[g+j>>0]=f;f=a[i+d>>0]|0;if((j|0)==3&f<<24>>24==0){f=1;break a}if(f<<24>>24!=46){f=0;break a}j=j+1|0;if(j>>>0>=4){f=0;break a}else i=i+(d+1)|0}}case 10:{d=a[f>>0]|0;if(d<<24>>24==58){f=f+1|0;if((a[f>>0]|0)==58)d=58;else{f=0;break a}}h=-1;m=0;b:while(1){k=(h|0)<0;if(k&d<<24>>24==58){b[p+((m&7)<<1)>>1]=0;f=f+1|0;d=a[f>>0]|0;if(!(d<<24>>24)){i=0;h=m;d=m;break}if((m|0)==7){f=0;break a}else h=m}else{j=$y(d<<24>>24)|0;c:do if((j|0)>-1){d=0;i=0;while(1){d=j+(d<<4)|0;i=i+1|0;if(i>>>0>=4)break c;j=$y(a[f+i>>0]|0)|0;if((j|0)<=-1){o=23;break}}}else{d=0;i=0;o=23}while(0);if((o|0)==23){o=0;if(!i){f=0;break a}}b[p+((m&7)<<1)>>1]=d;d=a[f+i>>0]|0;if(!(d<<24>>24)){o=25;break}if((m|0)==7){f=0;break a}switch(d<<24>>24){case 46:{o=28;break b}case 58:break;default:{f=0;break a}}d=f+(i+1)|0;f=d;d=a[d>>0]|0}m=m+1|0}if((o|0)==25)if((m|0)==7|(h|0)>-1){i=0;d=m}else{f=0;break a}else if((o|0)==28){if(m>>>0<6&k){f=0;break a}i=1;d=m+1|0}if((h|0)>-1?(n=p+(h<<1)|0,cD(n+14+(0-d<<1)|0,n|0,d+1-h<<1|0)|0,(d|0)<7):0)dD(n|0,0,14-(d<<1)|0)|0;d=g;h=0;while(1){o=p+(h<<1)|0;a[d>>0]=(e[o>>1]|0)>>>8;a[d+1>>0]=b[o>>1];h=h+1|0;if((h|0)==8)break;else d=d+2|0}if(i|0?(Zy(2,f,g+12|0)|0)<1:0){f=0;break a}f=1;break}default:{c[(Xd()|0)>>2]=97;f=-1}}while(0);l=q;return f|0}function _y(a){a=a|0;var b=0,d=0,e=0,f=0,g=0;g=l;l=l+48|0;f=g+8|0;e=g;b=g+16|0;d=sy(1,524290,0)|0;if((d|0)<0)a=0;else{$p(b,a,16)|0;c[e>>2]=b;a=zn(d,35123,e)|0;c[f>>2]=d;Yb(6,f|0)|0;a=(a|0)<0?0:c[b+16>>2]|0}l=g;return a|0}function $y(a){a=a|0;var b=0;b=a+-48|0;if(b>>>0<10)return b|0;else{b=a|32;return ((b+-97|0)>>>0<6?b+-87|0:-1)|0}return 0}function az(e,f,g,h){e=e|0;f=f|0;g=g|0;h=h|0;var i=0,j=0,k=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0;M=l;l=l+896|0;m=M+764|0;n=M+448|0;t=M+384|0;J=M+736|0;K=M+288|0;L=M;k=M+728|0;C=M+720|0;v=M+712|0;u=M+708|0;F=M+704|0;G=Xc(0)|0;c[J>>2]=c[42910];c[J+4>>2]=c[42911];c[J+8>>2]=c[42912];c[J+12>>2]=c[42913];c[J+16>>2]=c[42914];c[J+20>>2]=c[42915];c[J+24>>2]=c[42916];i=K;j=i+84|0;do{c[i>>2]=0;i=i+4|0}while((i|0)<(j|0));dD(L|0,0,280)|0;Oc(1,v|0)|0;a:do if(((df(f)|0)+-1|0)>>>0>253)f=-2;else{a[L+5>>0]=1;a[L+2>>0]=1;B=L+13|0;mh(B,f)|0;if(!(a[B>>0]|0))f=13;else{f=13;do{i=f;b:while(1){switch(a[L+i>>0]|0){case 46:case 0:break b;default:{}}i=i+1|0}j=i-f|0;if((j+-1|0)>>>0>62){f=-2;break a}a[L+(f+-1)>>0]=j;f=i+1|0}while((a[L+f>>0]|0)!=0)}a[L+(f+3)>>0]=1;B=f+4|0;wc(0,k|0)|0;z=c[k+4>>2]|0;z=(z>>>16)+z|0;A=z&65535;s=su(167267,m,n,256)|0;do if(s){p=t+10|0;q=t+11|0;i=2;o=0;r=16;c:while(1){n=K+(o*28|0)|0;if(!(ju(t,64,s)|0)){y=25;break}while(1){if((Sg(t,167284,10)|0)==0?_f(a[p>>0]|0)|0:0){m=q;while(1)if(!(_f(a[m>>0]|0)|0))break;else m=m+1|0;k=a[m>>0]|0;d:do if(!(k<<24>>24))j=m;else{j=m;do{if(_f(k<<24>>24)|0)break d;j=j+1|0;k=a[j>>0]|0}while(k<<24>>24!=0)}while(0);a[j>>0]=0;if((bz(n,0,m)|0)>=0)break}if(!(ju(t,64,s)|0)){y=25;break c}}b[K+(o*28|0)+2>>1]=Py(53)|0;j=o+1|0;y=(b[K+(o*28|0)>>1]|0)==10;k=y?28:r;i=y?10:i;if(j>>>0<3){o=j;r=k}else{y=24;break}}if((y|0)==24){Ow(s)|0;o=j;r=k;break}else if((y|0)==25){Ow(s)|0;if(!o){y=26;break}else break}}else y=26;while(0);if((y|0)==26){b[K>>1]=2;b[K+2>>1]=Py(53)|0;c[K+4>>2]=cz(2130706433)|0;o=1;i=2;r=16}b[J>>1]=i;k=sy(i,526338,0)|0;if((k|0)<0){if(!((i|0)==10&(c[(Xd()|0)>>2]|0)==97)){f=-11;break}i=sy(2,526338,0)|0;if((i|0)<0){f=-11;break}else k=i}else if((i|0)==10?(c[u>>2]=0,Sy(k,41,26,u,4)|0,(o|0)>0):0){i=0;do{j=K+(i*28|0)|0;if((b[j>>1]|0)==2){x=K+(i*28|0)+4|0;bD(K+(i*28|0)+20|0,x|0,4)|0;bD(K+(i*28|0)+8|0,167437,12)|0;b[j>>1]=10;c[x>>2]=0;c[K+(i*28|0)+24>>2]=0}i=i+1|0}while((i|0)!=(o|0))}Nc(3,k|0);Oc(c[v>>2]|0,0)|0;do if((Qy(k,J,r)|0)>=0){c[C>>2]=k;b[C+4>>1]=1;if(((Xc(0)|0)-G|0)>=5){Mc(1);f=-3;break}v=(h|0)>0;w=(o|0)<1;x=L+1|0;s=L+(f+1)|0;t=(o|0)>0;u=(o|0)==1;i=-3;p=0;f=0;q=e;e:while(1){while(1){if(v){m=0;do{n=g+(m<<2)|0;j=c[n>>2]|0;if(!((j|0)==0|w)?(E=m+A|0,D=E>>>8&255,E=E&255,a[L>>0]=D,a[x>>0]=E,a[s>>0]=j,xy(k,L,B,16384,K,r)|0,!u):0){j=1;do{e=c[n>>2]|0;a[L>>0]=D;a[x>>0]=E;a[s>>0]=e;xy(k,L,B,16384,K+(j*28|0)|0,r)|0;j=j+1|0}while((j|0)!=(o|0))}m=m+1|0}while((m|0)!=(h|0))}if((De(C,1,1e3)|0)>=1)break;if(((Xc(0)|0)-G|0)>=5)break e}j=p+f|0;f:do if((j|0)<(h|0))while(1){n=q+1|0;c[F>>2]=r;if((wy(k,q,512,0,J,F)|0)<=1){m=p;n=q;break f}while(1){g:do if(t){m=0;do{if(!(ef(K+(m*28|0)|0,J,r)|0))break g;m=m+1|0}while((m|0)<(o|0))}else m=0;while(0);if(((m|0)!=(o|0)?(H=(d[q>>0]<<8|d[n>>0])-z&65535,H>>>0<h>>>0):0)?(I=g+(H<<2)|0,c[I>>2]|0):0)break;c[F>>2]=r;if((wy(k,q,512,0,J,F)|0)<=1){m=p;n=q;break f}}switch(a[q+3>>0]&15){case 0:{m=p;f=f+1|0;break}case 3:{i=-2;y=67;break}default:{i=-4;y=67}}if((y|0)==67){y=0;m=p+1|0}c[I>>2]=0;n=q+512|0;j=m+f|0;if((j|0)<(h|0)){p=m;q=n}else break f}else{m=p;n=q}while(0);if((j|0)==(h|0))break;if(((Xc(0)|0)-G|0)<5){p=m;q=n}else break}Mc(1);if(!f)f=i;else break a}else{Mc(1);f=-11}while(0)}while(0);l=M;return f|0}function bz(d,e,f){d=d|0;e=e|0;f=f|0;var g=0,h=0,i=0,j=0,k=0,m=0,n=0;n=l;l=l+80|0;k=n;j=n+64|0;g=k;h=g+64|0;do{c[g>>2]=0;g=g+4|0}while((g|0)<(h|0));a:do if((e|0)==10)m=18;else{h=f;g=0;b:while(1){c[k+(g<<2)>>2]=Vf(h,j,0)|0;i=c[j>>2]|0;if((i|0)==(h|0)){m=6;break}switch(a[i>>0]|0){case 46:case 0:break;default:{m=6;break b}}if(!(uf(a[h>>0]|0)|0)){m=6;break}if(!(a[i>>0]|0))break;g=g+1|0;if(g>>>0<4)h=i+1|0;else{g=-1;break a}}if((m|0)==6)if((e|0)==2){g=-1;break}else{m=18;break}switch(g&2147483647|0){case 0:{m=c[k>>2]|0;h=m&16777215;g=k+4|0;c[g>>2]=h;c[k>>2]=m>>>24;m=13;break}case 1:{h=k+4|0;g=h;h=c[h>>2]|0;m=13;break}case 2:{h=k+8|0;g=h;h=c[h>>2]|0;m=14;break}default:{}}if((m|0)==13){j=h&65535;f=k+8|0;c[f>>2]=j;c[g>>2]=h>>>16;g=f;h=j;m=14}if((m|0)==14){c[k+12>>2]=h&255;c[g>>2]=h>>>8}b[d>>1]=2;h=d+4|0;g=0;while(1){i=c[k+(g<<2)>>2]|0;if(i>>>0>255){g=-1;break a}a[h+g>>0]=i;g=g+1|0;if(g>>>0>=4){g=0;break}}}while(0);if((m|0)==18){b[d>>1]=10;g=((Zy(10,f,d+8|0)|0)<1)<<31>>31}l=n;return g|0}function cz(a){a=a|0;return ez(a)|0}function dz(a){a=a|0;wo(a)|0;return}function ez(a){a=a|0;return aD(a|0)|0}function fz(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,i=0;i=l;l=l+96|0;h=i;f=i+80|0;g=(d|0)==10;do if(!e){if(g){c[f>>2]=28;d=1;break}c[f>>2]=1;if((d|0)==2)d=1;else{c[f+4>>2]=28;d=2}}else{if(g)gz(h,b);else hz(h,b);c[f>>2]=12;d=1;b=h}while(0);a=az(a,b,f,d)|0;l=i;return a|0}function gz(b,c){b=b|0;c=c|0;var e=0,f=0,g=0;e=b;f=15;while(1){g=c+f|0;a[e>>0]=a[152384+(a[g>>0]&15)>>0]|0;a[e+1>>0]=46;a[e+2>>0]=a[152384+((d[g>>0]|0)>>>4)>>0]|0;a[e+3>>0]=46;if(!f)break;else{e=e+4|0;f=f+-1|0}}mh(b+64|0,167320)|0;return}function hz(a,b){a=a|0;b=b|0;var e=0,f=0,g=0,h=0,i=0;e=l;l=l+16|0;f=e;i=d[b+2>>0]|0;h=d[b+1>>0]|0;g=d[b>>0]|0;c[f>>2]=d[b+3>>0];c[f+4>>2]=i;c[f+8>>2]=h;c[f+12>>2]=g;Oj(a,167295,f)|0;l=e;return}function iz(b,c,e,f,g,h,i){b=b|0;c=c|0;e=e|0;f=f|0;g=g|0;h=h|0;i=i|0;var j=0,k=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0;t=l;l=l+256|0;s=t;a:do if(!(a[g+3>>0]&15)){k=d[g+4>>0]<<8|d[g+5>>0];p=d[g+6>>0]<<8|d[g+7>>0];if((p+k|0)>>>0<=64){if(!k)n=12;else{j=12;while(1){k=k+-1|0;n=g+j|0;m=a[n>>0]|0;b:do if((j|0)<512){o=j;while(1){if(((m&255)+-1|0)>>>0>=127){j=o;break b}j=o+1|0;n=g+j|0;m=a[n>>0]|0;if((o|0)<511)o=j;else break}}while(0);if((m&255)>193){j=-1;break a}if(m<<24>>24==-63){if((j|0)>506|(a[n+1>>0]|0)==-1){j=-1;break a}}else if((j|0)>506){j=-1;break a}j=(m<<24>>24==0?5:6)+j|0;if(!k){n=j;break}}}if(!p)j=0;else{r=g+512|0;q=(i|0)!=0;j=0;k=b;m=f;o=n;f=p;while(1){f=f+-1|0;i=g+o|0;n=a[i>>0]|0;c:do if((o|0)<512){b=o;while(1){if(((n&255)+-1|0)>>>0>=127){o=b;break c}o=b+1|0;i=g+o|0;n=a[i>>0]|0;if((b|0)<511)b=o;else break}}while(0);if((n&255)>193){j=-1;break a}if(n<<24>>24==-63){if((o|0)>506|(a[i+1>>0]|0)==-1){j=-1;break a}}else if((o|0)>506){j=-1;break a}i=(n<<24>>24==0?1:2)+o|0;n=g+i|0;o=d[n+8>>0]<<8|d[n+9>>0];i=o+i|0;if((i|0)>512){j=-1;break a}if(!(o>>>0>e>>>0?1:(d[n+1>>0]|0)!=(h|0))){if(q?(Ly(g,r,n+10|0,s,256)|0)<0:0){j=-1;break a}if((m|0)!=0&(k|0)!=0){if(q)mh(k,s)|0;else bD(k|0,n+10|0,o|0)|0;k=k+c|0;m=m+-1|0}j=j+1|0}if(!f)break;else o=i+10|0}}}else j=-1}else j=0;while(0);l=t;return j|0}function jz(a,b){a=a|0;b=b|0;var d=0,e=0,f=0;a:do if(!b)d=0;else{d=0;while(1){b=b+-1|0;f=0;while(1){e=iz(0,0,c[152416+(f<<3)>>2]|0,-1,a,c[152416+(f<<3)+4>>2]|0,0)|0;if((e|0)<0){d=e;break a}d=e+d|0;if((f+1|0)>>>0>=2)break;else f=1}if(!b)break;else a=a+512|0}}while(0);return d|0}function kz(b,e,f,g){b=b|0;e=e|0;f=f|0;g=g|0;var h=0,i=0,j=0,k=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0;s=l;l=l+192|0;o=s+152|0;p=s+120|0;h=s+104|0;q=s;switch(b|0){case 2:{o=d[e+1>>0]|0;p=d[e+2>>0]|0;q=d[e+3>>0]|0;c[h>>2]=d[e>>0];c[h+4>>2]=o;c[h+8>>2]=p;c[h+12>>2]=q;if((sh(f,g,167386,h)|0)>>>0>=g>>>0)r=16;break}case 10:{t=(ef(e,167437,12)|0)==0;b=(d[e>>0]|0)<<8|(d[e+1>>0]|0);h=(d[e+2>>0]|0)<<8|(d[e+3>>0]|0);i=(d[e+4>>0]|0)<<8|(d[e+5>>0]|0);j=(d[e+6>>0]|0)<<8|(d[e+7>>0]|0);k=(d[e+8>>0]|0)<<8|(d[e+9>>0]|0);m=(d[e+10>>0]|0)<<8|(d[e+11>>0]|0);n=d[e+12>>0]|0;if(t){u=d[e+13>>0]|0;p=d[e+14>>0]|0;t=d[e+15>>0]|0;c[o>>2]=b;c[o+4>>2]=h;c[o+8>>2]=i;c[o+12>>2]=j;c[o+16>>2]=k;c[o+20>>2]=m;c[o+24>>2]=n;c[o+28>>2]=u;c[o+32>>2]=p;c[o+36>>2]=t;sh(q,100,167353,o)|0}else{t=n<<8|(d[e+13>>0]|0);u=(d[e+14>>0]|0)<<8|(d[e+15>>0]|0);c[p>>2]=b;c[p+4>>2]=h;c[p+8>>2]=i;c[p+12>>2]=j;c[p+16>>2]=k;c[p+20>>2]=m;c[p+24>>2]=t;c[p+28>>2]=u;sh(q,100,167329,p)|0}b=a[q>>0]|0;if(b<<24>>24){i=2;m=0;h=0;k=q;while(1){if((m|0)==0|b<<24>>24==58){u=Pj(k,167383)|0;t=(u|0)>(i|0);h=t?m:h;i=t?u:i}j=m+1|0;k=q+j|0;b=a[k>>0]|0;if(!(b<<24>>24))break;else m=j}b=q+h|0;if((i|0)>2){a[q+(h+1)>>0]=58;a[b>>0]=58;cD(b+2|0,b+i|0,m+2-i-h|0)|0}}if((df(q)|0)>>>0<g>>>0)mh(f,q)|0;else r=16;break}default:{c[(Xd()|0)>>2]=97;f=0}}if((r|0)==16){c[(Xd()|0)>>2]=28;f=0}l=s;return f|0}function lz(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0;e=l;l=l+32|0;f=e;g=e+8|0;c[g>>2]=a;c[g+4>>2]=b;c[g+8>>2]=d;c[g+12>>2]=0;c[g+16>>2]=0;c[g+20>>2]=0;c[f>>2]=5;c[f+4>>2]=g;d=Wd(ma(102,f|0)|0)|0;l=e;return d|0}function mz(){return}function nz(a){a=a|0;return}function oz(){return 0}function pz(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0;h=l;l=l+48|0;g=h+8|0;f=h;d=h+16|0;e=sy(1,524290,0)|0;if((e|0)>=0?(c[d+16>>2]=a,c[f>>2]=d,f=zn(e,35088,f)|0,c[g>>2]=e,Yb(6,g|0)|0,(f|0)>=0):0)$p(b,d,16)|0;else b=0;l=h;return b|0}function qz(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,i=0,j=0;j=l;l=l+64|0;i=j+24|0;h=j+8|0;g=j;f=j+40|0;do if(e){c[f>>2]=a;c[f+4>>2]=b;c[f+8>>2]=d;c[f+12>>2]=e;c[f+16>>2]=0;c[f+20>>2]=0;c[g>>2]=18;c[g+4>>2]=f;f=Wd(ma(102,g|0)|0)|0;if((f|0)<=-1){if((c[(Xd()|0)>>2]|0)!=38?(c[(Xd()|0)>>2]|0)!=22:0)break;f=lz(a,b,d)|0;if((f|0)>=0){if(e&524288|0){c[h>>2]=f;c[h+4>>2]=2;c[h+8>>2]=1;jb(221,h|0)|0}if(e&2048){c[i>>2]=f;c[i+4>>2]=4;c[i+8>>2]=2048;jb(221,i|0)|0}}}}else f=lz(a,b,d)|0;while(0);l=j;return f|0}function rz(a){a=a|0;var b=0,e=0,f=0,g=0,h=0;b=l;l=l+16|0;e=b;h=d[a+1>>0]|0;g=d[a+2>>0]|0;f=d[a+3>>0]|0;c[e>>2]=d[a>>0];c[e+4>>2]=h;c[e+8>>2]=g;c[e+12>>2]=f;sh(170368,16,167386,e)|0;l=b;return 170368}function sz(b,d,e,f,g){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0,i=0,j=0,k=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0;t=l;l=l+144|0;p=t+128|0;r=t;h=Vg(b,255)|0;i=h+-1|0;if(!h)q=0;else q=(a[b+i>>0]|0)==46?i:h;do if(!((e|0)<1|q>>>0>253)){if(!q){a[d>>0]=0;h=1;break}n=b+q|0;o=tz(r,b,q)|0;if(o){s=(f|0)!=0;a:do if(s){k=c[f>>2]|0;if(k){i=f+4|0;j=c[i>>2]|0;if(!j){n=0;m=0}else{h=0;m=0;while(1){j=uz(p,k,j,n,r,o)|0;if((j|0)>(m|0)){h=c[p>>2]|0;if((j|0)==(q|0)){n=h;m=q;break a}else m=j}i=i+4|0;j=c[i>>2]|0;if(!j){n=h;break a}k=c[f>>2]|0}}}else{i=f;n=0;m=0}}else{i=0;n=0;m=0}while(0);k=q-m|0;if((k+2+((m+-1|0)>>>0<(q+-1|0)>>>0&1)|0)>>>0<=e>>>0){bD(d+1|0,b|0,k|0)|0;if(!k)j=0;else{j=0;h=0;while(1){e=a[r+h>>0]|0;a[d+j>>0]=e;j=j+1+(e&255)|0;if(j>>>0<k>>>0)h=h+1|0;else break}}if(!m){k=j;h=0}else{k=j+1|0;a[d+k>>0]=n;h=(n>>>8|192)&255}a[d+j>>0]=h;h=k+1|0;if(s&((g|0)!=0&(k|0)>1)?(c[f>>2]|0)!=0:0){while(1){j=i+4|0;if(!(c[i>>2]|0))break;else i=j}if(j>>>0<g>>>0){c[i>>2]=d;c[j>>2]=0}}}else h=-1}else h=-1}else h=-1;while(0);l=t;return h|0}function tz(b,c,d){b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0;f=0;h=0;while(1){a:do if((f|0)<(d|0)){e=f;while(1){if((a[c+e>>0]|0)==46){g=e;break a}e=e+1|0;if((e|0)>=(d|0)){g=e;break}}}else g=f;while(0);f=g-f|0;if((f+-1|0)>>>0>62){e=0;break}e=h+1|0;a[b+h>>0]=f;if((g|0)==(d|0))break;else{f=g+1|0;h=e}}return e|0}function uz(d,e,f,g,h,i){d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;i=i|0;var j=0,k=0,m=0,n=0,o=0,p=0,q=0;q=l;l=l+256|0;p=q;f=vz(p,e,f)|0;a:do if((f|0)!=0?(k=i+-1|0,o=a[h+k>>0]|0,j=o&255,m=f+-1|0,n=b[p+(m<<1)>>1]|0,o<<24>>24==(a[e+n>>0]|0)):0){f=0;o=g+(0-j)|0;g=m;i=n;while(1){if(ef(e+i+1|0,o,j)|0)break a;c[d>>2]=i;n=(k|0)!=0;f=f+(n&1)+j|0;if(!(n&(g|0)!=0))break a;k=k+-1|0;n=a[h+k>>0]|0;j=n&255;g=g+-1|0;i=b[p+(g<<1)>>1]|0;if(n<<24>>24!=(a[e+i>>0]|0))break;else o=o+-1+(0-j)|0}}else f=0;while(0);l=q;return f|0}function vz(c,e,f){c=c|0;e=e|0;f=f|0;var g=0,h=0,i=0,j=0;j=e;g=0;a:while(1){b:while(1){h=a[f>>0]|0;i=h&255;switch((i&192)<<24>>24){case 0:break b;case -64:break;default:{g=0;break a}}f=e+(i<<8&16128|(d[f+1>>0]|0))|0}if(!(h<<24>>24))break;h=f-j|0;if((h|0)>16383){g=0;break}b[c+(g<<1)>>1]=h;g=g+1|0;f=f+((d[f>>0]|0)+1)|0}return g|0}function wz(a){a=a|0;return xz(a)|0}function xz(a){a=a|0;return aD(a|0)|0}function yz(b,c,e,f){b=b|0;c=c|0;e=e|0;f=f|0;var g=0,h=0,i=0,j=0,k=0,l=0,m=0;a:do if((c|0)>=12)if(!(a[b+3>>0]&15)){h=d[b+4>>0]<<8|d[b+5>>0];m=d[b+6>>0]<<8|d[b+7>>0];if((m+h|0)>>>0<=64){g=b+12|0;if(h){j=b;k=b+c+-6|0;i=h;do{i=i+-1|0;h=a[g>>0]|0;b:do if((g-j|0)<(c|0))do{if(((h&255)+-1|0)>>>0>=127)break b;g=g+1|0;h=a[g>>0]|0}while((g-j|0)<(c|0));while(0);if((h&255)>193){g=-1;break a}if(h<<24>>24==-63){if((a[g+1>>0]|0)==-1|g>>>0>k>>>0){g=-1;break a}}else if(g>>>0>k>>>0){g=-1;break a}g=g+(h<<24>>24==0?5:6)|0}while((i|0)!=0)}if(!m)g=0;else{j=b;k=b+c|0;l=k+-6|0;i=m;while(1){i=i+-1|0;h=a[g>>0]|0;c:do if((g-j|0)<(c|0))do{if(((h&255)+-1|0)>>>0>=127)break c;g=g+1|0;h=a[g>>0]|0}while((g-j|0)<(c|0));while(0);if((h&255)>193){g=-1;break a}if(h<<24>>24==-63){if((a[g+1>>0]|0)==-1|g>>>0>l>>>0){g=-1;break a}}else if(g>>>0>l>>>0){g=-1;break a}g=g+(h<<24>>24==0?1:2)|0;h=d[g+8>>0]<<8|d[g+9>>0];if((g+h|0)>>>0>k>>>0){g=-1;break a}if((fd[e&3](f,d[g+1>>0]|0,g+10|0,h,b)|0)<0){g=-1;break a}if(!i){g=0;break}else g=g+(h+10)|0}}}else g=-1}else g=0;else g=-1;while(0);return g|0}function zz(a,b){a=a|0;b=b|0;return 0}function Az(a){a=a|0;return 0}function Bz(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0;g=l;l=l+32|0;h=g;c[h>>2]=a;c[h+4>>2]=b;c[h+8>>2]=d;c[h+12>>2]=e;c[h+16>>2]=f;f=Wd(Jb(337,h|0)|0)|0;l=g;return f|0}function Cz(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0;e=l;l=l+32|0;f=e;g=e+8|0;c[g>>2]=a;c[g+4>>2]=b;c[g+8>>2]=d;c[g+12>>2]=0;c[g+16>>2]=0;c[g+20>>2]=0;c[f>>2]=17;c[f+4>>2]=g;d=Wd(ma(102,f|0)|0)|0;l=e;return d|0}function Dz(a,b){a=a|0;b=b|0;var c=0;c=l;l=l+16|0;b=(Ez(a,b,171668,170384,32,c)|0)==0;l=c;return (b?171668:0)|0}function Ez(a,d,e,f,g,h){a=a|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var i=0,j=0,k=0,m=0;m=l;l=l+16|0;k=m;b[k>>1]=2;b[k+2>>1]=a;c[k+4>>2]=0;j=k+8|0;c[j>>2]=0;c[j+4>>2]=0;a:do if(!d)if(!(Ez(a,167398,e,f,g,h)|0))i=0;else i=Ez(a,167402,e,f,g,h)|0;else{i=f&3;i=(i|0)==0?4:i;if((12-i|0)>>>0>g>>>0)i=34;else{j=4-i|0;i=f+j|0;if(Ef(d,167398)|0?Ef(d,167402)|0:0){i=22;break}c[e+8>>2]=a;c[e+12>>2]=d;f=e+4|0;c[f>>2]=i;a=i+8|0;c[i+4>>2]=0;c[e>>2]=a;c[c[f>>2]>>2]=a;d=(Ef(d,167402)|0)==0;switch(Fc(k|0,16,0,0,a|0,g+-8-j|0,(d?16:0)|0)|0){case -11:case -10:{i=12;break a}case 0:{c[h>>2]=e;i=0;break a}default:{i=2;break a}}}}while(0);l=m;return i|0}function Fz(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,i=0,j=0,k=0,m=0,n=0,o=0,p=0;o=l;l=l+128|0;m=o+64|0;k=o+48|0;j=o+32|0;n=o+16|0;i=o+8|0;f=o;p=o+104|0;g=o+80|0;c[p>>2]=a;c[p+4>>2]=b;c[p+8>>2]=d;h=e;c[p+12>>2]=h;c[p+16>>2]=0;c[p+20>>2]=0;c[f>>2]=8;c[f+4>>2]=p;f=Wd(ma(102,f|0)|0)|0;do if((f|0)<0){if((c[(Xd()|0)>>2]|0)==22){if(!(b&526336))break}else if((b&526336|0)==0|(c[(Xd()|0)>>2]|0)!=93)break;c[g>>2]=a;c[g+4>>2]=b&-526337;c[g+8>>2]=d;c[g+12>>2]=h;c[g+16>>2]=0;c[g+20>>2]=0;c[i>>2]=8;c[i+4>>2]=g;f=Wd(ma(102,i|0)|0)|0;if((f|0)>=0){if(b&524288|0){c[n>>2]=c[e>>2];c[n+4>>2]=2;c[n+8>>2]=1;jb(221,n|0)|0;c[j>>2]=c[e+4>>2];c[j+4>>2]=2;c[j+8>>2]=1;jb(221,j|0)|0}if(b&2048){c[k>>2]=c[e>>2];c[k+4>>2]=4;c[k+8>>2]=2048;jb(221,k|0)|0;c[m>>2]=c[e+4>>2];c[m+4>>2]=4;c[m+8>>2]=2048;jb(221,m|0)|0}}}while(0);l=o;return f|0}function Gz(){return 171684}function Hz(b,d,e,f,g,h,i,j,k){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;i=i|0;j=j|0;k=k|0;var m=0,n=0,o=0,p=0;p=l;l=l+288|0;o=p;n=p+280|0;g=Vg(d,255)|0;h=g+-1|0;if(g){g=(a[d+h>>0]|0)==46?h:g;if(g>>>0>253)g=-1;else{h=g;g=g+17+((g|0)!=0&1)|0;m=3}}else{h=0;g=17;m=3}a:do if((m|0)==3)if((f|e)>>>0>255|(b>>>0>15|(g|0)>(k|0)))g=-1;else{dD(o|0,0,g|0)|0;a[o+2>>0]=b<<3|1;a[o+5>>0]=1;m=o+13|0;bD(m|0,d|0,h|0)|0;if(!(a[m>>0]|0))h=13;else{h=13;do{i=h;b:while(1){switch(a[o+i>>0]|0){case 46:case 0:break b;default:{}}i=i+1|0}b=i-h|0;if((b+-1|0)>>>0>62){g=-1;break a}a[o+(h+-1)>>0]=b;h=i+1|0}while((a[o+h>>0]|0)!=0)}a[o+(h+1)>>0]=f;a[o+(h+3)>>0]=e;wc(0,n|0)|0;f=c[n+4>>2]|0;f=(f>>>16)+f|0;a[o>>0]=f>>>8;a[o+1>>0]=f;bD(j|0,o|0,g|0)|0}while(0);l=p;return g|0}function Iz(d,e,f,g,h,i){d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;i=i|0;var j=0,k=0,m=0;m=l;l=l+16|0;k=m;j=0-g&3;do if((j|8)>>>0<=h>>>0){h=g+j|0;if(e)if(Ef(e,167398)|0)if(!(Ef(e,167402)|0))g=17;else{g=22;break}else g=6;else g=0;g=Jz(k,d,g,0,0)|0;if((g|0)<0){g=(g+11|0)>>>0<2?12:2;break}else{c[f>>2]=d;g=f+4|0;c[g>>2]=h;c[h>>2]=d;c[(c[g>>2]|0)+4>>2]=0;c[f+8>>2]=(Py(b[k>>1]|0)|0)&65535;c[f+12>>2]=(a[k+2>>0]|0)==6?167398:167402;c[i>>2]=f;g=0;break}}else g=34;while(0);l=m;return g|0}function Jz(d,e,f,g,h){d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var i=0,j=0,k=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0;s=l;l=l+1296|0;o=s+1040|0;p=s+1292|0;i=s;j=s+1168|0;c[p>>2]=172411;switch(g|0){case 1:{switch(f|0){case 6:case 0:{k=6;r=6;break}default:f=-8}break}case 2:{switch(f|0){case 17:case 0:{k=17;r=6;break}default:f=-8}break}case 0:{k=f;r=6;break}default:if(!e){b[d>>1]=0;a[d+2>>0]=f;a[d+3>>0]=g;f=1}else f=-8}do if((r|0)==6){if(!e){f=0;g=172411}else{if(!(a[e>>0]|0)){f=-8;break}f=Vf(e,p,10)|0;g=c[p>>2]|0}if(!(a[g>>0]|0)){if(f>>>0>65535){f=-8;break}if((k|0)!=17){f=f&65535;b[d>>1]=f;a[d+3>>0]=1;a[d+2>>0]=6;if((k|0)==6){f=1;break}else{h=f;f=2;i=d+4|0;j=d+7|0;g=d+6|0}}else{h=f&65535;f=1;i=d;j=d+3|0;g=d+2|0}b[i>>1]=h;a[j>>0]=2;a[g>>0]=17;break}if(!(h&1024)){n=df(e)|0;m=su(167406,j,i,1032)|0;a:do if(!m){switch(c[(Xd()|0)>>2]|0){case 13:case 20:case 2:{f=-8;break a}default:{}}f=-11}else{if(!(ju(o,128,m)|0)){Ow(m)|0;f=-8;break}j=(k|0)==6;i=(k|0)==17;f=0;b:do{c:while(1){g=Tg(o,35)|0;if(g|0){a[g>>0]=10;a[g+1>>0]=0}g=$o(o,e)|0;d:do if(g|0){while(1){if(!(g>>>0>o>>>0?!(_f(a[g+-1>>0]|0)|0):0)){h=a[g+n>>0]|0;if(!(h<<24>>24))break;if(_f(h<<24>>24)|0)break}g=$o(g+1|0,e)|0;if(!g)break d}h=a[o>>0]|0;e:do if(!(h<<24>>24))g=o;else{g=o;do{if(_f(h<<24>>24)|0)break e;g=g+1|0;h=a[g>>0]|0}while(h<<24>>24!=0)}while(0);h=Vf(g,p,10)|0;if(h>>>0<=65535?(q=c[p>>2]|0,(q|0)!=(g|0)):0){if(Sg(q,167420,4)|0)break c;if(!j){r=41;break c}}}while(0);if(!(ju(o,128,m)|0))break b}if((r|0)==41){r=0;b[d+(f<<2)>>1]=h;a[d+(f<<2)+3>>0]=2;a[d+(f<<2)+2>>0]=17;f=f+1|0}if(!((Sg(q,167425,4)|0)!=0|i)){b[d+(f<<2)>>1]=h;a[d+(f<<2)+3>>0]=1;a[d+(f<<2)+2>>0]=6;f=f+1|0}}while((f|0)<2&(ju(o,128,m)|0)!=0);Ow(m)|0;f=(f|0)>0?f:-8}while(0)}else f=-8}while(0);l=s;return f|0}function Kz(){return 171528}function Lz(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,g=0;f=l;l=l+16|0;g=f;c[g>>2]=a;c[g+4>>2]=b;c[g+8>>2]=d;c[g+12>>2]=e;e=Wd(Mb(345,g|0)|0)|0;l=f;return e|0}function Mz(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,i=0;g=l;l=l+32|0;h=g;i=g+8|0;c[i>>2]=a;c[i+4>>2]=b;c[i+8>>2]=d;c[i+12>>2]=e;c[i+16>>2]=f;c[i+20>>2]=0;c[h>>2]=15;c[h+4>>2]=i;f=Wd(ma(102,h|0)|0)|0;l=g;return f|0}function Nz(a){a=a|0;var b=0,d=0,e=0,f=0,g=0;b=l;l=l+16|0;d=b;e=c[40439]|0;g=(a|0)!=0;f=Oz(c[(Kz()|0)>>2]|0)|0;c[d>>2]=g?a:172411;c[d+4>>2]=g?167512:172411;c[d+8>>2]=f;Pu(e,167430,d)|0;l=b;return}function Oz(b){b=b|0;var c=0,d=0;b=b+-1|0;a:do if(!b)b=152432;else{c=b;b=152432;do{if(!(a[b>>0]|0))break a;b=b+1|0;do{d=b;b=b+1|0}while((a[d>>0]|0)!=0);c=c+-1|0}while((c|0)!=0)}while(0);return Mf((a[b>>0]|0)==0?b+1|0:b)|0}function Pz(a,b){a=a|0;b=b|0;var c=0;c=l;l=l+16|0;b=(Iz(a,b,172196,172212,8,c)|0)==0;l=c;return (b?172196:0)|0}function Qz(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0;e=l;l=l+32|0;f=e;g=e+8|0;c[g>>2]=a;c[g+4>>2]=b;c[g+8>>2]=d;c[g+12>>2]=0;c[g+16>>2]=0;c[g+20>>2]=0;c[f>>2]=16;c[f+4>>2]=g;d=Wd(ma(102,f|0)|0)|0;l=e;return d|0}function Rz(a){a=a|0;var b=0,d=0,e=0;d=l;l=l+16|0;e=d;b=d+4|0;c[e>>2]=b;a=(zn(a,35077,e)|0)<0;l=d;return (a?-1:c[b>>2]|0)|0}function Sz(){return 0}function Tz(a){a=a|0;vd(a);return}function Uz(e,f,g,h,i){e=e|0;f=f|0;g=g|0;h=h|0;i=i|0;var j=0,k=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0;x=l;l=l+64|0;t=x+60|0;u=x+32|0;v=x+4|0;w=x;a[f>>0]=0;if(g){j=Vg(g,255)|0;if((j+-1|0)>>>0>253)j=-2;else{bD(f|0,g|0,j+1|0)|0;k=4}}else k=4;a:do if((k|0)==4){j=(i&8|0)==0;m=(h|0)==10;i=m|j?i:i+-8|0;m=j?h:m?0:h;j=Vz(e,g,m,i)|0;if(!j){j=Wz(e,g,m)|0;if(!(j|i&4)){j=Xz(e,f,g,m)|0;if(!j)j=Yz(e,f,g,m)|0}}if((j|0)<1){j=(j|0)==0?-2:j;break}if(i&8){if(!(i&16)){h=0;while(1){if((c[e+(h*28|0)>>2]|0)==10){k=15;break}i=h+1|0;if((i|0)<(j|0))h=i;else break}if((k|0)==15){if((h|0)>=(j|0)){j=0;break}i=0;do{f=e+(h*28|0)|0;if((c[f>>2]|0)==10){s=e+(i*28|0)|0;c[s>>2]=c[f>>2];c[s+4>>2]=c[f+4>>2];c[s+8>>2]=c[f+8>>2];c[s+12>>2]=c[f+12>>2];c[s+16>>2]=c[f+16>>2];c[s+20>>2]=c[f+20>>2];c[s+24>>2]=c[f+24>>2];i=i+1|0}h=h+1|0}while((h|0)!=(j|0));j=i}if((j|0)<=0)break}i=0;do{h=e+(i*28|0)|0;f=e+(i*28|0)+8|0;if((c[h>>2]|0)==2){bD(e+(i*28|0)+20|0,f|0,4)|0;bD(f|0,167437,12)|0;c[h>>2]=10}i=i+1|0}while((i|0)!=(j|0))}if(!((m|0)==2|(j|0)<2)){if((c[e>>2]|0)==2){i=0;do{if((i|0)==(j|0))break a;i=i+1|0}while((c[e+(i*28|0)>>2]|0)==2)}Oc(1,t|0)|0;if((j|0)>0){k=v+2|0;m=v+4|0;n=v+8|0;o=v+24|0;p=v+20|0;q=u+8|0;g=0;do{b[v>>1]=10;b[k>>1]=-1;c[m>>2]=0;c[m+4>>2]=0;c[m+8>>2]=0;c[m+12>>2]=0;c[m+16>>2]=0;c[o>>2]=c[e+(g*28|0)+4>>2];if((c[e+(g*28|0)>>2]|0)==10)bD(n|0,e+(g*28|0)+8|0,16)|0;else{bD(n|0,167437,12)|0;bD(p|0,e+(g*28|0)+8|0,4)|0}s=Zz(n)|0;r=_z(n)|0;i=d[s+19>>0]|0;s=d[s+18>>0]|0;f=sy(10,524290,17)|0;if((f|0)>-1){if(!($z(f,v,28)|0)){c[w>>2]=28;if(!(Cy(f,u,w)|0)){y=(r|0)==(_z(q)|0);y=y?1610612736:1073741824;i=(aA(q)|0)==(i|0);h=bA(q,n)|0;i=i?y|268435456:y}else{h=0;i=1073741824}}else{h=0;i=0}wo(f)|0}else{h=0;i=0}c[e+(g*28|0)+24>>2]=983040-(r<<16)|48-g|s<<20|i|h<<8;g=g+1|0}while((g|0)!=(j|0))}sk(e,j,28,4);Oc(c[t>>2]|0,0)|0}}while(0);l=x;return j|0}function Vz(d,e,f,g){d=d|0;e=e|0;f=f|0;g=g|0;var h=0,i=0;i=l;l=l+32|0;h=i;do if(!e){e=(f|0)!=10;if(!(g&1)){if(e){c[h>>2]=2;c[h+4>>2]=0;a[h+8>>0]=127;a[h+9>>0]=0;a[h+10>>0]=0;a[h+11>>0]=1;g=h+12|0;c[g>>2]=0;c[g+4>>2]=0;c[g+8>>2]=0;c[g+12>>2]=0;c[d>>2]=c[h>>2];c[d+4>>2]=c[h+4>>2];c[d+8>>2]=c[h+8>>2];c[d+12>>2]=c[h+12>>2];c[d+16>>2]=c[h+16>>2];c[d+20>>2]=c[h+20>>2];c[d+24>>2]=c[h+24>>2];if((f|0)==2){e=1;break}else e=1}else e=0;c[d+(e*28|0)>>2]=10;h=d+(e*28|0)+4|0;c[h>>2]=0;c[h+4>>2]=0;c[h+8>>2]=0;c[h+12>>2]=0;b[h+16>>1]=0;a[h+18>>0]=0;a[d+(e*28|0)+23>>0]=1;c[d+(e*28|0)+24>>2]=0;e=e+1|0;break}if(e){c[d>>2]=2;h=d+4|0;c[h>>2]=0;c[h+4>>2]=0;c[h+8>>2]=0;c[h+12>>2]=0;c[h+16>>2]=0;c[h+20>>2]=0;if((f|0)==2){e=1;break}else{g=d+28|0;f=d+32|0;e=2}}else{g=d;f=d+4|0;e=1}c[g>>2]=10;c[f>>2]=0;c[f+4>>2]=0;c[f+8>>2]=0;c[f+12>>2]=0;c[f+16>>2]=0;c[f+20>>2]=0}else e=0;while(0);l=i;return e|0}function Wz(a,b,c){a=a|0;b=b|0;c=c|0;return Xy(a,b,c)|0}function Xz(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,i=0,j=0,k=0,m=0,n=0,o=0,p=0,q=0;q=l;l=l+1680|0;n=q+1040|0;o=df(e)|0;p=su(167450,q+1552|0,q,1032)|0;a:do if(!p){switch(c[(Xd()|0)>>2]|0){case 13:case 20:case 2:{g=0;break a}default:{}}g=-11}else do if(ju(n,512,p)|0){m=n+1|0;g=0;k=0;b:while(1){j=b+(k*28|0)|0;c:while(1){d:while(1){h=Tg(n,35)|0;if(h|0){a[h>>0]=10;a[h+1>>0]=0}h=$o(m,e)|0;e:do if(h|0){while(1){if(_f(a[h+-1>>0]|0)|0?_f(a[h+o>>0]|0)|0:0)break;h=$o(h+1|0,e)|0;if(!h)break e}i=a[n>>0]|0;f:do if(!(i<<24>>24))h=n;else{h=n;do{if(_f(i<<24>>24)|0)break f;h=h+1|0;i=a[h>>0]|0}while(i<<24>>24!=0)}while(0);a[h>>0]=0;switch(Wz(j,n,f)|0){case 1:break c;case 0:break;default:break d}}while(0);if(!(ju(n,512,p)|0)){h=35;break b}}if(!(ju(n,512,p)|0)){g=-2;h=35;break b}else g=-2}k=k+1|0;h=h+1|0;i=a[h>>0]|0;g:do if(i<<24>>24){while(1){if(!(_f(i<<24>>24)|0))break;h=h+1|0;i=a[h>>0]|0;if(!(i<<24>>24)){j=h;break g}}i=a[h>>0]|0;if(!(i<<24>>24))j=h;else{j=h;do{if(_f(i<<24>>24)|0)break g;j=j+1|0;i=a[j>>0]|0}while(i<<24>>24!=0)}}else j=h;while(0);a[j>>0]=0;if(fA(h)|0)bD(d|0,h|0,1-h+j|0)|0;if(!(k>>>0<48&(ju(n,512,p)|0)!=0)){h=34;break}}if((h|0)==34){Ow(p)|0;g=k;break a}else if((h|0)==35){Ow(p)|0;if(!k)break;else{g=k;break a}}}else{Ow(p)|0;g=0}while(0);while(0);l=q;return g|0}function Yz(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,i=0,j=0,k=0,m=0,n=0,o=0,p=0,q=0,r=0;r=l;l=l+368|0;k=r;q=r+256|0;a:do if((Wy(q,k,256)|0)>=0){h=0;j=0;b:while(1){switch(a[e+j>>0]|0){case 0:break b;case 46:{h=h+1|0;break}default:{}}j=j+1|0}if(!(h>>>0<(c[q+92>>2]|0)>>>0?(a[e+(j+-1)>>0]|0)!=46:0))a[k>>0]=0;if(j>>>0>255)g=-2;else{bD(d|0,e|0,j|0)|0;n=d+j|0;a[n>>0]=46;i=a[k>>0]|0;c:do if(i<<24>>24){o=255-j|0;p=n+1|0;m=j+1|0;h=k;do{if(!(_f(i<<24>>24)|0))j=h;else{do h=h+1|0;while((_f(a[h>>0]|0)|0)!=0);j=h}i=a[j>>0]|0;if(!(i<<24>>24))break c;h=j;do{if(_f(i<<24>>24)|0)break;h=h+1|0;i=a[h>>0]|0}while(i<<24>>24!=0);if((h|0)==(j|0))break c;i=h-j|0;if(i>>>0<o>>>0?(bD(p|0,j|0,i|0)|0,a[d+(m+i)>>0]=0,g=dA(b,d,d,f,q)|0,g|0):0)break a;i=a[h>>0]|0}while(i<<24>>24!=0)}while(0);a[n>>0]=0;g=dA(b,d,e,f,q)|0}}else g=-1;while(0);l=r;return g|0}function Zz(b){b=b|0;var c=0,e=0;c=0;while(1){e=d[152528+(c*20|0)+16>>0]|0;if((ef(b,152528+(c*20|0)|0,e)|0)==0?(a[152528+(c*20|0)+17>>0]&a[b+e>>0])<<24>>24==(a[152528+(c*20|0)+e>>0]|0):0)break;c=c+1|0}return 152528+(c*20|0)|0}function _z(b){b=b|0;var e=0,f=0;e=a[b>>0]|0;switch(e<<24>>24){case -1:{b=a[b+1>>0]&15;break}case -2:{if((a[b+1>>0]&-64)<<24>>24==-128)b=2;else f=4;break}default:f=4}do if((f|0)==4){if(((((((c[b>>2]|0)==0?(c[b+4>>2]|0)==0:0)?(c[b+8>>2]|0)==0:0)?(a[b+12>>0]|0)==0:0)?(a[b+13>>0]|0)==0:0)?(a[b+14>>0]|0)==0:0)?(a[b+15>>0]|0)==1:0){b=2;break}if(e<<24>>24==-2?(d[b+1>>0]|0)>191:0){b=5;break}b=14}while(0);return b|0}function $z(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0;e=l;l=l+32|0;f=e;g=e+8|0;c[g>>2]=a;c[g+4>>2]=b;c[g+8>>2]=d;c[g+12>>2]=0;c[g+16>>2]=0;c[g+20>>2]=0;c[f>>2]=3;c[f+4>>2]=g;d=Wd(ma(102,f|0)|0)|0;l=e;return d|0}function aA(a){a=a|0;return d[(Zz(a)|0)+19>>0]|0|0}function bA(b,c){b=b|0;c=c|0;var d=0,e=0;d=0;while(1){e=d>>>3;if(128>>>(d&7)&((a[c+e>>0]^a[b+e>>0])&255)|0)break;d=d+1|0;if(d>>>0>=128){d=128;break}}return d|0}function cA(a,b){a=a|0;b=b|0;return (c[b+24>>2]|0)-(c[a+24>>2]|0)|0}function dA(b,d,e,f,g){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0,i=0,j=0,k=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0;s=l;l=l+1632|0;j=s+1024|0;r=s;k=s+1624|0;m=s+1616|0;n=s+1608|0;q=s+1600|0;o=s+1584|0;c[k>>2]=j;c[k+4>>2]=j+280;c[m>>2]=r;c[m+4>>2]=r+512;c[o>>2]=b;c[o+4>>2]=d;i=o+8|0;c[i>>2]=0;d=0;b=0;while(1){if((c[152656+(d<<3)>>2]|0)==(f|0))h=b;else{h=Hz(0,e,1,c[152656+(d<<3)+4>>2]|0,0,0,0,j+(b*280|0)|0,280)|0;c[n+(b<<2)>>2]=h;if((h|0)==-1){b=-2;break}h=b+1|0}if((d+1|0)>>>0<2){d=1;b=h}else{p=6;break}}a:do if((p|0)==6)if((Oy(h,k,n,m,q,512,g)|0)>=0){if((h|0)>0){b=0;do{yz(r+(b<<9)|0,c[q+(b<<2)>>2]|0,2,o)|0;b=b+1|0}while((b|0)!=(h|0))}b=c[i>>2]|0;if(!b)if((c[q>>2]|0)<4)b=-3;else switch(a[r+3>>0]&15){case 2:{b=-3;break a}case 0:{b=-2;break a}case 3:{b=0;break a}default:{b=-4;break a}}}else b=-11;while(0);l=s;return b|0}function eA(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0;h=l;l=l+256|0;g=h;switch(b|0){case 1:{if((e|0)==4){g=c[a>>2]|0;f=a+8|0;a=c[f>>2]|0;c[g+(a*28|0)>>2]=2;c[g+(a*28|0)+4>>2]=0;c[f>>2]=a+1;bD(g+(a*28|0)+8|0,d|0,4)|0;a=0}else a=-1;break}case 28:{if((e|0)==16){g=c[a>>2]|0;f=a+8|0;a=c[f>>2]|0;c[g+(a*28|0)>>2]=10;c[g+(a*28|0)+4>>2]=0;c[f>>2]=a+1;bD(g+(a*28|0)+8|0,d|0,16)|0;a=0}else a=-1;break}case 5:{if((Ly(f,f+512|0,d,g,256)|0)>0?(fA(g)|0)!=0:0){mh(c[a+4>>2]|0,g)|0;a=0}else a=0;break}default:a=0}l=h;return a|0}function fA(b){b=b|0;var c=0;if(((Vg(b,255)|0)+-1|0)>>>0<=253?(hn(0,b,0)|0)!=-1:0){while(1){c=a[b>>0]|0;if(!(c<<24>>24<0|(c+-45&255)<2)?(sf(c&255)|0)==0:0)break;b=b+1|0}b=(a[b>>0]|0)==0&1}else b=0;return b|0}function gA(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,i=0,j=0;g=l;l=l+16|0;j=g+12|0;i=g+8|0;h=g+4|0;f=g;c[j>>2]=a;c[i>>2]=b;c[h>>2]=d;c[f>>2]=e;e=Vy(1,j,i,h,f,e)|0;l=g;return ((e|0)<0?e:c[f>>2]|0)|0}function hA(a){a=a|0;return iA(a)|0}function iA(a){a=a|0;return $C(a|0)|0}function jA(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0;j=l;l=l+16|0;g=j+4|0;h=j;f=0;while(1){if(f){if((a[b>>0]|0)!=58){d=0;break}b=b+1|0}e=Vf(b,h,16)|0;if(e>>>0>255){d=0;break}b=c[h>>2]|0;a[g+f>>0]=e;f=f+1|0;if(f>>>0>=6){i=7;break}}if((i|0)==7)if(!(a[b>>0]|0)){a[d>>0]=a[g>>0]|0;a[d+1>>0]=a[g+1>>0]|0;a[d+2>>0]=a[g+2>>0]|0;a[d+3>>0]=a[g+3>>0]|0;a[d+4>>0]=a[g+4>>0]|0;a[d+5>>0]=a[g+5>>0]|0}else d=0;l=j;return d|0}function kA(a){a=a|0;return jA(a,172398)|0}function lA(a,b){a=a|0;b=b|0;var e=0,f=0,g=0,h=0;h=l;l=l+16|0;g=h;e=b;f=0;do{c[g>>2]=d[a+f>>0];e=e+(Oj(e,(f|0)==0?167461:167466,g)|0)|0;f=f+1|0}while((f|0)!=6);l=h;return b|0}function mA(a){a=a|0;return lA(a,170416)|0}function nA(a,b,c){a=a|0;b=b|0;c=c|0;return -1}function oA(a,b){a=a|0;b=b|0;return -1}function pA(a,b){a=a|0;b=b|0;return -1}function qA(a){a=a|0;return wz(Hc(a|0)|0)|0}function rA(a,b){a=a|0;b=b|0;return a<<(a>>>0<256?24:a>>>0<65536?16:8)|b|0}function sA(a){a=a|0;a=c[a>>2]|0;return a&((a|0)>-1?16777215:a>>>0<3221225472?65535:255)|0}function tA(a){a=a|0;a=c[a>>2]|0;return a>>>((a|0)>-1?24:a>>>0<3221225472?16:8)|0}function uA(a){a=a|0;var b=0;if(a|0)do{b=a;a=c[a>>2]|0;vd(b)}while((a|0)!=0);return}function vA(a){a=a|0;var b=0,d=0,e=0;e=l;l=l+272|0;d=e;dD(d|0,0,264)|0;b=ry(0,0,5,d)|0;d=c[d>>2]|0;if(!b)c[a>>2]=d;else uA(d);l=e;return b|0}function wA(a,f){a=a|0;f=f|0;var g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0;w=f+16|0;k=f+4|0;a:do if((b[k>>1]|0)==16){h=f+32|0;g=c[f>>2]|0;if((g&-4|0)==32){h=164;g=0;u=11}else{j=f+g|0;i=h;while(1){g=b[i>>1]|0;if((b[i+2>>1]|0)==7)break;g=h+((g&65535)+3&131068)|0;if((j-g|0)>>>0>3){i=g;h=g}else{h=164;g=0;u=11;break a}}h=(g&65535)+160|0;g=0;u=11}}else{h=c[f+20>>2]|0;g=c[a+8+((h&63)<<2)>>2]|0;if(!g)g=0;else while(1){if((c[g+140>>2]|0)==(h|0)){h=164;u=11;break a}g=c[g+28>>2]|0;if(!g){g=0;break}}}while(0);do if((u|0)==11){x=wd(1,h)|0;if(!x)g=-1;else{if((b[k>>1]|0)==16){q=f+20|0;t=x+140|0;c[t>>2]=c[q>>2];c[x+8>>2]=c[f+24>>2];i=f+32|0;b:do if((c[f>>2]&-4|0)==32)g=x+4|0;else{r=x+12|0;s=x+32|0;k=w+2|0;l=x+20|0;m=x+104|0;n=x+164|0;o=x+24|0;p=x+144|0;g=x+4|0;h=i;j=i;while(1){switch(b[h+2>>1]|0){case 3:{i=(e[h>>1]|0)+-4|0;if(i>>>0<17){bD(p|0,h+4|0,i|0)|0;c[g>>2]=p}break}case 1:{xA(r,s,h+4|0,(e[h>>1]|0)+-4|0,c[q>>2]|0,b[k>>1]|0);break}case 2:{xA(l,m,h+4|0,(e[h>>1]|0)+-4|0,c[q>>2]|0,b[k>>1]|0);break}case 7:{c[o>>2]=n;bD(n|0,h+4|0,(e[h>>1]|0)+-4|0)|0;break}default:{}}i=j+((e[h>>1]|0)+3&131068)|0;if((f+(c[f>>2]|0)-i|0)>>>0>3){h=i;j=i}else break b}}while(0);if(c[g>>2]|0){v=a+8+((c[t>>2]&63)<<2)|0;c[x+28>>2]=c[v>>2];c[v>>2]=x;v=g;u=43}}else{s=x+4|0;c[s>>2]=c[g+4>>2];c[x+8>>2]=c[g+8>>2];i=f+24|0;c:do if((c[f>>2]&-4|0)==24)g=x+12|0;else{g=x+12|0;n=x+20|0;o=x+104|0;p=f+20|0;q=x+32|0;r=x+144|0;h=i;m=i;while(1){d:do switch(b[h+2>>1]|0){case 1:{i=d[w>>0]|0;j=h+4|0;k=(e[h>>1]|0)+-4|0;l=c[p>>2]|0;if(!(c[g>>2]|0)){yA(g,i,q,j,k,l);break d}else{yA(n,i,o,j,k,l);break d}}case 4:{yA(n,d[w>>0]|0,o,h+4|0,(e[h>>1]|0)+-4|0,c[p>>2]|0);break}case 2:{if(c[g>>2]|0){i=o;j=q;k=i+36|0;do{c[i>>2]=c[j>>2];i=i+4|0;j=j+4|0}while((i|0)<(k|0));c[n>>2]=o;dD(q|0,0,36)|0}yA(g,d[w>>0]|0,q,h+4|0,(e[h>>1]|0)+-4|0,c[p>>2]|0);break}case 3:{i=(e[h>>1]|0)+-4|0;if(i>>>0<17){bD(r|0,h+4|0,i|0)|0;c[s>>2]=r}break}default:{}}while(0);i=m+((e[h>>1]|0)+3&131068)|0;if((f+(c[f>>2]|0)-i|0)>>>0>3){h=i;m=i}else break c}}while(0);if(!(c[g>>2]|0)){v=s;u=43}else{zA(x+16|0,d[w>>0]|0,x+68|0,d[w+1>>0]|0);v=s;u=43}}if((u|0)==43?c[v>>2]|0:0){if(!(c[a>>2]|0))c[a>>2]=x;g=a+4|0;h=c[g>>2]|0;if(h|0)c[h>>2]=x;c[g>>2]=x;g=0;break}vd(x);g=0}}while(0);return g|0}function xA(d,e,f,g,h,i){d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;i=i|0;if(g>>>0<=24){b[e>>1]=17;c[e+4>>2]=h;b[e+8>>1]=i;a[e+11>>0]=g;bD(e+12|0,f|0,g|0)|0;c[d>>2]=e}return}function yA(d,e,f,g,h,i){d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;i=i|0;var j=0,k=0,l=0;a:do switch(e|0){case 2:{l=4;j=f+4|0;k=7;break}case 10:{j=f+8|0;switch(a[g>>0]|0){case -2:{if((a[g+1>>0]&-64)<<24>>24!=-128){l=16;k=7;break a}break}case -1:{if((a[g+1>>0]&15)!=2){l=16;k=7;break a}break}default:{l=16;k=7;break a}}c[f+24>>2]=i;l=16;k=7;break}default:{}}while(0);if((k|0)==7?l>>>0<=h>>>0:0){b[f>>1]=e;bD(j|0,g|0,l|0)|0;c[d>>2]=f}return}function zA(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,i=0,j=0;i=l;l=l+16|0;h=i;c[h>>2]=0;c[h+4>>2]=0;c[h+8>>2]=0;c[h+12>>2]=0;j=f>>>0<128;g=j?f:128;f=g>>>3;dD(h|0,255,f|0)|0;if(j)a[h+f>>0]=255<<8-(g&7);yA(b,d,e,h,16,0);l=i;return}function AA(a,b){a=a|0;b=b|0;var d=0,e=0,f=0;d=l;l=l+32|0;e=d;f=d+8|0;c[f>>2]=a;c[f+4>>2]=b;b=f+8|0;c[b>>2]=0;c[b+4>>2]=0;c[b+8>>2]=0;c[b+12>>2]=0;c[e>>2]=13;c[e+4>>2]=f;b=Wd(ma(102,e|0)|0)|0;l=d;return b|0}function BA(){var b=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0,m=0,n=0;m=l;l=l+288|0;j=m+8|0;k=m;Oc(1,k|0)|0;dD(j|0,0,272)|0;if((ry(0,2,6,j)|0)>=0){b=ud((c[j>>2]<<3)+8+(c[j+8>>2]|0)|0)|0;if(b){f=c[j>>2]|0;if(!f)e=b;else{e=b+(f<<3)|0;g=b+(f<<3)+8|0;h=c[j+12>>2]|0;i=b;while(1){c[i>>2]=c[h+4>>2];c[i+4>>2]=g;n=h+8|0;bD(g|0,h+9|0,d[n>>0]|0|0)|0;g=g+(d[n>>0]|0)|0;a[g>>0]=0;f=f+-1|0;if(!f)break;else{g=g+1|0;h=h+28|0;i=i+8|0}}}c[e>>2]=0;c[e+4>>2]=0}}else b=0;Oc(c[k>>2]|0,0)|0;vd(c[j+12>>2]|0);c[(Xd()|0)>>2]=105;l=m;return b|0}function CA(e,f){e=e|0;f=f|0;var g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0;g=(b[f+4>>1]|0)==16?f+32|0:f+24|0;n=c[f+20>>2]|0;i=f+(c[f>>2]|0)|0;a:do if((i-g|0)>>>0>3){f=g;while(1){h=b[f>>1]|0;g=h&65535;if((b[f+2>>1]|0)==3)break;f=f+(g+3&131068)|0;if((i-f|0)>>>0<=3){f=0;break a}}m=g+-4|0;l=g+-5|0;if((h&65535)<=21){k=e+16+(((n|0)%64|0)<<2)|0;g=c[k>>2]|0;if(g|0){h=c[e+12>>2]|0;i=f+4|0;do{g=g+-1|0;if(((c[h+(g*28|0)+4>>2]|0)==(n|0)?(l|0)==(d[h+(g*28|0)+8>>0]|0):0)?(ef(h+(g*28|0)+9|0,i,l)|0)==0:0){f=0;break a}g=c[h+(g*28|0)>>2]|0}while((g|0)!=0)}g=c[e>>2]|0;j=e+4|0;h=c[j>>2]|0;if(g>>>0<h>>>0)h=c[e+12>>2]|0;else{g=(h|0)==0?8:h<<1|1;if(g>>>0>153391689){f=-1;break}i=e+12|0;h=xd(c[i>>2]|0,g*28|0)|0;if(!h){f=-1;break}c[i>>2]=h;c[j>>2]=g;g=c[e>>2]|0}c[h+(g*28|0)+4>>2]=n;a[h+(g*28|0)+8>>0]=l;bD(h+(g*28|0)+9|0,f+4|0,l|0)|0;f=e+8|0;c[f>>2]=m+(c[f>>2]|0);f=(c[e>>2]|0)+1|0;c[e>>2]=f;c[h+(g*28|0)>>2]=c[k>>2];c[k>>2]=f;f=0}else f=0}else f=0;while(0);return f|0}function DA(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0;e=l;l=l+32|0;f=e;g=e+8|0;c[g>>2]=a;c[g+4>>2]=b;c[g+8>>2]=d;c[g+12>>2]=0;c[g+16>>2]=0;c[g+20>>2]=0;c[f>>2]=7;c[f+4>>2]=g;d=Wd(ma(102,f|0)|0)|0;l=e;return d|0}function EA(a){a=a|0;vd(a);return}function FA(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0,k=0,m=0,n=0;n=l;l=l+4304|0;m=n+4144|0;k=n+4136|0;e=n+4128|0;h=n+4224|0;i=n+4148|0;f=n+4096|0;j=n;do if(b){c[e>>2]=b;c[e+4>>2]=2656256;e=Wd(Ub(5,e|0)|0)|0;if((e|0)<0)d=0;else{de(f,e);b=tn(f,j,4095)|0;if((b|0)>=0?(a[j+b>>0]=0,me(e,h)|0,g=le(j,i)|0,(g|0)>=0):0){if((c[h>>2]|0)==(c[i>>2]|0)?(c[h+72>>2]|0)==(c[i+72>>2]|0):0){c[k>>2]=e;Yb(6,k|0)|0;if(!d){d=bd[3&7](j)|0;break}else{mh(d,j)|0;break}}if(!g)c[(Xd()|0)>>2]=40}c[m>>2]=e;Yb(6,m|0)|0;d=0}}else{c[(Xd()|0)>>2]=22;d=0}while(0);l=n;return d|0}function GA(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,i=0,j=0,k=0,m=0,n=0,o=0,p=0;p=l;l=l+304|0;k=p+288|0;h=p+284|0;i=p+280|0;j=p+272|0;n=p+264|0;f=p+136|0;m=p+8|0;g=p;c[i>>2]=0;do if((HA(k,h,b,d,e)|0)<0)b=-1;else{Uc(f|0)|0;Pc(0,f|0,m|0)|0;Oc(1,n|0)|0;if(!(Qn(j,524288)|0)){b=Cc()|0;if(!b){wo(c[k>>2]|0)|0;wo(c[j>>2]|0)|0;f=(IA(c[h>>2]|0)|0)==0;d=c[j+4>>2]|0;if(f){wo(d)|0;Oc(c[n>>2]|0,0)|0;Pc(2,m|0,0)|0;b=0;break}else{Bo(d,Xd()|0,4)|0;oc(127)}}wo(c[h>>2]|0)|0;wo(c[j+4>>2]|0)|0;if((Kn(c[j>>2]|0,i,4)|0)>0){_c(b|0,g|0,0)|0;b=c[i>>2]|0;c[(Xd()|0)>>2]=b;b=-1}wo(c[j>>2]|0)|0;d=c[k>>2]|0;if((b|0)>0)c[a>>2]=d;else o=12}else{wo(c[h>>2]|0)|0;b=-1;d=c[k>>2]|0;o=12}if((o|0)==12)wo(d)|0;Oc(c[n>>2]|0,0)|0;Pc(2,m|0,0)|0}while(0);l=p;return b|0}function HA(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,i=0,j=0,k=0,m=0,n=0,o=0,p=0,q=0,r=0;r=l;l=l+80|0;n=r+64|0;q=r+56|0;p=r+48|0;o=r+40|0;m=r+32|0;h=r+72|0;i=r+68|0;j=r;c[h>>2]=0;k=gf(167777,258,r+24|0)|0;do if((k|0)<0)a=-1;else{Oc(1,i|0)|0;c[m>>2]=h;if(((zn(k,1074025521,m)|0)==0?(c[o>>2]=h,(zn(k,-2147199952,o)|0)==0):0)?(g=(d|0)==0?j:d,c[p>>2]=c[h>>2],sh(g,20,167765,p)|0,g=gf(g,258,q)|0,(g|0)>=0):0){if(e|0)$t(g,0,e)|0;if(f|0){c[n>>2]=f;zn(g,21524,n)|0}c[a>>2]=k;c[b>>2]=g;Oc(c[i>>2]|0,0)|0;a=0;break}wo(k)|0;Oc(c[i>>2]|0,0)|0;a=-1}while(0);l=r;return a|0}function IA(a){a=a|0;var b=0,d=0;b=l;l=l+16|0;d=b;yo()|0;c[d>>2]=0;if(!(zn(a,21518,d)|0)){un(a,0)|0;un(a,1)|0;un(a,2)|0;if((a|0)>2){wo(a)|0;a=0}else a=0}else a=-1;l=b;return a|0}function JA(a){a=a|0;var b=0,d=0;a:do if((a|0)==23)b=c[42860]|0;else{b=c[42862]|0;d=c[b>>2]|0;b:do if(d|0){while(1){if((d|0)==(a|0))break;b=b+8|0;d=c[b>>2]|0;if(!d)break b}b=c[b+4>>2]|0;break a}while(0);c[(Xd()|0)>>2]=2;b=0}while(0);return b|0}function KA(a,b){a=a|0;b=b|0;var d=0,e=0;d=l;l=l+16|0;e=d;c[e>>2]=a;c[e+4>>2]=b;b=Wd(ic(96,e|0)|0)|0;l=d;return ((b|0)<0?b:20-b|0)|0}function LA(b){b=b|0;var c=0,d=0,e=0;d=b;b=0;e=0;while(1){c=a[d>>0]|0;if(!(c<<24>>24))break;c=Tg(160784,c<<24>>24)|0;if(!c)break;b=c-160784<<e|b;e=e+6|0;if(e>>>0>=36)break;else d=d+1|0}return b|0}function MA(b){b=b|0;var c=0;if(!b)b=172404;else{c=b;b=172404;do{a[b>>0]=a[160784+(c&63)>>0]|0;b=b+1|0;c=c>>>6}while((c|0)!=0)}a[b>>0]=0;return 172404}function NA(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,i=0,j=0;j=c[e>>2]|0;if((j|0)<1)b=-1;else{c[d>>2]=b;c[e>>2]=1;Rc();f=Ec()|0;a:do if(f|0){b=d+4|0;do{b:while(1){i=c[e>>2]|0;if((i|0)==2147483647)break a;h=c[f+12>>2]|0;d=c[h>>2]|0;if(d|0){g=0;do{g=g+1|0;if(!(Ef(a,d)|0))break b;d=c[h+(g<<2)>>2]|0}while((d|0)!=0)}f=Ec()|0;if(!f)break a}i=i+1|0;c[e>>2]=i;if(i>>>0<=j>>>0){c[b>>2]=c[f+8>>2];b=b+4|0}f=Ec()|0}while((f|0)!=0)}while(0);Ac();b=c[e>>2]|0;b=b>>>0>j>>>0?-1:b}return b|0}function OA(b,d,e,f,g,h){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var i=0,j=0,k=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0;q=l;l=l+80|0;n=q+40|0;j=q+8|0;i=q;p=q+72|0;k=Dc(167472)|0;Oc(1,p|0)|0;switch(e|0){case 1:{m=167505;break}case 2:{m=167480;break}case 3:{m=167488;break}case 4:{m=167498;break}default:m=0}if(b&512){i=gf(167615,1,i)|0;if((i|0)<0)i=4;else{s=(d|0)!=0;r=(g|0)!=0;c[j>>2]=s?d:172411;c[j+4>>2]=s?167512:172411;c[j+8>>2]=(e|0)==0?172411:m;c[j+12>>2]=(f|0)==0?172411:f;c[j+16>>2]=r?167515:172411;c[j+20>>2]=r?g:172411;c[j+24>>2]=r?167525:172411;c[j+28>>2]=(h|0)==0?172411:h;j=(Ov(i,167527,j)|0)<1;wo(i)|0;i=j?4:0}}else i=0;if(b&256){a:do if(k){j=0;while(1){if(!(a[k>>0]|0))break;b=0;while(1){if(!(PA(c[152672+(b<<2)>>2]|0,k)|0))break;b=b+1|0;if((b|0)==5){j=255;break a}}j=1<<b|j;b=Tg(k,58)|0;if(!b)break a;else k=b+1|0}if(!j)o=18}else o=18;while(0);if((o|0)==18)j=255;r=(d|0)!=0&(j&1|0)!=0;s=(g|0)!=0&(j&8|0)!=0;c[n>>2]=r?d:172411;c[n+4>>2]=r?167512:172411;c[n+8>>2]=(e|0)!=0&(j&2|0)!=0?m:172411;c[n+12>>2]=(f|0)!=0&(j&4|0)!=0?f:172411;c[n+16>>2]=s?167515:172411;c[n+20>>2]=s?g:172411;c[n+24>>2]=s?167525:172411;c[n+28>>2]=(h|0)!=0&(j&16|0)!=0?h:172411;i=i|(Ov(2,167527,n)|0)<1}Oc(c[p>>2]|0,0)|0;l=q;return ((i&5|0)==5?-1:i)|0}function PA(b,c){b=b|0;c=c|0;var d=0,e=0,f=0,g=0;e=a[b>>0]|0;d=a[c>>0]|0;a:do if(!(e<<24>>24))g=5;else{f=0;while(1){f=f+1|0;if(!(d<<24>>24?d<<24>>24==e<<24>>24:0)){d=1;break a}e=a[b+f>>0]|0;d=a[c+f>>0]|0;if(!(e<<24>>24)){g=5;break}}}while(0);b:do if((g|0)==5){switch(d<<24>>24){case 58:case 0:break;default:{d=1;break b}}d=0}while(0);return d|0}function QA(){return 0}function RA(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0;e=l;l=l+16|0;f=e;c[f>>2]=a;c[f+4>>2]=b;c[f+8>>2]=d;d=Wd(cb(209,f|0)|0)|0;l=e;return d|0}function SA(a){a=a|0;if(!a)a=0;else a=(TA(a)|0)+1|0;return a|0}function TA(a){a=a|0;var b=0;if(a)if(!(a&1)){b=a;a=0;while(1){a=a+1|0;if(!(b&2))b=b>>>1;else break}}else a=0;else a=32;return a|0}function UA(b){b=b|0;var c=0,d=0;if((b|0)!=0?(a[b>>0]|0)!=0:0){c=(df(b)|0)+-1|0;a:do if(!c)c=0;else{while(1){d=b+c|0;if((a[d>>0]|0)!=47)break;a[d>>0]=0;c=c+-1|0;if(!c){c=0;break a}}while(1){d=c;c=c+-1|0;if((a[b+c>>0]|0)==47){c=d;break a}if(!c){c=0;break}}}while(0);c=b+c|0}else c=167761;return c|0}function VA(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0;e=l;l=l+16|0;f=e;c[f>>2]=a;c[f+4>>2]=b;c[f+8>>2]=d;d=Wd(jc(97,f|0)|0)|0;l=e;return d|0}function WA(){var b=0,d=0,e=0,f=0;f=l;l=l+160|0;b=f+76|0;d=f;e=Dc(167576)|0;if((((((e|0)!=0?(a[e>>0]|0)!=0:0)?(le(e,b)|0)==0:0)?(le(167761,d)|0)==0:0)?(c[b>>2]|0)==(c[d>>2]|0):0)?(c[b+72>>2]|0)==(c[d+72>>2]|0):0)b=bd[3&7](e)|0;else b=Nn(0,0)|0;l=f;return b|0}function XA(){return c[42860]|0}function YA(a,b){a=a|0;b=b|0;var d=0,e=0,f=0;f=l;l=l+144|0;d=f;e=f+128|0;c[e>>2]=32;if((NA(a,b,d,e)|0)<0)a=-1;else a=Sc(c[e>>2]|0,d|0)|0;l=f;return a|0}function ZA(a){a=a|0;var b=0;ea(172220);b=c[40596]|0;if(a|0)c[40596]=a;kc(172220);return b|0}function _A(){var a=0,b=0;a=l;l=l+16|0;b=a;Oc(1,b|0)|0;ea(172220);wo(c[40597]|0)|0;c[40597]=-1;kc(172220);Oc(c[b>>2]|0,0)|0;l=a;return}function $A(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0;g=l;l=l+16|0;f=g;Oc(1,f|0)|0;ea(172220);if(!b)a[170448]=0;else{h=Vg(b,31)|0;bD(170448,b|0,h|0)|0;a[170448+h>>0]=0}c[43057]=d;c[40598]=e;if((d&8|0)!=0&(c[40597]|0)<0)aB();kc(172220);Oc(c[f>>2]|0,0)|0;l=g;return}function aB(){var a=0;a=sy(1,524290,0)|0;c[40597]=a;if((a|0)>-1)$z(a,166578,12)|0;return}function bB(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0;f=l;l=l+16|0;e=f;if(!(a>>>0>1023?1:(c[40596]&1<<(a&7)|0)==0)){Oc(1,e|0)|0;ea(172220);cB(a,b,d);kc(172220);Oc(c[e>>2]|0,0)|0}l=f;return}function cB(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,i=0,j=0,k=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0;s=l;l=l+1152|0;p=s+1088|0;r=s+1080|0;q=s+1072|0;j=s+1040|0;i=s+1024|0;g=s+1144|0;h=s+1100|0;n=s;o=s+1096|0;k=c[(Xd()|0)>>2]|0;if((c[40597]|0)<0)aB();f=((b&1016|0)==0?c[40598]|0:0)|b;c[g>>2]=Xc(0)|0;Gc(g|0,h|0)|0;Vc(i|0,16,167580,h|0)|0;if(!(c[43057]&1))b=0;else b=mo()|0;g=(b|0)==0&1;c[j>>2]=f;c[j+4>>2]=i;c[j+8>>2]=o;c[j+12>>2]=170448;c[j+16>>2]=167589+g;c[j+20>>2]=b;c[j+24>>2]=167591+g;g=sh(n,1024,167593,j)|0;c[(Xd()|0)>>2]=k;f=1024-g|0;b=th(n+g|0,f,d,e)|0;if((b|0)>-1){b=b>>>0<f>>>0?b+g|0:1023;if((a[n+(b+-1)>>0]|0)!=10){a[n+b>>0]=10;b=b+1|0}do if((uy(c[40597]|0,n,b,0)|0)<0){if((dB(c[(Xd()|0)>>2]|0)|0?($z(c[40597]|0,166578,12)|0)>=0:0)?(uy(c[40597]|0,n,b,0)|0)>=0:0)break;if(c[43057]&2|0?(m=gf(167615,524545,q)|0,(m|0)>-1):0){q=c[o>>2]|0;c[r>>2]=b-q;c[r+4>>2]=n+q;Ov(m,167628,r)|0;wo(m)|0}}while(0);if(c[43057]&32|0){r=c[o>>2]|0;c[p>>2]=b-r;c[p+4>>2]=n+r;Ov(2,167628,p)|0}}l=s;return}function dB(a){a=a|0;switch(a|0){case 104:case 107:case 111:{a=1;break}default:a=(a|0)==32&1}return a|0}function eB(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0;e=l;l=l+16|0;f=e;c[f>>2]=d;bB(a,b,f);l=e;return}function fB(a,b){a=a|0;b=b|0;return Wu(a,b)|0}function gB(a){a=a|0;if(a|0)lu(a)|0;return 1}function hB(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,i=0,j=0,k=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0;u=l;l=l+80|0;j=u+40|0;t=u+32|0;g=u;h=d+16|0;c[h>>2]=0;i=d+20|0;c[i>>2]=0;ju(e,f,b)|0;a:do if(!(Tu(b)|0)){s=g+4|0;k=g+8|0;m=g+12|0;n=g+16|0;o=g+20|0;p=g+24|0;q=g+28|0;while(1){if(Lv(b)|0){d=0;break a}if(!(Tg(e,10)|0)){f=5;break}c[j>>2]=g;c[j+4>>2]=s;c[j+8>>2]=k;c[j+12>>2]=m;c[j+16>>2]=n;c[j+20>>2]=o;c[j+24>>2]=p;c[j+28>>2]=q;c[j+32>>2]=h;c[j+36>>2]=i;if((_v(e,167645,j)|0)>=2?(r=c[g>>2]|0,(a[e+r>>0]|0)!=35):0){f=9;break}ju(e,f,b)|0;if(Tu(b)|0){d=0;break a}}if((f|0)==5){lv(b,167633,t)|0;c[(Xd()|0)>>2]=34;d=0;break}else if((f|0)==9){a[e+(c[s>>2]|0)>>0]=0;a[e+(c[m>>2]|0)>>0]=0;a[e+(c[o>>2]|0)>>0]=0;a[e+(c[q>>2]|0)>>0]=0;c[d>>2]=e+r;c[d+4>>2]=e+(c[k>>2]|0);c[d+8>>2]=e+(c[n>>2]|0);c[d+12>>2]=e+(c[p>>2]|0);break}}else d=0;while(0);l=u;return d|0}function iB(a){a=a|0;return hB(a,172232,170480,256)|0}function jB(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,i=0,j=0;e=l;l=l+32|0;d=e;if(!(Bv(a,0,2)|0)){j=c[b+4>>2]|0;i=c[b+8>>2]|0;h=c[b+12>>2]|0;g=c[b+16>>2]|0;f=c[b+20>>2]|0;c[d>>2]=c[b>>2];c[d+4>>2]=j;c[d+8>>2]=i;c[d+12>>2]=h;c[d+16>>2]=g;c[d+20>>2]=f;a=(Pu(a,167684,d)|0)>>>31}else a=1;l=e;return a|0}function kB(a,b){a=a|0;b=b|0;return $o(c[a+12>>2]|0,b)|0}function lB(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0;e=l;l=l+16|0;f=e;Oc(1,f|0)|0;d=mB(a,b,d)|0;Oc(c[f>>2]|0,0)|0;l=e;return d|0}function mB(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,i=0,j=0,k=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0;v=l;l=l+176|0;r=v+8|0;q=v;s=v+160|0;n=v+32|0;p=(e&16|0)==0?167703:172411;if(e&8|0)nB(d);a:do if((e&4|0)!=0?(g=a[b>>0]|0,g<<24>>24!=0):0){f=0;m=0;h=0;i=0;while(1){switch(g<<24>>24|0){case 92:{f=f+((m|0)==0&1)|0;j=m;break}case 39:{j=m^(h|0)==0;break}case 34:{j=m;h=h^(m|0)==0;break}case 40:{if(!i)o=14;else{j=m;i=i+1|0}break}case 41:{if(!i)o=14;else{j=m;i=i+-1|0}break}case 125:case 123:case 62:case 60:case 59:case 38:case 124:case 10:{o=14;break}case 36:{if(!m)if((a[b+(f+1)>>0]|0)==40){f=f+2|0;if((a[b+f>>0]|0)!=40){f=4;break a}j=0;i=i+2|0}else j=0;else j=m;break}case 96:{if(!m){f=4;break a}else j=m;break}default:j=m}if((o|0)==14){o=0;if(!(h|i|m)){f=2;break a}else j=m}f=f+1|0;g=a[b+f>>0]|0;if(!(g<<24>>24)){o=21;break a}else m=j}}else o=21;while(0);b:do if((o|0)==21){j=(e&2|0)!=0;if(j){g=c[d+4>>2]|0;i=g;h=c[d>>2]|0}else{i=0;h=0;g=0}t=(e&1|0)!=0;u=d+8|0;if(t){f=c[u>>2]|0;if(f>>>0<=268435455){k=f+h|0;o=27}}else{c[u>>2]=0;k=h;o=27}do if((o|0)==27?(Qn(s,524288)|0)>=0:0){ba(n|0);e=Cc()|0;ia(n|0);if((e|0)<0){wo(c[s>>2]|0)|0;wo(c[s+4>>2]|0)|0;break}f=c[s+4>>2]|0;if(!e){if((f|0)==1){c[q>>2]=0;pj(1,2,q)|0}else un(f,1)|0;c[r>>2]=167726;c[r+4>>2]=167729;c[r+8>>2]=167723;c[r+12>>2]=b;c[r+16>>2]=p;c[r+20>>2]=0;Bc(167715,167723,r|0)|0;oc(1)}wo(f)|0;m=cd[7&7](c[s>>2]|0,167759)|0;if(!m){wo(c[s>>2]|0)|0;Ic(e|0,9)|0;oB(e);break}vd(pB(m)|0);if(Tu(m)|0){lu(m)|0;oB(e);f=5;break b}h=pB(m)|0;c:do if(h){f=(i|0)==0?0:k+1|0;while(1){j=k+1|0;if(j>>>0>=f>>>0){f=f+10+(f>>>1)|0;g=xd(g,f<<2)|0;if(!g)break c;i=g}c[i+(k<<2)>>2]=h;c[i+(j<<2)>>2]=0;h=pB(m)|0;if(!h){k=j;break}else k=j}}while(0);f=(Tu(m)|0)==0&1;lu(m)|0;oB(e);if(!i)i=wd(k+1|0,4)|0;j=d+4|0;c[j>>2]=i;c[d>>2]=k;if(!t)break b;g=c[u>>2]|0;if(i)if(g){h=g+-1|0;c[i+(h<<2)>>2]=0;if(h)do{h=h+-1|0;c[(c[j>>2]|0)+(h<<2)>>2]=0}while((h|0)!=0)}else g=0;c[d>>2]=k-g;break b}while(0);if(j)f=1;else{c[d>>2]=0;c[d+4>>2]=0;f=1}}while(0);l=v;return f|0}function nB(a){a=a|0;var b=0,d=0,e=0,f=0;f=a+4|0;b=c[f>>2]|0;if(b|0){if(c[a>>2]|0){e=a+8|0;d=0;do{vd(c[b+((c[e>>2]|0)+d<<2)>>2]|0);d=d+1|0;b=c[f>>2]|0}while(d>>>0<(c[a>>2]|0)>>>0)}vd(b);c[f>>2]=0;c[a>>2]=0}return}function oB(a){a=a|0;var b=0,d=0;d=l;l=l+16|0;b=d;while(1)if((_c(a|0,b|0,0)|0)<0){if((c[(Xd()|0)>>2]|0)!=4)break}else if(!(c[b>>2]&127))break;l=d;return}function pB(a){a=a|0;var b=0,d=0,e=0;d=l;l=l+16|0;b=d+4|0;e=d;c[b>>2]=0;c[e>>2]=0;a=(yv(b,e,0,a)|0)<0;l=d;return (a?0:c[b>>2]|0)|0}function qB(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,i=0;g=l;l=l+32|0;f=g+16|0;d=g;e=g+24|0;c[d>>2]=0;c[d+4>>2]=a;c[d+8>>2]=b;c[d+12>>2]=0;d=Lb(340,d|0)|0;if((d|0)==-38){h=b;d=c[h>>2]|0;h=c[h+4>>2]|0;i=h>>>0<0|(h|0)==0&d>>>0<4294967295;d=i?d:-1;c[e>>2]=d;b=b+8|0;d=c[b>>2]|0;b=c[b+4>>2]|0;h=b>>>0<0|(b|0)==0&d>>>0<4294967295;d=h?d:-1;c[e+4>>2]=d;c[f>>2]=a;c[f+4>>2]=e;d=bc(75,f|0)|0}l=g;return d|0}function rB(a,b){a=a|0;b=b|0;var d=0,e=0;d=l;l=l+16|0;e=d;c[e>>2]=b;c[e+4>>2]=a;a=e+8|0;c[a>>2]=-1;En(4,e);a=c[a>>2]|0;if(a)if((a|0)>0){c[(Xd()|0)>>2]=a;a=-1}else a=-1;else a=0;l=d;return a|0}function sB(a){a=a|0;var b=0;b=a+8|0;if((c[b>>2]|0)<=0)c[b>>2]=0-(qB(c[a+4>>2]|0,c[a>>2]|0)|0);return}function tB(a){a=a|0;if(!a)a=0;else a=(uB(a)|0)+1|0;return a|0}function uB(a){a=a|0;var b=0;if(a)if(!(a&1)){b=a;a=0;while(1){a=a+1|0;if(!(b&2))b=b>>>1;else break}}else a=0;else a=32;return a|0}function vB(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,i=0;i=l;l=l+4112|0;f=i+4100|0;g=i;do if((d|0)>=1){h=df(a)|0;if(h>>>0>4096){c[(Xd()|0)>>2]=36;a=-1;break}else{bD(g|0,a|0,h+1|0)|0;Oc(1,f|0)|0;a=wB(g,b,d,e,0)|0;Oc(c[f>>2]|0,0)|0;break}}else a=0;while(0);l=i;return a|0}function wB(b,d,e,f,g){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0,i=0,j=0,k=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0;w=l;l=l+112|0;s=w+28|0;t=w+8|0;u=w;v=df(b)|0;if(!((v|0)!=0?(i=v+-1|0,(a[b+i>>0]|0)==47):0))i=v;k=f&1;if(!k)if((le(b,s)|0)<0)if((c[(Xd()|0)>>2]|0)==2?(pe(b,s)|0)==0:0){p=7;q=13}else q=9;else q=10;else if(!(pe(b,s)|0))q=10;else q=9;a:do if((q|0)==9)if((c[(Xd()|0)>>2]|0)==13){p=4;q=13}else h=-1;else if((q|0)==10){j=c[s+12>>2]&61440;if(j<<16>>16<16384){switch(j<<16>>16){case -24576:break;default:{p=1;q=13;break a}}p=k<<1^7;q=13;break}else{switch(j<<16>>16){case 16384:break;default:{p=1;q=13;break a}}p=(Zn(b,4)|0)<0;p=p?3:f>>>1&4|2;q=13;break}}while(0);b:do if((q|0)==13){k=(g|0)!=0;j=c[s>>2]|0;if((f&2|0)!=0&k?(j|0)!=(c[g+4>>2]|0):0){h=0;break}c[t>>2]=g;c[t+4>>2]=j;m=s+72|0;c[t+8>>2]=c[m>>2];if(k){j=(c[g+12>>2]|0)+1|0;k=c[g+16>>2]|0}else{k=pp(b,47)|0;j=0;k=(k|0)==0?0:k-b|0}c[t+12>>2]=j;c[t+16>>2]=v+1;c[u+4>>2]=j;c[u>>2]=k;o=(f&8|0)!=0;if(!o?(h=ed[d&0](b,s,p,u)|0,h|0):0)break;if(g|0){k=c[s>>2]|0;j=c[m>>2]|0;h=g;do{if((c[h+4>>2]|0)==(k|0)?(c[h+8>>2]|0)==(j|0):0){h=0;break b}h=c[h>>2]|0}while((h|0)!=0)}do if((e|0)!=0&(p|4|0)==6){g=cq(b)|0;if(!g)if((c[(Xd()|0)>>2]|0)==13)break;else{h=-1;break b}h=dq(g)|0;c:do if(h|0){n=4096-v|0;k=b+i|0;m=k+1|0;j=e+-1|0;i=h;while(1){h=i+11|0;d:do if((a[h>>0]|0)==46){switch(a[i+12>>0]|0){case 0:break d;case 46:break;default:{q=33;break d}}if(a[i+13>>0]|0)q=33}else q=33;while(0);if((q|0)==33){q=0;if((df(h)|0)>>>0>=n>>>0){q=34;break}a[k>>0]=47;mh(m,h)|0;h=wB(b,d,j,f,t)|0;if(h|0){q=36;break}}i=dq(g)|0;if(!i)break c}if((q|0)==34){c[(Xd()|0)>>2]=36;eq(g)|0;h=-1;break b}else if((q|0)==36){eq(g)|0;break b}}while(0);eq(g)|0}while(0);a[b+v>>0]=0;if(o?(r=ed[d&0](b,s,p,u)|0,r|0):0){h=r;break}h=0}while(0);l=w;return h|0}function xB(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0;e=l;l=l+16|0;f=e;c[f>>2]=a;c[f+4>>2]=b;c[f+8>>2]=d;d=Wd(db(211,f|0)|0)|0;l=e;return d|0}function yB(b){b=b|0;var c=0,d=0;a:do if((b|0)!=0?(a[b>>0]|0)!=0:0){c=(df(b)|0)+-1|0;if((a[b+c>>0]|0)==47)do{if(!c){b=167763;break a}c=c+-1|0}while((a[b+c>>0]|0)==47);do{if(!c){b=167761;break a}c=c+-1|0}while((a[b+c>>0]|0)!=47);while(1){if(!c){b=167763;break a}d=c+-1|0;if((a[b+d>>0]|0)==47)c=d;else break}a[b+c>>0]=0}else b=167761;while(0);return b|0}function zB(a){a=a|0;a=AB(a,170736,22)|0;if(!a)a=170736;else{c[(Xd()|0)>>2]=a;a=0}return a|0}function AB(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0,i=0;h=l;l=l+32|0;g=h+16|0;i=h;f=h+20|0;e=(b|0)==0?0:d;c[i>>2]=a;c[i+4>>2]=-2147199952;c[i+8>>2]=f;d=Wb(54,i|0)|0;if(!d){c[g>>2]=c[f>>2];d=(sh(b,e,167765,g)|0)>>>0<e>>>0;d=d?0:34}else d=0-d|0;l=h;return d|0}function BB(a,b){a=a|0;b=b|0;var d=0,e=0;d=l;l=l+16|0;e=d;c[e>>2]=a;c[e+4>>2]=b;b=Wd(cc(77,e|0)|0)|0;l=d;return b|0}function CB(a,b){a=a|0;b=b|0;var d=0,e=0,f=0;f=l;l=l+400|0;d=f;io(d)|0;if((b|0)!=0?(e=d+325|0,(df(e)|0)>>>0<b>>>0):0){mh(a,e)|0;a=0}else{c[(Xd()|0)>>2]=22;a=-1}l=f;return a|0}function DB(a){a=a|0;var b=0;b=l;l=l+16|0;a=gf(167777,a,b)|0;l=b;return a|0}function EB(a){a=a|0;return 0}function FB(a){a=a|0;var b=0,d=0,e=0;b=l;l=l+16|0;d=b;e=b+4|0;c[e>>2]=0;c[d>>2]=e;a=zn(a,1074025521,d)|0;l=b;return a|0}function GB(){c[40528]=171472;return}function HB(a,d,e){a=a|0;d=d|0;e=e|0;var f=0,g=0,h=0,i=0,j=0,k=0;k=l;l=l+48|0;i=k+16|0;h=k+8|0;g=k;f=k+24|0;b[f>>1]=1;b[f+2>>1]=1;c[f+4>>2]=0;c[f+8>>2]=e;e=f+12|0;c[e>>2]=0;switch(d|0){case 3:{b[f>>1]=0;c[g>>2]=f;if((pj(a,12,g)|0)>=0)if((b[f>>1]|0)!=2?(i=c[e>>2]|0,(i|0)!=(mo()|0)):0){c[(Xd()|0)>>2]=13;e=-1}else e=0;else e=-1;break}case 0:{b[f>>1]=2;j=7;break}case 2:{j=7;break}case 1:{c[i>>2]=f;e=pj(a,14,i)|0;break}default:{c[(Xd()|0)>>2]=22;e=-1}}if((j|0)==7){c[h>>2]=f;e=pj(a,13,h)|0}l=k;return e|0}function IB(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0;f=c[40439]|0;b=Mf(b)|0;ww(f);if(((Yv(a,f)|0)>-1?Zv(b,df(b)|0,1,f)|0:0)?(Zv(d,1,e,f)|0)==(e|0):0)dw(10,f)|0;Cv(f);return}function JB(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,i=0,j=0,k=0,m=0,n=0,o=0,p=0,q=0;p=l;l=l+16|0;m=p+4|0;n=p;f=c[40476]|0;if((f|0)==0|(c[42883]|0)!=0){c[42883]=0;c[42884]=0;c[40476]=1;h=1}else h=f;a:do if((h|0)<(b|0)?(i=c[d+(h<<2)>>2]|0,g=i,(i|0)!=0):0){if((a[i>>0]|0)!=45){if((a[e>>0]|0)!=45){f=-1;break}c[40476]=h+1;c[42885]=g;f=1;break}f=i+1|0;switch(a[f>>0]|0){case 0:{f=-1;break a}case 45:{if(!(a[i+2>>0]|0)){c[40476]=h+1;f=-1;break a}break}default:{}}g=c[42884]|0;if(!g)c[42884]=1;else f=i+g|0;f=pn(m,f,4)|0;if((f|0)<0){c[m>>2]=65533;j=1;g=65533}else{j=f;g=c[m>>2]|0}f=c[40476]|0;h=c[d+(f<<2)>>2]|0;i=c[42884]|0;k=h+i|0;c[42886]=g;i=i+j|0;c[42884]=i;if(!(a[h+i>>0]|0)){c[40476]=f+1;c[42884]=0}switch(a[e>>0]|0){case 43:case 45:{e=e+1|0;break}default:{}}c[n>>2]=0;i=0;do{q=pn(n,e+i|0,4)|0;i=((q|0)>1?q:1)+i|0;f=c[n>>2]|0;g=c[m>>2]|0;h=(f|0)==(g|0);if(!q){o=24;break}}while(!h);if((o|0)==24)if(h)f=g;else{if(!((a[e>>0]|0)!=58&(c[40477]|0)!=0)){f=63;break}IB(c[d>>2]|0,167856,k,j);f=63;break}if((a[e+i>>0]|0)==58){h=e+(i+1)|0;do if((a[h>>0]|0)==58){c[42885]=0;g=c[42884]|0;if(!((a[h>>0]|0)!=58|(g|0)!=0))break a}else{if((c[40476]|0)<(b|0)){g=c[42884]|0;break}if((a[e>>0]|0)==58){f=58;break a}if(!(c[40477]|0)){f=63;break a}IB(c[d>>2]|0,167824,k,j);f=63;break a}while(0);q=c[40476]|0;c[40476]=q+1;c[42885]=(c[d+(q<<2)>>2]|0)+g;c[42884]=0}}else f=-1;while(0);l=p;return f|0}function KB(a,b){a=a|0;b=b|0;if((a|0)==0&(b|0)==0)a=0;else a=(LB(a,b)|0)+1|0;return a|0}function LB(a,b){a=a|0;b=b|0;if(!a)a=(MB(b)|0)+32|0;else a=MB(a)|0;return a|0}function MB(a){a=a|0;var b=0;if(a)if(!(a&1)){b=a;a=0;while(1){a=a+1|0;if(!(b&2))b=b>>>1;else break}}else a=0;else a=32;return a|0}function NB(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0;g=l;l=l+32|0;f=g+16|0;d=g;e=g+24|0;c[d>>2]=0;c[d+4>>2]=a;c[d+8>>2]=0;c[d+12>>2]=b;d=Wd(Lb(340,d|0)|0)|0;if(!d){f=b;if((c[f>>2]|0)==-1?(c[f+4>>2]|0)==-1:0){f=b;c[f>>2]=-1;c[f+4>>2]=-1}d=b+8|0;b=d;if((c[b>>2]|0)==-1?(c[b+4>>2]|0)==-1:0){c[d>>2]=-1;c[d+4>>2]=-1;d=0}else d=0}else if((c[(Xd()|0)>>2]|0)==38){c[f>>2]=a;c[f+4>>2]=e;if((Wd(Na(191,f|0)|0)|0)>=0){d=c[e>>2]|0;f=(d|0)==-1;h=b;c[h>>2]=f?-1:d;c[h+4>>2]=f?-1:0;h=c[e+4>>2]|0;d=(h|0)==-1;a=b+8|0;e=a;c[e>>2]=d?-1:h;c[e+4>>2]=d?-1:0;if(f){h=b;c[h>>2]=-1;c[h+4>>2]=-1}if(d){d=a;c[d>>2]=-1;c[d+4>>2]=-1;d=0}else d=0}else d=-1}l=g;return d|0}function OB(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;return PB(a,b,c,d,e,0)|0}function PB(b,d,e,f,g,h){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var i=0,j=0,k=0,l=0;i=c[40476]|0;if((i|0)==0|(c[42883]|0)!=0){c[42883]=0;c[42884]=0;c[40476]=1;l=1}else l=i;a:do if((l|0)<(b|0)?(j=c[d+(l<<2)>>2]|0,(j|0)!=0):0){switch(a[e>>0]|0){case 45:case 43:{i=QB(b,d,e,f,g,h)|0;break a}default:{}}k=l;while(1){if((a[j>>0]|0)==45?a[j+1>>0]|0:0)break;i=k+1|0;if((i|0)>=(b|0)){i=-1;break a}j=c[d+(i<<2)>>2]|0;if(!j){i=-1;break a}else k=i}c[40476]=k;i=QB(b,d,e,f,g,h)|0;if((k|0)>(l|0)){j=c[40476]|0;k=j-k|0;if((k|0)>0?(RB(d,l,j+-1|0),(k|0)!=1):0){j=1;do{RB(d,l,(c[40476]|0)+-1|0);j=j+1|0}while((j|0)!=(k|0))}c[40476]=k+l}}else i=-1;while(0);return i|0}function QB(b,d,e,f,g,h){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0;c[42885]=0;a:do if((f|0)!=0?(u=c[40476]|0,s=c[d+(u<<2)>>2]|0,(a[s>>0]|0)==45):0){i=a[s+1>>0]|0;if(!h){if(i<<24>>24!=45){v=35;break}if(!(a[s+2>>0]|0)){v=35;break}else i=45}else if(!(i<<24>>24)){v=35;break}t=a[e>>0]|0;t=(a[e+((t<<24>>24==43|t<<24>>24==45)&1)>>0]|0)==58;j=c[f>>2]|0;if(j){q=i<<24>>24==45?s+2|0:s+1|0;p=a[q>>0]|0;o=0;h=0;m=0;b:while(1){r=a[j>>0]|0;k=r<<24>>24==0;if(r<<24>>24==p<<24>>24&(k^1)){k=q;do{j=j+1|0;k=k+1|0;r=a[j>>0]|0;l=r<<24>>24==0;n=a[k>>0]|0}while(r<<24>>24==n<<24>>24&(l^1));r=k;k=l;j=n}else{r=q;j=p}switch(j<<24>>24){case 61:case 0:{if(k){h=1;break b}else{k=m;h=h+1|0}break}default:k=o}m=m+1|0;j=c[f+(m<<4)>>2]|0;if(!j){m=k;break}else o=k}if((h|0)==1){h=u+1|0;c[40476]=h;j=f+(m<<4)|0;k=f+(m<<4)+12|0;i=c[k>>2]|0;c[42886]=i;l=c[f+(m<<4)+4>>2]|0;do if((a[r>>0]|0)!=61){if((l|0)==1){s=c[d+(h<<2)>>2]|0;c[42885]=s;if(s|0){c[40476]=u+2;break}if(t){i=58;break a}if(!(c[40477]|0)){i=63;break a}u=c[d>>2]|0;i=c[j>>2]|0;IB(u,167824,i,df(i)|0);i=63;break a}}else{if(l|0){c[42885]=r+1;break}if(!((c[40477]|0)!=0&(t^1))){i=63;break a}u=c[d>>2]|0;i=c[j>>2]|0;IB(u,167787,i,df(i)|0);i=63;break a}while(0);if(g){c[g>>2]=m;i=c[k>>2]|0}h=c[f+(m<<4)+8>>2]|0;if(!h)break;c[h>>2]=i;i=0;break}}else h=0;if(i<<24>>24==45){i=s+2|0;if((c[40477]|0)!=0&(t^1)){u=c[d>>2]|0;IB(u,(h|0)==0?167856:167880,i,df(i)|0);i=c[40476]|0}else i=u;c[40476]=i+1;i=63}else v=35}else v=35;while(0);if((v|0)==35)i=JB(b,d,e)|0;return i|0}function RB(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0;e=c[a+(d<<2)>>2]|0;if((d|0)>(b|0))do{f=d;d=d+-1|0;c[a+(f<<2)>>2]=c[a+(d<<2)>>2]}while((d|0)>(b|0));c[a+(b<<2)>>2]=e;return}function SB(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;return PB(a,b,c,d,e,1)|0}function TB(a,b){a=a|0;b=b|0;var d=0,e=0;d=l;l=l+16|0;e=d;c[e>>2]=a;c[e+4>>2]=b;b=Wd(qa(121,e|0)|0)|0;l=d;return b|0}function UB(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0;h=c[b>>2]|0;c[e>>2]=0;f=Tg(h,44)|0;c[b>>2]=f;if(!f)c[b>>2]=h+(df(h)|0);else{c[b>>2]=f+1;a[f>>0]=0}f=c[d>>2]|0;a:do if(!f)b=-1;else{b=0;b:while(1){g=df(f)|0;if(!(Sg(f,h,g)|0))switch(a[h+g>>0]|0){case 0:break a;case 61:break b;default:{}}b=b+1|0;f=c[d+(b<<2)>>2]|0;if(!f){b=-1;break a}}c[e>>2]=h+g+1}while(0);return b|0}function VB(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0;e=l;l=l+64|0;d=e;a=WB(a,b,c)|0;if((a|0)!=0&(WB(152704,167904,d)|0)==(d|0)){d=(ef(d,152736,35)|0)==0;a=d?a:168108}else a=168108;l=e;return a|0}function WB(b,c,e){b=b|0;c=c|0;e=e|0;var f=0,g=0,h=0,i=0,j=0,k=0,m=0,n=0,o=0;o=l;l=l+112|0;j=o+16|0;n=o;k=Vg(b,30001)|0;if(k>>>0<=3e4?(Sg(c,167917,3)|0)==0:0){m=c+3|0;f=0;a:while(1){switch(a[m+f>>0]|0){case 36:case 0:break a;default:{}}f=f+1|0;if(f>>>0>=8){f=8;break}}XB(j);YB(j,b,k);YB(j,m,f);YB(j,b,k);ZB(j,n);XB(j);YB(j,b,k);i=f+3|0;YB(j,c,i);if(k>>>0>16){h=k+-17&-16;g=k;do{YB(j,n,16);g=g+-16|0}while(g>>>0>16);g=k+-16-h|0}else g=k;YB(j,n,g);a[n>>0]=0;if(k|0){g=k;do{if(!(g&1))YB(j,b,1);else YB(j,n,1);g=g>>>1}while((g|0)!=0)}ZB(j,n);g=0;do{XB(j);h=(g&1|0)!=0;if(h)YB(j,b,k);else YB(j,n,16);if((g>>>0)%3|0|0)YB(j,m,f);if((g>>>0)%7|0|0)YB(j,b,k);if(h)YB(j,n,16);else YB(j,b,k);ZB(j,n);g=g+1|0}while((g|0)!=1e3);bD(e|0,c|0,i|0)|0;f=e+3+f|0;a[f>>0]=36;f=f+1|0;g=0;do{f=_B(f,d[n+(d[167921+(g*3|0)+1>>0]|0)>>0]<<8|d[n+(d[167921+(g*3|0)>>0]|0)>>0]<<16|d[n+(d[167921+(g*3|0)+2>>0]|0)>>0],4)|0;g=g+1|0}while((g|0)!=5);a[(_B(f,d[n+11>>0]|0,2)|0)>>0]=0}else e=0;l=o;return e|0}function XB(a){a=a|0;var b=0;b=a;c[b>>2]=0;c[b+4>>2]=0;c[a+8>>2]=1732584193;c[a+12>>2]=-271733879;c[a+16>>2]=-1732584194;c[a+20>>2]=271733878;return}function YB(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0;f=a;h=c[f>>2]|0;e=h&63;f=QC(h|0,c[f+4>>2]|0,d|0,0)|0;h=a;c[h>>2]=f;c[h+4>>2]=y;do if(e){f=64-e|0;e=a+24+e|0;if(f>>>0>d>>>0){bD(e|0,b|0,d|0)|0;break}else{bD(e|0,b|0,f|0)|0;aC(a,a+24|0);d=d-f|0;b=b+f|0;g=5;break}}else g=5;while(0);if((g|0)==5){if(d>>>0>63){f=d+-64|0;g=f&-64;h=g+64|0;e=b;while(1){aC(a,e);d=d+-64|0;if(d>>>0<=63)break;else e=e+64|0}d=f-g|0;b=b+h|0}bD(a+24|0,b|0,d|0)|0}return}function ZB(b,d){b=b|0;d=d|0;var e=0,f=0,g=0;$B(b);e=0;do{g=b+8+(e<<2)|0;f=e<<2;a[d+f>>0]=c[g>>2];a[d+(f|1)>>0]=(c[g>>2]|0)>>>8;a[d+(f|2)>>0]=(c[g>>2]|0)>>>16;a[d+(f|3)>>0]=(c[g>>2]|0)>>>24;e=e+1|0}while((e|0)!=4);return}function _B(b,c,d){b=b|0;c=c|0;d=d|0;var e=0;if((d|0)>0)while(1){e=b+1|0;a[b>>0]=a[160784+(c&63)>>0]|0;if((d|0)>1){c=c>>>6;b=e;d=d+-1|0}else{b=e;break}}return b|0}function $B(b){b=b|0;var d=0,e=0,f=0,g=0,h=0;f=c[b>>2]&63;d=b+24|0;e=f+1|0;a[b+24+f>>0]=-128;if(f>>>0>55){dD(b+24+e|0,0,f^63|0)|0;aC(b,d);e=0}dD(b+24+e|0,0,56-e|0)|0;f=b;e=c[f>>2]|0;f=c[f+4>>2]|0;g=_C(e|0,f|0,3)|0;h=b;c[h>>2]=g;c[h+4>>2]=y;a[b+80>>0]=g;g=ZC(e|0,f|0,5)|0;a[b+81>>0]=g;g=ZC(e|0,f|0,13)|0;a[b+82>>0]=g;g=ZC(e|0,f|0,21)|0;a[b+83>>0]=g;g=ZC(e|0,f|0,29)|0;a[b+84>>0]=g;g=ZC(e|0,f|0,37)|0;a[b+85>>0]=g;g=ZC(e|0,f|0,45)|0;a[b+86>>0]=g;f=ZC(e|0,f|0,53)|0;a[b+87>>0]=f;aC(b,d);return}function aC(a,b){a=a|0;b=b|0;var e=0,f=0,g=0,h=0,i=0,j=0,k=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0;s=l;l=l+64|0;r=s;e=0;do{q=e<<2;c[r+(e<<2)>>2]=(d[b+(q|3)>>0]|0)<<24|((d[b+(q|2)>>0]|0)<<16|((d[b+(q|1)>>0]|0)<<8|(d[b+q>>0]|0)));e=e+1|0}while((e|0)!=16);k=a+8|0;m=c[k>>2]|0;n=a+12|0;o=c[n>>2]|0;p=a+16|0;q=c[p>>2]|0;i=a+20|0;j=c[i>>2]|0;e=q;a=o;f=m;g=j;b=0;do{f=(bC(((g^e)&a^g)+f+(c[r+(b<<2)>>2]|0)+(c[152784+(b<<2)>>2]|0)|0,7)|0)+a|0;h=b|1;g=(bC((c[r+(h<<2)>>2]|0)+g+(c[152784+(h<<2)>>2]|0)+(f&(e^a)^e)|0,12)|0)+f|0;h=b|2;e=(bC((c[r+(h<<2)>>2]|0)+e+(c[152784+(h<<2)>>2]|0)+(g&(f^a)^a)|0,17)|0)+g|0;h=b|3;a=(bC((c[r+(h<<2)>>2]|0)+a+(c[152784+(h<<2)>>2]|0)+(e&(g^f)^f)|0,22)|0)+e|0;b=b+4|0}while(b>>>0<16);b=16;do{f=(bC((g&(e^a)^e)+f+(c[r+((b*5&12|1)<<2)>>2]|0)+(c[152784+(b<<2)>>2]|0)|0,5)|0)+a|0;h=b|1;g=(bC((c[r+(((h*5|0)+1&14)<<2)>>2]|0)+g+(c[152784+(h<<2)>>2]|0)+((f^a)&e^a)|0,9)|0)+f|0;h=b|2;e=(bC((c[r+((h*5&14|1)<<2)>>2]|0)+e+(c[152784+(h<<2)>>2]|0)+((g^f)&a^f)|0,14)|0)+g|0;h=b|3;a=(bC((c[r+(((h*5|0)+1&12)<<2)>>2]|0)+a+(c[152784+(h<<2)>>2]|0)+((e^g)&f^g)|0,20)|0)+e|0;b=b+4|0}while(b>>>0<32);h=g;b=32;do{g=e^a;f=(bC((g^h)+f+(c[r+(((b*3|0)+5&13)<<2)>>2]|0)+(c[152784+(b<<2)>>2]|0)|0,4)|0)+a|0;t=b|1;h=(bC((c[r+(((t*3|0)+5&12)<<2)>>2]|0)+h+(c[152784+(t<<2)>>2]|0)+(g^f)|0,11)|0)+f|0;g=b|2;e=(bC((c[r+(((g*3|0)+5&15)<<2)>>2]|0)+e+(c[152784+(g<<2)>>2]|0)+(f^a^h)|0,16)|0)+h|0;g=b|3;a=(bC((c[r+(((g*3|0)+5&14)<<2)>>2]|0)+a+(c[152784+(g<<2)>>2]|0)+(h^f^e)|0,23)|0)+e|0;b=b+4|0}while(b>>>0<48);g=a;b=h;a=48;do{f=(bC(((g|~b)^e)+f+(c[r+((a*7&12)<<2)>>2]|0)+(c[152784+(a<<2)>>2]|0)|0,6)|0)+g|0;t=a|1;b=(bC((c[r+((t*7&15)<<2)>>2]|0)+b+(c[152784+(t<<2)>>2]|0)+((f|~e)^g)|0,10)|0)+f|0;t=a|2;e=(bC((c[r+((t*7&14)<<2)>>2]|0)+e+(c[152784+(t<<2)>>2]|0)+((b|~g)^f)|0,15)|0)+b|0;t=a|3;g=(bC((c[r+((t*7&13)<<2)>>2]|0)+g+(c[152784+(t<<2)>>2]|0)+((e|~f)^b)|0,21)|0)+e|0;a=a+4|0}while(a>>>0<64);c[k>>2]=f+m;c[n>>2]=g+o;c[p>>2]=e+q;c[i>>2]=b+j;l=s;return}function bC(a,b){a=a|0;b=b|0;return a>>>(32-b|0)|a<<b|0}function cC(b,c,d){b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0;a:do if(((a[c>>0]|0)==36?(f=a[c+1>>0]|0,f<<24>>24!=0):0)?(e=a[c+2>>0]|0,e<<24>>24!=0):0){e=e<<24>>24==36;if(f<<24>>24==49&e){e=VB(b,c,d)|0;break}switch(f<<24>>24){case 50:{if((a[c+3>>0]|0)!=36){g=13;break a}e=dC(b,c,d)|0;break a}case 53:{if(!e){g=13;break a}e=eC(b,c,d)|0;break a}case 54:{if(!e){g=13;break a}e=fC(b,c,d)|0;break a}default:{g=13;break a}}}else g=13;while(0);if((g|0)==13)e=gC(b,c,d)|0;return e|0}function dC(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,i=0,j=0,k=0,m=0;m=l;l=l+416|0;f=m+312|0;h=m+240|0;i=m+160|0;j=m+80|0;k=m;e=GC(b,d,e,16)|0;bD(f|0,168056,30)|0;g=(e|0)!=0;if(g)a[f+2>>0]=a[d+2>>0]|0;b=f+30|0;dD(b|0,85,63)|0;a[f+92>>0]=0;if((GC(168086,f,b,1)|0)==(b|0)?(ef(b,f,29)|0)==0:0)b=(ef(f+59|0,161120+((a[f+2>>0]&1)*34|0)|0,34)|0)==0;else b=0;HC(168096,h,i,2);HC(168096,j,k,4);f=c[i>>2]^65536;c[i>>2]=f;if((b&(f|0)==-610510404?(c[j+68>>2]|0)==859059456:0)?(ef(h,j,72)|0)==0:0)b=(ef(i,k,72)|0)==0;else b=0;l=m;return (g&b?e:168108)|0}function eC(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0;e=l;l=l+128|0;d=e;a=xC(a,b,c)|0;if((a|0)!=0&(xC(160608,160640,d)|0)==(d|0)){d=(ef(d,160672,73)|0)==0;a=d?a:168108}else a=168108;l=e;return a|0}function fC(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0;e=l;l=l+128|0;d=e;a=oC(a,b,c)|0;if((a|0)!=0&(oC(159712,159744,d)|0)==(d|0)){d=(ef(d,159776,116)|0)==0;a=d?a:168108}else a=168108;l=e;return a|0}function gC(b,c,d){b=b|0;c=c|0;d=d|0;var e=0,f=0;f=l;l=l+32|0;e=(a[c>>0]|0)==95;b=hC(b,c,d)|0;d=hC(167949,e?167936:167946,f)|0;if(!((d|0)!=0?(b|0)!=0&(Ef(d,e?167970:167991)|0)==0:0))b=(a[c>>0]|0)==42?168005:168108;l=f;return b|0}function hC(b,e,f){b=b|0;e=e|0;f=f|0;var g=0,h=0,i=0,j=0,k=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0;r=l;l=l+144|0;o=r+8|0;m=r+136|0;p=r+4|0;q=r;n=m+7|0;g=m;do{a[g>>0]=d[b>>0]<<1;g=g+1|0;b=(a[b>>0]|0)==0?b:b+1|0}while(g>>>0<=n>>>0);iC(m,o);g=a[e>>0]|0;a:do if(g<<24>>24==95){h=1;g=0;do{j=a[e+h>>0]|0;i=jC(j&255)|0;if((a[160784+i>>0]|0)!=j<<24>>24){f=0;break a}g=i<<(h*6|0)+-6|g;h=h+1|0}while(h>>>0<5);if(!g)f=0;else{h=0;i=5;do{s=a[e+i>>0]|0;j=jC(s&255)|0;if((a[160784+j>>0]|0)!=s<<24>>24){f=0;break a}h=j<<(i*6|0)+-30|h;i=i+1|0}while(i>>>0<9);if(a[b>>0]|0)do{kC(m,m,o);j=m;do{i=a[b>>0]|0;if(!(i<<24>>24))break;b=b+1|0;a[j>>0]=(i&255)<<1^d[j>>0];j=j+1|0}while(j>>>0<=n>>>0);iC(m,o)}while((a[b>>0]|0)!=0);bD(f|0,e|0,9)|0;b=f+9|0;a[b>>0]=0;k=21}}else if((lC(g)|0)==0?(h=e+1|0,i=a[h>>0]|0,(lC(i)|0)==0):0){k=(jC(i&255)|0)<<6;k=k|(jC(g&255)|0);a[f>>0]=g;a[f+1>>0]=a[h>>0]|0;b=f+2|0;h=k;g=25;k=21}else f=0;while(0);if((k|0)==21){nC(0,0,p,q,g,mC(h)|0,o);p=c[p>>2]|0;a[b>>0]=a[160784+(p>>>26)>>0]|0;a[b+1>>0]=a[160784+(p>>>20&63)>>0]|0;a[b+2>>0]=a[160784+(p>>>14&63)>>0]|0;a[b+3>>0]=a[160784+(p>>>8&63)>>0]|0;s=c[q>>2]|0;q=s>>>16;a[b+4>>0]=a[160784+(p>>>2&63)>>0]|0;a[b+5>>0]=a[160784+((q|p<<16)>>>12&63)>>0]|0;a[b+6>>0]=a[160784+(s>>>22&63)>>0]|0;a[b+7>>0]=a[160784+(q&63)>>0]|0;a[b+8>>0]=a[160784+(s>>>10&63)>>0]|0;a[b+9>>0]=a[160784+(s>>>4&63)>>0]|0;a[b+10>>0]=a[160784+(s<<2&60)>>0]|0;a[b+11>>0]=0}l=r;return f|0}function iC(a,b){a=a|0;b=b|0;var e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0;g=(d[a+2>>0]|0)<<8|(d[a+3>>0]|0)|(d[a+1>>0]|0)<<16|(d[a>>0]|0)<<24;f=(d[a+6>>0]|0)<<8|(d[a+7>>0]|0)|(d[a+5>>0]|0)<<16|(d[a+4>>0]|0)<<24;l=0;m=0;a=28;e=0;while(1){j=e<<1;i=g>>>a&15;l=c[157648+(e<<6)+(i<<2)>>2]|l|c[157648+(e+4<<6)+((f>>>a&15)<<2)>>2];k=a+-4|0;m=c[158160+(j<<6)+(i<<2)>>2]|m|c[158160+((j|1)<<6)+((g>>>k&15)<<2)>>2]|c[158160+(e+8<<6)+((f>>>k&15)<<2)>>2];e=e+1|0;if((e|0)==4)break;else a=a+-8|0}a=0;g=0;do{g=g+(d[158928+a>>0]|0)|0;k=28-g|0;j=l>>>k|l<<g;k=m>>>k|m<<g;e=0;f=0;h=25;i=0;while(1){n=h+-4|0;f=c[158944+(i<<5)+((j>>>h&7)<<2)>>2]|f|c[159200+(i<<6)+((j>>>n&15)<<2)>>2];e=c[159072+(i<<5)+((k>>>h&7)<<2)>>2]|e|c[159456+(i<<6)+((k>>>n&15)<<2)>>2];i=i+1|0;if((i|0)==4)break;else h=h+-7|0}c[b+(a<<2)>>2]=f;c[b+64+(a<<2)>>2]=e;a=a+1|0}while((a|0)!=16);return}function jC(a){a=a|0;a=(a|0)<128?a:a+-256|0;return ((a|0)>64?((a|0)>96?5:11):18)+a&63|0}function kC(b,e,f){b=b|0;e=e|0;f=f|0;var g=0,h=0,i=0;g=l;l=l+16|0;i=g+4|0;h=g;nC((d[b+2>>0]|0)<<8|(d[b+3>>0]|0)|(d[b+1>>0]|0)<<16|(d[b>>0]|0)<<24,(d[b+6>>0]|0)<<8|(d[b+7>>0]|0)|(d[b+5>>0]|0)<<16|(d[b+4>>0]|0)<<24,i,h,1,0,f);f=c[i>>2]|0;a[e>>0]=f>>>24;a[e+1>>0]=f>>>16;a[e+2>>0]=f>>>8;a[e+3>>0]=f;f=c[h>>2]|0;a[e+4>>0]=f>>>24;a[e+5>>0]=f>>>16;a[e+6>>0]=f>>>8;a[e+7>>0]=f;l=g;return}function lC(a){a=a|0;switch(a<<24>>24){case 10:case 0:{a=1;break}default:a=a<<24>>24==58&1}return a|0}function mC(a){a=a|0;var b=0,c=0,d=0,e=0;b=0;c=1;d=8388608;e=0;while(1){b=((c&a|0)==0?0:d)|b;e=e+1|0;if((e|0)==24)break;else{c=c<<1;d=d>>>1}}return b|0}function nC(a,b,d,e,f,g,h){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var i=0,j=0,k=0,l=0,m=0,n=0,o=0;if(!(b|a)){i=0;l=0}else{i=0;j=28;k=0;l=0;while(1){o=a>>>j&15;n=k+8|0;m=b>>>j&15;i=c[153040+(k<<6)+(o<<2)>>2]|i|c[153040+(n<<6)+(m<<2)>>2];l=c[154064+(k<<6)+(o<<2)>>2]|l|c[154064+(n<<6)+(m<<2)>>2];k=k+1|0;if((k|0)==8)break;else j=j+-4|0}}if(!f)b=i;else{m=h+64|0;b=f;do{j=m;k=h;a=16;while(1){a=a+-1|0;n=l<<23&8388608|l>>>9&8126464|l>>>11&258048|l>>>13&4032|l>>>15&63;o=l<<5&258048|l>>>31|l<<7&16515072|l<<3&4032|l<<1&62;f=(n^o)&g;n=f^n^c[k>>2];o=f^o^c[j>>2];i=(c[155344+((n>>>12&63)<<2)>>2]|c[155088+(n>>>18<<2)>>2]|c[155600+((n>>>6&63)<<2)>>2]|c[155856+((n&63)<<2)>>2]|c[156112+(o>>>18<<2)>>2]|c[156368+((o>>>12&63)<<2)>>2]|c[156624+((o>>>6&63)<<2)>>2]|c[156880+((o&63)<<2)>>2])^i;if(!a)break;else{o=l;j=j+4|0;k=k+4|0;l=i;i=o}}b=b+-1|0}while((b|0)!=0);b=i}i=0;j=28;k=0;a=0;while(1){n=k+4|0;a=c[157136+(k<<6)+((b>>>j&15)<<2)>>2]|a|c[157136+(n<<6)+((l>>>j&15)<<2)>>2];o=j+-4|0;i=c[157136+(k<<6)+((b>>>o&15)<<2)>>2]|i|c[157136+(n<<6)+((l>>>o&15)<<2)>>2];k=k+1|0;if((k|0)==4)break;else j=j+-8|0}c[d>>2]=i;c[e>>2]=a;return}function oC(b,e,f){b=b|0;e=e|0;f=f|0;var g=0,h=0,i=0,j=0,k=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0;u=l;l=l+448|0;s=u+432|0;m=u+424|0;o=u+224|0;t=u+160|0;p=u+96|0;q=u+32|0;r=u;k=u+444|0;c[r>>2]=0;c[r+4>>2]=0;c[r+8>>2]=0;c[r+12>>2]=0;c[r+16>>2]=0;n=0;while(1){if(!(a[b+n>>0]|0)){i=4;break}h=n+1|0;if(h>>>0<257)n=h;else{f=0;break}}a:do if((i|0)==4)if(!(Sg(e,168007,3)|0)){h=e+3|0;b:do if(!(Sg(h,168026,7)|0)){h=e+10|0;do if(uf(a[h>>0]|0)|0?(g=Vf(h,k,10)|0,j=c[k>>2]|0,(a[j>>0]|0)==36):0){h=j+1|0;if(g>>>0>=1e3){if(g>>>0>9999999)break}else g=1e3;c[m>>2]=g;Oj(r,168034,m)|0;j=h;i=g;break b}while(0);f=0;break a}else{j=h;i=5e3}while(0);g=0;c:while(1){switch(a[j+g>>0]|0){case 58:case 10:{f=0;break a}case 36:case 0:break c;default:{}}g=g+1|0;if(g>>>0>=16){g=16;break}}pC(o);qC(o,b,n);qC(o,j,g);qC(o,b,n);rC(o,t);pC(o);qC(o,b,n);qC(o,j,g);sC(o,n,t);e=(n|0)==0;if(!e){h=n;do{if(!(h&1))qC(o,b,n);else qC(o,t,64);h=h>>>1}while((h|0)!=0);rC(o,t);pC(o);if(!e){h=0;do{qC(o,b,n);h=h+1|0}while((h|0)!=(n|0))}}else{rC(o,t);pC(o)}rC(o,p);pC(o);e=(d[t>>0]|0)+15|0;h=0;while(1){qC(o,j,g);if((h|0)==(e|0))break;else h=h+1|0}rC(o,q);if(i|0){h=0;do{pC(o);e=(h&1|0)!=0;if(e)sC(o,n,p);else qC(o,t,64);if((h>>>0)%3|0|0)qC(o,q,g);if((h>>>0)%7|0|0)sC(o,n,p);if(e)qC(o,t,64);else sC(o,n,p);rC(o,t);h=h+1|0}while((h|0)!=(i|0))}c[s>>2]=r;c[s+4>>2]=g;c[s+8>>2]=j;g=f+(Oj(f,168011,s)|0)|0;h=0;do{g=tC(g,d[t+(d[159904+(h*3|0)+1>>0]|0)>>0]<<8|d[t+(d[159904+(h*3|0)>>0]|0)>>0]<<16|d[t+(d[159904+(h*3|0)+2>>0]|0)>>0],4)|0;h=h+1|0}while((h|0)!=21);a[(tC(g,d[t+63>>0]|0,2)|0)>>0]=0}else f=0;while(0);l=u;return f|0}function pC(a){a=a|0;var b=0;b=a;c[b>>2]=0;c[b+4>>2]=0;b=a+8|0;c[b>>2]=-205731576;c[b+4>>2]=1779033703;b=a+16|0;c[b>>2]=-2067093701;c[b+4>>2]=-1150833019;b=a+24|0;c[b>>2]=-23791573;c[b+4>>2]=1013904242;b=a+32|0;c[b>>2]=1595750129;c[b+4>>2]=-1521486534;b=a+40|0;c[b>>2]=-1377402159;c[b+4>>2]=1359893119;b=a+48|0;c[b>>2]=725511199;c[b+4>>2]=-1694144372;b=a+56|0;c[b>>2]=-79577749;c[b+4>>2]=528734635;a=a+64|0;c[a>>2]=327033209;c[a+4>>2]=1541459225;return}function qC(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0;f=a;h=c[f>>2]|0;e=h&127;f=QC(h|0,c[f+4>>2]|0,d|0,0)|0;h=a;c[h>>2]=f;c[h+4>>2]=y;do if(e){f=128-e|0;e=a+72+e|0;if(f>>>0>d>>>0){bD(e|0,b|0,d|0)|0;break}else{bD(e|0,b|0,f|0)|0;vC(a,a+72|0);d=d-f|0;b=b+f|0;g=5;break}}else g=5;while(0);if((g|0)==5){if(d>>>0>127){f=d+-128|0;g=f&-128;h=g+128|0;e=b;while(1){vC(a,e);d=d+-128|0;if(d>>>0<=127)break;else e=e+128|0}d=f-g|0;b=b+h|0}bD(a+72|0,b|0,d|0)|0}return}function rC(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0;uC(b);e=0;do{g=b+8+(e<<3)|0;h=g;h=ZC(c[h>>2]|0,c[h+4>>2]|0,56)|0;f=e<<3;a[d+f>>0]=h;h=g;h=ZC(c[h>>2]|0,c[h+4>>2]|0,48)|0;a[d+(f|1)>>0]=h;h=g;h=ZC(c[h>>2]|0,c[h+4>>2]|0,40)|0;a[d+(f|2)>>0]=h;a[d+(f|3)>>0]=c[g+4>>2];h=g;h=ZC(c[h>>2]|0,c[h+4>>2]|0,24)|0;a[d+(f|4)>>0]=h;h=g;h=ZC(c[h>>2]|0,c[h+4>>2]|0,16)|0;a[d+(f|5)>>0]=h;h=g;h=ZC(c[h>>2]|0,c[h+4>>2]|0,8)|0;a[d+(f|6)>>0]=h;a[d+(f|7)>>0]=c[g>>2];e=e+1|0}while((e|0)!=8);return}function sC(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0;if(b>>>0>64){e=b+-65&-64;d=b;do{qC(a,c,64);d=d+-64|0}while(d>>>0>64);b=b+-64-e|0}qC(a,c,b);return}function tC(b,c,d){b=b|0;c=c|0;d=d|0;var e=0;if((d|0)>0)while(1){e=b+1|0;a[b>>0]=a[160784+(c&63)>>0]|0;if((d|0)>1){c=c>>>6;b=e;d=d+-1|0}else{b=e;break}}return b|0}function uC(b){b=b|0;var d=0,e=0,f=0,g=0,h=0;f=c[b>>2]&127;d=b+72|0;e=f+1|0;a[b+72+f>>0]=-128;if(f>>>0>111){dD(b+72+e|0,0,f^127|0)|0;vC(b,d);e=0}dD(b+72+e|0,0,120-e|0)|0;e=b;g=c[e>>2]|0;e=c[e+4>>2]|0;f=_C(g|0,e|0,3)|0;h=b;c[h>>2]=f;c[h+4>>2]=y;h=ZC(g|0,e|0,53)|0;a[b+192>>0]=h;h=ZC(g|0,e|0,45)|0;a[b+193>>0]=h;h=ZC(g|0,e|0,37)|0;a[b+194>>0]=h;h=ZC(g|0,e|0,29)|0;a[b+195>>0]=h;h=ZC(g|0,e|0,21)|0;a[b+196>>0]=h;h=ZC(g|0,e|0,13)|0;a[b+197>>0]=h;e=ZC(g|0,e|0,5)|0;a[b+198>>0]=e;a[b+199>>0]=f;vC(b,d);return}function vC(a,b){a=a|0;b=b|0;var e=0,f=0,g=0,h=0,i=0,j=0,k=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0,Z=0,_=0,$=0,aa=0;U=l;l=l+640|0;T=U;e=0;do{Q=e<<3;P=_C(d[b+Q>>0]|0|0,0,56)|0;R=y;O=_C(d[b+(Q|1)>>0]|0|0,0,48)|0;R=y|R;N=_C(d[b+(Q|2)>>0]|0|0,0,40)|0;R=d[b+(Q|3)>>0]|0|(y|R);M=_C(d[b+(Q|4)>>0]|0|0,0,24)|0;R=y|R;L=_C(d[b+(Q|5)>>0]|0|0,0,16)|0;R=y|R;K=_C(d[b+(Q|6)>>0]|0|0,0,8)|0;S=T+(e<<3)|0;c[S>>2]=K|(L|(M|(N|(O|P))))|(d[b+(Q|7)>>0]|0);c[S+4>>2]=y|R;e=e+1|0}while((e|0)!=16);f=T;e=16;b=c[f>>2]|0;f=c[f+4>>2]|0;do{K=T+(e+-2<<3)|0;L=c[K>>2]|0;K=c[K+4>>2]|0;O=wC(L,K,19)|0;Q=y;N=wC(L,K,61)|0;M=y;K=ZC(L|0,K|0,6)|0;L=T+(e+-7<<3)|0;L=QC(K^O^N|0,y^Q^M|0,c[L>>2]|0,c[L+4>>2]|0)|0;M=y;Q=T+(e+-15<<3)|0;N=b;b=c[Q>>2]|0;O=f;f=c[Q+4>>2]|0;Q=wC(b,f,1)|0;K=y;S=wC(b,f,8)|0;R=y;P=ZC(b|0,f|0,7)|0;R=y^K^R;O=QC(L|0,M|0,N|0,O|0)|0;R=QC(O|0,y|0,P^Q^S|0,R|0)|0;S=T+(e<<3)|0;c[S>>2]=R;c[S+4>>2]=y;e=e+1|0}while((e|0)!=80);x=a+8|0;A=x;z=c[A>>2]|0;A=c[A+4>>2]|0;B=a+16|0;D=B;C=c[D>>2]|0;D=c[D+4>>2]|0;E=a+24|0;G=E;F=c[G>>2]|0;G=c[G+4>>2]|0;H=a+32|0;J=H;I=c[J>>2]|0;J=c[J+4>>2]|0;K=a+40|0;M=K;L=c[M>>2]|0;M=c[M+4>>2]|0;N=a+48|0;P=N;O=c[P>>2]|0;P=c[P+4>>2]|0;Q=a+56|0;S=Q;R=c[S>>2]|0;S=c[S+4>>2]|0;h=a+64|0;j=h;i=c[j>>2]|0;j=c[j+4>>2]|0;g=0;k=L;m=M;n=O;o=R;p=P;q=S;e=i;b=j;r=z;s=A;t=C;u=D;v=F;w=G;f=I;a=J;while(1){$=wC(k,m,14)|0;Y=y;aa=wC(k,m,18)|0;Y=y^Y;W=wC(k,m,41)|0;Y=Y^y;X=159968+(g<<3)|0;V=c[X>>2]|0;X=c[X+4>>2]|0;_=T+(g<<3)|0;Z=c[_>>2]|0;_=c[_+4>>2]|0;e=QC((o^n)&k^o|0,(q^p)&m^q|0,e|0,b|0)|0;Y=QC(e|0,y|0,aa^$^W|0,Y|0)|0;X=QC(Y|0,y|0,V|0,X|0)|0;_=QC(X|0,y|0,Z|0,_|0)|0;Z=y;X=wC(r,s,28)|0;V=y;Y=wC(r,s,34)|0;V=y^V;W=wC(r,s,39)|0;V=V^y;e=QC(_|0,Z|0,f|0,a|0)|0;b=y;f=QC(_|0,Z|0,v&(t|r)|t&r|0,w&(u|s)|u&s|0)|0;f=QC(f|0,y|0,Y^X^W|0,V|0)|0;a=y;g=g+1|0;if((g|0)==80)break;else{Z=s;_=r;$=m;aa=k;k=e;m=b;r=f;s=a;a=w;f=v;w=u;v=t;u=Z;t=_;b=q;e=o;q=p;p=$;o=n;n=aa}}aa=QC(f|0,a|0,z|0,A|0)|0;$=x;c[$>>2]=aa;c[$+4>>2]=y;$=QC(r|0,s|0,C|0,D|0)|0;aa=B;c[aa>>2]=$;c[aa+4>>2]=y;aa=QC(t|0,u|0,F|0,G|0)|0;$=E;c[$>>2]=aa;c[$+4>>2]=y;$=QC(v|0,w|0,I|0,J|0)|0;aa=H;c[aa>>2]=$;c[aa+4>>2]=y;aa=QC(e|0,b|0,L|0,M|0)|0;$=K;c[$>>2]=aa;c[$+4>>2]=y;$=QC(k|0,m|0,O|0,P|0)|0;aa=N;c[aa>>2]=$;c[aa+4>>2]=y;aa=QC(n|0,p|0,R|0,S|0)|0;$=Q;c[$>>2]=aa;c[$+4>>2]=y;$=QC(o|0,q|0,i|0,j|0)|0;aa=h;c[aa>>2]=$;c[aa+4>>2]=y;l=U;return}function wC(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0;d=ZC(a|0,b|0,c|0)|0;e=y;c=_C(a|0,b|0,64-c|0)|0;y=y|e;return c|d|0}function xC(b,e,f){b=b|0;e=e|0;f=f|0;var g=0,h=0,i=0,j=0,k=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0;t=l;l=l+256|0;r=t+240|0;k=t+232|0;m=t+128|0;s=t+96|0;n=t+64|0;o=t+32|0;p=t;j=t+252|0;c[p>>2]=0;c[p+4>>2]=0;c[p+8>>2]=0;c[p+12>>2]=0;c[p+16>>2]=0;q=Vg(b,257)|0;a:do if(q>>>0<=256?(Sg(e,168022,3)|0)==0:0){h=e+3|0;b:do if(!(Sg(h,168026,7)|0)){e=e+10|0;do if(uf(a[e>>0]|0)|0?(g=Vf(e,j,10)|0,i=c[j>>2]|0,(a[i>>0]|0)==36):0){e=i+1|0;if(g>>>0>=1e3){if(g>>>0>9999999)break}else g=1e3;c[k>>2]=g;Oj(p,168034,k)|0;j=e;i=g;break b}while(0);f=0;break a}else{j=h;i=5e3}while(0);g=0;c:while(1){switch(a[j+g>>0]|0){case 58:case 10:{f=0;break a}case 36:case 0:break c;default:{}}g=g+1|0;if(g>>>0>=16){g=16;break}}yC(m);zC(m,b,q);zC(m,j,g);zC(m,b,q);AC(m,s);yC(m);zC(m,b,q);zC(m,j,g);BC(m,q,s);h=(q|0)==0;if(!h){e=q;do{if(!(e&1))zC(m,b,q);else zC(m,s,32);e=e>>>1}while((e|0)!=0);AC(m,s);yC(m);if(!h){e=0;do{zC(m,b,q);e=e+1|0}while((e|0)!=(q|0))}}else{AC(m,s);yC(m)}AC(m,n);yC(m);h=(d[s>>0]|0)+15|0;e=0;while(1){zC(m,j,g);if((e|0)==(h|0))break;else e=e+1|0}AC(m,o);if(i|0){e=0;do{yC(m);h=(e&1|0)!=0;if(h)BC(m,q,n);else zC(m,s,32);if((e>>>0)%3|0|0)zC(m,o,g);if((e>>>0)%7|0|0)BC(m,q,n);if(h)zC(m,s,32);else BC(m,q,n);AC(m,s);e=e+1|0}while((e|0)!=(i|0))}c[r>>2]=p;c[r+4>>2]=g;c[r+8>>2]=j;g=f+(Oj(f,168045,r)|0)|0;e=0;do{g=CC(g,d[s+(d[160752+(e*3|0)+1>>0]|0)>>0]<<8|d[s+(d[160752+(e*3|0)>>0]|0)>>0]<<16|d[s+(d[160752+(e*3|0)+2>>0]|0)>>0],4)|0;e=e+1|0}while((e|0)!=10);a[(CC(g,d[s+31>>0]<<8|d[s+30>>0],3)|0)>>0]=0}else f=0;while(0);l=t;return f|0}function yC(a){a=a|0;var b=0;b=a;c[b>>2]=0;c[b+4>>2]=0;c[a+8>>2]=1779033703;c[a+12>>2]=-1150833019;c[a+16>>2]=1013904242;c[a+20>>2]=-1521486534;c[a+24>>2]=1359893119;c[a+28>>2]=-1694144372;c[a+32>>2]=528734635;c[a+36>>2]=1541459225;return}function zC(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0;f=a;h=c[f>>2]|0;e=h&63;f=QC(h|0,c[f+4>>2]|0,d|0,0)|0;h=a;c[h>>2]=f;c[h+4>>2]=y;do if(e){f=64-e|0;e=a+40+e|0;if(f>>>0>d>>>0){bD(e|0,b|0,d|0)|0;break}else{bD(e|0,b|0,f|0)|0;EC(a,a+40|0);d=d-f|0;b=b+f|0;g=5;break}}else g=5;while(0);if((g|0)==5){if(d>>>0>63){f=d+-64|0;g=f&-64;h=g+64|0;e=b;while(1){EC(a,e);d=d+-64|0;if(d>>>0<=63)break;else e=e+64|0}d=f-g|0;b=b+h|0}bD(a+40|0,b|0,d|0)|0}return}function AC(b,d){b=b|0;d=d|0;var e=0,f=0,g=0;DC(b);e=0;do{g=b+8+(e<<2)|0;f=e<<2;a[d+f>>0]=(c[g>>2]|0)>>>24;a[d+(f|1)>>0]=(c[g>>2]|0)>>>16;a[d+(f|2)>>0]=(c[g>>2]|0)>>>8;a[d+(f|3)>>0]=c[g>>2];e=e+1|0}while((e|0)!=8);return}function BC(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0;if(b>>>0>32){e=b+-33&-32;d=b;do{zC(a,c,32);d=d+-32|0}while(d>>>0>32);b=b+-32-e|0}zC(a,c,b);return}function CC(b,c,d){b=b|0;c=c|0;d=d|0;var e=0;if((d|0)>0)while(1){e=b+1|0;a[b>>0]=a[160784+(c&63)>>0]|0;if((d|0)>1){c=c>>>6;b=e;d=d+-1|0}else{b=e;break}}return b|0}function DC(b){b=b|0;var d=0,e=0,f=0,g=0,h=0;f=c[b>>2]&63;d=b+40|0;e=f+1|0;a[b+40+f>>0]=-128;if(f>>>0>55){dD(b+40+e|0,0,f^63|0)|0;EC(b,d);e=0}dD(b+40+e|0,0,56-e|0)|0;e=b;g=c[e>>2]|0;e=c[e+4>>2]|0;f=_C(g|0,e|0,3)|0;h=b;c[h>>2]=f;c[h+4>>2]=y;h=ZC(g|0,e|0,53)|0;a[b+96>>0]=h;h=ZC(g|0,e|0,45)|0;a[b+97>>0]=h;h=ZC(g|0,e|0,37)|0;a[b+98>>0]=h;h=ZC(g|0,e|0,29)|0;a[b+99>>0]=h;h=ZC(g|0,e|0,21)|0;a[b+100>>0]=h;h=ZC(g|0,e|0,13)|0;a[b+101>>0]=h;e=ZC(g|0,e|0,5)|0;a[b+102>>0]=e;a[b+103>>0]=f;EC(b,d);return}function EC(a,b){a=a|0;b=b|0;var e=0,f=0,g=0,h=0,i=0,j=0,k=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0;D=l;l=l+256|0;C=D;e=0;do{B=e<<2;c[C+(e<<2)>>2]=(d[b+(B|2)>>0]|0)<<8|((d[b+(B|1)>>0]|0)<<16|(d[b+B>>0]|0)<<24)|(d[b+(B|3)>>0]|0);e=e+1|0}while((e|0)!=16);e=16;b=c[C>>2]|0;do{z=c[C+(e+-2<<2)>>2]|0;A=FC(z,17)|0;z=z>>>10^A^(FC(z,19)|0);z=z+(c[C+(e+-7<<2)>>2]|0)|0;A=b;b=c[C+(e+-15<<2)>>2]|0;B=FC(b,7)|0;c[C+(e<<2)>>2]=z+A+(b>>>3^B^(FC(b,18)|0));e=e+1|0}while((e|0)!=64);o=a+8|0;p=c[o>>2]|0;q=a+12|0;r=c[q>>2]|0;s=a+16|0;t=c[s>>2]|0;u=a+20|0;v=c[u>>2]|0;w=a+24|0;x=c[w>>2]|0;y=a+28|0;z=c[y>>2]|0;A=a+32|0;B=c[A>>2]|0;m=a+36|0;n=c[m>>2]|0;a=B;f=z;g=x;e=v;h=t;i=r;j=p;b=n;k=0;while(1){E=FC(g,6)|0;E=(FC(g,11)|0)^E;E=E^(FC(g,25)|0);E=((a^f)&g^a)+b+E+(c[160864+(k<<2)>>2]|0)+(c[C+(k<<2)>>2]|0)|0;b=FC(j,2)|0;b=(FC(j,13)|0)^b;e=E+e|0;b=E+(h&(i|j)|i&j)+(b^(FC(j,22)|0))|0;k=k+1|0;if((k|0)==64)break;else{I=j;H=i;G=h;F=g;E=f;g=e;j=b;b=a;i=I;h=H;e=G;f=F;a=E}}c[o>>2]=b+p;c[q>>2]=j+r;c[s>>2]=i+t;c[u>>2]=h+v;c[w>>2]=e+x;c[y>>2]=g+z;c[A>>2]=f+B;c[m>>2]=a+n;l=D;return}function FC(a,b){a=a|0;b=b|0;return a<<32-b|a>>>b|0}function GC(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,i=0,j=0,k=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0;v=l;l=l+4272|0;t=v+8|0;u=v;if((((((((((a[d>>0]|0)==36?(a[d+1>>0]|0)==50:0)?(j=d+2|0,g=(a[j>>0]|0)+-97|0,g>>>0<=25):0)?(25165825>>>g&1|0)!=0:0)?(a[d+3>>0]|0)==36:0)?(h=(a[d+4>>0]|0)+-48|0,h>>>0<=1):0)?(i=(a[d+5>>0]|0)+-48|0,i>>>0<=9):0)?(a[d+6>>0]|0)==36:0)?(n=1<<i+(h*10|0),n>>>0>=f>>>0):0)?(s=t+4240|0,(IC(s,d+7|0)|0)==0):0){JC(s,4);r=t+4168|0;HC(b,r,t,a[161200+((a[j>>0]|0)+-97)>>0]|0);bD(t+72|0,162468,4096)|0;o=t+4244|0;p=t+4248|0;q=t+4252|0;g=t;h=KC(t,c[s>>2]|0,c[o>>2]|0,t,t)|0;f=t+8|0;do{k=KC(t,c[p>>2]^h,c[q>>2]^c[g+4>>2],f,f)|0;m=g;g=g+16|0;h=KC(t,c[s>>2]^k,c[o>>2]^c[m+12>>2],g,g)|0;f=m+24|0}while(f>>>0<r>>>0);k=t+64|0;m=t+68|0;j=n;do{g=0;do{b=t+(g<<2)|0;c[b>>2]=c[b>>2]^c[t+4168+(g<<2)>>2];b=g|1;n=t+(b<<2)|0;c[n>>2]=c[n>>2]^c[t+4168+(b<<2)>>2];g=g+2|0}while(g>>>0<18);KC(t,0,0,t,r)|0;h=c[s>>2]|0;f=c[o>>2]|0;i=c[p>>2]|0;b=c[q>>2]|0;g=0;do{n=t+(g<<2)|0;c[n>>2]=c[n>>2]^h;n=t+((g|1)<<2)|0;c[n>>2]=c[n>>2]^f;n=t+((g|2)<<2)|0;c[n>>2]=c[n>>2]^i;n=t+((g|3)<<2)|0;c[n>>2]=c[n>>2]^b;g=g+4|0}while(g>>>0<16);c[k>>2]=c[k>>2]^h;c[m>>2]=c[m>>2]^f;KC(t,0,0,t,r)|0;j=j+-1|0}while((j|0)!=0);h=u+4|0;g=0;do{b=c[161232+(g<<2)>>2]|0;f=g|1;i=c[161232+(f<<2)>>2]|0;c[h>>2]=i;i=KC(t,b,i,u,u)|0;b=63;do{i=KC(t,i,c[h>>2]|0,u,u)|0;b=b+-1|0}while((b|0)!=0);c[t+4240+(g<<2)>>2]=i;c[t+4240+(f<<2)>>2]=c[h>>2];g=g+2|0}while(g>>>0<6);bD(e|0,d|0,28)|0;a[e+28>>0]=a[161360+(a[161264+((a[d+28>>0]|0)+-32)>>0]&48)>>0]|0;JC(s,6);LC(e+29|0,s);a[e+60>>0]=0}else e=0;l=v;return e|0}function HC(b,e,f,g){b=b|0;e=e|0;f=f|0;g=g|0;var h=0,i=0,j=0,k=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0;s=l;l=l+16|0;r=s;q=g&255;o=q<<15;p=r+4|0;q=r+((q&1)<<2)|0;h=0;g=b;m=0;n=0;do{c[p>>2]=0;c[r>>2]=0;k=0;i=0;j=0;do{u=i<<8;c[r>>2]=u;i=u|d[g>>0];c[r>>2]=i;u=j<<8;c[p>>2]=u;t=a[g>>0]|0;j=u|t;c[p>>2]=j;h=((k|0)==0?0:t&128)|h;g=(a[g>>0]|0)==0?b:g+1|0;k=k+1|0}while((k|0)!=4);n=j^i|n;u=c[q>>2]|0;c[e+(m<<2)>>2]=u;c[f+(m<<2)>>2]=c[162396+(m<<2)>>2]^u;m=m+1|0}while((m|0)!=18);c[f>>2]=c[f>>2]^o&65536&h<<9&65536-(n&65535|n>>>16);l=s;return}function IC(b,c){b=b|0;c=c|0;var e=0,f=0,g=0,h=0,i=0,j=0;j=b+16|0;while(1){e=(d[c>>0]|0)+-32|0;if(e>>>0>95){b=-1;break}f=a[161264+e>>0]|0;if((f&255)>63){b=-1;break}e=(d[c+1>>0]|0)+-32|0;if(e>>>0>95){b=-1;break}i=a[161264+e>>0]|0;g=i&255;if((i&255)>63){b=-1;break}h=b+1|0;a[b>>0]=g>>>4&3|(f&255)<<2;if(h>>>0>=j>>>0){b=0;break}e=(d[c+2>>0]|0)+-32|0;if(e>>>0>95){b=-1;break}i=a[161264+e>>0]|0;f=i&255;if((i&255)>63){b=-1;break}i=b+2|0;a[h>>0]=f>>>2&15|g<<4;if(i>>>0>=j>>>0){b=0;break}e=(d[c+3>>0]|0)+-32|0;if(e>>>0>95){b=-1;break}e=a[161264+e>>0]|0;if((e&255)>63){b=-1;break}b=b+3|0;a[i>>0]=f<<6|e&255;if(b>>>0>=j>>>0){b=0;break}else c=c+4|0}return b|0}function JC(a,b){a=a|0;b=b|0;while(1){c[a>>2]=aD(c[a>>2]|0)|0;b=b+-1|0;if(!b)break;else a=a+4|0}return}function KC(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,i=0;i=a+68|0;while(1){h=0;g=c[a>>2]^b;do{b=h|1;d=c[a+(b<<2)>>2]^d^((c[a+72+(g>>>24<<2)>>2]|0)+(c[a+1096+((g>>>16&255)<<2)>>2]|0)^c[a+2120+((g>>>8&255)<<2)>>2])+(c[a+3144+((g&255)<<2)>>2]|0);g=c[a+(b+1<<2)>>2]^g^((c[a+72+(d>>>24<<2)>>2]|0)+(c[a+1096+((d>>>16&255)<<2)>>2]|0)^c[a+2120+((d>>>8&255)<<2)>>2])+(c[a+3144+((d&255)<<2)>>2]|0);h=h+2|0}while(h>>>0<16);b=c[i>>2]^d;c[e>>2]=b;c[e+4>>2]=g;e=e+8|0;if(e>>>0>=f>>>0)break;else d=g}return b|0}function LC(b,c){b=b|0;c=c|0;var e=0,f=0,g=0,h=0,i=0,j=0;e=0;while(1){j=d[c+e>>0]|0;a[b>>0]=a[161360+(j>>>2)>>0]|0;f=e+2|0;h=d[c+(e+1)>>0]|0;g=b+2|0;a[b+1>>0]=a[161360+(h>>>4|j<<4&48)>>0]|0;h=h<<2&60;if(f>>>0>22){i=3;break}e=e+3|0;j=d[c+f>>0]|0;a[g>>0]=a[161360+(j>>>6|h)>>0]|0;a[b+3>>0]=a[161360+(j&63)>>0]|0;if(e>>>0>=23)break;else b=b+4|0}if((i|0)==3)a[g>>0]=a[161360+h>>0]|0;return}function MC(a,b){a=a|0;b=b|0;return cC(a,b,170768)|0}function NC(b){b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,i=0;i=l;l=l+16|0;h=i;g=0;while(1){e=h+g|0;a[e>>0]=0;c=7;d=b;f=0;while(1){f=(a[d>>0]&1)<<c|f&255;a[e>>0]=f;if(!c)break;else{c=c+-1|0;d=d+1|0}}g=g+1|0;if((g|0)==8)break;else b=b+8|0}iC(h,172256);l=i;return}function OC(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0,k=0,m=0,n=0;n=l;l=l+144|0;e=n+8|0;m=n;g=0;h=b;while(1){k=m+(g<<2)|0;c[k>>2]=0;f=31;i=h;j=0;while(1){j=(a[i>>0]&1)<<f|j;c[k>>2]=j;if(!f)break;else{f=f+-1|0;i=i+1|0}}g=g+1|0;if((g|0)==2)break;else h=h+32|0}if(!d)e=172256;else{f=0;do{k=15-f|0;c[e+(f<<2)>>2]=c[172256+(k<<2)>>2];c[e+64+(f<<2)>>2]=c[172320+(k<<2)>>2];f=f+1|0}while((f|0)!=16)}i=m+4|0;nC(c[m>>2]|0,c[i>>2]|0,m,i,1,0,e);i=0;f=b;while(1){h=m+(i<<2)|0;e=31;g=f;while(1){a[g>>0]=(c[h>>2]|0)>>>e&1;if(!e)break;else{e=e+-1|0;g=g+1|0}}i=i+1|0;if((i|0)==2)break;else f=f+32|0}l=n;return}function PC(){}function QC(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;c=a+c>>>0;return (y=b+d+(c>>>0<a>>>0|0)>>>0,c|0)|0}function RC(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;d=b-d-(c>>>0>a>>>0|0)>>>0;return (y=d,a-c>>>0|0)|0}function SC(a){a=a|0;return (a?31-(Q(a^a-1)|0)|0:32)|0}
function qs(a,b){a=+a;b=+b;var d=0,e=0,f=0,h=0,i=0;f=(g[j>>2]=a,c[j>>2]|0);h=(g[j>>2]=b,c[j>>2]|0);a:do if(((rs(a)|0)&2147483647)>>>0<=2139095040?((rs(b)|0)&2147483647)>>>0<=2139095040:0){if((f|0)!=(h|0)){d=f&2147483647;e=h&2147483647;do if(d)if(d>>>0>e>>>0|(h^f|0)<0){d=f+-1|0;break}else{d=f+1|0;break}else{if(!e)break a;d=h&-2147483648|1}while(0);b=(c[j>>2]=d,+g[j>>2])}}else i=3;while(0);if((i|0)==3)b=a+b;return +b}function rs(a){a=+a;return (g[j>>2]=a,c[j>>2]|0)|0}function ss(a,b){a=+a;b=b|0;var c=0.0,d=0.0,e=0.0;c=a*a;d=c*c;e=c*a;a=e*(c*.13339200271297674+.3333313950307914)+a+e*d*(c*.024528318116654728+.05338123784456704+d*(c*.009465647849436732+.002974357433599673));return +((b|0)==0?a:-1.0/a)}function ts(a){a=+a;return Wr(a)|0}function us(a){a=+a;return +(+vs(a))}function vs(a){a=+a;var b=0,d=0,e=0,f=0,g=0;h[j>>3]=a;b=c[j>>2]|0;d=c[j+4>>2]|0;e=ZC(b|0,d|0,52)|0;e=e&2047;if(e>>>0>1074)return +a;else{g=e>>>0<1023;f=ZC(-1,-1,e+-1011|0)|0;f=g?-1:f;e=g?2147483647:y;c[j>>2]=~f&b;c[j+4>>2]=~e&d;return +((f&b|0)==0&(e&d|0)==0?a:+h[j>>3])}return 0.0}function ws(a){a=+a;return (g[j>>2]=a,c[j>>2]|0)>>>31|0}function xs(a){a=+a;ys(a)|0;return (0!=0|(y&2146435072|0)!=2146435072)&1|0}function ys(a){a=+a;var b=0;h[j>>3]=a;b=c[j>>2]|0;y=c[j+4>>2]|0;return b|0}function zs(a,b,d){a=+a;b=+b;d=+d;var e=0,f=0.0,i=0,k=0,m=0;k=l;l=l+16|0;i=k;b=a*b;f=d;a=b+f;h[j>>3]=a;m=c[j>>2]|0;e=ZC(m|0,c[j+4>>2]|0,52)|0;e=e&2047;if(!(a-b==f|((m&536870911|0)!=268435456|0!=0|(e|0)==2047))?(Yi()|0)==0:0){Ni(3072)|0;h[i>>3]=b;d=+h[i>>3]+f;Ni(0)|0;h[j>>3]=d;i=QC(c[j>>2]|0,c[j+4>>2]|0,1,0)|0;m=y;c[j>>2]=i;c[j+4>>2]=m;a=a==d?+h[j>>3]:d}else if((e+-874|0)>>>0<23?(Ti(32)|0)!=0:0){g[i>>2]=d;a=b+ +g[i>>2];(Ti(32)|0)==0}l=k;return +a}function As(a){a=+a;return +(+Cq(a))}function Bs(a){a=a|0;return +r}function Cs(a){a=+a;return +(+zj(a,0-(Nr(a)|0)|0))}function Ds(a){a=+a;a=+fD(+a);y=+A(a)>=1.0?(a>0.0?~~+O(+z(a/4294967296.0),4294967295.0)>>>0:~~+M((a-+(~~a>>>0))/4294967296.0)>>>0):0;return ~~a>>>0|0}function Es(a){a=+a;var b=0,d=0,e=0,f=0.0,h=0.0,i=0.0;b=(g[j>>2]=a,c[j>>2]|0);d=b&2147483647;do if(d>>>0>2139095039)a=a+a;else{if(d>>>0<8388608){if(!d)break;b=(g[j>>2]=a*16777216.0,c[j>>2]|0);e=642849266;d=b&2147483647}else e=709958130;f=(c[j>>2]=b&-2147483648|((d>>>0)/3|0)+e,+g[j>>2]);i=f*f*f;h=a+a;i=(h+i)*f/(i+(i+a));f=i*(i*i);a=i*(h+f)/(f+(f+a))}while(0);return +a}function Fs(a){a=+a;return +(+bs(a))}function Gs(a){a=+a;return ~~+fD(+a)|0}function Hs(a,b){a=+a;b=b|0;return +(+$r(a,b))}function Is(a){a=+a;Js(a)|0;do if(!(0==0&(y&2146435072|0)==2146435072))if(a==0.0){a=-1.0/(a*a);break}else{a=+(Ks(a)|0);break}else a=a*a;while(0);return +a}function Js(a){a=+a;var b=0;h[j>>3]=a;b=c[j>>2]|0;y=c[j+4>>2]|0;return b|0}function Ks(a){a=+a;return Nr(a)|0}function Ls(a,b){a=+a;b=b|0;return +(+Zq(a,b))}function Ms(a){a=+a;var b=0,d=0;d=(g[j>>2]=a,c[j>>2]|0);b=d&2147483647;a=(c[j>>2]=b,+g[j>>2]);do if(b>>>0>1057791828)if(b>>>0>1092616192){a=0.0/a+1.0;break}else{a=1.0-2.0/(+Ik(a*2.0)+2.0);break}else{if(b>>>0>1048757624){a=+Ik(a*2.0);a=a/(a+2.0);break}if(b>>>0>8388607){a=+Ik(a*-2.0);a=-a/(a+2.0)}}while(0);return +((d|0)<0?-a:a)}function Ns(a){a=+a;Os(a)|0;do if(!(0==0&(y&2146435072|0)==2146435072))if(a==0.0){a=-1.0/(a*a);break}else{a=+(Nr(a)|0);break}else a=a*a;while(0);return +a}function Os(a){a=+a;var b=0;h[j>>3]=a;b=c[j>>2]|0;y=c[j+4>>2]|0;return b|0}function Ps(a){a=+a;var b=0;b=(g[j>>2]=a,c[j>>2]|0)&2147483647;do if(b>>>0>=1073741824)if(b>>>0<1166016512){a=+L(+(a*2.0-1.0/(+B(+(a*a+-1.0))+a)));break}else{a=+L(+a)+.6931471824645996;break}else{a=a+-1.0;a=+wq(a+ +B(+(a*a+a*2.0)))}while(0);return +a}function Qs(a){a=+a;return ~~+gD(+a)|0}function Rs(a,b){a=+a;b=+b;var d=0,e=0,f=0,h=0,i=0,k=0,l=0,m=0;h=(g[j>>2]=a,c[j>>2]|0);k=(g[j>>2]=b,c[j>>2]|0);e=h>>>23&255;i=k>>>23&255;l=h&-2147483648;f=k<<1;a:do if((f|0)!=0?!((e|0)==255|((Ss(b)|0)&2147483647)>>>0>2139095040):0){d=h<<1;if(d>>>0<=f>>>0)return +((d|0)==(f|0)?a*0.0:a);if(!e){d=h<<9;if((d|0)>-1){e=0;do{e=e+-1|0;d=d<<1}while((d|0)>-1)}else e=0;d=h<<1-e}else d=h&8388607|8388608;if(!i){h=k<<9;if((h|0)>-1){f=0;do{f=f+-1|0;h=h<<1}while((h|0)>-1)}else f=0;i=f;k=k<<1-f}else k=k&8388607|8388608;f=d-k|0;h=(f|0)>-1;b:do if((e|0)>(i|0)){while(1){if(h)if(!f)break;else d=f;d=d<<1;e=e+-1|0;f=d-k|0;h=(f|0)>-1;if((e|0)<=(i|0))break b}b=a*0.0;break a}while(0);if(h)if(!f){b=a*0.0;break}else d=f;if(d>>>0<8388608)do{d=d<<1;e=e+-1|0}while(d>>>0<8388608);if((e|0)>0)d=d+-8388608|e<<23;else d=d>>>(1-e|0);b=(c[j>>2]=d|l,+g[j>>2])}else m=3;while(0);if((m|0)==3){b=a*b;b=b/b}return +b}function Ss(a){a=+a;return (g[j>>2]=a,c[j>>2]|0)|0}function Ts(a,b,c){a=+a;b=b|0;c=c|0;var d=0,e=0,f=0;d=l;l=l+16|0;f=d+8|0;e=d;Sq(a,f,e);h[b>>3]=+h[f>>3];h[c>>3]=+h[e>>3];l=d;return}function Us(a,b,d){a=+a;b=b|0;d=d|0;var e=0.0,f=0,i=0,k=0,m=0;m=l;l=l+16|0;i=m;k=(g[j>>2]=a,c[j>>2]|0);f=k>>>31;k=k&2147483647;a:do if(k>>>0<1061752795)if(k>>>0<964689920){g[b>>2]=a;g[d>>2]=1.0;break}else{e=a;g[b>>2]=+Vs(e);g[d>>2]=+Ws(e);break}else{if(k>>>0<1081824210){f=(f|0)!=0;if(k>>>0>=1075235812){e=(f?3.141592653589793:-3.141592653589793)+a;g[b>>2]=-+Vs(e);g[d>>2]=-+Ws(e);break}if(f){e=a+1.5707963267948966;a=e;e=-+Ws(e)}else{e=1.5707963267948966-a;a=e;e=+Ws(e)}g[b>>2]=e;g[d>>2]=+Vs(a);break}if(k>>>0<1088565718){f=(f|0)!=0;if(k>>>0>=1085271520){e=(f?6.283185307179586:-6.283185307179586)+a;g[b>>2]=+Vs(e);g[d>>2]=+Ws(e);break}if(f){a=a+4.71238898038469;g[b>>2]=+Ws(a);a=-+Vs(a)}else{a=a+-4.71238898038469;g[b>>2]=-+Ws(a);a=+Vs(a)}g[d>>2]=a;break}if(k>>>0>2139095039){e=a-a;g[d>>2]=e;g[b>>2]=e;break}k=Xq(a,i)|0;e=+Vs(+h[i>>3]);a=+Ws(+h[i>>3]);switch(k&3){case 0:{g[b>>2]=e;g[d>>2]=a;break a}case 1:{g[b>>2]=a;g[d>>2]=-e;break a}case 2:{g[b>>2]=-e;g[d>>2]=-a;break a}case 3:{g[b>>2]=-a;g[d>>2]=e;break a}default:{}}}while(0);l=m;return}function Vs(a){a=+a;var b=0.0,c=0.0;b=a*a;c=b*a;return +(c*(b*b)*(b*2.718311493989822e-06+-1.9839334836096632e-04)+(c*(b*.008333329385889463+-.16666666641626524)+a))}function Ws(a){a=+a;var b=0.0;a=a*a;b=a*a;return +(1.0-a*.499999997251031+b*.04166662332373906+a*b*(a*2.439044879627741e-05+-.001388676377460993))}function Xs(a,b){a=+a;b=+b;var c=0,d=0,e=0,f=0,g=0;e=Ys(a)|0;f=y;d=f&2147483647;do if(!(d>>>0>2146435072|(d|0)==2146435072&e>>>0>0)){c=Ys(b)|0;d=y;g=d&2147483647;if(!(g>>>0>2146435072|(g|0)==2146435072&c>>>0>0)){e=ZC(e|0,f|0,63)|0;g=ZC(c|0,d|0,63)|0;if((e|0)==(g|0)){a=a<b?a:b;break}else{a=(f|0)<0?a:b;break}}}else a=b;while(0);return +a}function Ys(a){a=+a;var b=0;h[j>>3]=a;b=c[j>>2]|0;y=c[j+4>>2]|0;return b|0}function Zs(a,b){a=+a;b=b|0;var d=0,e=0;d=(g[j>>2]=a,c[j>>2]|0);e=d>>>23;switch((e&255)<<24>>24){case 0:{if(a!=0.0){a=+Zs(a*18446744073709551616.0,b);d=(c[b>>2]|0)+-64|0}else d=0;c[b>>2]=d;break}case -1:break;default:{c[b>>2]=(e&255)+-126;a=(c[j>>2]=d&-2139095041|1056964608,+g[j>>2])}}return +a}function _s(a){a=+a;var b=0,d=0,e=0.0;b=(g[j>>2]=a,c[j>>2]|0);d=b>>>31;b=b&2147483647;do if(b>>>0<=2139095039)if(b>>>0<1062731776)if(b>>>0<830472192){a=(a*8.0+a*1.0270333290100098)*.125;break}else{e=a*a;a=(e*(e*(e*(-.005770270247012377-e*2.3763017452438362e-05)+-.028481749817728996)+-.32504209876060486)+.12837916612625122)/(e*(e*(e*(e*(1.324947370449081e-04-e*3.9602282413397916e-06)+5.0813062116503716e-03)+.06502225250005722)+.3979172110557556)+1.0)*a+a;break}else{if(b>>>0<1086324736)a=1.0-+$s(b,a);else a=1.0;a=(d|0)==0?a:-a;break}else a=1.0/a+ +(1-(d<<1)|0);while(0);return +a}function $s(a,b){a=a|0;b=+b;var d=0.0,e=0.0,f=0.0,h=0.0,i=0.0,k=0.0,l=0.0,m=0.0,n=0.0;if(a>>>0<1067450368)b=+at(b);else{l=+A(+b);m=1.0/(l*l);if(a>>>0<1077336941){b=m*(m*(m*(m*(m*(m*(-81.28743743896484-m*9.814329147338867)+-184.60508728027344)+-162.39666748046875)+-62.37533187866211)+-10.558626174926758)+-.6938585638999939)+-.009864944033324718;d=19.65127182006836;e=137.6577606201172;f=434.5658874511719;h=645.3872680664062;i=429.0081481933594;k=m*(6.570249557495117-m*.06042441353201866)+108.63500213623047}else{b=m*(m*(m*(m*(m*(-1025.0950927734375-m*483.5191955566406)+-637.5664672851562)+-160.63638305664062)+-17.75795555114746)+-.7992832660675049)+-.009864943102002144;d=30.33806037902832;e=325.7925109863281;f=1536.7296142578125;h=3199.858154296875;i=2553.05029296875;k=474.5285339355469-m*22.44095230102539}n=(c[j>>2]=(g[j>>2]=l,c[j>>2]|0)&-8192,+g[j>>2]);b=+K(+(-.5625-n*n))*+K(+((n-l)*(l+n)+b/(m*(m*(m*(m*(m*(m*k+i)+h)+f)+e)+d)+1.0)))/l}return +b}function at(a){a=+a;a=+A(+a)+-1.0;return +(.15493708848953247-(a*(a*(a*(a*(a*(.03547830507159233-a*.002166375517845154)+-.11089469492435455)+.31834661960601807)+-.3722078800201416)+.41485610604286194)+-2.3621185682713985e-03)/(a*(a*(a*(a*(a*(a*.011984500102698803+.01363708358258009)+.12617121636867523)+.07182865589857101)+.5403979420661926)+.10642088204622269)+1.0))}function bt(a){a=+a;var b=0.0,d=0,e=0;e=(g[j>>2]=a,c[j>>2]|0);d=e>>>31;e=e&2147483647;do if(e>>>0<=2139095039){if(e>>>0>=1062731776){d=(d|0)!=0;if(e>>>0<1105199104){b=+$s(e,a);b=d?2.0-b:b;break}else{b=d?2.0:0.0;break}}if(e>>>0<595591168){b=1.0-a;break}b=a*a;b=(b*(b*(b*(-.005770270247012377-b*2.3763017452438362e-05)+-.028481749817728996)+-.32504209876060486)+.12837916612625122)/(b*(b*(b*(b*(1.324947370449081e-04-b*3.9602282413397916e-06)+5.0813062116503716e-03)+.06502225250005722)+.3979172110557556)+1.0);if((d|0)!=0|e>>>0<1048576e3){b=1.0-(b*a+a);break}else{b=.5-(a+-.5+b*a);break}}else b=1.0/a+ +(d<<1|0);while(0);return +b}function ct(a,b){a=+a;b=+b;var c=0,d=0;c=dt(a)|0;do if((c&2147483647)>>>0<=2139095040){d=dt(b)|0;if((d&2147483647)>>>0<=2139095040)if((d^c|0)<0){a=(c|0)<0?b:a;break}else{a=a<b?b:a;break}}else a=b;while(0);return +a}function dt(a){a=+a;return (g[j>>2]=a,c[j>>2]|0)|0}function et(a){a=+a;a=+gD(+a);y=+A(a)>=1.0?(a>0.0?~~+O(+z(a/4294967296.0),4294967295.0)>>>0:~~+M((a-+(~~a>>>0))/4294967296.0)>>>0):0;return ~~a>>>0|0}function ft(a){a=+a;return +(+Tk(a))}function gt(a,b){a=+a;b=b|0;return +(+Zq(a,b))}function ht(a,b){a=+a;b=b|0;var d=0.0,e=0.0,f=0,h=0,i=0.0,k=0,l=0,m=0.0;f=(g[j>>2]=a,c[j>>2]|0);c[b>>2]=1;h=f&2147483647;do if(h>>>0>2139095039)a=a*a;else{l=(f|0)<0;if(h>>>0<889192448){if(l){c[b>>2]=-1;a=-a}a=-+L(+a);break}if(l){e=-a;d=+it(e);if(d==0.0){a=1.0/(a-a);break}if(d>0.0){c[b>>2]=-1;a=d}else a=-d;i=+L(+(3.1415927410125732/(a*e)));a=e}else i=0.0;a:do if((f|0)<1065353216)if((f|0)<-1073741824)switch(f|0){case -1082130432:{a=0.0;break a}default:{k=15;break a}}else switch(f|0){case -1073741824:{a=0.0;break a}default:{k=15;break a}}else if((f|0)<1073741824)switch(f|0){case 1065353216:{a=0.0;break a}default:{k=15;break a}}else switch(f|0){case 1073741824:{a=0.0;break a}default:{k=15;break a}}while(0);b:do if((k|0)==15)if(h>>>0<1073741824){do if(h>>>0<1063675495){d=-+L(+a);if(h>>>0<=1060850207)if(h>>>0>1047343879){a=a+-.4616321325302124;k=24}else k=25;else{e=1.0;k=23}}else if(h>>>0<=1071490583)if(h>>>0>1067296287){d=0.0;a=a+-1.4616321325302124;k=24;break}else{d=0.0;a=a+-1.0;k=25;break}else{d=0.0;e=2.0;k=23}while(0);if((k|0)==23){a=e-a;e=a*a;a=d+(a*(e*(e*(e*(e*(e*2.5214456400135532e-05+2.2086278477218002e-04)+1.1927076848223805e-03)+.007385550998151302)+.0673523023724556)+.07721566408872604)+e*(e*(e*(e*(e*(e*4.486409670789726e-05+1.0801156895468011e-04)+5.100697744637728e-04)+2.8905137442052364e-03)+.020580807700753212)+.32246702909469604)-a*.5);break}else if((k|0)==24){m=a*a;e=a*m;a=d+(m*(e*(e*(e*(e*.000315632059937343+-1.4034647028893232e-03)+.006100538652390242)+-.03278854116797447)+.4838361144065857)-(6.697100651820165e-09-e*(e*(e*(e*(8.810818544588983e-04-e*3.1275415676645935e-04)+-3.6845202557742596e-03)+.017970675602555275)+-.14758771657943726+a*(e*(e*(e*(e*3.3552918466739357e-04+-5.385953118093312e-04)+2.2596477065235376e-03)+-.010314224287867546)+.06462494283914566)))+-.12148628383874893);break}else if((k|0)==25){a=d+(a*(a*(a*(a*(a*(a*.013381091877818108+.2289637327194214)+.9777175188064575)+1.4549225568771362)+.6328270435333252)+-.07721566408872604)/(a*(a*(a*(a*(a*3.2170924823731184e-03+.10422264784574509)+.7692851424217224)+2.1284897327423096)+2.4559779167175293)+1.0)-a*.5);break}}else{if(h>>>0>=1090519040){d=+L(+a);if(h>>>0<1551892480){e=1.0/a;m=e*e;a=e*(m*(m*(m*(m*(8.363398956134915e-04-m*1.6309292986989021e-03)+-5.951875355094671e-04)+7.936505717225373e-04)+-2.7777778450399637e-03)+.0833333358168602)+.418938547372818+(a+-.5)*(d+-1.0);break}else{a=a*(d+-1.0);break}}h=~~a;e=a-+(h|0);a=e*.5+e*(e*(e*(e*(e*(e*(e*3.194753298885189e-05+1.8402845598757267e-03)+.026642270386219025)+.14635047316551208)+.3257787823677063)+.21498242020606995)+-.07721566408872604)/(e*(e*(e*(e*(e*(e*7.32668422642746e-06+7.779424777254462e-04)+.018645919859409332)+.1719338595867157)+.7219355702400208)+1.3920053243637085)+1.0);switch(h|0){case 7:{d=e+6.0;k=29;break}case 6:{d=1.0;k=29;break}case 5:{d=1.0;k=30;break}case 4:{d=1.0;k=31;break}case 3:{d=1.0;break}default:break b}if((k|0)==29){d=(e+5.0)*d;k=30}if((k|0)==30){d=(e+4.0)*d;k=31}if((k|0)==31)d=(e+3.0)*d;a=a+ +L(+((e+2.0)*d));break}while(0);a=l?i-a:a}while(0);return +a}function it(a){a=+a;var b=0;a=a*.5;a=(a-+z(+a))*2.0;b=(~~(a*4.0)+1|0)/2|0;a=(a-+(b|0)*.5)*3.141592653589793;switch(b|0){case 3:{a=-+Ws(a);break}case 1:{a=+Ws(a);break}case 2:{a=+Vs(-a);break}default:a=+Vs(a)}return +a}function jt(a,b){a=+a;b=+b;return +(+Ur(a,b))}function kt(a){a=+a;return +(+Uk(a))}function lt(a){a=+a;return +(+ht(a,171504))}function mt(a){a=+a;return +(+nt(a))}function nt(a){a=+a;var b=0,d=0,e=0,f=0,g=0.0;h[j>>3]=a;f=c[j>>2]|0;d=c[j+4>>2]|0;b=ZC(f|0,d|0,52)|0;b=b&2047;c[j>>2]=f;c[j+4>>2]=d&2147483647;a=+h[j>>3];if(b>>>0<1022){if(b>>>0>=991){g=a*2.0;a=g+g*a/(1.0-a);e=5}}else{a=a/(1.0-a)*2.0;e=5}if((e|0)==5)a=+kr(a)*.5;return +((d|0)<0?-a:a)}function ot(a){a=+a;var b=0,d=0;d=(g[j>>2]=a,c[j>>2]|0);b=d>>>23&255;if(b>>>0>149)return +a;else{b=b>>>0<127?2147483647:-1>>>(b+-118|0);return +((b&d|0)==0?a:(c[j>>2]=~b&d,+g[j>>2]))}return 0.0}function pt(a,b){a=+a;b=+b;var d=0,e=0,f=0.0,h=0,i=0,k=0,l=0;h=(g[j>>2]=a,c[j>>2]|0);d=qt(a)|0;do if((d&2147483647)>>>0<=2139095040?(k=rt(b)|0,e=y,l=e&2147483647,!(l>>>0>2146435072|(l|0)==2146435072&k>>>0>0)):0){f=a;if(f==b)break;do if(!(a==0.0)){d=(d|0)<0;if(f<b)if(d){d=h+-1|0;break}else{d=h+1|0;break}else if(d){d=h+1|0;break}else{d=h+-1|0;break}}else d=e&-2147483648|1;while(0);b=(c[j>>2]=d,+g[j>>2])}else i=3;while(0);if((i|0)==3)b=a+b;return +b}function qt(a){a=+a;return (g[j>>2]=a,c[j>>2]|0)|0}function rt(a){a=+a;var b=0;h[j>>3]=a;b=c[j>>2]|0;y=c[j+4>>2]|0;return b|0}function st(a,b){a=+a;b=+b;var c=0,d=0,e=0,f=0;e=tt(a)|0;f=y&2147483647;do if(!(f>>>0>2146435072|(f|0)==2146435072&e>>>0>0)?(f=tt(b)|0,c=y,e=c&2147483647,!(e>>>0>2146435072|(e|0)==2146435072&f>>>0>0)):0){if(0==0&(c&2146435072|0)==2146435072)if(b>0.0){a=a*b;break}else{a=a/-b;break}if(+hr(b)!=b){a=b-b;a=a/a;break}if(b>65.0e3){a=+zj(a,65e3);break}if(b<-65.0e3){a=+zj(a,-65e3);break}else{a=+zj(a,~~b);break}}else d=3;while(0);if((d|0)==3)a=a*b;return +a}function tt(a){a=+a;var b=0;h[j>>3]=a;b=c[j>>2]|0;y=c[j+4>>2]|0;return b|0}function ut(a){a=+a;return +(+ds(a))}function vt(a){a=+a;return ((wt(a)|0)&2139095040|0)!=2139095040|0}function wt(a){a=+a;return (g[j>>2]=a,c[j>>2]|0)|0}function xt(a){a=+a;var b=0,d=0,e=0,f=0.0,h=0.0,i=0.0,k=0.0,l=0.0;b=(g[j>>2]=a,c[j>>2]|0);d=(b|0)<0;do if(b>>>0<8388608|d){if(!(b&2147483647)){a=-1.0/(a*a);break}if(d){a=(a-a)/0.0;break}else{d=-152;b=(g[j>>2]=a*33554432.0,c[j>>2]|0);e=9;break}}else if(b>>>0<=2139095039)if((b|0)==1065353216)a=0.0;else{d=-127;e=9}while(0);if((e|0)==9){e=b+4913933|0;l=(c[j>>2]=(e&8388607)+1060439283,+g[j>>2])+-1.0;k=l/(l+2.0);h=k*k;f=h*h;i=l*(l*.5);a=(c[j>>2]=(g[j>>2]=l-i,c[j>>2]|0)&-4096,+g[j>>2]);f=l-a-i+k*(i+(h*(f*.2849878668785095+.6666666269302368)+f*(f*.24279078841209412+.40000972151756287)));a=a*1.44287109375+(f*1.44287109375-(f+a)*1.7605285393074155e-04)+ +(d+(e>>>23)|0)}return +a}function yt(a,b){a=+a;b=b|0;return +(+Lq(a,b))}function zt(a){a=+a;return +(+yt(a,171504))}function At(a){a=+a;var b=0.0,d=0,e=0;h[j>>3]=a;e=c[j+4>>2]|0;d=ZC(c[j>>2]|0,e|0,63)|0;e=e&2147483647;do if(e>>>0>2146435071)b=1.0/(a*a);else{if(e>>>0>1073741823){b=+Bt(e,+A(+a),0,d);break}if(e>>>0>939524095){b=a*a;b=b*(b*(b*(b*4.9672799960958445e-08+-1.599556310840356e-05)+.001407056669551897)+-.0625)/(b*(b*(b*(b*(b*1.2354227442613791e-11+5.0463625707621704e-09)+1.1771846404262368e-06)+1.8594678558863092e-04)+.019153759953836346)+1.0)}else b=a;b=(b+.5)*a}while(0);return +b}function Bt(a,b,c,d){a=a|0;b=+b;c=c|0;d=d|0;var e=0.0,f=0.0,g=0.0,h=0.0,i=0.0;g=+E(+b);c=(c|0)!=0;g=c?-g:g;e=+D(+b);i=g-e;if(a>>>0<2145386496){f=-g-e;h=+D(+(b*2.0));if(g*e>0.0)e=h/f;else{e=i;f=h/i}if(a>>>0<1207959552){e=e*+Ct(b);e=e-(c?-f:f)*+Dt(b)}}else e=i;return +(((d|0)==0?e:-e)*.5641895835477563/+B(+b))}function Ct(a){a=+a;var b=0,d=0,e=0;h[j>>3]=a;b=c[j+4>>2]&2147483647;if(b>>>0<=1075838975){e=b>>>0>1074191212;if(b>>>0>1074933386){d=151344;b=151248}else{d=e?151008:151056;b=e?151104:151152}}else{d=151296;b=151200}a=1.0/(a*a);return +((+h[d>>3]+a*(+h[d+8>>3]+a*(+h[d+16>>3]+a*(+h[d+24>>3]+a*(+h[d+32>>3]+a*+h[d+40>>3])))))/(a*(+h[b>>3]+a*(+h[b+8>>3]+a*(+h[b+16>>3]+a*(+h[b+24>>3]+a*+h[b+32>>3]))))+1.0)+1.0)}function Dt(a){a=+a;var b=0,d=0,e=0,f=0.0;h[j>>3]=a;b=c[j+4>>2]&2147483647;if(b>>>0<=1075838975){e=b>>>0>1074191212;if(b>>>0>1074933386){d=150960;b=150864}else{d=e?150624:150672;b=e?150720:150768}}else{d=150912;b=150816}f=1.0/(a*a);return +(((+h[d>>3]+f*(+h[d+8>>3]+f*(+h[d+16>>3]+f*(+h[d+24>>3]+f*(+h[d+32>>3]+f*+h[d+40>>3])))))/(f*(+h[b>>3]+f*(+h[b+8>>3]+f*(+h[b+16>>3]+f*(+h[b+24>>3]+f*(+h[b+32>>3]+f*+h[b+40>>3])))))+1.0)+.375)/a)}function Et(a){a=+a;var b=0,d=0,e=0,f=0.0;h[j>>3]=a;d=c[j>>2]|0;b=c[j+4>>2]|0;e=_C(b|0,0,1)|0;do if(e|d)if((b|0)>=0){if(b>>>0>2146435071){a=1.0/a;break}if(b>>>0>1073741823){a=+Bt(b,a,1,0);break}if(b>>>0<1016070144){a=-.6366197723675814/a;break}else{f=a*a;a=(f*(f*(f*(2.352526005616105e-05-f*9.190991580398789e-08)+-1.9125689587576355e-03)+.05044387166398113)+-.19605709064623894)/(f*(f*(f*(f*(f*1.6655924620799208e-11+6.227414523646215e-09)+1.3560880109751623e-06)+2.0255258102513517e-04)+.01991673182366499)+1.0)*a+(+At(a)*+L(+a)-1.0/a)*.6366197723675814;break}}else a=r;else a=-s;while(0);return +a}function Ft(a){a=+a;var b=0,d=0,e=0,f=0.0;d=(g[j>>2]=a,c[j>>2]|0);b=d&2147483647;a=(c[j>>2]=b,+g[j>>2]);if(b>>>0<1056964608){if(b>>>0>=796917760){f=a*2.0;a=f+f*a/(1.0-a);e=5}}else{a=a/(1.0-a)*2.0;e=5}if((e|0)==5)a=+wq(a)*.5;return +((d|0)<0?-a:a)}function Gt(a,b){a=+a;b=b|0;return +(+Cj(a,b))}function Ht(a){a=+a;return +(+hr(a))}function It(a){a=+a;return +(+lr(a))}function Jt(a,b){a=a|0;b=+b;var d=0.0,e=0.0,f=0,g=0.0,i=0,k=0.0,l=0,m=0.0,n=0,o=0.0,p=0,q=0.0;h[j>>3]=b;i=c[j>>2]|0;l=c[j+4>>2]|0;f=ZC(i|0,l|0,63)|0;l=l&2147483647;do if((l|(i|0-i)>>>31)>>>0<=2146435072){if(!a){b=+js(b);break}if((a|0)<0){b=-b;f=f^1;n=~a}else n=a+-1|0;if(!n){b=+At(b);break}p=f&a;o=+A(+b);a:do if(!((l|0)==2146435072|(l|i|0)==0)){b=+(n|0);if(o>b){if(l>>>0<=1389363199){d=+js(o);b=+At(o);if((n|0)<=0)break;f=0;while(1){f=f+1|0;d=b*(+(f|0)*2.0/o)-d;if((f|0)==(n|0)){b=d;break a}else{m=b;b=d;d=m}}}switch(n&3){case 0:{d=+E(+o)-+D(+o);break}case 1:{d=-+D(+o)-+E(+o);break}case 2:{d=+D(+o)-+E(+o);break}case 3:{d=+D(+o)+ +E(+o);break}default:{}}b=d*.5641895835477563/+B(+o);break}if(l>>>0<1041235968){if((n|0)>32){b=0.0;break}d=o*.5;if((n|0)<1)b=1.0;else{a=n+1|0;e=d;b=1.0;f=2;while(1){b=b*+(f|0);e=d*e;if((f|0)==(a|0)){d=e;break}else f=f+1|0}}b=d/b;break}k=b+1.0;m=k*2.0/o;g=2.0/o;b=m+g;d=m*b+-1.0;if(d<1.0e9){e=m;f=1;while(1){f=f+1|0;b=g+b;e=d*b-e;if(!(e<1.0e9))break;else{q=d;d=e;e=q}}}else f=1;e=0.0;while(1){e=1.0/((k+ +(f|0))*2.0/o-e);if((f|0)<=0)break;else f=f+-1|0}f=(n|0)>0;if(k*+L(+(+A(+m)))<709.782712893384)if(f){d=1.0;b=e;f=n;while(1){b=d*(+(f|0)*2.0)/o-b;if((f|0)>1){q=d;d=b;f=f+-1|0;b=q}else{k=e;g=b;break}}}else{k=e;g=1.0;d=e}else if(f){d=e;g=1.0;b=e;f=n;while(1){b=g*(+(f|0)*2.0)/o-b;if(b>3273390607896141870013189.0e126){d=d/b;e=1.0;b=g/b}else{e=b;b=g}if((f|0)>1){g=e;f=f+-1|0}else{k=d;g=e;d=b;break}}}else{k=e;g=1.0;d=e}e=+js(o);b=+At(o);if(!(+A(+e)>=+A(+b))){b=k*b/d;break}else{b=k*e/g;break}}else b=0.0;while(0);b=(p|0)==0?b:-b}while(0);return +b}function Kt(a,b){a=a|0;b=+b;var d=0.0,e=0.0,f=0,g=0,i=0,k=0,l=0.0;h[j>>3]=b;f=c[j>>2]|0;g=c[j+4>>2]|0;i=g&2147483647;do if((i|(f|0-f)>>>31)>>>0<=2146435072)if((g|0)>-1|(g|0)==-1&f>>>0>4294967295|(i|f|0)==0)if((i|0)==2146435072)b=0.0;else{if(!a){b=+ns(b);break}g=(a|0)<0;k=g?~a:a+-1|0;g=g?a&1:0;if(!k){b=+Et(b);b=(g|0)==0?b:-b;break}if(i>>>0<=1389363199){e=+ns(b);d=+Et(b);h[j>>3]=d;if((k|0)>0&(0?1:(c[j+4>>2]|0)!=-1048576)){f=0;while(1){f=f+1|0;e=d*(+(f|0)*2.0/b)-e;h[j>>3]=e;if(!((f|0)<(k|0)&(0?1:(c[j+4>>2]|0)!=-1048576))){b=e;break}else{l=d;d=e;e=l}}}else b=d}else{switch(k&3){case 0:{d=-+E(+b)-+D(+b);break}case 1:{d=+D(+b)-+E(+b);break}case 2:{d=+E(+b)+ +D(+b);break}case 3:{d=+E(+b)-+D(+b);break}default:{}}b=d*.5641895835477563/+B(+b)}b=(g|0)==0?b:-b}else b=r;while(0);return +b}function Lt(a){a=a|0;return +r}function Mt(a){a=+a;a=+eD(+a);y=+A(a)>=1.0?(a>0.0?~~+O(+z(a/4294967296.0),4294967295.0)>>>0:~~+M((a-+(~~a>>>0))/4294967296.0)>>>0):0;return ~~a>>>0|0}function Nt(a,b){a=+a;b=+b;var c=0,d=0;c=Ot(a)|0;d=y&2147483647;if(d>>>0>2146435072|(d|0)==2146435072&c>>>0>0)return +a;else{d=Ot(b)|0;c=y&2147483647;return +(c>>>0>2146435072|(c|0)==2146435072&d>>>0>0?b:a>b?a-b:0.0)}return 0.0}function Ot(a){a=+a;var b=0;h[j>>3]=a;b=c[j>>2]|0;y=c[j+4>>2]|0;return b|0}function Pt(a){a=+a;var b=0,d=0,e=0,f=0.0,h=0.0,i=0.0,k=0.0,l=0.0;b=(g[j>>2]=a,c[j>>2]|0);d=(b|0)<0;do if(b>>>0<8388608|d){if(!(b&2147483647)){a=-1.0/(a*a);break}if(d){a=(a-a)/0.0;break}else{d=-152;b=(g[j>>2]=a*33554432.0,c[j>>2]|0);e=9;break}}else if(b>>>0<=2139095039)if((b|0)==1065353216)a=0.0;else{d=-127;e=9}while(0);if((e|0)==9){e=b+4913933|0;l=(c[j>>2]=(e&8388607)+1060439283,+g[j>>2])+-1.0;k=l/(l+2.0);h=k*k;f=h*h;i=l*(l*.5);a=(c[j>>2]=(g[j>>2]=l-i,c[j>>2]|0)&-4096,+g[j>>2]);f=l-a-i+k*(i+(h*(f*.2849878668785095+.6666666269302368)+f*(f*.24279078841209412+.40000972151756287)));h=+(d+(e>>>23)|0);a=h*.3010292053222656+(a*.434326171875+(f*.434326171875+(h*7.903415166765626e-07-(f+a)*3.168997136526741e-05)))}return +a}function Qt(a,b){a=+a;b=+b;var c=0;if(((Rt(a)|0)&2147483647)>>>0>2139095040)return +a;else{c=((Rt(b)|0)&2147483647)>>>0>2139095040;return +(c?b:a>b?a-b:0.0)}return 0.0}function Rt(a){a=+a;return (g[j>>2]=a,c[j>>2]|0)|0}function St(a,b){a=+a;b=+b;return +(+Xs(a,b))}function Tt(a,b){a=+a;b=+b;return +(+Nt(a,b))}function Ut(a,b){a=a|0;b=+b;var d=0.0,e=0.0,f=0,h=0.0,i=0,k=0.0,l=0,m=0,n=0.0,o=0,p=0.0,q=0,r=0.0;i=(g[j>>2]=b,c[j>>2]|0);f=i>>>31;l=i&2147483647;do if(l>>>0<=2139095040){if(!a){b=+Br(b);break}if((a|0)<0){b=-b;f=f^1;o=~a}else o=a+-1|0;if(!o){b=+xq(b);break}q=f&a;p=+A(+b);a:do if((i|0)<0)if((i|0)<-8388608)switch(i|0){case -2147483648:{b=0.0;break a}default:{m=10;break a}}else switch(i|0){case -8388608:{b=0.0;break a}default:{m=10;break a}}else if((i|0)<2139095040)switch(i|0){case 0:{b=0.0;break a}default:{m=10;break a}}else switch(i|0){case 2139095040:{b=0.0;break a}default:{m=10;break a}}while(0);b:do if((m|0)==10){b=+(o|0);if(p>b){d=+Br(p);b=+xq(p);if((o|0)<=0)break;f=0;while(1){f=f+1|0;d=b*(+(f|0)*2.0/p)-d;if((f|0)==(o|0)){b=d;break b}else{n=b;b=d;d=n}}}if(l>>>0<897581056){a=(o|0)<8?o:8;d=p*.5;if((a|0)<1)b=1.0;else{e=d;b=1.0;f=2;while(1){b=b*+(f|0);e=d*e;if((f|0)>(a|0)){d=e;break}else f=f+1|0}}b=d/b;break}k=b+1.0;n=k*2.0/p;h=2.0/p;b=n+h;d=n*b+-1.0;if(d<1.0e4){e=n;f=1;while(1){f=f+1|0;b=h+b;e=d*b-e;if(!(e<1.0e4))break;else{r=d;d=e;e=r}}}else f=1;e=0.0;while(1){e=1.0/((k+ +(f|0))*2.0/p-e);if((f|0)<=0)break;else f=f+-1|0}f=(o|0)>0;if(k*+L(+(+A(+n)))<88.7216796875)if(f){d=1.0;b=e;f=o;while(1){b=+(f|0)*2.0*d/p-b;if((f|0)>1){r=d;d=b;f=f+-1|0;b=r}else{k=e;h=b;break}}}else{k=e;h=1.0;d=e}else if(f){d=e;h=1.0;b=e;f=o;while(1){b=+(f|0)*2.0*h/p-b;if(b>1152921504606846976.0){d=d/b;e=1.0;b=h/b}else{e=b;b=h}if((f|0)>1){h=e;f=f+-1|0}else{k=d;h=e;d=b;break}}}else{k=e;h=1.0;d=e}e=+Br(p);b=+xq(p);if(!(+A(+e)>=+A(+b))){b=k*b/d;break}else{b=k*e/h;break}}while(0);b=(q|0)==0?b:-b}while(0);return +b}function Vt(a,b){a=a|0;b=+b;var d=0,e=0,f=0.0,h=0.0,i=0,k=0.0;d=(g[j>>2]=b,c[j>>2]|0);e=d&2147483647;do if(e>>>0<=2139095040)if(!((d|0)<0&(e|0)!=0))if((e|0)==2139095040)b=0.0;else{if(!a){b=+Fr(b);break}e=(a|0)<0;i=e?a&1:0;e=e?~a:a+-1|0;if(!e){b=+Bq(b);b=(i|0)==0?b:-b;break}h=+Fr(b);f=+Bq(b);if((e|0)>0&((g[j>>2]=f,c[j>>2]|0)|0)!=-8388608){d=0;while(1){d=d+1|0;h=f*(+(d|0)*2.0/b)-h;if(!((d|0)<(e|0)&((g[j>>2]=h,c[j>>2]|0)|0)!=-8388608)){b=h;break}else{k=f;f=h;h=k}}}else b=f;b=(i|0)==0?b:-b}else b=r;while(0);return +b}function Wt(a){a=a|0;var b=0,d=0,e=0;d=l;l=l+16|0;e=d;b=d+4|0;c[e>>2]=b;a=(zn(a,21545,e)|0)<0;l=d;return (a?-1:c[b>>2]|0)|0}function Xt(a,b){a=a|0;b=b|0;if(!(b&-4112)){a=a+8|0;c[a>>2]=c[a>>2]&-4112|b;a=0}else{c[(Xd()|0)>>2]=22;a=-1}return a|0}function Yt(a,b){a=a|0;b=b|0;if(!b)a=0;else a=Xt(a,b)|0;return a|0}function Zt(a,b){a=a|0;b=b|0;var d=0,e=0;d=l;l=l+16|0;e=d;c[e>>2]=b;b=((zn(a,21505,e)|0)!=0)<<31>>31;l=d;return b|0}function _t(b){b=b|0;var d=0;c[b>>2]=c[b>>2]&-1516;d=b+4|0;c[d>>2]=c[d>>2]&-2;d=b+12|0;c[d>>2]=c[d>>2]&-32844;d=b+8|0;c[d>>2]=c[d>>2]&-305|48;a[b+23>>0]=1;a[b+22>>0]=0;return}function $t(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0;f=l;l=l+16|0;e=f;if(b>>>0>2){c[(Xd()|0)>>2]=22;a=-1}else{c[e>>2]=d;a=zn(a,b+21506|0,e)|0}l=f;return a|0}function au(a){a=a|0;return c[a+8>>2]&4111|0}function bu(a){a=a|0;return au(a)|0}function cu(a,b){a=a|0;b=b|0;var d=0,e=0;d=l;l=l+16|0;e=d;c[e>>2]=b;b=zn(a,21515,e)|0;l=d;return b|0}function du(a){a=a|0;var b=0,d=0;b=l;l=l+16|0;d=b;c[d>>2]=a;c[d+4>>2]=21513;c[d+8>>2]=1;a=Wd(Wb(54,d|0)|0)|0;l=b;return a|0}function eu(a,b){a=a|0;b=b|0;var d=0,e=0;d=l;l=l+16|0;e=d;c[e>>2]=b;b=zn(a,21514,e)|0;l=d;return b|0}function fu(a,b){a=a|0;b=b|0;var d=0;d=l;l=l+16|0;b=d;c[b>>2]=0;b=zn(a,21513,b)|0;l=d;return b|0}function gu(a,b){a=a|0;b=b|0;hu(a,b,(b|0)==0?2:0,1024)|0;return}function hu(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;d=b+75|0;a[d>>0]=-1;switch(e|0){case 2:{c[b+48>>2]=0;break}case 1:{a[d>>0]=10;break}default:{}}c[b>>2]=c[b>>2]|64;return 0}function iu(b){b=b|0;var d=0,e=0;d=ju(b,2147483647,c[40373]|0)|0;if(d|0?(e=b+((df(b)|0)+-1)|0,(a[e>>0]|0)==10):0)a[e>>0]=0;return d|0}function ju(b,e,f){b=b|0;e=e|0;f=f|0;var g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0;if((c[f+76>>2]|0)>-1)m=wh(f)|0;else m=0;g=e+-1|0;if((e|0)<2){n=f+74|0;l=a[n>>0]|0;a[n>>0]=l+255|l;if(m|0)xh(f);if(!g)a[b>>0]=0;else b=0}else{a:do if(g){k=f+4|0;l=f+8|0;e=b;while(1){h=c[k>>2]|0;o=h;p=(c[l>>2]|0)-o|0;j=Wg(h,10,p)|0;i=(j|0)==0;j=i?p:1-o+j|0;j=j>>>0<g>>>0?j:g;bD(e|0,h|0,j|0)|0;h=(c[k>>2]|0)+j|0;c[k>>2]=h;e=e+j|0;j=g-j|0;if(!(i&(j|0)!=0)){n=17;break a}if(h>>>0>=(c[l>>2]|0)>>>0){g=$f(f)|0;if((g|0)<0)break;else h=g}else{c[k>>2]=h+1;h=d[h>>0]|0}i=e+1|0;a[e>>0]=h;g=j+-1|0;if((h&255|0)==10|(g|0)==0){e=i;n=17;break a}else e=i}if((e|0)!=(b|0)?(c[f>>2]&16|0)!=0:0)n=17;else b=0}else{e=b;n=17}while(0);if((n|0)==17)if(!b)b=0;else a[e>>0]=0;if(m)xh(f)}return b|0}function ku(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0;h=l;l=l+16|0;e=h;c[e>>2]=c[d>>2];e=th(0,0,b,e)|0;if((e|0)>=0?(f=e+1|0,g=ud(f)|0,c[a>>2]=g,(g|0)!=0):0)a=th(g,f,b,d)|0;else a=-1;l=h;return a|0}function lu(a){a=a|0;var b=0,d=0,e=0,f=0,g=0;if((c[a+76>>2]|0)>-1)f=wh(a)|0;else f=0;mu(a);g=(c[a>>2]&1|0)!=0;if(!g){e=nu()|0;d=c[a+52>>2]|0;b=a+56|0;if(d|0)c[d+56>>2]=c[b>>2];b=c[b>>2]|0;if(b|0)c[b+52>>2]=d;if((c[e>>2]|0)==(a|0))c[e>>2]=b;ou()}b=pu(a)|0;b=bd[c[a+12>>2]&7](a)|0|b;d=c[a+92>>2]|0;if(d|0)vd(d);if(g){if(f|0)xh(a)}else vd(a);return b|0}function mu(a){a=a|0;var b=0;if(c[a+68>>2]|0){b=c[a+116>>2]|0;a=a+112|0;if(b|0)c[b+112>>2]=c[a>>2];a=c[a>>2]|0;if(!a)a=(ru()|0)+232|0;else a=a+116|0;c[a>>2]=b}return}function nu(){ea(171624);return 171632}function ou(){kc(171624);return}function pu(a){a=a|0;var b=0,d=0;do if(a){if((c[a+76>>2]|0)<=-1){b=qu(a)|0;break}d=(wh(a)|0)==0;b=qu(a)|0;if(!d)xh(a)}else{if(!(c[40438]|0))b=0;else b=pu(c[40438]|0)|0;a=c[(nu()|0)>>2]|0;if(a)do{if((c[a+76>>2]|0)>-1)d=wh(a)|0;else d=0;if((c[a+20>>2]|0)>>>0>(c[a+28>>2]|0)>>>0)b=qu(a)|0|b;if(d|0)xh(a);a=c[a+56>>2]|0}while((a|0)!=0);ou()}while(0);return b|0}function qu(a){a=a|0;var b=0,d=0,e=0,f=0,g=0,h=0;b=a+20|0;h=a+28|0;if((c[b>>2]|0)>>>0>(c[h>>2]|0)>>>0?(dd[c[a+36>>2]&31](a,0,0)|0,(c[b>>2]|0)==0):0)a=-1;else{d=a+4|0;e=c[d>>2]|0;f=a+8|0;g=c[f>>2]|0;if(e>>>0<g>>>0)dd[c[a+40>>2]&31](a,e-g|0,1)|0;c[a+16>>2]=0;c[h>>2]=0;c[b>>2]=0;c[f>>2]=0;c[d>>2]=0;a=0}return a|0}function ru(){return Ff()|0}function su(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0;g=l;l=l+32|0;f=g+8|0;h=g;dD(b|0,0,124)|0;c[h>>2]=a;c[h+4>>2]=557056;a=Wd(Ub(5,h|0)|0)|0;c[b+60>>2]=a;if((a|0)<0)b=0;else{c[f>>2]=a;c[f+4>>2]=2;c[f+8>>2]=1;jb(221,f|0)|0;c[b>>2]=9;c[b+44>>2]=d+8;c[b+48>>2]=e+-8;c[b+32>>2]=1;c[b+40>>2]=2;c[b+12>>2]=1;c[b+76>>2]=-1}l=g;return b|0}function tu(a,b,c){a=a|0;b=b|0;c=c|0;hu(a,b,(b|0)==0?2:0,c)|0;return}function uu(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,i=0,j=0;i=(Tg(e,43)|0)==0;do if((d|0)!=0?(Tg(167079,a[e>>0]|0)|0)!=0:0){if((b|0)==0&d>>>0>4294966139){c[(Xd()|0)>>2]=12;f=0;break}g=(b|0)!=0;f=wd(g?1176:d+1176|0,1)|0;if(!f)f=0;else{h=f+124|0;c[f+84>>2]=h;c[f+60>>2]=-1;a[f+75>>0]=-1;c[f+44>>2]=f+152;c[f+48>>2]=1024;g=g?b:f+1176|0;c[f+136>>2]=g;c[f+132>>2]=d;b=a[e>>0]|0;c[f+140>>2]=b<<24>>24;if(i)c[f>>2]=b<<24>>24==114?8:4;switch(b<<24>>24){case 114:{j=11;break}case 97:{d=Vg(g,d)|0;c[h>>2]=d;j=11;break}default:{}}if((j|0)==11)c[f+128>>2]=d;c[f+32>>2]=8;c[f+36>>2]=9;c[f+40>>2]=10;c[f+12>>2]=5;if(!(c[42859]|0))c[f+76>>2]=-1;zu(f)|0}}else j=3;while(0);if((j|0)==3){c[(Xd()|0)>>2]=22;f=0}return f|0}function vu(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0;e=c[a+84>>2]|0;g=c[e+4>>2]|0;f=c[e>>2]|0;g=g>>>0<f>>>0?0:g-f|0;if(g>>>0<d>>>0){c[a>>2]=c[a>>2]|16;d=g}h=e+12|0;bD(b|0,(c[h>>2]|0)+f|0,d|0)|0;f=(c[e>>2]|0)+d|0;c[e>>2]=f;g=g-d|0;b=c[a+48>>2]|0;g=g>>>0>b>>>0?b:g;b=c[a+44>>2]|0;c[a+4>>2]=b;c[a+8>>2]=b+g;bD(b|0,(c[h>>2]|0)+f|0,g|0)|0;c[e>>2]=(c[e>>2]|0)+g;return d|0}function wu(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0;m=c[b+84>>2]|0;g=b+20|0;h=c[b+28>>2]|0;f=(c[g>>2]|0)-h|0;if((f|0)!=0?(c[g>>2]=h,(wu(b,h,f)|0)>>>0<f>>>0):0)f=0;else i=3;do if((i|0)==3){if((c[m+16>>2]|0)==97){j=m+4|0;g=c[j>>2]|0;c[m>>2]=g;k=m}else{j=m+4|0;k=m;g=c[m>>2]|0}l=m+8|0;f=(c[l>>2]|0)-g|0;f=f>>>0<e>>>0?f:e;i=m+12|0;bD((c[i>>2]|0)+g|0,d|0,f|0)|0;h=(c[k>>2]|0)+f|0;c[k>>2]=h;if(h>>>0>(c[j>>2]|0)>>>0){c[j>>2]=h;g=c[l>>2]|0;if(h>>>0<g>>>0){a[(c[i>>2]|0)+h>>0]=0;break}if(!((g|0)==0|(c[b>>2]&4|0)==0))a[(c[i>>2]|0)+(g+-1)>>0]=0}}while(0);return f|0}function xu(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0;g=l;l=l+16|0;f=g;a=c[a+84>>2]|0;if((d>>>0<=2?(c[f>>2]=0,c[f+4>>2]=c[a>>2],c[f+8>>2]=c[a+4>>2],e=c[f+(d<<2)>>2]|0,(0-e|0)<=(b|0)):0)?((c[a+8>>2]|0)-e|0)>=(b|0):0){f=e+b|0;c[a>>2]=f;a=f}else{c[(Xd()|0)>>2]=22;a=-1}l=g;return a|0}function yu(a){a=a|0;return 0}function zu(a){a=a|0;var b=0,d=0;b=nu()|0;c[a+56>>2]=c[b>>2];d=c[b>>2]|0;if(d|0)c[d+52>>2]=a;c[b>>2]=a;ou();return a|0}function Au(a){a=a|0;return Bu(a)|0}function Bu(a){a=a|0;var b=0,d=0;if((c[a+76>>2]|0)>-1){d=(wh(a)|0)==0;b=Cu(a)|0;if(!d)xh(a)}else b=Cu(a)|0;return b|0}function Cu(b){b=b|0;var d=0,e=0;d=(Du()|0)+188|0;e=c[d>>2]|0;if((a[b+74>>0]|0)<1)Eu(b,1)|0;c[d>>2]=c[b+120>>2];b=Fu(b)|0;c[d>>2]=e;return b|0}function Du(){return Ff()|0}function Eu(b,d){b=b|0;d=d|0;var e=0,f=0,g=0;if((c[b+76>>2]|0)>-1)g=wh(b)|0;else g=0;if(d){e=b+120|0;if(!(c[e>>2]|0)){f=(c[c[(Gu()|0)+188>>2]>>2]|0)==0;c[e>>2]=f?171400:161468}f=b+74|0;e=a[f>>0]|0;if(!(e<<24>>24)){e=(d|0)>0?1:-1;a[f>>0]=e}}else e=a[b+74>>0]|0;if(g|0)xh(b);return e<<24>>24|0}function Fu(b){b=b|0;var d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0,m=0;m=l;l=l+16|0;f=m;h=m+8|0;i=m+12|0;j=f;c[j>>2]=0;c[j+4>>2]=0;j=b+4|0;e=c[j>>2]|0;g=b+8|0;d=c[g>>2]|0;do if(e>>>0<d>>>0){d=Ci(h,e,d-e|0,f)|0;if(d>>>0<4294967294){c[j>>2]=(c[j>>2]|0)+(d+((d|0)==0&1));d=c[h>>2]|0;break}if((d|0)==-1){c[j>>2]=(c[j>>2]|0)+1;d=-1}else k=5}else k=5;while(0);a:do if((k|0)==5){b:while(1){d=c[j>>2]|0;if(d>>>0>=(c[g>>2]|0)>>>0){e=$f(b)|0;a[i>>0]=e;if((e|0)<0)break}else{c[j>>2]=d+1;a[i>>0]=a[d>>0]|0}d=Ci(h,i,1,f)|0;switch(d|0){case -1:break a;case -2:break;default:{k=13;break b}}}if((k|0)==13){d=c[h>>2]|0;break}if(!(Zm(f)|0)){c[(Xd()|0)>>2]=84;d=-1}else d=-1}while(0);l=m;return d|0}function Gu(){return Ff()|0}function Hu(a,b){a=a|0;b=b|0;var d=0,e=0;d=l;l=l+16|0;e=d;c[e>>2]=b;b=Iu(a,e)|0;l=d;return b|0}function Iu(a,b){a=a|0;b=b|0;return Ju(c[40406]|0,a,b)|0}function Ju(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0,k=0;j=l;l=l+144|0;g=j+128|0;h=j+80|0;i=j;e=h;f=e+36|0;do{c[e>>2]=0;e=e+4|0}while((e|0)<(f|0));c[g>>2]=c[d>>2];if((Ku(0,b,g,i,h)|0)<0)d=-1;else{if((c[a+76>>2]|0)>-1)f=(wh(a)|0)!=0;else f=0;Eu(a,1)|0;k=c[a>>2]|0;c[a>>2]=k&-33;d=Ku(a,b,g,i,h)|0;e=c[a>>2]|0;c[a>>2]=e|k&32;if(f)xh(a);d=(e&32|0)==0?d:-1}l=j;return d|0}function Ku(d,e,f,g,i){d=d|0;e=e|0;f=f|0;g=g|0;i=i|0;var j=0,k=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0.0;K=l;l=l+128|0;G=K+104|0;F=K+88|0;E=K+56|0;D=K+48|0;I=K+40|0;H=K+32|0;C=K+24|0;x=K+124|0;y=K+16|0;A=K;B=K+120|0;c[x>>2]=e;v=(d|0)!=0;j=0;e=0;k=0;a:while(1){do if((e|0)>-1){if((j|0)<=(2147483647-e|0)){e=j+e|0;break}if(!(c[d>>2]&32)){c[(Xd()|0)>>2]=75;e=-1}else e=-1}while(0);n=c[x>>2]|0;j=c[n>>2]|0;if(!j){J=87;break}m=n;b:while(1){switch(j|0){case 37:case 0:break b;default:{}}u=m+4|0;c[x>>2]=u;j=c[u>>2]|0;m=u}m=Zp(m,162376)|0;j=c[x>>2]|0;c[x>>2]=j+((m&-2)<<2);m=j+(m>>>1<<2)-n|0;j=m>>2;if(v)Lu(d,n,j);c:do if(!m){u=(cg(c[(c[x>>2]|0)+4>>2]|0)|0)==0;n=c[x>>2]|0;if(!u?(c[n+8>>2]|0)==36:0){u=(c[n+4>>2]|0)+-48|0;k=1;m=3}else{u=-1;m=1}p=n+(m<<2)|0;c[x>>2]=p;o=c[p>>2]|0;m=o+-32|0;d:do if(m>>>0<32){n=0;while(1){m=1<<m;if(!(m&75913))break;n=m|n;p=p+4|0;c[x>>2]=p;o=c[p>>2]|0;m=o+-32|0;if(m>>>0>=32){J=30;break d}}if((o|0)==42){if((cg(c[p+4>>2]|0)|0)!=0?(z=c[x>>2]|0,(c[z+8>>2]|0)==36):0){m=z+4|0;c[i+((c[m>>2]|0)+-48<<2)>>2]=10;m=c[g+((c[m>>2]|0)+-48<<3)>>2]|0;k=1;p=z+12|0}else{if(k|0){e=-1;break a}if(v){t=(c[f>>2]|0)+(4-1)&~(4-1);k=c[t>>2]|0;c[f>>2]=t+4}else k=0;m=k;k=0;p=(c[x>>2]|0)+4|0}c[x>>2]=p;t=(m|0)<0;m=t?0-m|0:m;n=t?n|8192:n}else J=30}else{n=0;J=30}while(0);if((J|0)==30){J=0;m=Mu(x)|0;if((m|0)<0){e=-1;break a}p=c[x>>2]|0}do if((c[p>>2]|0)==46){o=p+4|0;if((c[o>>2]|0)!=42){c[x>>2]=o;o=Mu(x)|0;p=c[x>>2]|0;break}if(uf(c[p+8>>2]|0)|0?(w=c[x>>2]|0,(c[w+12>>2]|0)==36):0){o=w+8|0;c[i+((c[o>>2]|0)+-48<<2)>>2]=10;o=c[g+((c[o>>2]|0)+-48<<3)>>2]|0;p=w+16|0;c[x>>2]=p;break}if(k|0){e=-1;break a}if(v){t=(c[f>>2]|0)+(4-1)&~(4-1);o=c[t>>2]|0;c[f>>2]=t+4}else o=0;p=(c[x>>2]|0)+8|0;c[x>>2]=p}else o=-1;while(0);t=0;while(1){q=(c[p>>2]|0)+-65|0;if(q>>>0>57){e=-1;break a}p=p+4|0;c[x>>2]=p;q=a[151392+(t*58|0)+q>>0]|0;r=q&255;if((r+-1|0)>>>0>=8)break;else t=r}if(!(q<<24>>24)){e=-1;break a}s=(u|0)>-1;do if(q<<24>>24==19)if(s){e=-1;break a}else J=52;else{if(s){c[i+(u<<2)>>2]=r;s=g+(u<<3)|0;u=c[s+4>>2]|0;J=y;c[J>>2]=c[s>>2];c[J+4>>2]=u;J=52;break}if(!v){e=0;break a}Nu(y,r,f);p=c[x>>2]|0}while(0);if((J|0)==52){J=0;if(!v)break}p=c[p+-4>>2]|0;p=(t|0)!=0&(p&15|0)==3?p&-33:p;switch(p|0){case 110:switch((t&255)<<24>>24){case 0:{c[c[y>>2]>>2]=e;break c}case 1:{c[c[y>>2]>>2]=e;break c}case 2:{u=c[y>>2]|0;c[u>>2]=e;c[u+4>>2]=((e|0)<0)<<31>>31;break c}case 3:{b[c[y>>2]>>1]=e;break c}case 4:{a[c[y>>2]>>0]=e;break c}case 6:{c[c[y>>2]>>2]=e;break c}case 7:{u=c[y>>2]|0;c[u>>2]=e;c[u+4>>2]=((e|0)<0)<<31>>31;break c}default:break c}case 99:{Ou(nn(c[y>>2]|0)|0,d)|0;j=1;break c}case 67:{Ou(c[y>>2]|0,d)|0;j=1;break c}case 83:{p=c[y>>2]|0;j=ip(p,0,o)|0;o=(j|0)==0?o:j-p>>2;j=(m|0)<(o|0)?o:m;if(!(n&8192)){c[C>>2]=j-o;c[C+4>>2]=172411;Pu(d,167040,C)|0;Lu(d,p,o);break c}else{Lu(d,p,o);c[H>>2]=j-o;c[H+4>>2]=172411;Pu(d,167040,H)|0;break c}}case 109:{j=xf(c[(Xd()|0)>>2]|0)|0;c[y>>2]=j;break}case 115:{j=c[y>>2]|0;break}default:{u=p|32;t=a[151856+(u+-97)>>0]|0;c[E>>2]=167051+(n>>>3&1^1);c[E+4>>2]=167053+(n>>>11&1^1);c[E+8>>2]=167055+(n>>>13&1^1);c[E+12>>2]=167525+(n&1^1);c[E+16>>2]=167057+(n>>>16&1^1);c[E+20>>2]=t;c[E+24>>2]=p;sh(A,16,167059,E)|0;switch(u|0){case 103:case 102:case 101:case 97:{L=+h[y>>3];c[F>>2]=m;c[F+4>>2]=o;h[F+8>>3]=L;j=Pu(d,A,F)|0;break c}case 112:case 120:case 117:case 111:case 105:case 100:{u=y;t=c[u>>2]|0;u=c[u+4>>2]|0;c[G>>2]=m;c[G+4>>2]=o;j=G+8|0;c[j>>2]=t;c[j+4>>2]=u;j=Pu(d,A,G)|0;break c}default:break c}}}if(!j){c[y>>2]=167044;r=167044}else r=j;q=o>>>0<2147483647?o:2147483647;e:do if((q|0)>0){o=r;j=0;while(1){p=pn(B,o,4)|0;if((p|0)<=0)break;j=j+1|0;if(j>>>0<q>>>0)o=o+p|0;else{p=j;break e}}if((p|0)<0){e=-1;break a}else p=j}else p=0;while(0);j=(m|0)<(p|0)?p:m;o=(n&8192|0)!=0;if(!o){c[I>>2]=j-p;c[I+4>>2]=172411;Pu(d,167040,I)|0}if(p|0){m=r;n=p;do{n=n+-1|0;m=m+(pn(B,m,4)|0)|0;Ou(c[B>>2]|0,d)|0}while((n|0)!=0)}if(o){c[D>>2]=j-p;c[D+4>>2]=172411;Pu(d,167040,D)|0}}while(0)}f:do if((J|0)==87)if(!d)if(!k)e=0;else{e=1;while(1){j=c[i+(e<<2)>>2]|0;if(!j)break;Nu(g+(e<<3)|0,j,f);e=e+1|0;if(e>>>0>=10){e=1;break f}}while(1){if(c[i+(e<<2)>>2]|0){e=-1;break f}e=e+1|0;if(e>>>0>=10){e=1;break}}}while(0);l=K;return e|0}function Lu(a,b,d){a=a|0;b=b|0;d=d|0;a:do if(d|0)while(1){d=d+-1|0;if(c[a>>2]&32|0)break a;Ou(c[b>>2]|0,a)|0;if(!d)break;else b=b+4|0}while(0);return}function Mu(a){a=a|0;var b=0,d=0;if(!(cg(c[c[a>>2]>>2]|0)|0))b=0;else{b=0;do{d=c[a>>2]|0;b=(b*10|0)+-48+(c[d>>2]|0)|0;d=d+4|0;c[a>>2]=d}while((cg(c[d>>2]|0)|0)!=0)}return b|0}function Nu(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0.0;a:do if(b>>>0<=20)do switch(b|0){case 9:{e=(c[d>>2]|0)+(4-1)&~(4-1);b=c[e>>2]|0;c[d>>2]=e+4;c[a>>2]=b;break a}case 10:{e=(c[d>>2]|0)+(4-1)&~(4-1);b=c[e>>2]|0;c[d>>2]=e+4;e=a;c[e>>2]=b;c[e+4>>2]=((b|0)<0)<<31>>31;break a}case 11:{e=(c[d>>2]|0)+(4-1)&~(4-1);b=c[e>>2]|0;c[d>>2]=e+4;e=a;c[e>>2]=b;c[e+4>>2]=0;break a}case 12:{e=(c[d>>2]|0)+(8-1)&~(8-1);b=e;f=c[b>>2]|0;b=c[b+4>>2]|0;c[d>>2]=e+8;e=a;c[e>>2]=f;c[e+4>>2]=b;break a}case 13:{f=(c[d>>2]|0)+(4-1)&~(4-1);e=c[f>>2]|0;c[d>>2]=f+4;e=(e&65535)<<16>>16;f=a;c[f>>2]=e;c[f+4>>2]=((e|0)<0)<<31>>31;break a}case 14:{f=(c[d>>2]|0)+(4-1)&~(4-1);e=c[f>>2]|0;c[d>>2]=f+4;f=a;c[f>>2]=e&65535;c[f+4>>2]=0;break a}case 15:{f=(c[d>>2]|0)+(4-1)&~(4-1);e=c[f>>2]|0;c[d>>2]=f+4;e=(e&255)<<24>>24;f=a;c[f>>2]=e;c[f+4>>2]=((e|0)<0)<<31>>31;break a}case 16:{f=(c[d>>2]|0)+(4-1)&~(4-1);e=c[f>>2]|0;c[d>>2]=f+4;f=a;c[f>>2]=e&255;c[f+4>>2]=0;break a}case 17:{f=(c[d>>2]|0)+(8-1)&~(8-1);g=+h[f>>3];c[d>>2]=f+8;h[a>>3]=g;break a}case 18:{f=(c[d>>2]|0)+(8-1)&~(8-1);g=+h[f>>3];c[d>>2]=f+8;h[a>>3]=g;break a}default:break a}while(0);while(0);return}function Ou(a,b){a=a|0;b=b|0;var d=0;if((c[b+76>>2]|0)>-1){d=(wh(b)|0)==0;a=Qu(a,b)|0;if(!d)xh(b)}else a=Qu(a,b)|0;return a|0}function Pu(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0;e=l;l=l+16|0;f=e;c[f>>2]=d;d=uh(a,b,f)|0;l=e;return d|0}function Qu(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0,k=0,m=0,n=0;n=l;l=l+16|0;i=n;k=(Ru()|0)+188|0;m=c[k>>2]|0;if((a[d+74>>0]|0)<1)Eu(d,1)|0;c[k>>2]=c[d+120>>2];do if(b>>>0>=128){f=d+20|0;e=c[f>>2]|0;if((e+4|0)>>>0>=(c[d+16>>2]|0)>>>0){e=Fh(i,b)|0;if((e|0)<0){j=14;break}if((Mh(i,e,d)|0)>>>0<e>>>0){j=14;break}else{j=13;break}}else{e=Fh(e,b)|0;if((e|0)<0){j=14;break}c[f>>2]=(c[f>>2]|0)+e;j=13;break}}else{e=b&255;f=b&255;if((f|0)!=(a[d+75>>0]|0)?(g=d+20|0,h=c[g>>2]|0,h>>>0<(c[d+16>>2]|0)>>>0):0){c[g>>2]=h+1;a[h>>0]=e;b=f;break}b=Su(d,b)|0;j=13}while(0);if((j|0)==13)if((b|0)==-1)j=14;if((j|0)==14){c[d>>2]=c[d>>2]|32;b=-1}c[k>>2]=m;l=n;return b|0}function Ru(){return Ff()|0}function Su(b,e){b=b|0;e=e|0;var f=0,g=0,h=0,i=0,j=0,k=0,m=0;m=l;l=l+16|0;j=m;k=e&255;a[j>>0]=k;g=b+16|0;h=c[g>>2]|0;if(!h)if(!(Nh(b)|0)){h=c[g>>2]|0;i=4}else f=-1;else i=4;do if((i|0)==4){i=b+20|0;g=c[i>>2]|0;if(g>>>0<h>>>0?(f=e&255,(f|0)!=(a[b+75>>0]|0)):0){c[i>>2]=g+1;a[g>>0]=k;break}if((dd[c[b+36>>2]&31](b,j,1)|0)==1)f=d[j>>0]|0;else f=-1}while(0);l=m;return f|0}function Tu(a){a=a|0;var b=0,d=0;if((c[a+76>>2]|0)>-1){d=(wh(a)|0)==0;b=(c[a>>2]|0)>>>4&1;if(!d)xh(a)}else b=(c[a>>2]|0)>>>4&1;return b|0}function Uu(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0;f=b&255;e=b&255;if((e|0)!=(a[d+75>>0]|0)?(g=d+20|0,h=c[g>>2]|0,h>>>0<(c[d+16>>2]|0)>>>0):0){c[g>>2]=h+1;a[h>>0]=f}else e=Su(d,b)|0;return e|0}function Vu(a,b){a=a|0;b=b|0;var d=0,e=0;d=l;l=l+16|0;e=d;c[e>>2]=a;c[e+4>>2]=b;b=Wd(Ob(38,e|0)|0)|0;l=d;return b|0}function Wu(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,i=0;i=l;l=l+48|0;h=i+32|0;g=i+16|0;e=i;if(Tg(167079,a[d>>0]|0)|0){f=Xu(d)|0;c[e>>2]=b;c[e+4>>2]=f|32768;c[e+8>>2]=438;e=Wd(Ub(5,e|0)|0)|0;if((e|0)>=0){if(f&524288|0){c[g>>2]=e;c[g+4>>2]=2;c[g+8>>2]=1;jb(221,g|0)|0}b=Yu(e,d)|0;if(!b){c[h>>2]=e;Yb(6,h|0)|0;b=0}}else b=0}else{c[(Xd()|0)>>2]=22;b=0}l=i;return b|0}function Xu(b){b=b|0;var c=0,d=0,e=0;d=(Tg(b,43)|0)==0;c=a[b>>0]|0;d=d?c<<24>>24!=114&1:2;e=(Tg(b,120)|0)==0;d=e?d:d|128;b=(Tg(b,101)|0)==0;b=b?d:d|524288;b=c<<24>>24==114?b:b|64;b=c<<24>>24==119?b|512:b;return (c<<24>>24==97?b|1024:b)|0}function Yu(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0,k=0;k=l;l=l+64|0;j=k+40|0;h=k+24|0;g=k+16|0;f=k;i=k+56|0;if(Tg(167079,a[d>>0]|0)|0){e=ud(1156)|0;if(!e)e=0;else{dD(e|0,0,124)|0;if(!(Tg(d,43)|0))c[e>>2]=(a[d>>0]|0)==114?8:4;if(Tg(d,101)|0){c[f>>2]=b;c[f+4>>2]=2;c[f+8>>2]=1;jb(221,f|0)|0}if((a[d>>0]|0)==97){c[g>>2]=b;c[g+4>>2]=3;d=jb(221,g|0)|0;if(!(d&1024)){c[h>>2]=b;c[h+4>>2]=4;c[h+8>>2]=d|1024;jb(221,h|0)|0}f=c[e>>2]|128;c[e>>2]=f}else f=c[e>>2]|0;c[e+60>>2]=b;c[e+44>>2]=e+132;c[e+48>>2]=1024;d=e+75|0;a[d>>0]=-1;if((f&8|0)==0?(c[j>>2]=b,c[j+4>>2]=21523,c[j+8>>2]=i,(Wb(54,j|0)|0)==0):0)a[d>>0]=10;c[e+32>>2]=1;c[e+36>>2]=4;c[e+40>>2]=2;c[e+12>>2]=1;if(!(c[42859]|0))c[e+76>>2]=-1;zu(e)|0}}else{c[(Xd()|0)>>2]=22;e=0}l=k;return e|0}function Zu(a){a=a|0;var b=0,d=0,e=0,f=0,g=0;g=l;l=l+32|0;f=g;d=g+16|0;e=c[a+64>>2]|0;lu(a)|0;a=d;do{c[f>>2]=e;c[f+4>>2]=a;c[f+8>>2]=0;c[f+12>>2]=0;b=na(114,f|0)|0}while((b|0)==-4);if((b|0)<0)a=Wd(b)|0;else a=c[d>>2]|0;l=g;return a|0}function _u(a){a=a|0;var b=0,d=0;d=l;l=l+16|0;b=d;a=($u(b,4,1,a)|0)==0;l=d;return (a?-1:c[b>>2]|0)|0}function $u(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,i=0,j=0,k=0,l=0;k=N(e,d)|0;e=(d|0)==0?0:e;if((c[f+76>>2]|0)>-1)j=wh(f)|0;else j=0;g=f+74|0;h=a[g>>0]|0;a[g>>0]=h+255|h;g=f+4|0;h=c[g>>2]|0;i=(c[f+8>>2]|0)-h|0;if((i|0)>0){i=i>>>0<k>>>0?i:k;bD(b|0,h|0,i|0)|0;c[g>>2]=(c[g>>2]|0)+i;g=k-i|0;b=b+i|0}else g=k;a:do if(!g)l=13;else{i=f+32|0;while(1){if(ag(f)|0)break;h=dd[c[i>>2]&31](f,b,g)|0;if((h+1|0)>>>0<2)break;g=g-h|0;if(!g){l=13;break a}else b=b+h|0}if(j|0)xh(f);e=((k-g|0)>>>0)/(d>>>0)|0}while(0);if((l|0)==13)if(j)xh(f);return e|0}function av(b,d){b=b|0;d=d|0;var e=0,f=0,g=0;e=ud(156)|0;do if(!e)e=0;else{f=ud(4)|0;if(!f){vd(e);e=0;break}dD(e|0,0,156)|0;g=e+124|0;c[e+84>>2]=g;c[g>>2]=b;c[e+128>>2]=d;c[d>>2]=0;c[e+144>>2]=0;c[e+140>>2]=0;c[e+132>>2]=0;c[b>>2]=f;c[e+136>>2]=f;c[f>>2]=0;c[e>>2]=4;c[e+60>>2]=-1;c[e+44>>2]=e+156;c[e+48>>2]=0;a[e+75>>0]=-1;c[e+36>>2]=11;c[e+40>>2]=12;c[e+12>>2]=6;if(!(c[42859]|0))c[e+76>>2]=-1;zu(e)|0}while(0);return e|0}function bv(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0,k=0,m=0,n=0;n=l;l=l+16|0;i=n;c[i>>2]=b;k=c[a+84>>2]|0;j=k+8|0;b=c[j>>2]|0;f=b+d|0;g=k+20|0;a=c[g>>2]|0;if(f>>>0>=a>>>0){a=f+1|a<<1|1;if(a>>>0<=536870911?(e=k+12|0,h=xd(c[e>>2]|0,a<<2)|0,(h|0)!=0):0){c[e>>2]=h;c[c[k>>2]>>2]=h;b=c[g>>2]|0;dD((c[e>>2]|0)+(b<<2)|0,0,a-b<<2|0)|0;c[g>>2]=a;b=c[j>>2]|0;m=6}else d=0}else{e=k+12|0;m=6}if((m|0)==6){a=dn((c[e>>2]|0)+(b<<2)|0,i,d,a-b|0,k+24|0)|0;if((a|0)==-1)d=0;else{b=(c[j>>2]|0)+a|0;c[j>>2]=b;a=k+16|0;if(b>>>0>=(c[a>>2]|0)>>>0)c[a>>2]=b;c[c[k+4>>2]>>2]=b}}l=n;return d|0}function cv(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0;h=l;l=l+16|0;f=h;a=c[a+84>>2]|0;if(d>>>0<=2?(c[f>>2]=0,g=a+8|0,c[f+4>>2]=c[g>>2],c[f+8>>2]=c[a+16>>2],e=c[f+(d<<2)>>2]|0,!((0-e|0)>(b|0)|(536870911-e|0)<(b|0))):0){dD(a+24|0,0,8)|0;a=e+b|0;c[g>>2]=a}else{c[(Xd()|0)>>2]=22;a=-1}l=h;return a|0}function dv(a){a=a|0;return 0}function ev(a,b){a=a|0;b=b|0;var d=0,e=0;d=l;l=l+16|0;e=d;c[e>>2]=b;b=fv(a,e)|0;l=d;return b|0}function fv(a,b){a=a|0;b=b|0;return gv(c[40373]|0,a,b)|0}function gv(b,e,f){b=b|0;e=e|0;f=f|0;var g=0,h=0,i=0,j=0,k=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0,Z=0,_=0,$=0,aa=0,ba=0,ca=0,da=0;da=l;l=l+160|0;aa=da+48|0;$=da+24|0;T=da+144|0;Z=da;_=da+56|0;if((c[b+76>>2]|0)>-1)ca=wh(b)|0;else ca=0;Eu(b,1)|0;i=c[e>>2]|0;a:do if(i){B=b+4|0;C=b+8|0;D=_+4|0;E=_+8|0;F=_+12|0;G=_+16|0;H=_+20|0;I=_+24|0;J=_+28|0;K=_+32|0;L=_+36|0;M=_+40|0;N=_+44|0;O=_+48|0;P=_+52|0;Q=_+56|0;R=_+60|0;S=_+64|0;U=_+68|0;V=_+72|0;W=_+76|0;X=_+80|0;Y=_+84|0;j=e;s=0;q=0;e=0;h=0;g=0;b:while(1){c:do if(Eg(i)|0){while(1){i=j+4|0;if(!(Eg(c[i>>2]|0)|0))break;else j=i}k=q;while(1){i=c[B>>2]|0;if(i>>>0<(c[C>>2]|0)>>>0?(a[i>>0]|0)>-1:0){c[B>>2]=i+1;i=d[i>>0]|0}else i=Au(b)|0;if(!(Eg(i)|0))break;else k=k+1|0}if(i>>>0<128&(c[C>>2]|0)!=0){c[B>>2]=(c[B>>2]|0)+-1;m=s;break}else{hv(i,b)|0;m=s;break}}else{k=(c[j>>2]|0)==37;d:do if(k){i=j+4|0;m=c[i>>2]|0;e:do switch(m|0){case 37:break d;case 42:{A=0;i=j+8|0;break}default:{if(cg(m)|0?(c[j+8>>2]|0)==36:0){A=iv(f,(c[i>>2]|0)+-48|0)|0;i=j+12|0;break e}z=(c[f>>2]|0)+(4-1)&~(4-1);A=c[z>>2]|0;c[f>>2]=z+4}}while(0);if(!(cg(c[i>>2]|0)|0)){p=0;m=i}else{j=0;do{j=(j*10|0)+-48+(c[i>>2]|0)|0;i=i+4|0}while((cg(c[i>>2]|0)|0)!=0);p=j;m=i}k=c[m>>2]|0;n=m+4|0;if((k|0)==109){i=(A|0)!=0&1;h=0;j=n;o=m+8|0;k=c[n>>2]|0;g=0}else{i=0;j=m;o=n}switch(k|0){case 104:{z=(c[o>>2]|0)==104;m=z?-2:-1;j=z?j+8|0:o;break}case 108:{z=(c[o>>2]|0)==108;m=z?3:1;j=z?j+8|0:o;break}case 106:{m=3;j=o;break}case 116:case 122:{m=1;j=o;break}case 76:{m=2;j=o;break}case 110:case 112:case 67:case 83:case 91:case 99:case 115:case 88:case 71:case 70:case 69:case 65:case 103:case 102:case 101:case 97:case 120:case 117:case 111:case 105:case 100:{m=0;break}default:{ba=105;break b}}z=c[j>>2]|0;o=(z&47|0)==3;k=z|32;z=o?k:z;o=o?1:m;switch(z|0){case 110:{k=q;break}case 91:{ba=52;break}default:if((k|0)==99)ba=52;else{k=q;while(1){m=c[B>>2]|0;if(m>>>0<(c[C>>2]|0)>>>0?(a[m>>0]|0)>-1:0){c[B>>2]=m+1;m=d[m>>0]|0}else m=Au(b)|0;if(!(Eg(m)|0)){ba=56;break}else k=k+1|0}}}do if((ba|0)==52){k=c[B>>2]|0;n=c[C>>2]|0;if(k>>>0<n>>>0?(a[k>>0]|0)>-1:0){c[B>>2]=k+1;m=d[k>>0]|0;k=q;ba=58;break}m=Au(b)|0;k=q;ba=56}while(0);if((ba|0)==56){if((m|0)<0){ba=105;break b}n=c[C>>2]|0;ba=58}f:do if((ba|0)==58){ba=0;if(m>>>0<128&(n|0)!=0)c[B>>2]=(c[B>>2]|0)+-1;else hv(m,b)|0;switch(z|0){case 110:break f;case 91:case 99:case 115:{y=(z|0)==99;g:do if(y){m=171636;n=1;g=(p|0)>1?p:1}else{if((z|0)==115){c[_>>2]=32;c[D>>2]=9;c[E>>2]=10;c[F>>2]=13;c[G>>2]=11;c[H>>2]=12;c[I>>2]=133;c[J>>2]=8192;c[K>>2]=8193;c[L>>2]=8194;c[M>>2]=8195;c[N>>2]=8196;c[O>>2]=8197;c[P>>2]=8198;c[Q>>2]=8200;c[R>>2]=8201;c[S>>2]=8202;c[U>>2]=8232;c[V>>2]=8233;c[W>>2]=8287;c[X>>2]=12288;c[Y>>2]=0;m=_;n=1;g=p;break}m=j+4|0;x=(c[m>>2]|0)==94;n=x&1;m=x?j+8|0:m;j=(c[m>>2]|0)==93?m+4|0:m;while(1){switch(c[j>>2]|0){case 0:{ba=105;break b}case 93:{g=p;break g}default:{}}j=j+4|0}}while(0);h=(o|0)==0?A:0;x=(o|0)==1;o=x?A:0;r=(g|0)<1?-1:g;w=(i|0)!=0;do if(w){g=y?r+1|0:31;if(x){o=ud(g<<2)|0;if(!o){g=0;ba=105;break b}else{q=o;break}}else{h=ud(g)|0;if(!h){h=0;g=0;ba=105;break b}else{q=o;o=0;break}}}else{g=s;q=o}while(0);h:do if(r){t=0;p=0;u=g;s=q;v=o;g=o;while(1){o=c[B>>2]|0;do if(o>>>0<(c[C>>2]|0)>>>0){if((a[o>>0]|0)<=-1){ba=79;break}c[B>>2]=o+1;o=d[o>>0]|0}else ba=79;while(0);if((ba|0)==79){ba=0;o=Au(b)|0;if((o|0)<0){m=o;ba=91;break}}if((kv(m,o)|0)==(n|0)){ba=89;break}do if(!s){if(x){o=u;s=0;q=v;break}o=Fh((h|0)==0?Z:h+p|0,o)|0;if((o|0)<0){ba=105;break b}p=o+p|0;if(!(w&p>>>0>(u+-4|0)>>>0)){o=u;s=0;q=v;break}o=u<<1|1;q=xd(h,o)|0;if(!q){ba=105;break b}else{s=0;h=q;q=v}}else{q=p+1|0;c[s+(p<<2)>>2]=o;if(!(w&(q|0)==(u|0))){p=q;o=u;q=v;break}o=u<<1|1;q=xd(v,o<<2)|0;if(!q){ba=105;break b}else{p=u;s=q;g=q}}while(0);k=k+1|0;r=r-((r|0)>0&1)|0;if(!r){i=o;n=s;m=q;break h}else{t=1;u=o;v=q}}if((ba|0)==89){ba=0;if(o>>>0<128&(c[C>>2]|0)!=0)c[B>>2]=(c[B>>2]|0)+-1;else{m=o;ba=91}}if((ba|0)==91){ba=0;hv(m,b)|0}if((z|0)!=99&(t|0)!=0){i=u;n=s;m=v}else break b}else{p=0;i=g;n=q;m=o;g=o}while(0);if(w)c[A>>2]=x?m:h;if(!y){if(n|0)c[n+(p<<2)>>2]=0;if(!h)h=0;else a[h+p>>0]=0}break}case 112:case 88:case 71:case 70:case 69:case 65:case 103:case 102:case 101:case 97:case 120:case 117:case 111:case 105:case 100:{y=(A|0)!=0;c[$>>2]=y?1:2;c[$+4>>2]=167101;c[$+8>>2]=(p|0)>0?p:0;c[$+12>>2]=151888+((o+2|0)*3|0);c[$+16>>2]=z;sh(Z,22,167083,$)|0;c[T>>2]=0;c[aa>>2]=y?A:T;c[aa+4>>2]=T;if((lv(b,Z,aa)|0)==-1){ba=105;break b}m=c[T>>2]|0;if(!m)break b;i=s;k=m+k|0;break}default:{ba=105;break b}}e=e+((A|0)!=0&1)|0;m=i;break c}while(0);jv(A,o,k,((k|0)<0)<<31>>31);m=s;break c}while(0);j=j+((k&1)<<2)|0;i=c[B>>2]|0;if(i>>>0<(c[C>>2]|0)>>>0?(a[i>>0]|0)>-1:0){c[B>>2]=i+1;i=d[i>>0]|0}else i=Au(b)|0;if((i|0)!=(c[j>>2]|0)){ba=24;break b}m=s;k=q+1|0}while(0);j=j+4|0;i=c[j>>2]|0;if(!i)break a;else{s=m;q=k}}do if((ba|0)==24)if(!(i>>>0<128&(c[C>>2]|0)!=0)){hv(i,b)|0;if((e|0)!=0|(i|0)>-1)break a;else{e=0;ba=106;break}}else{c[B>>2]=(c[B>>2]|0)+-1;break a}else if((ba|0)==105)if(!e){e=i;ba=106}while(0);if((ba|0)==106){i=e;e=-1}if(i){vd(h);vd(g)}}else e=0;while(0);if(ca|0)xh(b);l=da;return e|0}function hv(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0,k=0,m=0,n=0;n=l;l=l+16|0;g=n;k=(pv()|0)+188|0;m=c[k>>2]|0;if((c[d+76>>2]|0)>-1)j=wh(d)|0;else j=0;if((a[d+74>>0]|0)<1)Eu(d,1)|0;c[k>>2]=c[d+120>>2];f=d+4|0;e=c[f>>2]|0;if(!e){ag(d)|0;e=c[f>>2]|0}if((!((b|0)==-1|(e|0)==0)?(h=Kh(g,b,0)|0,(h|0)>=0):0)?(i=c[f>>2]|0,i>>>0>=((c[d+44>>2]|0)+-8+h|0)>>>0):0){if(b>>>0<128){i=i+-1|0;c[f>>2]=i;a[i>>0]=b}else{i=i+(0-h)|0;c[f>>2]=i;bD(i|0,g|0,h|0)|0}c[d>>2]=c[d>>2]&-17;if(j)xh(d)}else if(!j)b=-1;else{xh(d);b=-1}c[k>>2]=m;l=n;return b|0}function iv(a,b){a=a|0;b=b|0;var d=0,e=0,f=0;e=l;l=l+16|0;d=e;c[d>>2]=c[a>>2];while(1){f=(c[d>>2]|0)+(4-1)&~(4-1);a=c[f>>2]|0;c[d>>2]=f+4;if(b>>>0>1)b=b+-1|0;else break}l=e;return a|0}function jv(d,e,f,g){d=d|0;e=e|0;f=f|0;g=g|0;a:do if(d|0)switch(e|0){case -2:{a[d>>0]=f;break a}case -1:{b[d>>1]=f;break a}case 0:{c[d>>2]=f;break a}case 1:{c[d>>2]=f;break a}case 3:{e=d;c[e>>2]=f;c[e+4>>2]=g;break a}default:break a}while(0);return}function kv(a,b){a=a|0;b=b|0;var d=0,e=0;switch(c[a>>2]|0){case 45:{if((b|0)==45)a=1;else{a=a+4|0;d=6}break}case 93:{if((b|0)==93)a=1;else{a=a+4|0;d=6}break}default:d=6}a:do if((d|0)==6)while(1){b:do switch(c[a>>2]|0){case 93:case 0:{a=0;break a}case 45:{d=a+4|0;e=c[d>>2]|0;switch(e|0){case 93:case 0:break b;default:{}}a=c[a+-4>>2]|0;if((a|0)<(e|0))while(1){if((a|0)==(b|0)){a=1;break a}a=a+1|0;if((a|0)>=(e|0)){a=d;break}}else a=d;break}default:{}}while(0);if((c[a>>2]|0)==(b|0)){a=1;break a}else a=a+4|0}while(0);return a|0}function lv(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0;e=l;l=l+16|0;f=e;c[f>>2]=d;d=mv(a,b,f)|0;l=e;return d|0}function mv(e,f,i){e=e|0;f=f|0;i=i|0;var j=0,k=0,m=0,n=0,o=0,p=0,q=0.0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0;O=l;l=l+288|0;I=O+264|0;J=O;K=O+260|0;L=O+272|0;if((c[e+76>>2]|0)>-1)N=wh(e)|0;else N=0;j=a[f>>0]|0;a:do if(j<<24>>24){A=e+4|0;B=e+100|0;C=e+108|0;D=e+8|0;E=J+10|0;F=J+33|0;G=J+46|0;H=J+94|0;z=I+4|0;n=f;v=0;f=0;k=0;m=j;j=0;b:while(1){c:do if(!(_f(m&255)|0)){o=(a[n>>0]|0)==37;d:do if(o){m=n+1|0;p=a[m>>0]|0;e:do switch(p<<24>>24){case 37:break d;case 42:{x=0;m=n+2|0;break}default:{if(uf(p&255)|0?(a[n+2>>0]|0)==36:0){x=nv(i,(d[m>>0]|0)+-48|0)|0;m=n+3|0;break e}w=(c[i>>2]|0)+(4-1)&~(4-1);x=c[w>>2]|0;c[i>>2]=w+4}}while(0);if(!(uf(d[m>>0]|0)|0)){t=0;p=m}else{n=0;do{n=(n*10|0)+-48+(d[m>>0]|0)|0;m=m+1|0}while((uf(d[m>>0]|0)|0)!=0);t=n;p=m}o=a[p>>0]|0;r=p+1|0;if(o<<24>>24==109){m=(x|0)!=0&1;k=0;n=r;p=p+2|0;o=a[r>>0]|0;j=0}else{m=0;n=p;p=r}switch(o<<24>>24){case 104:{w=(a[p>>0]|0)==104;o=w?-2:-1;n=w?n+2|0:p;break}case 108:{w=(a[p>>0]|0)==108;o=w?3:1;n=w?n+2|0:p;break}case 106:{o=3;n=p;break}case 116:case 122:{o=1;n=p;break}case 76:{o=2;n=p;break}case 110:case 112:case 67:case 83:case 91:case 99:case 115:case 88:case 71:case 70:case 69:case 65:case 103:case 102:case 101:case 97:case 120:case 117:case 111:case 105:case 100:{o=0;break}default:{M=143;break b}}s=d[n>>0]|0;u=(s&47|0)==3;s=u?s|32:s;u=u?1:o;r=s&255;switch(r<<24>>24){case 99:{t=(t|0)>1?t:1;break}case 91:break;case 110:{ov(x,u,v,((v|0)<0)<<31>>31);o=v;break c}default:{Xf(e,0);do{o=c[A>>2]|0;if(o>>>0<(c[B>>2]|0)>>>0){c[A>>2]=o+1;o=d[o>>0]|0}else o=Zf(e)|0}while((_f(o)|0)!=0);if(!(c[B>>2]|0))o=c[A>>2]|0;else{o=(c[A>>2]|0)+-1|0;c[A>>2]=o}v=(c[C>>2]|0)+v+o-(c[D>>2]|0)|0}}Xf(e,t);p=c[A>>2]|0;o=c[B>>2]|0;if(p>>>0<o>>>0)c[A>>2]=p+1;else{if((Zf(e)|0)<0){M=143;break b}o=c[B>>2]|0}if(o|0)c[A>>2]=(c[A>>2]|0)+-1;f:do switch(r<<24>>24){case 91:case 99:case 115:{w=(s|0)==99;g:do if((s|16|0)==115){dD(J|0,-1,257)|0;a[J>>0]=0;if((s|0)==115){a[F>>0]=0;b[E>>1]=0;b[E+2>>1]=0;a[E+4>>0]=0}}else{s=n+1|0;r=(a[s>>0]|0)==94;o=r&1;n=r?n+2|0:s;dD(J|0,o|0,257)|0;a[J>>0]=0;switch(a[n>>0]|0){case 45:{r=(o^1)&255;a[G>>0]=r;n=n+1|0;break}case 93:{r=(o^1)&255;a[H>>0]=r;n=n+1|0;break}default:r=(o^1)&255}while(1){o=a[n>>0]|0;h:do switch(o<<24>>24){case 0:{M=143;break b}case 93:break g;case 45:{p=n+1|0;o=a[p>>0]|0;switch(o<<24>>24){case 93:case 0:{o=45;break h}default:{}}n=a[n+-1>>0]|0;if((n&255)<(o&255)){n=n&255;do{n=n+1|0;a[J+n>>0]=r;o=a[p>>0]|0}while(n>>>0<(o&255)>>>0);n=p}else n=p;break}default:{}}while(0);a[J+((o&255)+1)>>0]=r;n=n+1|0}}while(0);o=w?t+1|0:31;s=(u|0)==1;u=(m|0)!=0;i:do if(s){if(u){j=ud(o<<2)|0;if(!j){k=0;j=0;M=143;break b}}else j=x;c[I>>2]=0;c[z>>2]=0;k=0;j:while(1){r=(j|0)==0;do{k:while(1){p=c[A>>2]|0;if(p>>>0<(c[B>>2]|0)>>>0){c[A>>2]=p+1;p=d[p>>0]|0}else p=Zf(e)|0;if(!(a[J+(p+1)>>0]|0))break j;a[L>>0]=p;switch(Ci(K,L,1,I)|0){case -1:{k=0;M=143;break b}case -2:break;default:break k}}if(!r){c[j+(k<<2)>>2]=c[K>>2];k=k+1|0}}while(!(u&(k|0)==(o|0)));o=o<<1|1;p=xd(j,o<<2)|0;if(!p){k=0;M=143;break b}else j=p}if(!(Zm(I)|0)){k=0;M=143;break b}else{r=k;k=0;p=j}}else{if(u){k=ud(o)|0;if(!k){k=0;j=0;M=143;break b}j=0;while(1){r=j;do{j=c[A>>2]|0;if(j>>>0<(c[B>>2]|0)>>>0){c[A>>2]=j+1;j=d[j>>0]|0}else j=Zf(e)|0;if(!(a[J+(j+1)>>0]|0)){p=0;j=0;break i}p=r;r=r+1|0;a[k+p>>0]=j}while((r|0)!=(o|0));o=o<<1|1;p=xd(k,o)|0;if(!p){j=0;M=143;break b}else{j=r;k=p}}}if(!x)while(1){j=c[A>>2]|0;if(j>>>0<(c[B>>2]|0)>>>0){c[A>>2]=j+1;j=d[j>>0]|0}else j=Zf(e)|0;if(!(a[J+(j+1)>>0]|0)){r=0;k=0;p=0;j=0;break i}}k=0;while(1){j=c[A>>2]|0;if(j>>>0<(c[B>>2]|0)>>>0){c[A>>2]=j+1;j=d[j>>0]|0}else j=Zf(e)|0;if(!(a[J+(j+1)>>0]|0)){r=k;k=x;p=0;j=0;break i}a[x+k>>0]=j;k=k+1|0}}while(0);if(!(c[B>>2]|0))o=c[A>>2]|0;else{o=(c[A>>2]|0)+-1|0;c[A>>2]=o}o=o-(c[D>>2]|0)+(c[C>>2]|0)|0;if(!o)break b;if(!((o|0)==(t|0)|w^1))break b;do if(u)if(s){c[x>>2]=p;break}else{c[x>>2]=k;break}while(0);if(!w){if(p|0)c[p+(r<<2)>>2]=0;if(!k){k=0;break f}a[k+r>>0]=0}break}case 120:case 88:case 112:{o=16;M=131;break}case 111:{o=8;M=131;break}case 117:case 100:{o=10;M=131;break}case 105:{o=0;M=131;break}case 71:case 103:case 70:case 102:case 69:case 101:case 65:case 97:{q=+vj(e,u,0);if((c[C>>2]|0)==((c[D>>2]|0)-(c[A>>2]|0)|0))break b;if(x)switch(u|0){case 0:{g[x>>2]=q;break f}case 1:{h[x>>3]=q;break f}case 2:{h[x>>3]=q;break f}default:break f}break}default:{}}while(0);do if((M|0)==131){M=0;o=Yf(e,o,0,-1,-1)|0;if((c[C>>2]|0)==((c[D>>2]|0)-(c[A>>2]|0)|0))break b;if((x|0)!=0&(s|0)==112){c[x>>2]=o;break}else{ov(x,u,o,y);break}}while(0);f=f+((x|0)!=0&1)|0;o=(c[C>>2]|0)+v+(c[A>>2]|0)-(c[D>>2]|0)|0;break c}while(0);n=n+(o&1)|0;Xf(e,0);m=c[A>>2]|0;if(m>>>0<(c[B>>2]|0)>>>0){c[A>>2]=m+1;m=d[m>>0]|0}else m=Zf(e)|0;if((m|0)!=(d[n>>0]|0)){M=23;break b}o=v+1|0}else{while(1){m=n+1|0;if(!(_f(d[m>>0]|0)|0))break;else n=m}Xf(e,0);do{m=c[A>>2]|0;if(m>>>0<(c[B>>2]|0)>>>0){c[A>>2]=m+1;m=d[m>>0]|0}else m=Zf(e)|0}while((_f(m)|0)!=0);if(!(c[B>>2]|0))m=c[A>>2]|0;else{m=(c[A>>2]|0)+-1|0;c[A>>2]=m}o=(c[C>>2]|0)+v+m-(c[D>>2]|0)|0}while(0);n=n+1|0;m=a[n>>0]|0;if(!(m<<24>>24))break a;else v=o}if((M|0)==23){if(c[B>>2]|0)c[A>>2]=(c[A>>2]|0)+-1;if((f|0)!=0|(m|0)>-1)break;else{m=0;f=k;M=144}}else if((M|0)==143)if(!f){f=k;M=144}if((M|0)==144){k=f;f=-1}if(m){vd(k);vd(j)}}else f=0;while(0);if(N|0)xh(e);l=O;return f|0}function nv(a,b){a=a|0;b=b|0;var d=0,e=0,f=0;e=l;l=l+16|0;d=e;c[d>>2]=c[a>>2];while(1){f=(c[d>>2]|0)+(4-1)&~(4-1);a=c[f>>2]|0;c[d>>2]=f+4;if(b>>>0>1)b=b+-1|0;else break}l=e;return a|0}function ov(d,e,f,g){d=d|0;e=e|0;f=f|0;g=g|0;a:do if(d|0)switch(e|0){case -2:{a[d>>0]=f;break a}case -1:{b[d>>1]=f;break a}case 0:{c[d>>2]=f;break a}case 1:{c[d>>2]=f;break a}case 3:{e=d;c[e>>2]=f;c[e+4>>2]=g;break a}default:break a}while(0);return}function pv(){return Ff()|0}function qv(a,b){a=a|0;b=b|0;return mv(c[40373]|0,a,b)|0}function rv(){gd[2&3]();return}function sv(){var a=0;a=c[(nu()|0)>>2]|0;if(a|0)do{tv(a);a=c[a+56>>2]|0}while((a|0)!=0);tv(c[40405]|0);tv(c[40438]|0);return}function tv(a){a=a|0;var b=0,d=0;if(a|0){if((c[a+76>>2]|0)>-1)wh(a)|0;if((c[a+20>>2]|0)>>>0>(c[a+28>>2]|0)>>>0)dd[c[a+36>>2]&31](a,0,0)|0;b=c[a+4>>2]|0;d=c[a+8>>2]|0;if(b>>>0<d>>>0)dd[c[a+40>>2]&31](a,b-d|0,1)|0}return}function uv(b){b=b|0;var d=0,e=0,f=0,g=0,h=0;e=b&255;d=b&255;f=c[40406]|0;if((d|0)!=(a[f+75>>0]|0)?(g=f+20|0,h=c[g>>2]|0,h>>>0<(c[f+16>>2]|0)>>>0):0){c[g>>2]=h+1;a[h>>0]=e}else d=Su(f,b)|0;return d|0}function vv(a){a=a|0;var b=0,e=0;b=a+4|0;e=c[b>>2]|0;if(e>>>0<(c[a+8>>2]|0)>>>0){c[b>>2]=e+1;a=d[e>>0]|0}else a=$f(a)|0;return a|0}function wv(a){a=a|0;var b=0,d=0,e=0,f=0;e=l;l=l+16|0;d=e+8|0;f=e;b=a;c[f>>2]=b;a=la(10,f|0)|0;if((a|0)==-21){c[d>>2]=b;a=Rb(40,d|0)|0}f=Wd(a)|0;l=e;return f|0}function xv(a,b,c){a=a|0;b=b|0;c=c|0;return yv(a,b,10,c)|0}function yv(b,e,f,g){b=b|0;e=e|0;f=f|0;g=g|0;var h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0;if((c[g+76>>2]|0)>-1)r=wh(g)|0;else r=0;a:do if((b|0)!=0&(e|0)!=0){if(!(c[b>>2]|0))c[e>>2]=0;o=g+4|0;p=g+8|0;l=0;while(1){i=c[o>>2]|0;h=i;m=(c[p>>2]|0)-h|0;j=Wg(i,f,m)|0;n=(j|0)!=0;m=n?1-h+j|0:m;h=m+l|0;q=h+1|0;if(q>>>0<(c[e>>2]|0)>>>0)j=c[b>>2]|0;else{if(m>>>0>=(2147483647-l|0)>>>0){s=27;break}k=h+2|0;i=((j|0)==0&k>>>0<1073741823?k>>>1:0)+k|0;j=xd(c[b>>2]|0,i)|0;if(!j){i=xd(c[b>>2]|0,k)|0;if(!i){s=27;break}else{j=i;i=k}}c[b>>2]=j;c[e>>2]=i;i=c[o>>2]|0}bD(j+l|0,i|0,m|0)|0;i=(c[o>>2]|0)+m|0;c[o>>2]=i;if(n)break;if(i>>>0>=(c[p>>2]|0)>>>0){i=$f(g)|0;if((i|0)==-1){s=20;break}}else{c[o>>2]=i+1;i=d[i>>0]|0}a[(c[b>>2]|0)+h>>0]=i;if((i<<24>>24|0)==(f|0)){h=q;break}else l=q}if((s|0)==27){c[g>>2]=c[g>>2]|32;if(r|0)xh(g);c[(Xd()|0)>>2]=12;h=-1;break}do if((s|0)==20){if(h|0?c[g>>2]&16|0:0)break;if(!r){h=-1;break a}xh(g);h=-1;break a}while(0);a[(c[b>>2]|0)+h>>0]=0;if(r)xh(g)}else{c[g>>2]=c[g>>2]|32;if(r|0)xh(g);c[(Xd()|0)>>2]=22;h=-1}while(0);return h|0}function zv(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0;if((d|0)==1)b=b-(c[a+8>>2]|0)+(c[a+4>>2]|0)|0;e=a+20|0;f=a+28|0;if((c[e>>2]|0)>>>0>(c[f>>2]|0)>>>0?(dd[c[a+36>>2]&31](a,0,0)|0,(c[e>>2]|0)==0):0)b=-1;else{c[a+16>>2]=0;c[f>>2]=0;c[e>>2]=0;if((dd[c[a+40>>2]&31](a,b,d)|0)<0)b=-1;else{c[a+8>>2]=0;c[a+4>>2]=0;c[a>>2]=c[a>>2]&-17;b=0}}return b|0}function Av(a,b,d){a=a|0;b=b|0;d=d|0;var e=0;if((c[a+76>>2]|0)>-1){e=(wh(a)|0)==0;b=zv(a,b,d)|0;if(!e)xh(a)}else b=zv(a,b,d)|0;return b|0}function Bv(a,b,c){a=a|0;b=b|0;c=c|0;return Av(a,b,c)|0}function Cv(a){a=a|0;var b=0,d=0;b=a+68|0;d=c[b>>2]|0;if((d|0)==1){mu(a);c[b>>2]=0;xh(a)}else c[b>>2]=d+-1;return}function Dv(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,i=0,j=0;j=l;l=l+1040|0;d=j+1024|0;e=j;c[d>>2]=a;g=(Ev()|0)+188|0;h=c[g>>2]|0;if((c[b+76>>2]|0)>-1)f=wh(b)|0;else f=0;Eu(b,1)|0;c[g>>2]=c[b+120>>2];a:do if(a){while(1){a=cn(e,d,1024,0)|0;if((a+1|0)>>>0<=1){i=10;break a}if((Mh(e,a,b)|0)>>>0<a>>>0)break;if(!(c[d>>2]|0)){i=10;break a}}if(!f)a=-1;else{xh(b);a=-1}}else{a=0;i=10}while(0);if((i|0)==10)if(f)xh(b);c[g>>2]=h;l=j;return a|0}function Ev(){return Ff()|0}function Fv(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0,i=0;h=l;l=l+384|0;e=h;f=h+256|0;g=f;i=g+124|0;do{c[g>>2]=0;g=g+4|0}while((g|0)<(i|0));c[f+32>>2]=13;c[f+44>>2]=e;c[f+48>>2]=256;c[f+76>>2]=-1;c[f+84>>2]=a;i=gv(f,b,d)|0;l=h;return i|0}function Gv(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,i=0,j=0,k=0;k=l;l=l+16|0;i=k;j=b+84|0;h=c[j>>2]|0;c[i>>2]=h;do if(h){f=b+44|0;h=cn(c[f>>2]|0,i,c[b+48>>2]|0,0)|0;if((h|0)==-1){c[b+8>>2]=0;c[b+4>>2]=0;f=0;break}f=c[f>>2]|0;g=b+4|0;c[g>>2]=f;c[b+8>>2]=f+h;c[j>>2]=c[i>>2];if((e|0)!=0&(h|0)!=0){c[g>>2]=f+1;a[d>>0]=a[f>>0]|0;f=1}else f=0}else f=0;while(0);l=k;return f|0}function Hv(){var a=0;a=c[(ru()|0)+232>>2]|0;if(a|0)do{Iv(a+76|0);a=c[a+116>>2]|0}while((a|0)!=0);return}function Iv(a){a=a|0;c[a>>2]=1073741824;return}function Jv(a){a=a|0;var b=0,d=0,e=0;b=ru()|0;d=c[b+52>>2]|0;e=a+76|0;if((c[e>>2]|0)==(d|0)){b=a+68|0;d=c[b>>2]|0;if((d|0)==2147483647)b=-1;else{c[b>>2]=d+1;b=0}}else{if((c[e>>2]|0)<0)c[e>>2]=0;if(!(c[e>>2]|0)){Kv(e,d);c[a+68>>2]=1;c[a+112>>2]=0;b=b+232|0;d=c[b>>2]|0;c[a+116>>2]=d;if(d|0)c[d+112>>2]=a;c[b>>2]=a;b=0}else b=-1}return b|0}function Kv(a,b){a=a|0;b=b|0;if(!(c[a>>2]|0))c[a>>2]=b;return}function Lv(a){a=a|0;var b=0,d=0;if((c[a+76>>2]|0)>-1){d=(wh(a)|0)==0;b=(c[a>>2]|0)>>>5&1;if(!d)xh(a)}else b=(c[a>>2]|0)>>>5&1;return b|0}function Mv(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0,k=0;if((c[d+76>>2]|0)>=0?(wh(d)|0)!=0:0){f=b&255;e=b&255;if((e|0)!=(a[d+75>>0]|0)?(i=d+20|0,j=c[i>>2]|0,j>>>0<(c[d+16>>2]|0)>>>0):0){c[i>>2]=j+1;a[j>>0]=f}else e=Su(d,b)|0;xh(d)}else k=3;do if((k|0)==3){f=b&255;e=b&255;if((e|0)!=(a[d+75>>0]|0)?(g=d+20|0,h=c[g>>2]|0,h>>>0<(c[d+16>>2]|0)>>>0):0){c[g>>2]=h+1;a[h>>0]=f;break}e=Su(d,b)|0}while(0);return e|0}function Nv(a,b){a=a|0;b=b|0;return Ou(a,b)|0}function Ov(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0;e=l;l=l+16|0;f=e;c[f>>2]=d;d=Pv(a,b,f)|0;l=e;return d|0}function Pv(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,i=0;h=l;l=l+128|0;f=h;g=f;i=g+124|0;do{c[g>>2]=0;g=g+4|0}while((g|0)<(i|0));c[f+36>>2]=14;c[f+44>>2]=d;c[f+48>>2]=0;c[f+60>>2]=b;a[f+75>>0]=-1;c[f+76>>2]=-1;i=uh(f,d,e)|0;l=h;return i|0}function Qv(a,b,c){a=a|0;b=b|0;c=c|0;return _d(a,b,c)|0}function Rv(a,b){a=a|0;b=b|0;return uh(c[40406]|0,a,b)|0}function Sv(a){a=a|0;hu(a,0,1,0)|0;return}function Tv(a,b){a=a|0;b=b|0;var d=0,e=0;d=l;l=l+16|0;e=d;c[e>>2]=b;b=uh(c[40406]|0,a,e)|0;l=d;return b|0}function Uv(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0;e=l;l=l+16|0;f=e;c[f>>2]=d;d=Fv(a,b,f)|0;l=e;return d|0}function Vv(d){d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0,k=0,m=0,n=0,o=0,p=0;p=l;l=l+112|0;k=p+24|0;f=p;g=p+32|0;c[f>>2]=c[37980];c[f+4>>2]=c[37981];c[f+8>>2]=c[37982];c[f+12>>2]=c[37983];b[f+16>>1]=b[75968]|0;a[f+18>>0]=a[151938]|0;h=f+12|0;i=f;j=g;e=0;while(1){ff(h)|0;m=g;n=m+76|0;do{c[m>>2]=0;m=m+4|0}while((m|0)<(n|0));c[k>>2]=i;c[k+4>>2]=j;e=e+1|0;if((Sa(196,k|0)|0)==-2){o=4;break}if(e>>>0>=100){e=0;break}}if((o|0)==4){e=(d|0)==0?170336:d;mh(e,f)|0}l=p;return e|0}function Wv(){return Bu(c[40373]|0)|0}function Xv(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0;if(b){if((c[d+76>>2]|0)>-1)h=wh(d)|0;else h=0;b=b+-1|0;a:do if(!b)b=a;else{e=a;while(1){f=Cu(d)|0;g=e+4|0;if((f|0)==-1){b=e;break a}c[e>>2]=f;if((f|0)==10){b=g;break a}b=b+-1|0;if(!b){b=g;break}else e=g}}while(0);c[b>>2]=0;b=(c[d>>2]&32|0)==0?b:a;if(h|0)xh(d);a=(b|0)==(a|0)?0:a}return a|0}function Yv(a,b){a=a|0;b=b|0;var c=0;c=df(a)|0;return ((Zv(a,1,c,b)|0)!=(c|0))<<31>>31|0}function Zv(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,g=0;f=N(d,b)|0;d=(b|0)==0?0:d;if((c[e+76>>2]|0)>-1){g=(wh(e)|0)==0;a=Mh(a,f,e)|0;if(!g)xh(e)}else a=Mh(a,f,e)|0;if((a|0)!=(f|0))d=(a>>>0)/(b>>>0)|0;return d|0}function _v(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0;e=l;l=l+16|0;f=e;c[f>>2]=d;d=$v(a,b,f)|0;l=e;return d|0}function $v(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0;g=l;l=l+128|0;e=g;f=e;h=f+124|0;do{c[f>>2]=0;f=f+4|0}while((f|0)<(h|0));c[e+32>>2]=15;c[e+44>>2]=a;c[e+76>>2]=-1;c[e+84>>2]=a;h=mv(e,b,d)|0;l=g;return h|0}function aw(a,b,c){a=a|0;b=b|0;c=c|0;return bw(a,b,c)|0}function bw(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0;e=a+84|0;g=c[e>>2]|0;h=d+256|0;f=Wg(g,0,h)|0;f=(f|0)==0?h:f-g|0;d=f>>>0<d>>>0?f:d;bD(b|0,g|0,d|0)|0;c[a+4>>2]=g+d;b=g+f|0;c[a+8>>2]=b;c[e>>2]=b;return d|0}function cw(a){a=a|0;var b=0,e=0,f=0;if((c[a+76>>2]|0)>=0?(wh(a)|0)!=0:0){b=a+4|0;e=c[b>>2]|0;if(e>>>0<(c[a+8>>2]|0)>>>0){c[b>>2]=e+1;b=d[e>>0]|0}else b=$f(a)|0}else f=3;do if((f|0)==3){b=a+4|0;e=c[b>>2]|0;if(e>>>0<(c[a+8>>2]|0)>>>0){c[b>>2]=e+1;b=d[e>>0]|0;break}else{b=$f(a)|0;break}}while(0);return b|0}function dw(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0,k=0;if((c[d+76>>2]|0)>=0?(wh(d)|0)!=0:0){f=b&255;e=b&255;if((e|0)!=(a[d+75>>0]|0)?(i=d+20|0,j=c[i>>2]|0,j>>>0<(c[d+16>>2]|0)>>>0):0){c[i>>2]=j+1;a[j>>0]=f}else e=Su(d,b)|0;xh(d)}else k=3;do if((k|0)==3){f=b&255;e=b&255;if((e|0)!=(a[d+75>>0]|0)?(g=d+20|0,h=c[g>>2]|0,h>>>0<(c[d+16>>2]|0)>>>0):0){c[g>>2]=h+1;a[h>>0]=f;break}e=Su(d,b)|0}while(0);return e|0}function ew(){var a=0,b=0,e=0;a=c[40373]|0;b=a+4|0;e=c[b>>2]|0;if(e>>>0<(c[a+8>>2]|0)>>>0){c[b>>2]=e+1;a=d[e>>0]|0}else a=$f(a)|0;return a|0}function fw(b){b=b|0;var d=0,e=0,f=0;d=c[40439]|0;f=xf(c[(Xd()|0)>>2]|0)|0;if((c[d+76>>2]|0)>-1)e=wh(d)|0;else e=0;if(b|0?a[b>>0]|0:0){Zv(b,df(b)|0,1,d)|0;Mv(58,d)|0;Mv(32,d)|0}Zv(f,df(f)|0,1,d)|0;Mv(10,d)|0;if(e|0)xh(d);return}function gw(a){a=a|0;var b=0;if((c[a+76>>2]|0)>-1){b=(wh(a)|0)==0;c[a>>2]=c[a>>2]&-49;if(!b)xh(a)}else c[a>>2]=c[a>>2]&-49;return}function hw(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0;e=l;l=l+16|0;f=e;c[f>>2]=d;d=gv(a,b,f)|0;l=e;return d|0}function iw(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,i=0;do if((b|0)!=-1){if((c[d+76>>2]|0)>-1)g=wh(d)|0;else g=0;h=d+4|0;e=c[h>>2]|0;if(!e){ag(d)|0;e=c[h>>2]|0;if(e|0){f=e;i=6}}else{f=e;i=6}if((i|0)==6?f>>>0>((c[d+44>>2]|0)+-8|0)>>>0:0){i=f+-1|0;c[h>>2]=i;a[i>>0]=b;c[d>>2]=c[d>>2]&-17;if(!g)break;xh(d);break}if(g){xh(d);b=-1}else b=-1}else b=-1;while(0);return b|0}function jw(){return kw(c[40373]|0)|0}function kw(a){a=a|0;var b=0,e=0,f=0;if((c[a+76>>2]|0)>=0?(wh(a)|0)!=0:0){b=a+4|0;e=c[b>>2]|0;if(e>>>0<(c[a+8>>2]|0)>>>0){c[b>>2]=e+1;b=d[e>>0]|0}else b=$f(a)|0}else f=3;do if((f|0)==3){b=a+4|0;e=c[b>>2]|0;if(e>>>0<(c[a+8>>2]|0)>>>0){c[b>>2]=e+1;b=d[e>>0]|0;break}else{b=$f(a)|0;break}}while(0);return b|0}function lw(a,b){a=a|0;b=b|0;var e=0,f=0,g=0,h=0,i=0,j=0,k=0;k=l;l=l+16|0;i=k;if((c[a+76>>2]|0)>-1)j=wh(a)|0;else j=0;h=a+4|0;e=c[h>>2]|0;f=a+8|0;if(e>>>0<(c[f>>2]|0)>>>0){c[h>>2]=e+1;e=d[e>>0]|0}else e=$f(a)|0;iw(e,a)|0;e=c[h>>2]|0;g=e;f=Wg(e,10,(c[f>>2]|0)-g|0)|0;if(!f){f=a+92|0;c[i>>2]=0;e=xv(f,i,a)|0;if((e|0)>0){c[b>>2]=e;e=c[f>>2]|0}else e=0}else{i=f+1|0;c[b>>2]=i-g;c[h>>2]=i}if(j|0)xh(a);l=k;return e|0}function mw(a,b){a=a|0;b=b|0;var d=0,e=0;d=l;l=l+16|0;e=d;c[e>>2]=a;b=(Zv(e,4,1,b)|0)+-1|0;l=d;return b|0}function nw(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0;e=l;l=l+16|0;f=e;c[f>>2]=d;d=Ju(a,b,f)|0;l=e;return d|0}function ow(a,b){a=a|0;b=b|0;a=pw(a)|0;if((a|0)<0)a=-1;else{c[b>>2]=a;a=0}return a|0}function pw(a){a=a|0;var b=0;if((c[a+76>>2]|0)>-1){b=(wh(a)|0)==0;a=qw(a)|0}else a=qw(a)|0;return a|0}function qw(a){a=a|0;var b=0;if(!(c[a>>2]&128))b=1;else b=(c[a+20>>2]|0)>>>0>(c[a+28>>2]|0)>>>0?2:1;b=dd[c[a+40>>2]&31](a,0,b)|0;if((b|0)>=0)b=b-(c[a+8>>2]|0)+(c[a+4>>2]|0)+(c[a+20>>2]|0)-(c[a+28>>2]|0)|0;return b|0}function rw(a,b){a=a|0;b=b|0;return Av(a,c[b>>2]|0,0)|0}function sw(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0;e=l;l=l+16|0;f=e;c[f>>2]=d;d=ku(a,b,f)|0;l=e;return d|0}function tw(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,g=0;f=l;l=l+16|0;g=f;c[g>>2]=e;e=uw(a,b,d,g)|0;l=f;return e|0}function uw(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,i=0;h=l;l=l+400|0;g=h+264|0;i=h+256|0;c[i>>2]=b;c[i+4>>2]=d+-1;dD(g|0,0,124)|0;a[g+75>>0]=-1;c[g+36>>2]=16;c[g+48>>2]=256;c[g+44>>2]=h;c[g+76>>2]=-1;c[g+84>>2]=i;do if(d)if((d|0)<0){c[(Xd()|0)>>2]=75;b=-1;break}else{b=Ju(g,e,f)|0;vw(g,0,0)|0;b=b>>>0<d>>>0?b:-1;break}else b=-1;while(0);l=h;return b|0}function vw(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0,i=0;h=c[a+84>>2]|0;e=c[a+28>>2]|0;if((e|0)!=(b|0)?(vw(a,e,(c[a+20>>2]|0)-e|0)|0)==-1:0)a=-1;else{g=h+4|0;a:do if((d|0)!=0&(c[g>>2]|0)!=0){e=d;f=c[h>>2]|0;while(1){a=pn(f,b,e)|0;if((a|0)<=-1)break a;e=e-a|0;i=(c[g>>2]|0)+-1|0;c[g>>2]=i;f=(c[h>>2]|0)+4|0;c[h>>2]=f;if(!((e|0)!=0&(i|0)!=0)){a=d;break}else b=b+a|0}}else a=d;while(0);c[c[h>>2]>>2]=0}return a|0}function ww(a){a=a|0;var b=0,d=0,e=0;if(Jv(a)|0){b=a+76|0;d=a+80|0;do{e=c[b>>2]|0;if(e|0)lc(b|0,d|0,e|0,1)}while((Jv(a)|0)!=0)}return}function xw(){pu(0)|0;return}function yw(a,b){a=a|0;b=b|0;return 0}function zw(a){a=a|0;if(!(c[a>>2]&4))a=(c[a+16>>2]|0)!=0&1;else a=1;return a|0}function Aw(a){a=a|0;if(!(c[a>>2]&8))a=(c[a+8>>2]|0)!=0&1;else a=1;return a|0}function Bw(a){a=a|0;return (c[a>>2]|0)>>>2&1^1|0}function Cw(a){a=a|0;return (c[a>>2]|0)>>>3&1^1|0}function Dw(a){a=a|0;return ((d[a+75>>0]|0)>>>7^1)&255|0}function Ew(a){a=a|0;return c[a+48>>2]|0}function Fw(a){a=a|0;if(!(c[a+16>>2]|0))a=0;else a=(c[a+20>>2]|0)-(c[a+28>>2]|0)|0;return a|0}function Gw(a){a=a|0;c[a+16>>2]=0;c[a+28>>2]=0;c[a+20>>2]=0;c[a+8>>2]=0;c[a+4>>2]=0;return 0}function Hw(a,b){a=a|0;b=b|0;var d=0,e=0;d=l;l=l+16|0;e=d;c[e>>2]=b;b=qv(a,e)|0;l=d;return b|0}function Iw(a){a=a|0;(c[a+76>>2]|0)>-1?wh(a)|0:0;return c[a+60>>2]|0}function Jw(a){a=a|0;return Ou(a,c[40406]|0)|0}function Kw(a){a=a|0;return pw(a)|0}function Lw(){gd[2&3]();return}function Mw(b){b=b|0;var d=0,e=0,f=0,g=0;f=c[40406]|0;if((c[f+76>>2]|0)>-1)g=wh(f)|0;else g=0;do if((Yv(b,f)|0)<0)b=-1;else{if((a[f+75>>0]|0)!=10?(d=f+20|0,e=c[d>>2]|0,e>>>0<(c[f+16>>2]|0)>>>0):0){c[d>>2]=e+1;a[e>>0]=10;b=0;break}b=(Su(f,10)|0)>>31}while(0);if(g|0)xh(f);return b|0}function Nw(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0,i=0;i=l;l=l+32|0;f=i+16|0;e=i;g=Xu(b)|0;if((c[d+76>>2]|0)>-1)h=wh(d)|0;else h=0;pu(d)|0;do if(!a){a=d+60|0;if(g&524288|0){c[e>>2]=c[a>>2];c[e+4>>2]=2;c[e+8>>2]=1;jb(221,e|0)|0}c[f>>2]=c[a>>2];c[f+4>>2]=4;c[f+8>>2]=g&-524481;if((Wd(jb(221,f|0)|0)|0)<0)a=15;else a=12}else{a=Wu(a,b)|0;if(!a)a=15;else{b=a+60|0;e=c[b>>2]|0;f=c[d+60>>2]|0;if((e|0)!=(f|0)){if((ko(e,f,g&524288)|0)<0){lu(a)|0;a=15;break}}else c[b>>2]=-1;c[d>>2]=c[d>>2]&1|c[a>>2];c[d+32>>2]=c[a+32>>2];c[d+36>>2]=c[a+36>>2];c[d+40>>2]=c[a+40>>2];c[d+12>>2]=c[a+12>>2];lu(a)|0;a=12}}while(0);if((a|0)==12){if(h)xh(d)}else if((a|0)==15){lu(d)|0;d=0}l=i;return d|0}function Ow(a){a=a|0;return bd[c[a+12>>2]&7](a)|0}function Pw(a){a=a|0;return Mv(a,c[40406]|0)|0}function Qw(b,d){b=b|0;d=d|0;var e=0,f=0,g=0;e=ud(1172)|0;do if(!e)e=0;else{f=ud(1)|0;if(!f){vd(e);e=0;break}dD(e|0,0,148)|0;g=e+124|0;c[e+84>>2]=g;c[g>>2]=b;c[e+128>>2]=d;c[d>>2]=0;c[e+144>>2]=0;c[e+140>>2]=0;c[e+132>>2]=0;c[b>>2]=f;c[e+136>>2]=f;a[f>>0]=0;c[e>>2]=4;c[e+60>>2]=-1;c[e+44>>2]=e+148;c[e+48>>2]=1024;a[e+75>>0]=-1;c[e+36>>2]=17;c[e+40>>2]=18;c[e+12>>2]=7;if(!(c[42859]|0))c[e+76>>2]=-1;zu(e)|0}while(0);return e|0}function Rw(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0,i=0;i=c[a+84>>2]|0;f=a+20|0;g=c[a+28>>2]|0;e=(c[f>>2]|0)-g|0;if((e|0)!=0?(c[f>>2]=g,(Rw(a,g,e)|0)>>>0<e>>>0):0)d=0;else h=3;do if((h|0)==3){h=i+8|0;a=c[h>>2]|0;e=a+d|0;g=i+20|0;f=c[g>>2]|0;if(e>>>0<f>>>0)e=i+12|0;else{a=e+1|f<<1|1;e=i+12|0;f=xd(c[e>>2]|0,a)|0;if(!f){d=0;break}c[e>>2]=f;c[c[i>>2]>>2]=f;f=c[g>>2]|0;dD((c[e>>2]|0)+f|0,0,a-f|0)|0;c[g>>2]=a;a=c[h>>2]|0}bD((c[e>>2]|0)+a|0,b|0,d|0)|0;e=(c[h>>2]|0)+d|0;c[h>>2]=e;a=i+16|0;if(e>>>0>=(c[a>>2]|0)>>>0)c[a>>2]=e;c[c[i+4>>2]>>2]=e}while(0);return d|0}function Sw(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0;h=l;l=l+16|0;f=h;a=c[a+84>>2]|0;if(d>>>0<=2?(c[f>>2]=0,g=a+8|0,c[f+4>>2]=c[g>>2],c[f+8>>2]=c[a+16>>2],e=c[f+(d<<2)>>2]|0,!((0-e|0)>(b|0)|(2147483647-e|0)<(b|0))):0){a=e+b|0;c[g>>2]=a}else{c[(Xd()|0)>>2]=22;a=-1}l=h;return a|0}function Tw(a){a=a|0;return 0}function Uw(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0,k=0,m=0;m=l;l=l+4192|0;k=m+4096|0;i=m;j=m+4104|0;h=(b|0)==0?167104:b;b=(d|0)==0?167109:d;e=df(h)|0;f=df(b)|0;g=e+1+f|0;d=g+7|0;a:do if(d>>>0>4095){c[(Xd()|0)>>2]=36;b=0}else{bD(i|0,h|0,e|0)|0;e=i+e|0;a[e>>0]=47;bD(e+1|0,b|0,f|0)|0;a[i+g>>0]=95;d=i+d|0;a[d>>0]=0;d=d+-6|0;e=i;f=j;b=0;while(1){ff(d)|0;g=j;h=g+76|0;do{c[g>>2]=0;g=g+4|0}while((g|0)<(h|0));c[k>>2]=e;c[k+4>>2]=f;b=b+1|0;if((Sa(196,k|0)|0)==-2)break;if(b>>>0>=100){b=0;break a}}b=bd[3&7](i)|0}while(0);l=m;return b|0}function Vw(a){a=a|0;return (c[a+8>>2]|0)-(c[a+4>>2]|0)|0}function Ww(a,b){a=a|0;b=b|0;var d=0;d=c[a+4>>2]|0;a=(c[a+8>>2]|0)-d|0;if(!a)d=0;else c[b>>2]=a;return d|0}function Xw(a,b){a=a|0;b=b|0;a=a+4|0;c[a>>2]=(c[a>>2]|0)+b;return}function Yw(a){a=a|0;c[a>>2]=c[a>>2]|32;return}function Zw(){var a=0,b=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0;j=l;l=l+64|0;h=j+48|0;f=j+40|0;e=j+24|0;d=j;c[d>>2]=c[37988];c[d+4>>2]=c[37989];c[d+8>>2]=c[37990];c[d+12>>2]=c[37991];c[d+16>>2]=c[37992];b=d+13|0;a=0;while(1){ff(b)|0;c[e>>2]=d;c[e+4>>2]=32962;c[e+8>>2]=384;g=Wd(Ub(5,e|0)|0)|0;a=a+1|0;if((g|0)>-1){i=4;break}if(a>>>0>=100){a=0;break}}if((i|0)==4){c[f>>2]=d;la(10,f|0)|0;a=Yu(g,167114)|0;if(!a){c[h>>2]=g;Yb(6,h|0)|0;a=0}}l=j;return a|0}function _w(a){a=a|0;var b=0;if((c[a+76>>2]|0)>-1){b=(wh(a)|0)==0;zv(a,0,0)|0;c[a>>2]=c[a>>2]&-33;if(!b)xh(a)}else{zv(a,0,0)|0;c[a>>2]=c[a>>2]&-33}return}function $w(b){b=b|0;var c=0,d=0;c=a[b>>0]|0;if(c<<24>>24){d=b;do{a[d>>0]=ch(c<<24>>24)|0;d=d+1|0;c=a[d>>0]|0}while(c<<24>>24!=0)}return b|0}function ax(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;d=fk(a,b,c)|0;return d|0}function bx(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;d=gk(a,b,c)|0;return d|0}function cx(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;return Vf(a,b,c)|0}function dx(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;return hk(a,b,c)|0}function ex(b){b=b|0;var c=0,d=0;c=a[b>>0]|0;if(c<<24>>24){d=b;do{a[d>>0]=_g(c<<24>>24)|0;d=d+1|0;c=a[d>>0]|0}while(c<<24>>24!=0)}return b|0}function fx(a,b){a=a|0;b=b|0;var d=0,e=0;e=l;l=l+16|0;d=e;b=(Dd(d,a,b)|0)==0;l=e;return (b?c[d>>2]|0:0)|0}function gx(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,i=0,j=0,k=0,m=0,n=0,o=0,p=0,q=0;q=l;l=l+16|0;p=q;k=q+8|0;n=p;c[n>>2]=0;c[n+4>>2]=0;c[k>>2]=p;if(!(d&8))j=0;else j=c[f+8>>2]|0;h=a[b>>0]|0;if(h<<24>>24==47){g=b;do{g=g+1|0;h=a[g>>0]|0}while(h<<24>>24==47);i=167763}else{i=172411;g=b}a:do if((df(g)|0)>>>0<=4096){n=(d&32|0)!=0;if(!n){c[f+8>>2]=j;c[f>>2]=0;c[f+4>>2]=0;h=a[g>>0]|0}if(h<<24>>24){g=ix(i,g,d,(e|0)==0?1:e,k)|0;if((g|0)==1){jx(p);g=1;break}h=c[p>>2]|0;c[k>>2]=h;if(h){i=0;do{h=c[h>>2]|0;c[k>>2]=h;i=i+1|0}while((h|0)!=0);if(i){m=i;b=p}else{h=p;i=k;o=17}}else{h=p;i=k;o=17}}else{c[k>>2]=0;g=0;h=p;i=k;o=17}if((o|0)==17){if(!(d&16)){g=3;break}c[k>>2]=p;if(!(kx(k,b,df(b)|0,0)|0)){m=1;b=h;k=i}else{g=1;break}}do if(n){i=f+4|0;h=(c[f>>2]|0)+j|0;e=xd(c[i>>2]|0,(h+m<<2)+4|0)|0;if(!e){jx(p);g=1;break a}else{c[i>>2]=e;j=h;break}}else{h=ud((m+j<<2)+4|0)|0;c[f+4>>2]=h;if(!h){jx(p);g=1;break a}if(!j){j=0;e=h}else{dD(h|0,0,j<<2|0)|0;e=h}}while(0);i=c[b>>2]|0;c[k>>2]=i;h=0;do{c[e+(h+j<<2)>>2]=i+4;i=c[i>>2]|0;c[k>>2]=i;h=h+1|0}while(h>>>0<m>>>0);c[e+(m+j<<2)>>2]=0;c[f>>2]=(c[f>>2]|0)+m;if(!(d&4))sk(e+(j<<2)|0,m,4,2)}else g=1;while(0);l=q;return g|0}function hx(a,b){a=a|0;b=b|0;return 0}function ix(b,d,f,g,h){b=b|0;d=d|0;f=f|0;g=g|0;h=h|0;var i=0,j=0,k=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0;E=l;l=l+352|0;y=E+80|0;z=E+76|0;A=E;m=(df(d)|0)+1|0;D=Kc()|0;j=l;l=l+((1*m|0)+15&-16)|0;m=df(b)|0;k=f&64;x=(f>>>5&4|k>>>5)^4;i=Tg(d,47)|0;if(!i){j=d;v=0}else{mh(j,d)|0;a[j+(i-d)>>0]=0;while(1)if((a[i>>0]|0)==47)i=i+1|0;else{v=i;break}}k=mx(j,k>>>6^1)|0;i=a[b>>0]|0;if(i<<24>>24==47)m=(a[b+1>>0]|0)==0?0:m;u=cq(i<<24>>24==0?167761:b)|0;i=c[(Xd()|0)>>2]|0;a:do if(!u){switch(i|0){case 20:{i=0;break a}case 13:{if(((a[j>>0]|0)==0?(le(b,A)|0)==0:0)?(c[A+12>>2]&61440|0)==16384:0){i=(kx(h,b,m,m)|0)!=0&1;break a}break}default:{}}i=(cd[g&7](b,i)|0|f&1|0)==0;i=i?0:2}else{if(!(a[j>>0]|0)){i=(kx(h,b,m,m)|0)!=0&1;eq(u)|0;break}i=jq(u,y,z)|0;d=(i|0)!=0;n=c[z>>2]|0;b:do if((n|0)!=0&(d^1)){t=m+2|0;o=(k|0)==0;p=(v|0)!=0;q=(f&2|0)==0;r=m+1|0;s=A+12|0;k=n;c:while(1){i=t+(e[k+8>>1]|0)|0;k=Kc()|0;d=l;l=l+((1*i|0)+15&-16)|0;i=(c[z>>2]|0)+11|0;if(o){if(!(nx(j,i,x)|0))C=21}else if(!(Ef(j,i)|0))C=21;d:do if((C|0)==21){C=0;e:do if(p?(B=a[(c[z>>2]|0)+10>>0]|0,B<<24>>24):0){i=(B&255)<<12&65535;if(i<<16>>16<16384)switch(i<<16>>16){case -24576:break e;default:break d}else switch(i<<16>>16){case 16384:break e;default:break d}}while(0);if(!(a[b>>0]|0))d=(c[z>>2]|0)+11|0;else{bD(d|0,b|0,m|0)|0;n=d+m|0;a[n>>0]=47;mh(n+1|0,(c[z>>2]|0)+11|0)|0}if(p){i=ix(d,v,f,g,h)|0;if(!i)break;else{C=29;break c}}do if(q)i=0;else{i=a[(c[z>>2]|0)+10>>0]|0;if(i<<24>>24?(w=(i&255)<<12&61440,(w|0)!=40960):0){i=(w|0)==16384;break}le(d,A)|0;i=(c[s>>2]&61440|0)==16384}while(0);if(kx(h,d,r+(e[(c[z>>2]|0)+8>>1]|0)|0,i&1)|0){C=36;break c}}while(0);Jc(k|0);i=jq(u,y,z)|0;d=(i|0)!=0;k=c[z>>2]|0;if(!((k|0)!=0&(d^1)))break b}if((C|0)==29)eq(u)|0;else if((C|0)==36){eq(u)|0;i=1}Jc(k|0);break a}while(0);eq(u)|0;if(d?cd[g&7](b,i)|0|f&1|0:0){i=2;break}i=0}while(0);Jc(D|0);l=E;return i|0}function jx(a){a=a|0;var b=0;a=c[a>>2]|0;if(a|0)do{b=a;a=c[a>>2]|0;vd(b)}while((a|0)!=0);return}function kx(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0;d=ud(d+9|0)|0;if(!d)d=-1;else{c[c[a>>2]>>2]=d;c[d>>2]=0;f=d+4|0;mh(f,b)|0;if(e|0)wp(f,167763)|0;c[a>>2]=d;d=0}return d|0}function lx(a,b){a=a|0;b=b|0;return Ef(c[a>>2]|0,c[b>>2]|0)|0}function mx(b,c){b=b|0;c=c|0;var d=0,e=0;d=a[b>>0]|0;a:do if(!(d<<24>>24))c=1;else{e=(c|0)==0;c=0;while(1){switch(d<<24>>24|0){case 42:case 63:{c=0;break a}case 92:{if(!e){c=0;break a}break}case 91:{c=1;break}case 93:{if(!c)c=0;else{c=0;break a}break}default:{}}b=b+1|0;d=a[b>>0]|0;if(!(d<<24>>24)){c=1;break a}}}while(0);return c|0}function nx(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,i=0,j=0,k=0,m=0;k=l;l=l+16|0;i=k;j=(e&8|0)==0;a:do if(!(e&1)){b:do if(!j){g=d;f=d;while(1){switch(a[f>>0]|0){case 0:break b;case 47:{if(!(px(b,-1,d,f-g|0,e)|0)){f=0;break a}break}default:{}}f=f+1|0}}while(0);f=px(b,-1,d,-1,e)|0}else{f=d;while(1){d=f;c:while(1){switch(a[d>>0]|0){case 47:case 0:break c;default:{}}d=d+1|0}g=b;d:while(1){h=ox(g,-1,i,e)|0;switch(h|0){case 0:case 47:break d;default:{}}g=g+(c[i>>2]|0)|0}m=a[d>>0]|0;if((h|0)!=(m<<24>>24|0)&(j|m<<24>>24==0)){f=1;break a}f=(px(b,g-b|0,f,d-f|0,e)|0)!=0;if((h|0)==0|f)break;b=g+(c[i>>2]|0)|0;f=d+1|0}f=f&1}while(0);l=k;return f|0}function ox(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,i=0,j=0,k=0,m=0;m=l;l=l+16|0;i=m;a:do if((d|0)!=0?(a[b>>0]|0)!=0:0){c[e>>2]=1;g=a[b>>0]|0;switch(g<<24>>24){case 42:{g=-5;break a}case 92:{g=b+1|0;if((f&2|0)==0&(a[g>>0]|0)!=0){c[e>>2]=2;f=g;h=1;g=a[g>>0]|0;k=33}else g=92;break}case 91:{b:do if(d>>>0>1){switch(a[b+1>>0]|0){case 33:case 94:break;default:{g=1;break b}}g=2}else g=1;while(0);if(g>>>0<d>>>0)g=g+((a[b+g>>0]|0)==93&1)|0;c:do if(g>>>0<d>>>0)while(1){f=a[b+g>>0]|0;switch(f<<24>>24){case 93:case 0:{f=g;k=29;break c}default:{}}h=g+1|0;d:do if(h>>>0<d>>>0?(j=a[b+h>>0]|0,f<<24>>24==91&j<<24>>24!=0):0){switch(j<<24>>24){case 61:case 46:case 58:break;default:{g=h;break d}}f=g+2|0;if(f>>>0<d>>>0)g=(a[b+f>>0]|0)==0?f:g+3|0;else g=f;e:do if(g>>>0<d>>>0)do{f=a[b+g>>0]|0;if(!(f<<24>>24))break e;if(!(f<<24>>24!=93?1:(a[b+(g+-1)>>0]|0)!=j<<24>>24))break e;g=g+1|0}while(g>>>0<d>>>0);while(0);if((g|0)==(d|0)){g=91;f=1;break c}if(!(a[b+g>>0]|0)){f=g;k=29;break c}g=g+1|0}else g=h;while(0);if(g>>>0>=d>>>0){f=g;k=29;break c}}else{f=g;k=29}while(0);if((k|0)==29)if((f|0)==(d|0)){g=91;f=1}else{d=(a[b+f>>0]|0)==0;g=d?91:-3;f=d?1:f+1|0}c[e>>2]=f;break a}case 63:{g=-4;break a}default:{f=b;h=0;k=33}}if((k|0)==33)if(g<<24>>24<0){g=pn(i,f,d)|0;if((g|0)<0){c[e>>2]=0;g=-2}else{c[e>>2]=g+h;g=c[i>>2]|0}break}g=g<<24>>24}else k=3;while(0);if((k|0)==3){c[e>>2]=0;g=0}l=m;return g|0}function px(b,d,e,f,g){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0,i=0,j=0,k=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0;v=l;l=l+16|0;t=v+4|0;u=v;if(((g&4|0)!=0?(a[e>>0]|0)==46:0)?(a[b>>0]|0)!=46:0)b=1;else j=4;a:do if((j|0)==4){s=(g&16|0)==0;m=b;b:while(1){h=ox(m,d,t,g)|0;switch(h|0){case -2:{b=1;break a}case -5:break b;default:{}}i=qx(e,f,u)|0;if((i|0)<1){j=9;break}r=c[u>>2]|0;e=e+r|0;f=f-r|0;if(s)b=i;else b=rx(i)|0;switch(h|0){case -3:{if(!(sx(m,i,b)|0)){b=1;break a}break}case -4:break;default:if(!((i|0)==(h|0)|(b|0)==(h|0))){b=1;break a}}r=c[t>>2]|0;m=m+r|0;d=d-r|0}if((j|0)==9){b=(h|0)!=0&1;break}b=m+1|0;j=Vg(b,d+-1|0)|0;n=m+(j+1)|0;if((j|0)>0){k=n;h=1;i=1;d=0;do{r=m+i|0;switch(ox(r,k-r|0,t,g)|0){case -2:{b=1;break a}case -5:{d=0;h=i+1|0;break}default:d=d+1|0}i=i+(c[t>>2]|0)|0}while((i|0)<=(j|0));i=d;o=h;r=m+h|0}else{i=0;o=1;r=b}d=Vg(e,f)|0;m=e+d|0;if(d>>>0>=i>>>0){f=(i|0)!=0;if((d|0)>0&f){f=m;do{d=f+-1|0;if((a[d>>0]|0)<=-1?(c[c[(tx()|0)+188>>2]>>2]|0)!=0:0)do f=f+-1|0;while(f>>>0>e>>>0?(a[f>>0]&-64)<<24>>24==-128:0);else f=d;i=i+-1|0;d=(i|0)!=0}while(f>>>0>e>>>0&d);i=f;f=d}else i=m;if(!f){q=r;f=ox(r,n-q|0,t,g)|0;h=c[t>>2]|0;p=i;d=qx(i,m-p|0,u)|0;c:do if((d|0)>=1){j=r;k=i;i=r+h|0;while(1){k=k+(c[u>>2]|0)|0;if(s)h=d;else h=rx(d)|0;switch(f|0){case -3:{if(!(sx(j,d,h)|0)){b=1;break a}break}case -4:break;default:if(!((d|0)==(f|0)|(h|0)==(f|0))){b=1;break a}}f=ox(i,n-i|0,t,g)|0;h=i+(c[t>>2]|0)|0;d=qx(k,m-k|0,u)|0;if((d|0)<1)break c;else{j=i;i=h}}}while(0);if(!f)if((o|0)>1)while(1){m=q-b|0;f=ox(b,m,t,g)|0;d=b+(c[t>>2]|0)|0;d:do if((f|0)==-5)b=d;else while(1){k=b;h=e;e:while(1){i=qx(h,p-h|0,u)|0;if(!i){b=1;break a}if(s)j=i;else j=rx(i)|0;switch(f|0){case -3:{if(!(sx(k,i,j)|0))break e;break}case -4:break;default:if(!((i|0)==(f|0)|(j|0)==(f|0)))break e}h=h+(c[u>>2]|0)|0;f=ox(d,q-d|0,t,g)|0;i=d+(c[t>>2]|0)|0;if((f|0)==-5){e=h;b=i;break d}else{k=d;d=i}}if((qx(e,p-e|0,u)|0)>0)e=e+(c[u>>2]|0)|0;else do e=e+1|0;while((qx(e,p-e|0,u)|0)<0);f=ox(b,m,t,g)|0;d=b+(c[t>>2]|0)|0;if((f|0)==-5){b=d;break}}while(0);if(b>>>0>=r>>>0){b=0;break}}else b=0;else b=1}else b=1}else b=1}while(0);l=v;return b|0}function qx(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0;g=l;l=l+16|0;f=g;do if(!d){c[e>>2]=0;b=0}else{if((a[b>>0]|0)>=0){c[e>>2]=1;b=a[b>>0]|0;break}b=pn(f,b,d)|0;if((b|0)<0){c[e>>2]=1;b=-1}else{c[e>>2]=b;b=c[f>>2]|0}}while(0);l=g;return b|0}function rx(a){a=a|0;var b=0;b=gg(a)|0;if((b|0)==(a|0))b=of(a)|0;return b|0}function sx(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,i=0,j=0,k=0,m=0,n=0,o=0;o=l;l=l+32|0;j=o+16|0;k=o;f=b+1|0;g=a[f>>0]|0;switch(g<<24>>24){case 33:case 94:{g=b+2|0;f=g;b=1;g=a[g>>0]|0;break}default:b=0}a:do switch(g<<24>>24){case 93:if((d|0)==93){b=b^1;break a}else{f=f+1|0;n=10;break a}case 45:if((d|0)==45){b=b^1;break a}else{f=f+1|0;n=10;break a}default:n=10}while(0);b:do if((n|0)==10){c[j>>2]=a[f+-1>>0];c:while(1){h=a[f>>0]|0;d:do switch(h<<24>>24){case 93:break b;case 45:{g=f+1|0;if((a[g>>0]|0)==93)n=31;else{g=pn(k,g,4)|0;if((g|0)<0){b=0;break c}h=c[j>>2]|0;i=c[k>>2]|0;if((i|0)>=(h|0)?(i=i-h|0,!((d-h|0)>>>0>i>>>0&(e-h|0)>>>0>i>>>0)):0){n=16;break c}f=f+(g+-1)|0}break}case 91:{i=a[f+1>>0]|0;switch(i<<24>>24){case 61:case 46:case 58:break;default:{n=31;break d}}g=f+3|0;while(1){if((a[g+-1>>0]|0)==i<<24>>24?(a[g>>0]|0)==93:0)break;g=g+1|0}f=f+2|0;if(i<<24>>24==58?(m=g+-1-f|0,(m|0)<16):0){bD(k|0,f|0,m|0)|0;a[k+m>>0]=0;if(li(d,kh(k)|0)|0){n=29;break c}if(li(e,kh(k)|0)|0){n=29;break c}f=g}else f=g;break}default:if(h<<24>>24>-1)n=31;else{g=pn(j,f,4)|0;if((g|0)<0){b=0;break b}f=f+(g+-1)|0;g=c[j>>2]|0;n=34}}while(0);if((n|0)==31){g=h&255;c[j>>2]=g;n=34}if((n|0)==34){n=0;if((g|0)==(d|0)|(g|0)==(e|0)){n=35;break}}f=f+1|0}if((n|0)==16)b=b^1;else if((n|0)==29){b=b^1;break}else if((n|0)==35){b=b^1;break}}while(0);l=o;return b|0}function tx(){return Ff()|0}function ux(a){a=a|0;var b=0,d=0,e=0,f=0;f=a+4|0;b=c[f>>2]|0;if(c[a>>2]|0){e=a+8|0;d=0;do{vd((c[b+((c[e>>2]|0)+d<<2)>>2]|0)+-4|0);d=d+1|0;b=c[f>>2]|0}while(d>>>0<(c[a>>2]|0)>>>0)}vd(b);c[a>>2]=0;c[f>>2]=0;return}function vx(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,i=0,j=0,k=0,m=0,n=0;n=l;l=l+16|0;k=n;i=c[a+4>>2]|0;j=i+56|0;h=(c[j>>2]&8|0)==0?d:0;a=c[i+40>>2]|0;if((a|0)>0&(h|0)!=0){a=ud(a<<2)|0;if(!a)a=12;else{g=a;d=a;m=3}}else{g=0;d=0;m=3}if((m|0)==3){if(!(c[i+60>>2]|0))a=xx(i,b,g,f,k)|0;else a=wx(i,b,g,f,k)|0;if(!a)yx(h,e,c[j>>2]|0,i,g,c[k>>2]|0);if(g)vd(d)}l=n;return a|0}function wx(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,i=0,j=0,k=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0;W=l;l=l+16|0;T=W;c[T>>2]=0;o=e&1;R=e&2;S=a+56|0;n=c[S>>2]&4;V=Bx(0,0)|0;a:do if(V){p=Cx(V,0,0,0,32)|0;if(!p){Dx(V);e=12;break}c[p+24>>2]=0;c[p+28>>2]=0;Q=a+40|0;e=c[Q>>2]|0;if(e){e=ud(e<<2)|0;if(!e){m=0;k=0;j=e;e=12;i=0;h=0;g=0}else{j=e;i=e;U=6}}else{j=0;i=0;U=6}b:do if((U|0)==6){e=c[a+28>>2]|0;if(e){e=ud(e<<3)|0;if(!e){m=e;k=0;e=12;h=0;g=0;break}else{m=e;h=e}}else{m=0;h=0}P=a+52|0;e=c[P>>2]|0;if(e){e=ud(e<<2)|0;if(!e){k=e;e=12;g=0;break}else{k=e;g=e}}else{k=0;g=0}N=(d|0)==0;O=a+8|0;M=(o|0)==0;I=(n|0)!=0;J=a+12|0;K=(d|0)!=0;L=a+32|0;r=b;e=1;q=-1;x=-1;w=0;c:while(1){n=c[Q>>2]|0;if((n|0)>0){o=0;do{c[j+(o<<2)>>2]=-1;if(!N){c[d+(o<<2)>>2]=-1;n=c[Q>>2]|0}o=o+1|0}while((o|0)<(n|0))}n=c[P>>2]|0;if((n|0)>0)dD(g|0,0,n<<2|0)|0;q=e+q|0;e=pn(T,r,4)|0;if((e|0)<1)if((e|0)<0){e=1;break b}else e=1;G=r+e|0;H=c[T>>2]|0;n=c[O>>2]|0;o=n+8|0;if(c[o>>2]|0){C=I&(w|0)==10;y=(w|0)==95;z=(q|0)!=0;A=(q|0)==0;B=(q|0)<1&M;v=n;n=0;u=0;t=o;while(1){s=v+20|0;o=c[s>>2]|0;d:do if(o)if((o&1|0)==0|B|C){if(o&2|0?(F=c[T>>2]|0,!((F|R|0)==0|I&(F|0)==10)):0){r=u;break}do if(o&16|0){if(y){r=u;break d}if(Jg(w)|0){r=u;break d}o=c[T>>2]|0;if((o|0)==95)break;if(!(Jg(o)|0)){r=u;break d}}while(0);o=c[s>>2]|0;if(o&32){if(y){o=c[T>>2]|0;if((o|0)==95){r=u;break}}else{F=(Jg(w)|0)==0;o=c[T>>2]|0;if(F|(o|0)==95){r=u;break}}if(Jg(o)|0){r=u;break}o=c[s>>2]|0}r=c[T>>2]|0;do if((r|0)!=0&(z&(o&64|0)!=0)){if(y)o=1;else{o=(Jg(w)|0)!=0;r=c[T>>2]|0}if((r|0)==95)if(o){r=u;break d}else break;else if(o^(Jg(r)|0)!=0)break;else{r=u;break d}}while(0);if(!(c[s>>2]&128)){U=50;break}o=c[T>>2]|0;if(A|(o|0)==0){r=u;break}if(y)r=1;else{r=(Jg(w)|0)!=0;o=c[T>>2]|0}if((o|0)==95)if(r){U=50;break}else{r=u;break}else if(r^(Jg(o)|0)!=0){r=u;break}else{U=50;break}}else r=u;else U=50;while(0);do if((U|0)==50){U=0;if(!u){n=c[v+16>>2]|0;r=c[t>>2]|0;break}r=p+28|0;o=c[r>>2]|0;if(!o){o=Cx(V,0,0,0,32)|0;if(!o){U=54;break c}c[o+24>>2]=p;c[o+28>>2]=0;F=Cx(V,0,0,0,c[Q>>2]<<2)|0;c[o+20>>2]=F;if(!F){U=61;break c}c[r>>2]=o;p=o}else p=o;c[p>>2]=q;c[p+4>>2]=G;c[p+8>>2]=c[t>>2];c[p+12>>2]=c[v+12>>2];c[p+16>>2]=c[T>>2];if((c[Q>>2]|0)>0){r=c[p+20>>2]|0;o=0;do{c[r+(o<<2)>>2]=c[j+(o<<2)>>2];o=o+1|0}while((o|0)<(c[Q>>2]|0))}o=c[v+16>>2]|0;if(!o)r=u;else{r=c[o>>2]|0;if((r|0)<=-1){r=u;break}s=c[p+20>>2]|0;do{o=o+4|0;c[s+(r<<2)>>2]=q;r=c[o>>2]|0}while((r|0)>-1);r=u}}while(0);t=v+40|0;if(!(c[t>>2]|0))break;else{v=v+32|0;u=r}}if(n){o=c[n>>2]|0;if((o|0)>-1)do{c[j+(o<<2)>>2]=q;n=n+4|0;o=c[n>>2]|0}while((o|0)>-1)}else n=0;if(!r)U=179;else{o=w;s=q;t=G;F=x}}else{n=0;U=179}e:while(1){if((U|0)==179){U=0;v=c[p+24>>2]|0;if(!v)break;u=c[p+8>>2]|0;if(c[u+20>>2]&256|0)c[k+(c[p+12>>2]<<2)>>2]=0;s=c[p>>2]|0;t=c[p+4>>2]|0;c[T>>2]=c[p+16>>2];r=c[Q>>2]|0;if((r|0)<=0){o=w;F=x;r=u;p=v;continue}p=c[p+20>>2]|0;o=0;while(1){c[j+(o<<2)>>2]=c[p+(o<<2)>>2];o=o+1|0;if((o|0)>=(r|0)){o=w;F=x;r=u;p=v;continue e}}}x=s;u=r;E=n;f:while(1){if((u|0)==(c[J>>2]|0))break;v=u+8|0;if((c[v>>2]|0)!=0?(c[u+20>>2]&256|0)!=0:0){n=c[u+24>>2]|0;yx(n+1|0,m,c[S>>2]&-9,a,j,x);D=c[m+(n<<3)>>2]|0;n=(c[m+(n<<3)+4>>2]|0)-D|0;do if(!(Sg(b+D|0,t+-1|0,n)|0)){D=(n|0)==0;s=D&1;r=k+(c[u+12>>2]<<2)|0;if(D?c[r>>2]|0:0){n=x;s=t;r=25;break}c[r>>2]=s;n=n+-1|0;r=t+n|0;o=c[T>>2]|0;n=x+e+n|0;e=pn(T,r,4)|0;if((e|0)<1)if((e|0)<0){s=r;r=2;break}else e=1;s=r+e|0;r=0}else{n=x;s=t;r=25}while(0);switch(r&31){case 2:{e=1;break b}case 25:{n=E;U=178;break f}case 0:{r=o;x=n;break}default:{e=12;break a}}}else{r=c[T>>2]|0;if(!r){n=E;U=178;break}n=x+e|0;e=pn(T,t,4)|0;if((e|0)<1)if((e|0)<0){e=1;break b}else e=1;x=n;s=t+e|0}if(!(c[v>>2]|0)){o=r;n=E;U=178;break}D=I&(r|0)==10;z=(r|0)==95;A=(x|0)!=0;B=(x|0)==0;C=(x|0)<1&M;w=0;y=u;n=E;while(1){g:do if((c[y>>2]|0)>>>0>r>>>0)u=w;else{if((c[y+4>>2]|0)>>>0<r>>>0){u=w;break}u=y+20|0;o=c[u>>2]|0;do if(o|0){if(!((o&1|0)==0|C|D)){u=w;break g}if(o&2|0?(E=c[T>>2]|0,!((E|R|0)==0|I&(E|0)==10)):0){u=w;break g}do if(o&16|0){if(z){u=w;break g}if(Jg(r)|0){u=w;break g}o=c[T>>2]|0;if((o|0)==95)break;if(!(Jg(o)|0)){u=w;break g}}while(0);o=c[u>>2]|0;if(o&32){if(z){o=c[T>>2]|0;if((o|0)==95){u=w;break g}}else{E=(Jg(r)|0)==0;o=c[T>>2]|0;if(E|(o|0)==95){u=w;break g}}if(Jg(o)|0){u=w;break g}o=c[u>>2]|0}t=c[T>>2]|0;do if((t|0)!=0&(A&(o&64|0)!=0)){if(z)o=1;else{o=(Jg(r)|0)!=0;t=c[T>>2]|0}if((t|0)==95)if(o){u=w;break g}else break;else if(o^(Jg(t)|0)!=0)break;else{u=w;break g}}while(0);do if(c[u>>2]&128|0){o=c[T>>2]|0;if(B|(o|0)==0){u=w;break g}if(z)t=1;else{t=(Jg(r)|0)!=0;o=c[T>>2]|0}if((o|0)==95)if(t)break;else{u=w;break g}else if(t^(Jg(o)|0)!=0){u=w;break g}else break}while(0);do if(c[u>>2]&4|0){if(!(c[S>>2]&2)){if(!(li(r,c[y+24>>2]|0)|0)){u=w;break g}if(!(c[u>>2]&4))break}if(!(c[S>>2]&2))break;E=of(r)|0;o=y+24|0;if(li(E,c[o>>2]|0)|0)break;E=gg(r)|0;if(!(li(E,c[o>>2]|0)|0)){u=w;break g}}while(0);if(!(c[u>>2]&8))break;if(zx(c[y+28>>2]|0,r,c[S>>2]&2)|0){u=w;break g}}while(0);if(!w){u=c[v>>2]|0;n=c[y+16>>2]|0;break}t=p+28|0;o=c[t>>2]|0;if(!o){o=Cx(V,0,0,0,32)|0;if(!o){U=149;break c}c[o+24>>2]=p;c[o+28>>2]=0;E=Cx(V,0,0,0,c[Q>>2]<<2)|0;c[o+20>>2]=E;if(!E){U=156;break c}c[t>>2]=o;p=o}else p=o;c[p>>2]=x;c[p+4>>2]=s;c[p+8>>2]=c[v>>2];c[p+12>>2]=c[y+12>>2];c[p+16>>2]=c[T>>2];if((c[Q>>2]|0)>0){t=c[p+20>>2]|0;o=0;do{c[t+(o<<2)>>2]=c[j+(o<<2)>>2];o=o+1|0}while((o|0)<(c[Q>>2]|0))}o=c[y+16>>2]|0;if(!o){u=w;break}t=c[o>>2]|0;if((t|0)<=-1){u=w;break}u=c[p+20>>2]|0;do{c[u+(t<<2)>>2]=x;o=o+4|0;t=c[o>>2]|0}while((t|0)>-1);u=w}while(0);v=y+40|0;if(!(c[v>>2]|0))break;else{w=u;y=y+32|0}}if(!u){o=r;U=178;break}do if(!n)n=0;else{o=c[n>>2]|0;if((o|0)<=-1)break;do{n=n+4|0;c[j+(o<<2)>>2]=x;o=c[n>>2]|0}while((o|0)>-1)}while(0);o=r;t=s;E=n}if((U|0)==178){w=o;x=F;U=179;continue}if((F|0)>=(x|0)){if(!(K&(F|0)==(x|0))){w=o;x=F;n=E;U=179;continue}n=c[Q>>2]|0;if(!(Ax(n,c[L>>2]|0,j,d)|0)){w=o;x=F;n=E;U=179;continue}}else{if(N){w=o;n=E;U=179;continue}n=c[Q>>2]|0}if((n|0)<=0){w=o;n=E;U=179;continue}n=0;do{c[d+(n<<2)>>2]=c[j+(n<<2)>>2];n=n+1|0}while((n|0)<(c[Q>>2]|0));w=o;n=E;U=179}n=(x|0)>-1;if(n|(c[T>>2]|0)==0){U=187;break}c[T>>2]=H;r=G;w=H}if((U|0)==54){Dx(V);if(j|0)vd(i);if(m|0)vd(h);if(!k){e=12;break a}vd(g);e=12;break a}else if((U|0)==61){Dx(V);if(j|0)vd(i);if(m|0)vd(h);if(!k){e=12;break a}vd(g);e=12;break a}else if((U|0)==149){Dx(V);if(j|0)vd(i);if(m|0)vd(h);if(!k){e=12;break a}vd(g);e=12;break a}else if((U|0)==156){Dx(V);if(j|0)vd(i);if(m|0)vd(h);if(!k){e=12;break a}vd(g);e=12;break a}else if((U|0)==187){c[f>>2]=x;e=(n^1)&1;break}}while(0);Dx(V);if(j|0)vd(i);if(m|0)vd(h);if(k)vd(g)}else e=12;while(0);l=W;return e|0}function xx(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,i=0,j=0,k=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0;V=l;l=l+16|0;S=V;c[S>>2]=0;k=e&1;P=e&2;Q=a+56|0;j=c[Q>>2]&4;if(!d)M=0;else M=c[a+40>>2]|0;O=M<<2;i=a+52|0;e=c[i>>2]|0;h=e<<3;g=h+8|0;e=O+12+h+(g+(N(O,e)|0)<<1)|0;T=ud(e)|0;if(!T)e=12;else{dD(T|0,0,e|0)|0;e=T+O|0;m=e&3;m=e+((m|0)==0?0:4-m|0)|0;e=m+g|0;n=e&3;n=e+((n|0)==0?0:4-n|0)|0;e=n+g|0;L=e&3;L=e+((L|0)==0?0:4-L|0)|0;e=L+h|0;g=e&3;i=c[i>>2]|0;h=(i|0)>0;if(h){e=e+((g|0)==0?0:4-g|0)|0;g=0;while(1){c[n+(g<<3)+4>>2]=e;e=e+O|0;c[m+(g<<3)+4>>2]=e;g=g+1|0;if((g|0)>=(i|0))break;else e=e+O|0}if(h){e=0;do{c[L+(e<<3)>>2]=-1;e=e+1|0}while((e|0)<(i|0))}}e=pn(S,b,4)|0;if((e|0)<1)if((e|0)<0)e=1;else{i=1;U=12}else{i=e;U=12}a:do if((U|0)==12){J=a+8|0;K=(M|0)==0;I=(k|0)==0;C=(j|0)!=0;D=(M|0)>0;E=a+12|0;F=(M|0)<1;G=a+44|0;H=a+36|0;B=a+32|0;h=0;u=b+i|0;t=0;j=0;e=-1;g=m;A=T;v=m;w=n;while(1){if((e|0)<0){a=c[J>>2]|0;k=a+8|0;b:do if(c[k>>2]|0){s=C&(h|0)==10;o=(h|0)==95;p=(t|0)!=0;q=(t|0)==0;r=(t|0)<1&I;while(1){c:while(1){if((c[L+(c[a+12>>2]<<3)>>2]|0)>=(t|0))break;n=a+20|0;b=c[n>>2]|0;if(!b){U=47;break}d:do if((b&1|0)==0|r|s){if(b&2|0?(z=c[S>>2]|0,!((z|P|0)==0|C&(z|0)==10)):0)break;do if(b&16|0){if(o)break d;if(Jg(h)|0)break d;b=c[S>>2]|0;if((b|0)==95)break;if(!(Jg(b)|0))break d}while(0);b=c[n>>2]|0;if(b&32){if(o){b=c[S>>2]|0;if((b|0)==95)break}else{z=(Jg(h)|0)==0;b=c[S>>2]|0;if(z|(b|0)==95)break}if(Jg(b)|0)break;b=c[n>>2]|0}m=c[S>>2]|0;do if((m|0)!=0&(p&(b&64|0)!=0)){if(o)b=1;else{b=(Jg(h)|0)!=0;m=c[S>>2]|0}if((m|0)==95)if(b)break d;else break;else if(b^(Jg(m)|0)!=0)break;else break d}while(0);if(!(c[n>>2]&128)){U=47;break c}b=c[S>>2]|0;if(q|(b|0)==0)break;if(o)m=1;else{m=(Jg(h)|0)!=0;b=c[S>>2]|0}if((b|0)==95)if(m){U=47;break c}else break;else if(m^(Jg(b)|0)!=0)break;else{U=47;break c}}while(0);k=a+40|0;if(!(c[k>>2]|0))break b;else a=a+32|0}if((U|0)==47){U=0;n=a+12|0;c[g>>2]=c[k>>2];if(D)dD(c[g+4>>2]|0,-1,O|0)|0;k=c[a+16>>2]|0;if(k|0?(R=c[k>>2]|0,(R|0)>-1):0){m=g+4|0;b=R;do{if((b|0)<(M|0))c[(c[m>>2]|0)+(b<<2)>>2]=t;k=k+4|0;b=c[k>>2]|0}while((b|0)>-1)}k=(c[g>>2]|0)!=(c[E>>2]|0);if(k|F){j=k?j:1;e=k?e:t;k=g+4|0}else{k=g+4|0;j=c[k>>2]|0;e=0;do{c[d+(e<<2)>>2]=c[j+(e<<2)>>2];e=e+1|0}while((e|0)!=(M|0));j=1;e=t}z=c[n>>2]|0;c[L+(z<<3)>>2]=t;c[L+(z<<3)+4>>2]=k;g=g+8|0}k=a+40|0;if(!(c[k>>2]|0))break;else a=a+32|0}}while(0);c[g>>2]=0;g=c[S>>2]|0;if(!g)break;else h=g}else{if(K)break;h=c[S>>2]|0;if(!((g|0)!=(v|0)&(h|0)!=0))break}z=t+i|0;g=pn(S,u,4)|0;if((g|0)<1)if((g|0)<0){e=1;break a}else i=1;else i=g;y=u+i|0;if((j|0)!=0&(c[G>>2]|0)!=0){if(!(c[v>>2]|0))g=w;else{o=c[H>>2]|0;p=c[o>>2]|0;q=(p|0)>-1;n=v;g=w;do{m=n+4|0;e:do if(q){k=0;b=p;do{a=c[o+((k|1)<<2)>>2]|0;if((b|0)>=(M|0))break e;j=c[m>>2]|0;if((c[j+(a<<2)>>2]|0)==(c[d+(a<<2)>>2]|0)?(c[j+(b<<2)>>2]|0)<(c[d+(b<<2)>>2]|0):0)break e;k=k+2|0;b=c[o+(k<<2)>>2]|0}while((b|0)>-1);k=m;U=77}else{k=m;j=c[m>>2]|0;U=77}while(0);if((U|0)==77){U=0;c[g>>2]=c[n>>2];u=g+4|0;x=c[u>>2]|0;c[u>>2]=j;c[k>>2]=x;g=g+8|0}n=n+8|0}while((c[n>>2]|0)!=0)}c[g>>2]=0;x=v;j=0}else{x=w;w=v}k=c[w>>2]|0;if(!k){k=A;g=x}else{v=C&(h|0)==10;r=(h|0)==95;s=(z|0)!=0;t=(z|0)==0;u=(z|0)<1&I;q=w;a=A;g=x;while(1){b=k+8|0;if(c[b>>2]|0){p=q+4|0;o=a;n=b;while(1){f:do if((c[k>>2]|0)>>>0<=h>>>0?(c[k+4>>2]|0)>>>0>=h>>>0:0){m=k+20|0;a=c[m>>2]|0;do if(a|0){if(!((a&1|0)==0|u|v)){a=o;break f}if(a&2|0?(A=c[S>>2]|0,!((A|P|0)==0|C&(A|0)==10)):0){a=o;break f}do if(a&16|0){if(r){a=o;break f}if(Jg(h)|0){a=o;break f}a=c[S>>2]|0;if((a|0)==95)break;if(!(Jg(a)|0)){a=o;break f}}while(0);a=c[m>>2]|0;if(a&32){if(r){a=c[S>>2]|0;if((a|0)==95){a=o;break f}}else{A=(Jg(h)|0)==0;a=c[S>>2]|0;if(A|(a|0)==95){a=o;break f}}if(Jg(a)|0){a=o;break f}a=c[m>>2]|0}b=c[S>>2]|0;do if((b|0)!=0&(s&(a&64|0)!=0)){if(r)a=1;else{a=(Jg(h)|0)!=0;b=c[S>>2]|0}if((b|0)==95)if(a){a=o;break f}else break;else if(a^(Jg(b)|0)!=0)break;else{a=o;break f}}while(0);do if(c[m>>2]&128|0){a=c[S>>2]|0;if(t|(a|0)==0){a=o;break f}if(r)b=1;else{b=(Jg(h)|0)!=0;a=c[S>>2]|0}if((a|0)==95)if(b)break;else{a=o;break f}else if(b^(Jg(a)|0)!=0){a=o;break f}else break}while(0);do if(c[m>>2]&4|0){if(!(c[Q>>2]&2)){if(!(li(h,c[k+24>>2]|0)|0)){a=o;break f}if(!(c[m>>2]&4))break}if(!(c[Q>>2]&2))break;A=of(h)|0;a=k+24|0;if(li(A,c[a>>2]|0)|0)break;A=gg(h)|0;if(!(li(A,c[a>>2]|0)|0)){a=o;break f}}while(0);if(!(c[m>>2]&8))break;if(zx(c[k+28>>2]|0,h,c[Q>>2]&2)|0){a=o;break f}}while(0);if(D){b=c[p>>2]|0;a=0;do{c[o+(a<<2)>>2]=c[b+(a<<2)>>2];a=a+1|0}while((a|0)!=(M|0))}a=c[k+16>>2]|0;do if(a|0){b=c[a>>2]|0;if((b|0)<=-1)break;do{if((b|0)<(M|0))c[o+(b<<2)>>2]=z;a=a+4|0;b=c[a>>2]|0}while((b|0)>-1)}while(0);b=c[k+12>>2]|0;m=L+(b<<3)|0;if((c[m>>2]|0)>=(z|0)){a=c[L+(b<<3)+4>>2]|0;b=c[a>>2]|0;if(!(Ax(M,c[B>>2]|0,o,b)|0)){a=o;break}c[a>>2]=o;if((c[n>>2]|0)!=(c[E>>2]|0)){a=b;break}if(!D){j=1;a=b;e=z;break}e=0;while(1){c[d+(e<<2)>>2]=c[o+(e<<2)>>2];e=e+1|0;if((e|0)==(M|0)){j=1;a=b;e=z;break f}}}A=c[n>>2]|0;c[g>>2]=A;n=g+4|0;a=c[n>>2]|0;c[n>>2]=o;c[m>>2]=z;c[L+(b<<3)+4>>2]=n;do if((c[E>>2]|0)==(A|0)){if((e|0)==-1){if(!D){e=z;j=1;break}}else{if(!D)break;if((c[o>>2]|0)>(c[d>>2]|0))break}e=0;do{c[d+(e<<2)>>2]=c[o+(e<<2)>>2];e=e+1|0}while((e|0)<(M|0));e=z;j=1}while(0);g=g+8|0}else a=o;while(0);n=k+40|0;if(!(c[n>>2]|0))break;else{k=k+32|0;o=a}}}q=q+8|0;k=c[q>>2]|0;if(!k){k=a;break}}}c[g>>2]=0;u=y;t=z;A=k;v=x}c[f>>2]=e;e=e>>>31}while(0);vd(T)}l=V;return e|0}function yx(a,b,d,e,f,g){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0;if((d&8|0)==0&(g|0)>-1?(m=c[e+16>>2]|0,n=c[e+28>>2]|0,l=(a|0)!=0&(n|0)!=0,l):0){k=c[e+48>>2]|0;j=0;do{d=c[m+(j*12|0)>>2]|0;if((d|0)==(k|0))i=g;else i=c[f+(d<<2)>>2]|0;h=b+(j<<3)|0;c[h>>2]=i;d=c[m+(j*12|0)+4>>2]|0;if((d|0)==(k|0))e=g;else e=c[f+(d<<2)>>2]|0;d=b+(j<<3)+4|0;c[d>>2]=e;if((i|0)==-1|(e|0)==-1){c[d>>2]=-1;c[h>>2]=-1}j=j+1|0}while(j>>>0<a>>>0&j>>>0<n>>>0);if(l){d=0;do{i=b+(d<<3)+4|0;j=c[m+(d*12|0)+8>>2]|0;if(j|0?(o=c[j>>2]|0,(o|0)>-1):0){k=b+(d<<3)|0;h=0;f=o;e=c[k>>2]|0;do{if(!((e|0)>=(c[b+(f<<3)>>2]|0)?(c[i>>2]|0)<=(c[b+(f<<3)+4>>2]|0):0)){c[i>>2]=-1;c[k>>2]=-1;e=-1}h=h+1|0;f=c[j+(h<<2)>>2]|0}while((f|0)>-1)}d=d+1|0}while(d>>>0<n>>>0&d>>>0<a>>>0)}else d=0}else d=0;if(d>>>0<a>>>0)dD(b+(d<<3)|0,-1,a-d<<3|0)|0;return}function zx(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0;e=c[a>>2]|0;a:do if(!e)d=0;else{f=(d|0)==0;d=e;while(1){if(f){if(li(b,d)|0){d=1;break a}}else{e=gg(b)|0;if(li(e,c[a>>2]|0)|0){d=1;break a}e=of(b)|0;if(li(e,c[a>>2]|0)|0){d=1;break a}}a=a+4|0;d=c[a>>2]|0;if(!d){d=0;break}}}while(0);return d|0}function Ax(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0;a:do if((a|0)>0){f=0;while(1){h=c[d+(f<<2)>>2]|0;g=c[e+(f<<2)>>2]|0;if(!(c[b+(f<<2)>>2]|0)){if((h|0)<(g|0)){f=1;break a}if((h|0)>(g|0)){f=0;break a}}else{if((h|0)>(g|0)){f=1;break a}if((h|0)<(g|0)){f=0;break a}}f=f+1|0;if((f|0)>=(a|0)){f=0;break}}}else f=0;while(0);return f|0}function Bx(a,b){a=a|0;b=b|0;if(!a)b=wd(1,24)|0;else dD(b|0,0,24)|0;return b|0}function Cx(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,i=0,j=0,k=0;h=a+16|0;a:do if(!(c[h>>2]|0)){k=a+12|0;g=c[k>>2]|0;do if(g>>>0<f>>>0){if(b|0)if(!d){c[h>>2]=1;b=0;break a}else{i=a+8|0;c[i>>2]=d;c[k>>2]=1024;h=d;b=d;g=1024;break}g=f<<3;g=g>>>0>1024?g:1024;i=ud(8)|0;if(!i){c[h>>2]=1;b=0;break a}b=ud(g)|0;c[i>>2]=b;j=b;if(!b){vd(i);c[h>>2]=1;b=0;break a}c[i+4>>2]=0;d=a+4|0;h=c[d>>2]|0;if(h|0)c[h+4>>2]=i;if(!(c[a>>2]|0))c[a>>2]=i;c[d>>2]=i;i=a+8|0;c[i>>2]=j;c[k>>2]=g;h=j}else{i=a+8|0;b=c[i>>2]|0;h=b}while(0);d=h+f&3;d=((d|0)==0?0:4-d|0)+f|0;c[i>>2]=b+d;c[k>>2]=g-d;if(e)dD(b|0,0,d|0)|0}else b=0;while(0);return b|0}function Dx(a){a=a|0;var b=0,d=0;b=c[a>>2]|0;if(b|0)do{vd(c[b>>2]|0);d=b;b=c[b+4>>2]|0;vd(d)}while((b|0)!=0);vd(a);return}function Ex(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0,k=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0;v=l;l=l+48|0;h=v;t=Fx()|0;a:do if(!t)b=12;else{u=Bx(0,0)|0;if(!u){Gx(t);b=12;break}dD(h|0,0,36)|0;c[h>>2]=u;c[h+4>>2]=t;c[h+16>>2]=b;c[h+32>>2]=d;e=h+28|0;c[e>>2]=-1;b=Hx(h)|0;b:do if(!b){g=h+20|0;r=c[g>>2]|0;c[a>>2]=r+-1;i=c[h+8>>2]|0;if((c[e>>2]|0)<(r|0)){r=wd(1,68)|0;if(r){q=(c[e>>2]|0)>>>31^1;c[r+60>>2]=q;c[r+64>>2]=0;c[r+28>>2]=c[g>>2];if((d&8|0)==0|(q|0)!=0){b=Ix(0,t,i,r)|0;if(b|0){g=r;h=0;i=0;f=0;e=0;break}e=r+40|0;b=c[e>>2]|0;if((b|0)>0){b=ud((b<<2)+4|0)|0;if(!b){g=r;h=0;i=0;b=12;f=0;e=0;break}c[r+32>>2]=b;dD(b|0,-1,(c[e>>2]<<2)+4|0)|0;f=b;b=c[e>>2]|0}else f=0;q=wd(b<<1|1,4)|0;c[r+36>>2]=q;if(!q){g=r;h=0;i=0;b=12;f=0;e=0;break}b=wd(c[g>>2]|0,12)|0;if(!b){g=r;h=0;i=0;b=12;f=0;e=0;break}c[r+16>>2]=b;b=Ix(u,t,i,r)|0;if(!b)b=f;else{g=r;h=0;i=0;f=0;e=0;break}}else b=0;p=h+24|0;b=Jx(u,t,i,p,b)|0;if(!b){b=c[p>>2]|0;c[p>>2]=b+1;b=Kx(u,0,0,b)|0;if((b|0)!=0?(s=Lx(u,i,b)|0,(s|0)!=0):0){b=Mx(u,t,s)|0;if(!b){o=ud(c[p>>2]<<2)|0;if(o){q=ud(c[p>>2]<<2)|0;if(q){b=c[p>>2]|0;if((b|0)>0)dD(o|0,0,b<<2|0)|0;Nx(s,0,o,0)|0;f=c[p>>2]|0;if((f|0)>0){b=0;e=0;do{c[q+(e<<2)>>2]=b;n=o+(e<<2)|0;b=b+1+(c[n>>2]|0)|0;c[n>>2]=0;e=e+1|0}while((e|0)<(f|0));k=b}else k=0;m=wd(k+1|0,32)|0;if(m){c[r>>2]=m;n=r+4|0;c[n>>2]=k;b=Nx(s,m,o,q)|0;if(!b){c[r+20>>2]=0;f=s+24|0;b=c[f>>2]|0;e=0;while(1){e=e+1|0;if((c[b>>2]|0)<=-1)break;else b=b+32|0}j=wd(e,32)|0;if(!j){g=r;h=o;i=q;b=12;f=o;e=q}else{c[r+8>>2]=j;b=c[f>>2]|0;e=c[b>>2]|0;if((e|0)>-1){i=b;b=0;do{c[j+(b<<5)+8>>2]=m+(c[q+(e<<2)>>2]<<5);c[j+(b<<5)+12>>2]=e;g=j+(b<<5)+16|0;c[g>>2]=0;h=i+12|0;f=c[h>>2]|0;if(f|0){e=0;do{w=e;e=e+1|0}while((c[f+(w<<2)>>2]|0)>-1);e=e<<2;f=ud(e)|0;c[g>>2]=f;if(!f){g=r;h=o;i=q;b=12;f=o;e=q;break b}bD(f|0,c[h>>2]|0,e|0)|0}c[j+(b<<5)+20>>2]=c[i+16>>2];b=b+1|0;i=i+32|0;e=c[i>>2]|0}while((e|0)>-1)}else b=0;c[j+(b<<5)+8>>2]=0;c[n>>2]=k;c[r+12>>2]=m+(c[q+(c[c[s+28>>2]>>2]<<2)>>2]<<5);c[r+52>>2]=c[p>>2];c[r+56>>2]=d;Dx(u);Gx(t);vd(o);vd(q);c[a+4>>2]=r;b=0;break a}}else{g=r;h=o;i=q;f=o;e=q}}else{g=r;h=o;i=q;b=12;f=o;e=q}}else{g=r;h=o;i=q;b=12;f=o;e=0}}else{g=r;h=o;i=0;b=12;f=0;e=0}}else{g=r;h=0;i=0;f=0;e=0}}else{g=r;h=0;i=0;b=12;f=0;e=0}}else{g=r;h=0;i=0;f=0;e=0}}else{g=r;h=0;i=0;b=12;f=0;e=0}}else{g=0;h=0;i=0;b=6;f=0;e=0}}else{g=0;h=0;i=0;f=0;e=0}while(0);Dx(u);Gx(t);if(h|0)vd(f);if(i|0)vd(e);c[a+4>>2]=g;Ox(a)}while(0);l=v;return b|0}function Fx(){var a=0,b=0;a=ud(20)|0;do if(a){b=ud(2048)|0;c[a+16>>2]=b;if(!b){vd(a);a=0;break}else{c[a>>2]=512;c[a+4>>2]=1024e3;c[a+8>>2]=128;c[a+12>>2]=0;break}}while(0);return a|0}function Gx(a){a=a|0;vd(c[a+16>>2]|0);vd(a);return}function Hx(b){b=b|0;var d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0;u=l;l=l+16|0;p=u+4|0;q=u;r=c[b+32>>2]&1;s=b+16|0;e=c[s>>2]|0;t=c[b+4>>2]|0;d=Sx(t,0)|0;a:do if(!d){m=(r|0)!=0;n=b+8|0;o=b+12|0;d=0;k=1;b:while(1){f=0;h=d;g=0;c:while(1){d=a[e>>0]|0;if(m){if(d<<24>>24==40)break;if((h|0)!=0&d<<24>>24==41)j=13;else j=14}else if(d<<24>>24==92)switch(a[e+1>>0]|0){case 40:break c;case 41:{j=13;break}default:j=14}else j=14;if((j|0)==13){j=0;i=Kx(c[b>>2]|0,-1,-1,-1)|0;c[n>>2]=i;if(!i){d=12;break a}}else if((j|0)==14){j=0;d=fy(b,e)|0;if(d|0)break a;e=c[o>>2]|0}i=f;d:while(1){e:while(1){d=a[e>>0]|0;switch(d<<24>>24){case 42:case 92:break;default:{if(!m)break e;switch(d<<24>>24){case 123:case 63:case 43:break;default:break e}}}d=d<<24>>24==92;if(m&d)break;f=e+1|0;if(d)switch(a[f>>0]|0){case 123:case 63:case 43:break;default:break e}e=d?f:e;if((!m?(e|0)==((c[s>>2]|0)+1|0):0)?(a[e+-1>>0]|0)==94:0)break;if((a[e>>0]|0)==123){e=gy(e+1|0,r,p,q)|0;if(!e){j=29;break b}d=c[q>>2]|0;f=c[b>>2]|0;if(!d)d=Kx(f,-1,-1,-1)|0;else j=37}else{c[p>>2]=0;c[q>>2]=-1;d=a[e>>0]|0;if(d<<24>>24==43){c[p>>2]=1;d=a[e>>0]|0}if(d<<24>>24==63){c[q>>2]=1;d=1}else d=-1;e=e+1|0;f=c[b>>2]|0;j=37}if((j|0)==37){j=0;d=ay(f,c[n>>2]|0,c[p>>2]|0,d,0)|0}c[n>>2]=d;if(!d){d=12;break a}}d=Lx(c[b>>2]|0,i,c[n>>2]|0)|0;f=a[e>>0]|0;f:do if(m){if(f<<24>>24==124){j=47;break d}if((h|0)!=0&f<<24>>24==41|f<<24>>24==0)j=50;else{f=d;d=g;break d}}else{switch(f<<24>>24){case 0:{j=50;break f}case 92:break;default:{f=d;d=g;break d}}switch(a[e+1>>0]|0){case 124:case 41:break;default:{f=d;d=g;break d}}d=by(c[b>>2]|0,g,d)|0;if((a[e+1>>0]|0)==124){j=45;break d}if(!h){d=8;break a}e=e+2|0;f=92}while(0);if((j|0)==50){j=0;d=by(c[b>>2]|0,g,d)|0;e=f<<24>>24==41?e+1|0:e}d=hy(b,d,Tx(t)|0)|0;if(d|0)break a;f=f<<24>>24==0;d=(h|0)<1;if(d&f){j=53;break b}if(d|f){d=8;break a}i=Ux(t)|0;h=h+-1|0;g=Ux(t)|0}if((j|0)==45){f=0;e=e+2|0}else if((j|0)==47){f=0;e=e+1|0;d=by(c[b>>2]|0,g,d)|0}g=d}d=Rx(t,g)|0;if(d|0)break a;d=Rx(t,f)|0;if(d|0)break a;d=Sx(t,k)|0;if(d|0)break a;d=h+1|0;k=k+1|0;e=m?e+1|0:e+2|0}if((j|0)==29){d=10;break}else if((j|0)==53){c[b+20>>2]=k;d=0;break}}while(0);l=u;return d|0}function Ix(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0;x=Qx(d)|0;z=(b|0)==0|(f|0)==0;if(!z){c[f+48>>2]=0;c[c[f+36>>2]>>2]=-1}g=f+28|0;A=ud((c[g>>2]<<3)+8|0)|0;do if(!A)g=12;else{c[A>>2]=-1;B=ud((c[g>>2]<<2)+4|0)|0;if(!B){vd(A);g=12;break}c[B>>2]=-1;C=ud((c[g>>2]<<3)+8|0)|0;if(!C){vd(A);vd(B);g=12;break}h=c[g>>2]|0;g=0;do{c[C+(g<<3)>>2]=-1;g=g+1|0}while(g>>>0<=h>>>0);Rx(d,e)|0;g=Sx(d,0)|0;a:do if((g|0)!=0|(Qx(d)|0)<=(x|0)){e=A;n=0;h=0;m=0;l=-1}else{u=f+32|0;v=f+16|0;w=f+36|0;e=A;n=0;h=0;m=0;t=1;l=-1;s=0;while(1){b:do switch(Tx(d)|0){case 6:{i=Tx(d)|0;g=0;do{j=e+(g<<2)|0;g=g+1|0}while((c[j>>2]|0)>-1);c[j>>2]=i<<1|1;c[e+(g<<2)>>2]=-1;g=0;while(1)if((c[B+(g<<2)>>2]|0)>-1)g=g+1|0;else break;c[B+(g+-1<<2)>>2]=-1;j=t;g=0;i=s;break}case 0:{q=Ux(d)|0;r=q+12|0;j=c[r>>2]|0;if((j|0)>-1){g=0;do{i=e+(g<<2)|0;g=g+1|0}while((c[i>>2]|0)>-1);c[i>>2]=j<<1;c[e+(g<<2)>>2]=-1;if(!z){g=0;while(1)if((c[B+(g<<2)>>2]|0)>-1)g=g+1|0;else break;c[(c[v>>2]|0)+(j*12|0)+8>>2]=0;if(g|0){g=ud((g<<2)+4|0)|0;if(!g){j=t;g=12;i=s;break b}c[(c[v>>2]|0)+(j*12|0)+8>>2]=g;i=c[B>>2]|0;if((i|0)>-1){k=0;j=g;do{c[j>>2]=i;k=k+1|0;i=c[B+(k<<2)>>2]|0;j=g+(k<<2)|0}while((i|0)>-1);g=j}c[g>>2]=-1}}g=Sx(d,c[r>>2]|0)|0;if(g|0){j=t;i=s;break b}g=Sx(d,6)|0;if(g|0){j=t;i=s;break b}}c:do switch(c[q>>2]|0){case 0:{p=c[c[q+4>>2]>>2]|0;if((p|0)>-1|(p|0)==-4?(c[e>>2]|0)>-1:0){if(z){c[q+20>>2]=1;g=0}else{g=cy(b,q,m)|0;c[(c[u>>2]|0)+(m<<2)>>2]=s;if((l|0)>-1){j=c[w>>2]|0;i=0;while(1){k=j+(i<<2)|0;o=i+1|0;if((c[k>>2]|0)>-1)i=o;else break}c[k>>2]=m;c[j+(o<<2)>>2]=l;c[j+(i+2<<2)>>2]=-1;h=h+1|0;l=-1}dy(e,f,m)}c[e>>2]=-1;p=t+1|0;o=s;n=n+1|0;m=t}else{p=t;g=0;o=s}break}case 1:{j=c[q+4>>2]|0;k=c[j>>2]|0;j=c[j+4>>2]|0;g=Rx(d,q)|0;if(!g){g=Sx(d,5)|0;if(!g){g=Rx(d,j)|0;if(!g){g=Sx(d,0)|0;if(!g){i=k+20|0;g=Sx(d,(c[i>>2]|0)+t|0)|0;if(!g){if((c[i>>2]|0)>0){i=(c[j+20>>2]|0)>0;g=i?t:-1;i=t+(i&1)|0}else{g=-1;i=t}g=Sx(d,g)|0;if(!g){g=Sx(d,4)|0;if(!g){g=Rx(d,k)|0;if(!g){p=i;g=Sx(d,0)|0;o=s}else{p=i;o=s}}else{p=i;o=s}}else{p=i;o=s}}else{p=t;o=s}}else{p=t;o=s}}else{p=t;o=s}}else{p=t;o=s}}else{p=t;o=s}break}case 2:{i=c[q+4>>2]|0;if(z){if((c[e>>2]|0)>-1)g=1;else g=(a[i+12>>0]&1)!=0;g=Sx(d,g&1)|0;if(g|0){p=t;o=s;break c}}else{g=Sx(d,m)|0;if(g|0){p=t;o=s;break c}g=Sx(d,a[i+12>>0]&1)|0;if(g|0){p=t;o=s;break c}}g=Rx(d,q)|0;if(!g){g=Sx(d,1)|0;if(!g){g=Rx(d,c[i>>2]|0)|0;if(!g){g=Sx(d,0)|0;if(!g){if((c[e>>2]|0)<=-1?(a[i+12>>0]&1)==0:0){p=t;g=0;o=0;break c}if(z)g=0;else{g=cy(b,q,m)|0;c[(c[u>>2]|0)+(m<<2)>>2]=(a[i+12>>0]&1)==0?s:1;if((l|0)>-1){j=c[w>>2]|0;i=0;while(1){k=j+(i<<2)|0;o=i+1|0;if((c[k>>2]|0)>-1)i=o;else break}c[k>>2]=m;c[j+(o<<2)>>2]=l;c[j+(i+2<<2)>>2]=-1;h=h+1|0;l=-1}dy(e,f,m)}c[e>>2]=-1;p=t+1|0;o=0;n=n+1|0;m=t}else{p=t;o=s}}else{p=t;o=s}}else{p=t;o=s}}else{p=t;o=s}break}case 3:{j=c[q+4>>2]|0;k=c[j>>2]|0;j=c[j+4>>2]|0;i=(c[e>>2]|0)>-1;p=t+1|0;g=Sx(d,i?p:t)|0;if(!g){g=Sx(d,i?t:m)|0;if(!g){g=Rx(d,e)|0;if(!g){g=Sx(d,(c[e>>2]|0)>>>31^1)|0;if(!g){g=Rx(d,q)|0;if(!g){g=Rx(d,j)|0;if(!g){g=Rx(d,k)|0;if(!g){g=Sx(d,3)|0;if(!g){g=Rx(d,j)|0;if(!g){g=Sx(d,0)|0;if(g|0){p=t;o=s;break c}g=Sx(d,2)|0;if(g|0){p=t;o=s;break c}g=Rx(d,k)|0;if(g|0){p=t;o=s;break c}g=Sx(d,0)|0;if(g|0){p=t;o=s;break c}if((c[e>>2]|0)>-1){if(z)g=0;else{g=cy(b,q,m)|0;c[(c[u>>2]|0)+(m<<2)>>2]=s;if((l|0)>-1){j=c[w>>2]|0;i=0;while(1){k=j+(i<<2)|0;o=i+1|0;if((c[k>>2]|0)>-1)i=o;else break}c[k>>2]=m;c[j+(o<<2)>>2]=l;c[j+(i+2<<2)>>2]=-1;h=h+1|0;l=-1}dy(e,f,m)}c[e>>2]=-1;n=n+1|0;m=t;i=p;j=t+2|0}else{g=0;i=t;j=p}t=(c[q+16>>2]|0)>0;p=t?i+2|0:i;o=s;m=t?j:m}else{p=t;o=s}}else{p=t;o=s}}else{p=t;o=s}}else{p=t;o=s}}else{p=t;o=s}}else{p=t;o=s}}else{p=t;o=s}}else{p=t;o=s}}else{p=t;o=s}break}default:{p=t;g=0;o=s}}while(0);j=c[r>>2]|0;if((j|0)>-1){i=0;do{k=B+(i<<2)|0;i=i+1|0}while((c[k>>2]|0)>-1);c[k>>2]=j;c[B+(i<<2)>>2]=-1;j=p;i=o}else{j=p;i=o}break}case 1:{g=Ux(d)|0;if(!z){r=Tx(d)|0;g=Tx(d)|0;if(!r)y=103;else{l=g;i=0}}else{l=c[(c[c[g+4>>2]>>2]|0)+20>>2]|0;c[g+20>>2]=(Tx(d)|0)+l;l=-1;y=103}if((y|0)==103){y=0;i=1}j=t;g=0;i=z?s:i;break}case 4:{g=Tx(d)|0;j=Tx(d)|0;m=(g|0)>-1?g:m;g=0;i=s;break}case 5:{g=Ux(d)|0;if(z){j=c[g+4>>2]|0;c[g+20>>2]=(c[(c[j+4>>2]|0)+20>>2]|0)+(c[(c[j>>2]|0)+20>>2]|0);j=t;g=0;i=s}else{j=t;g=0;i=s}break}case 2:{while(1)if((c[e>>2]|0)>-1)e=e+4|0;else{j=t;g=0;i=s;break}break}case 3:{j=Ux(d)|0;o=Ux(d)|0;g=Ux(d)|0;e=Tx(d)|0;if(z){r=c[g+4>>2]|0;s=g+16|0;c[g+20>>2]=(c[(c[r>>2]|0)+20>>2]|0)+e+(c[(c[r+4>>2]|0)+20>>2]|0)+((c[s>>2]|0)>0?2:0);g=s}else g=g+16|0;e=Ux(d)|0;i=Tx(d)|0;k=Tx(d)|0;if((c[g>>2]|0)>0){if(z)g=0;else{g=ey(b,j,i)|0;c[(c[u>>2]|0)+(i<<2)>>2]=1;if(!g)g=ey(b,o,k)|0;c[(c[u>>2]|0)+(k<<2)>>2]=1}j=t;i=1;n=n+2|0}else{j=t;g=0;i=1}break}default:{j=t;g=0;i=s}}while(0);if((g|0)!=0|(Qx(d)|0)<=(x|0))break a;else{t=j;s=i}}}while(0);if(!z?(dy(e,f,m),(l|0)>-1):0){i=c[f+36>>2]|0;e=0;while(1){j=i+(e<<2)|0;k=e+1|0;if((c[j>>2]|0)>-1)e=k;else break}c[j>>2]=m;c[i+(k<<2)>>2]=l;c[i+(e+2<<2)>>2]=-1;h=h+1|0}c[f+48>>2]=n;c[f+40>>2]=n;c[f+44>>2]=h;vd(A);vd(B);vd(C)}while(0);return g|0}function Jx(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,i=0,j=0,k=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0;y=l;l=l+16|0;t=y+12|0;x=y+8|0;u=y+4|0;v=y;w=Qx(b)|0;c[t>>2]=0;c[x>>2]=0;d=Rx(b,d)|0;do if(!d){d=Sx(b,0)|0;if(!d){g=0;r=0;h=0;a:while(1){if((Qx(b)|0)<=(w|0)){d=0;s=62;break}p=Tx(b)|0;q=Ux(b)|0;b:do switch(p|0){case 0:switch(c[q>>2]|0){case 0:{d=c[q+4>>2]|0;q=c[d>>2]|0;if(!((q|0)>-1|(q|0)==-4)){d=0;i=r;break b}q=d+8|0;d=(c[q>>2]|0)+h|0;c[q>>2]=d;if((d|0)<=(c[x>>2]|0)){d=0;i=r;break b}c[x>>2]=d;d=0;i=r;break b}case 3:{i=c[q+4>>2]|0;d=Rx(b,c[i+4>>2]|0)|0;if(d|0){s=62;break a}d=Sx(b,0)|0;if(d|0){s=62;break a}d=Rx(b,c[i>>2]|0)|0;if(d|0){s=62;break a}d=Sx(b,0)|0;i=r;break b}case 1:{i=c[q+4>>2]|0;d=Rx(b,c[i+4>>2]|0)|0;if(d|0){s=62;break a}d=Sx(b,0)|0;if(d|0){s=62;break a}d=Rx(b,c[i>>2]|0)|0;if(d|0){s=62;break a}d=Sx(b,0)|0;i=r;break b}case 2:{i=c[q+4>>2]|0;d=Sx(b,h)|0;if(d|0){s=62;break a}d=Rx(b,q)|0;if(d|0){s=62;break a}d=Sx(b,1)|0;if(d|0){s=62;break a}d=Rx(b,c[i>>2]|0)|0;if(d|0){s=62;break a}d=Sx(b,0)|0;if(d|0){s=62;break a}if(!((c[i+4>>2]|0)<=1?(c[i+8>>2]|0)<=1:0)){c[t>>2]=0;h=0}d=0;i=r+1|0;break b}default:{d=0;i=r;break b}}case 1:{o=q+4|0;n=c[o>>2]|0;p=Tx(b)|0;c[t>>2]=p;k=n+4|0;d=c[k>>2]|0;if((d|0)<=1)if((c[n+8>>2]|0)>1){c[u>>2]=0;if((d|0)>0)s=31;else{j=p;h=0;s=39}}else j=p;else{c[u>>2]=0;s=31}c:do if((s|0)==31){d=$x(a,b,c[n>>2]|0,(d|0)>1?1:2,t,f,v,x)|0;if(d|0){s=36;break a}d=0;j=p;i=1;while(1){h=c[v>>2]|0;if(d)h=Lx(a,d,h)|0;if(!h){d=12;s=36;break a}d=c[k>>2]|0;if((i|0)>=(d|0)){s=39;break c}j=c[t>>2]|0;i=i+1|0;d=$x(a,b,c[n>>2]|0,(i|0)<(d|0)?1:2,t,f,v,x)|0;if(d|0){s=36;break a}else d=h}}while(0);if((s|0)==39){s=0;m=n+8|0;i=c[m>>2]|0;if((i|0)==-1){j=c[t>>2]|0;d=$x(a,b,c[n>>2]|0,0,t,0,u,x)|0;if(d|0)break a;d=ay(a,c[u>>2]|0,0,-1,0)|0;c[u>>2]=d;if(!d){d=12;break a}}else if((d|0)<(i|0)){k=d;i=0;while(1){j=c[t>>2]|0;d=$x(a,b,c[n>>2]|0,0,t,0,v,x)|0;if(d|0){s=51;break a}if(!i){d=c[v>>2]|0;c[u>>2]=d}else{d=Lx(a,c[v>>2]|0,i)|0;c[u>>2]=d}if(!d){d=12;s=51;break a}i=Kx(a,-1,-1,-1)|0;if(!i){d=12;s=51;break a}d=by(a,i,d)|0;c[u>>2]=d;if(!d){d=12;s=51;break a}k=k+1|0;if((k|0)>=(c[m>>2]|0))break;else i=d}}else d=0;c[t>>2]=j;if(h)if(!d)d=h;else{d=Lx(a,h,d)|0;s=56}else s=56;if((s|0)==56){s=0;if(!d){d=12;break a}}c[o>>2]=c[d+4>>2];c[q>>2]=c[d>>2]}i=r+-1|0;h=j-p+g|0;if(!i){c[t>>2]=h;d=0;g=h;i=0}else{d=0;g=h;h=j}break}default:{d=0;i=r}}while(0);if(!d)r=i;else{s=62;break}}if((s|0)!=36)if((s|0)!=51)if((s|0)==62){w=(c[e>>2]|0)+g|0;x=c[x>>2]|0;c[e>>2]=(x|0)>(w|0)?x:w;break}}}while(0);l=y;return d|0}function Kx(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0;f=Cx(a,0,0,1,20)|0;a=_x(a,0,f)|0;if(!a)a=0;else{c[f>>2]=b;c[f+4>>2]=d;c[f+8>>2]=e}return a|0}function Lx(a,b,d){a=a|0;b=b|0;d=d|0;var e=0;if(b){e=Cx(a,0,0,1,8)|0;a=_x(a,1,e)|0;if(!a)d=0;else{c[e>>2]=b;c[e+4>>2]=d;c[a+16>>2]=(c[d+16>>2]|0)+(c[b+16>>2]|0);d=a}}return d|0}
function id(a){a=a|0;var b=0;b=l;l=l+a|0;l=l+15&-16;return b|0}function jd(){return l|0}function kd(a){a=a|0;l=a}function ld(a,b){a=a|0;b=b|0;l=a;m=b}function md(a,b){a=a|0;b=b|0;if(!n){n=a;o=b}}function nd(a){a=a|0;y=a}function od(){return y|0}function pd(b,c,d,e,f){b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0;i=a[c>>0]|0;m=i<<24>>24==0;a:do if(m){h=0;j=1;g=0}else{h=0;j=1;g=0;l=i<<24>>24;k=i;while(1){if(k<<24>>24<33|k<<24>>24==127|(k+-65&255)<26){g=0;break}s=ZC(j|0,g|0,55)|0;r=_C(j|0,g|0,5)|0;s=0-(s&1)|0;q=((s|0)<0)<<31>>31&8213243^y&268435455;p=ZC(j|0,g|0,56)|0;p=0-(p&1)|0;o=ZC(j|0,g|0,57)|0;o=0-(o&1)|0;n=ZC(j|0,g|0,58)|0;n=0-(n&1)|0;k=ZC(j|0,g|0,59)|0;k=0-(k&1)|0;g=l>>5;j=s&-1542727546^r&-32^p&436442380^o&1946626584^n&-99724999^k&-1509390757^g;g=q^((p|0)<0)<<31>>31&6196671^((o|0)<0)<<31>>31&1849916^((n|0)<0)<<31>>31&3693938^((k|0)<0)<<31>>31&7377893^((g|0)<0)<<31>>31;h=h+1|0;k=a[c+h>>0]|0;if(!(k<<24>>24))break a;else l=k<<24>>24}return g|0}while(0);if((e+13+h|0)>>>0>f>>>0){s=0;return s|0}o=ZC(j|0,g|0,55)|0;h=_C(j|0,g|0,5)|0;o=0-(o&1)|0;p=((o|0)<0)<<31>>31&8213243^y&268435455;q=ZC(j|0,g|0,56)|0;q=0-(q&1)|0;r=ZC(j|0,g|0,57)|0;r=0-(r&1)|0;s=ZC(j|0,g|0,58)|0;s=0-(s&1)|0;g=ZC(j|0,g|0,59)|0;g=0-(g&1)|0;h=o&-1542727546^h&-32^q&436442380^r&1946626584^s&-99724999^g&-1509390757;g=p^((q|0)<0)<<31>>31&6196671^((r|0)<0)<<31>>31&1849916^((s|0)<0)<<31>>31&3693938^((g|0)<0)<<31>>31&7377893;if(!m){k=b;j=c;while(1){q=ZC(h|0,g|0,55)|0;o=_C(h|0,g|0,5)|0;p=y&268435455;q=0-(q&1)|0;r=ZC(h|0,g|0,56)|0;r=0-(r&1)|0;s=ZC(h|0,g|0,57)|0;s=0-(s&1)|0;b=ZC(h|0,g|0,58)|0;b=0-(b&1)|0;g=ZC(h|0,g|0,59)|0;g=0-(g&1)|0;h=o&-32^i&31^q&-1542727546^r&436442380^s&1946626584^b&-99724999^g&-1509390757;g=p^((q|0)<0)<<31>>31&8213243^((r|0)<0)<<31>>31&6196671^((s|0)<0)<<31>>31&1849916^((b|0)<0)<<31>>31&3693938^((g|0)<0)<<31>>31&7377893;j=j+1|0;b=k+1|0;a[k>>0]=i;i=a[j>>0]|0;if(!(i<<24>>24))break;else k=b}}a[b>>0]=49;b=b+1|0;b:do if(e){k=d;j=0;while(1){i=a[k>>0]|0;if((i&255)>31){g=0;break}o=ZC(h|0,g|0,55)|0;p=_C(h|0,g|0,5)|0;o=0-(o&1)|0;n=((o|0)<0)<<31>>31&8213243^y&268435455;q=ZC(h|0,g|0,56)|0;q=0-(q&1)|0;r=ZC(h|0,g|0,57)|0;r=0-(r&1)|0;s=ZC(h|0,g|0,58)|0;s=0-(s&1)|0;h=ZC(h|0,g|0,59)|0;h=0-(h&1)|0;g=n^((q|0)<0)<<31>>31&6196671^((r|0)<0)<<31>>31&1849916^((s|0)<0)<<31>>31&3693938^((h|0)<0)<<31>>31&7377893;h=o&-1542727546^p&-32^q&436442380^r&1946626584^s&-99724999^h&-1509390757^i&255;a[b>>0]=a[166590+(i&255)>>0]|0;j=j+1|0;b=b+1|0;if(j>>>0>=e>>>0)break b;else k=k+1|0}return g|0}while(0);k=0;j=h;while(1){o=ZC(j|0,g|0,55)|0;h=_C(j|0,g|0,5)|0;o=0-(o&1)|0;p=((o|0)<0)<<31>>31&8213243^y&268435455;q=ZC(j|0,g|0,56)|0;q=0-(q&1)|0;r=ZC(j|0,g|0,57)|0;r=0-(r&1)|0;s=ZC(j|0,g|0,58)|0;s=0-(s&1)|0;i=ZC(j|0,g|0,59)|0;i=0-(i&1)|0;h=o&-1542727546^h&-32^q&436442380^r&1946626584^s&-99724999^i&-1509390757;i=p^((q|0)<0)<<31>>31&6196671^((r|0)<0)<<31>>31&1849916^((s|0)<0)<<31>>31&3693938^((i|0)<0)<<31>>31&7377893;k=k+1|0;if((k|0)==12)break;else{j=h;g=i}}s=ZC(j|0,g|0,50)|0;a[b>>0]=a[166590+(s&31)>>0]|0;s=ZC(h|0,i|0,50)|0;a[b+1>>0]=a[166590+(s&31)>>0]|0;s=ZC(h|0,i|0,45)|0;a[b+2>>0]=a[166590+(s&31)>>0]|0;s=ZC(h|0,i|0,40)|0;a[b+3>>0]=a[166590+(s&31)>>0]|0;s=ZC(h|0,i|0,35)|0;a[b+4>>0]=a[166590+(s&31)>>0]|0;s=ZC(h|0,i|0,30)|0;a[b+5>>0]=a[166590+(s&31)>>0]|0;s=ZC(h|0,i|0,25)|0;a[b+6>>0]=a[166590+(s&31)>>0]|0;s=ZC(j|0,g|0,15)|0;a[b+7>>0]=a[166590+(s&31)>>0]|0;s=ZC(h|0,i|0,15)|0;a[b+8>>0]=a[166590+(s&31)>>0]|0;s=ZC(h|0,i|0,10)|0;a[b+9>>0]=a[166590+(s&31)>>0]|0;s=ZC(h|0,i|0,5)|0;a[b+10>>0]=a[166590+(s&31)>>0]|0;a[b+11>>0]=a[166590+(h&31^1)>>0]|0;a[b+12>>0]=0;s=1;return s|0}function qd(b,d,e,f,g){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0;o=df(f)|0;if(o>>>0<8|o>>>0>g>>>0)return 0;c[e>>2]=0;g=o+-1|0;j=0;while(1){i=j+1|0;if((a[f+(g-j)>>0]|0)==49){h=i;g=j;break}c[e>>2]=i;if(i>>>0<o>>>0)j=i;else{k=4;break}}if((k|0)==4){h=j+2|0;g=i}if(g>>>0<12|o>>>0<=h>>>0)return 0;n=o-h|0;c[e>>2]=g+-12;m=(n|0)==0;a:do if(m){i=0;e=0;j=0;h=1;g=0}else{i=0;l=0;j=0;h=1;g=0;while(1){e=a[f+l>>0]|0;k=e<<24>>24;if(e<<24>>24<33|e<<24>>24==127)break;t=(e+-97&255)<26;u=(e+-65&255)<26;i=t?1:i;j=t?j:u?1:j;u=t?k:u?k+32|0:k;a[b+l>>0]=u;t=ZC(h|0,g|0,55)|0;s=_C(h|0,g|0,5)|0;t=0-(t&1)|0;r=((t|0)<0)<<31>>31&8213243^y&268435455;q=ZC(h|0,g|0,56)|0;q=0-(q&1)|0;p=ZC(h|0,g|0,57)|0;p=0-(p&1)|0;k=ZC(h|0,g|0,58)|0;k=0-(k&1)|0;e=ZC(h|0,g|0,59)|0;e=0-(e&1)|0;g=u>>5;h=t&-1542727546^s&-32^q&436442380^p&1946626584^k&-99724999^e&-1509390757^g;g=r^((q|0)<0)<<31>>31&6196671^((p|0)<0)<<31>>31&1849916^((k|0)<0)<<31>>31&3693938^((e|0)<0)<<31>>31&7377893^((g|0)<0)<<31>>31;e=l+1|0;if(e>>>0<n>>>0)l=e;else break a}return 0}while(0);a[b+e>>0]=0;p=ZC(h|0,g|0,55)|0;q=_C(h|0,g|0,5)|0;p=0-(p&1)|0;r=((p|0)<0)<<31>>31&8213243^y&268435455;s=ZC(h|0,g|0,56)|0;s=0-(s&1)|0;t=ZC(h|0,g|0,57)|0;t=0-(t&1)|0;u=ZC(h|0,g|0,58)|0;u=0-(u&1)|0;g=ZC(h|0,g|0,59)|0;g=0-(g&1)|0;h=p&-1542727546^q&-32^s&436442380^t&1946626584^u&-99724999^g&-1509390757;g=r^((s|0)<0)<<31>>31&6196671^((t|0)<0)<<31>>31&1849916^((u|0)<0)<<31>>31&3693938^((g|0)<0)<<31>>31&7377893;if(m)k=0;else{e=0;do{q=ZC(h|0,g|0,55)|0;r=_C(h|0,g|0,5)|0;q=0-(q&1)|0;p=((q|0)<0)<<31>>31&8213243^y&268435455;s=ZC(h|0,g|0,56)|0;s=0-(s&1)|0;t=ZC(h|0,g|0,57)|0;t=0-(t&1)|0;u=ZC(h|0,g|0,58)|0;u=0-(u&1)|0;h=ZC(h|0,g|0,59)|0;h=0-(h&1)|0;g=p^((s|0)<0)<<31>>31&6196671^((t|0)<0)<<31>>31&1849916^((u|0)<0)<<31>>31&3693938^((h|0)<0)<<31>>31&7377893;h=q&-1542727546^r&-32^s&436442380^t&1946626584^u&-99724999^h&-1509390757^a[f+e>>0]&31;e=e+1|0}while((e|0)!=(n|0));k=n}e=k+1|0;if(e>>>0>=o>>>0){u=j;s=i;r=h;t=g;s=(s|0)==0;u=(u|0)==0;r=(r|0)==1;t=(t|0)==0;t=r&t;u=s|u;u=t&u;u=u&1;return u|0}b=~n;l=k;m=e;while(1){k=a[f+m>>0]|0;e=k<<24>>24;if(!(e&128))e=a[16+e>>0]|0;else e=-1;i=(k+-97&255)<26?1:i;j=(k+-65&255)<26?1:j;if((e|0)==-1){k=23;break}p=ZC(h|0,g|0,55)|0;q=_C(h|0,g|0,5)|0;p=0-(p&1)|0;r=((p|0)<0)<<31>>31&8213243^y&268435455;s=ZC(h|0,g|0,56)|0;s=0-(s&1)|0;t=ZC(h|0,g|0,57)|0;t=0-(t&1)|0;u=ZC(h|0,g|0,58)|0;u=0-(u&1)|0;g=ZC(h|0,g|0,59)|0;g=0-(g&1)|0;h=p&-1542727546^q&-32^s&436442380^t&1946626584^u&-99724999^g&-1509390757^e;g=r^((s|0)<0)<<31>>31&6196671^((t|0)<0)<<31>>31&1849916^((u|0)<0)<<31>>31&3693938^((g|0)<0)<<31>>31&7377893^((e|0)<0)<<31>>31;if((l+13|0)>>>0<o>>>0)a[d+(m+b)>>0]=e;e=m+1|0;if(e>>>0<o>>>0){l=m;m=e}else{k=22;break}}if((k|0)==22){s=(i|0)==0;u=(j|0)==0;r=(h|0)==1;t=(g|0)==0;t=r&t;u=s|u;u=t&u;u=u&1;return u|0}else if((k|0)==23)return 0;return 0}function rd(b,e,f,g,h,i,j){b=b|0;e=e|0;f=f|0;g=g|0;h=h|0;i=i|0;j=j|0;var k=0,l=0,m=0,n=0;m=(1<<f)+-1|0;if(!h){l=0;k=0}else{l=0;k=0;do{h=h+-1|0;k=k<<i|(d[g>>0]|0);g=g+1|0;l=l+i|0;if((l|0)>=(f|0))do{l=l-f|0;n=c[e>>2]|0;c[e>>2]=n+1;a[b+n>>0]=k>>>l&m}while((l|0)>=(f|0))}while((h|0)!=0)}if(!j){if(!((l|0)<(i|0)?(k<<f-l&m|0)==0:0)){n=0;return n|0}}else if(l|0){n=c[e>>2]|0;c[e>>2]=n+1;a[b+n>>0]=k<<f-l&m}n=1;return n|0}function sd(b,e,f,g,h,i){b=b|0;e=e|0;f=f|0;g=g|0;h=h|0;i=i|0;var j=0,k=0,m=0,n=0,o=0,p=0,q=0;q=l;l=l+1008|0;p=q;a:do if((g|0)<=16){if(g){if((i+-2|0)>>>0>63)break}else switch(i|0){case 53:case 65:break;default:break a}a[p>>0]=g;o=p+1|0;g=0;j=0;n=0;m=i;do{m=m+-1|0;i=h;h=h+1|0;n=n<<8|(d[i>>0]|0);i=j+8|0;if((j|0)<-3)j=i;else while(1){j=i+-5|0;k=g+1|0;a[o+g>>0]=n>>>j&31;if((i|0)<10){g=k;break}else{g=k;i=j}}}while((m|0)!=0);if(j){a[o+g>>0]=n<<5-j&31;g=g+1|0}f=pd(b,f,p,g+1|0,1e3)|0;c[e>>2]=df(b)|0;dD(p|0,0,1e3)|0;p=f;l=q;return p|0}while(0);dD(p|0,0,1e3)|0;p=0;l=q;return p|0}function td(b,e,f,g,h){b=b|0;e=e|0;f=f|0;g=g|0;h=h|0;var i=0,j=0,k=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0;r=l;l=l+2016|0;p=r+1008|0;q=r;i=r+2008|0;a:do if((qd(q,p,i,h,1e3)|0?(j=(c[i>>2]|0)+-1|0,j>>>0<=995):0)?(m=(Sg(g,q,995)|0)!=0,n=a[p>>0]|0,!(m|(n&255)>16)):0){c[f>>2]=0;if(!j){h=0;g=0}else{h=0;g=0;m=p+1|0;do{j=j+-1|0;g=g<<5|(d[m>>0]|0);m=m+1|0;i=h+5|0;if((h|0)<3)h=i;else{k=-6-h|0;k=h+13+((k|0)>-16?k:-16)&-8;do{s=i;i=i+-8|0;t=c[f>>2]|0;c[f>>2]=t+1;a[e+t>>0]=g>>>i}while((s|0)>=16);h=h+-3-k|0}}while((j|0)!=0)}if((h|0)<5&(255>>>(8-h|0)&g|0)==0?(o=c[f>>2]|0,(o+-2|0)>>>0<=63):0){if(!(n<<24>>24))switch(o|0){case 53:case 65:break;default:break a}c[b>>2]=n&255;dD(p|0,0,1e3)|0;dD(q|0,0,1e3)|0;t=1;l=r;return t|0}}while(0);dD(p|0,0,1e3)|0;dD(q|0,0,1e3)|0;t=0;l=r;return t|0}function ud(a){a=a|0;var b=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0;x=l;l=l+16|0;o=x;do if(a>>>0<245){k=a>>>0<11?16:a+11&-8;a=k>>>3;n=c[42726]|0;d=n>>>a;if(d&3|0){b=(d&1^1)+a|0;a=170944+(b<<1<<2)|0;d=a+8|0;e=c[d>>2]|0;f=e+8|0;g=c[f>>2]|0;if((g|0)==(a|0))c[42726]=n&~(1<<b);else{c[g+12>>2]=a;c[d>>2]=g}w=b<<3;c[e+4>>2]=w|3;w=e+w+4|0;c[w>>2]=c[w>>2]|1;w=f;l=x;return w|0}m=c[42728]|0;if(k>>>0>m>>>0){if(d|0){b=2<<a;b=d<<a&(b|0-b);b=(b&0-b)+-1|0;i=b>>>12&16;b=b>>>i;d=b>>>5&8;b=b>>>d;g=b>>>2&4;b=b>>>g;a=b>>>1&2;b=b>>>a;e=b>>>1&1;e=(d|i|g|a|e)+(b>>>e)|0;b=170944+(e<<1<<2)|0;a=b+8|0;g=c[a>>2]|0;i=g+8|0;d=c[i>>2]|0;if((d|0)==(b|0)){a=n&~(1<<e);c[42726]=a}else{c[d+12>>2]=b;c[a>>2]=d;a=n}w=e<<3;h=w-k|0;c[g+4>>2]=k|3;f=g+k|0;c[f+4>>2]=h|1;c[g+w>>2]=h;if(m|0){e=c[42731]|0;b=m>>>3;d=170944+(b<<1<<2)|0;b=1<<b;if(!(a&b)){c[42726]=a|b;b=d;a=d+8|0}else{a=d+8|0;b=c[a>>2]|0}c[a>>2]=e;c[b+12>>2]=e;c[e+8>>2]=b;c[e+12>>2]=d}c[42728]=h;c[42731]=f;w=i;l=x;return w|0}g=c[42727]|0;if(g){d=(g&0-g)+-1|0;f=d>>>12&16;d=d>>>f;e=d>>>5&8;d=d>>>e;h=d>>>2&4;d=d>>>h;i=d>>>1&2;d=d>>>i;j=d>>>1&1;j=c[171208+((e|f|h|i|j)+(d>>>j)<<2)>>2]|0;d=j;i=j;j=(c[j+4>>2]&-8)-k|0;while(1){a=c[d+16>>2]|0;if(!a){a=c[d+20>>2]|0;if(!a)break}h=(c[a+4>>2]&-8)-k|0;f=h>>>0<j>>>0;d=a;i=f?a:i;j=f?h:j}h=i+k|0;if(h>>>0>i>>>0){f=c[i+24>>2]|0;b=c[i+12>>2]|0;do if((b|0)==(i|0)){a=i+20|0;b=c[a>>2]|0;if(!b){a=i+16|0;b=c[a>>2]|0;if(!b){d=0;break}}while(1){e=b+20|0;d=c[e>>2]|0;if(!d){e=b+16|0;d=c[e>>2]|0;if(!d)break;else{b=d;a=e}}else{b=d;a=e}}c[a>>2]=0;d=b}else{d=c[i+8>>2]|0;c[d+12>>2]=b;c[b+8>>2]=d;d=b}while(0);do if(f|0){b=c[i+28>>2]|0;a=171208+(b<<2)|0;if((i|0)==(c[a>>2]|0)){c[a>>2]=d;if(!d){c[42727]=g&~(1<<b);break}}else{w=f+16|0;c[((c[w>>2]|0)==(i|0)?w:f+20|0)>>2]=d;if(!d)break}c[d+24>>2]=f;b=c[i+16>>2]|0;if(b|0){c[d+16>>2]=b;c[b+24>>2]=d}b=c[i+20>>2]|0;if(b|0){c[d+20>>2]=b;c[b+24>>2]=d}}while(0);if(j>>>0<16){w=j+k|0;c[i+4>>2]=w|3;w=i+w+4|0;c[w>>2]=c[w>>2]|1}else{c[i+4>>2]=k|3;c[h+4>>2]=j|1;c[h+j>>2]=j;if(m|0){e=c[42731]|0;b=m>>>3;d=170944+(b<<1<<2)|0;b=1<<b;if(!(b&n)){c[42726]=b|n;b=d;a=d+8|0}else{a=d+8|0;b=c[a>>2]|0}c[a>>2]=e;c[b+12>>2]=e;c[e+8>>2]=b;c[e+12>>2]=d}c[42728]=j;c[42731]=h}w=i+8|0;l=x;return w|0}else n=k}else n=k}else n=k}else if(a>>>0<=4294967231){a=a+11|0;k=a&-8;e=c[42727]|0;if(e){f=0-k|0;a=a>>>8;if(a)if(k>>>0>16777215)j=31;else{n=(a+1048320|0)>>>16&8;r=a<<n;i=(r+520192|0)>>>16&4;r=r<<i;j=(r+245760|0)>>>16&2;j=14-(i|n|j)+(r<<j>>>15)|0;j=k>>>(j+7|0)&1|j<<1}else j=0;d=c[171208+(j<<2)>>2]|0;a:do if(!d){d=0;a=0;r=61}else{a=0;i=k<<((j|0)==31?0:25-(j>>>1)|0);g=0;while(1){h=(c[d+4>>2]&-8)-k|0;if(h>>>0<f>>>0)if(!h){a=d;f=0;r=65;break a}else{a=d;f=h}r=c[d+20>>2]|0;d=c[d+16+(i>>>31<<2)>>2]|0;g=(r|0)==0|(r|0)==(d|0)?g:r;if(!d){d=g;r=61;break}else i=i<<1}}while(0);if((r|0)==61){if((d|0)==0&(a|0)==0){a=2<<j;a=(a|0-a)&e;if(!a){n=k;break}n=(a&0-a)+-1|0;h=n>>>12&16;n=n>>>h;g=n>>>5&8;n=n>>>g;i=n>>>2&4;n=n>>>i;j=n>>>1&2;n=n>>>j;d=n>>>1&1;a=0;d=c[171208+((g|h|i|j|d)+(n>>>d)<<2)>>2]|0}if(!d){i=a;h=f}else r=65}if((r|0)==65){g=d;while(1){n=(c[g+4>>2]&-8)-k|0;d=n>>>0<f>>>0;f=d?n:f;a=d?g:a;d=c[g+16>>2]|0;if(!d)d=c[g+20>>2]|0;if(!d){i=a;h=f;break}else g=d}}if(((i|0)!=0?h>>>0<((c[42728]|0)-k|0)>>>0:0)?(m=i+k|0,m>>>0>i>>>0):0){g=c[i+24>>2]|0;b=c[i+12>>2]|0;do if((b|0)==(i|0)){a=i+20|0;b=c[a>>2]|0;if(!b){a=i+16|0;b=c[a>>2]|0;if(!b){b=0;break}}while(1){f=b+20|0;d=c[f>>2]|0;if(!d){f=b+16|0;d=c[f>>2]|0;if(!d)break;else{b=d;a=f}}else{b=d;a=f}}c[a>>2]=0}else{w=c[i+8>>2]|0;c[w+12>>2]=b;c[b+8>>2]=w}while(0);do if(g){a=c[i+28>>2]|0;d=171208+(a<<2)|0;if((i|0)==(c[d>>2]|0)){c[d>>2]=b;if(!b){e=e&~(1<<a);c[42727]=e;break}}else{w=g+16|0;c[((c[w>>2]|0)==(i|0)?w:g+20|0)>>2]=b;if(!b)break}c[b+24>>2]=g;a=c[i+16>>2]|0;if(a|0){c[b+16>>2]=a;c[a+24>>2]=b}a=c[i+20>>2]|0;if(a){c[b+20>>2]=a;c[a+24>>2]=b}}while(0);b:do if(h>>>0<16){w=h+k|0;c[i+4>>2]=w|3;w=i+w+4|0;c[w>>2]=c[w>>2]|1}else{c[i+4>>2]=k|3;c[m+4>>2]=h|1;c[m+h>>2]=h;b=h>>>3;if(h>>>0<256){d=170944+(b<<1<<2)|0;a=c[42726]|0;b=1<<b;if(!(a&b)){c[42726]=a|b;b=d;a=d+8|0}else{a=d+8|0;b=c[a>>2]|0}c[a>>2]=m;c[b+12>>2]=m;c[m+8>>2]=b;c[m+12>>2]=d;break}b=h>>>8;if(b)if(h>>>0>16777215)d=31;else{v=(b+1048320|0)>>>16&8;w=b<<v;u=(w+520192|0)>>>16&4;w=w<<u;d=(w+245760|0)>>>16&2;d=14-(u|v|d)+(w<<d>>>15)|0;d=h>>>(d+7|0)&1|d<<1}else d=0;b=171208+(d<<2)|0;c[m+28>>2]=d;a=m+16|0;c[a+4>>2]=0;c[a>>2]=0;a=1<<d;if(!(e&a)){c[42727]=e|a;c[b>>2]=m;c[m+24>>2]=b;c[m+12>>2]=m;c[m+8>>2]=m;break}b=c[b>>2]|0;c:do if((c[b+4>>2]&-8|0)!=(h|0)){e=h<<((d|0)==31?0:25-(d>>>1)|0);while(1){d=b+16+(e>>>31<<2)|0;a=c[d>>2]|0;if(!a)break;if((c[a+4>>2]&-8|0)==(h|0)){b=a;break c}else{e=e<<1;b=a}}c[d>>2]=m;c[m+24>>2]=b;c[m+12>>2]=m;c[m+8>>2]=m;break b}while(0);v=b+8|0;w=c[v>>2]|0;c[w+12>>2]=m;c[v>>2]=m;c[m+8>>2]=w;c[m+12>>2]=b;c[m+24>>2]=0}while(0);w=i+8|0;l=x;return w|0}else n=k}else n=k}else n=-1;while(0);d=c[42728]|0;if(d>>>0>=n>>>0){b=d-n|0;a=c[42731]|0;if(b>>>0>15){w=a+n|0;c[42731]=w;c[42728]=b;c[w+4>>2]=b|1;c[a+d>>2]=b;c[a+4>>2]=n|3}else{c[42728]=0;c[42731]=0;c[a+4>>2]=d|3;w=a+d+4|0;c[w>>2]=c[w>>2]|1}w=a+8|0;l=x;return w|0}h=c[42729]|0;if(h>>>0>n>>>0){u=h-n|0;c[42729]=u;w=c[42732]|0;v=w+n|0;c[42732]=v;c[v+4>>2]=u|1;c[w+4>>2]=n|3;w=w+8|0;l=x;return w|0}if(!(c[42844]|0)){c[42846]=4096;c[42845]=4096;c[42847]=-1;c[42848]=-1;c[42849]=0;c[42837]=0;c[42844]=o&-16^1431655768;a=4096}else a=c[42846]|0;i=n+48|0;j=n+47|0;g=a+j|0;f=0-a|0;k=g&f;if(k>>>0<=n>>>0){w=0;l=x;return w|0}a=c[42836]|0;if(a|0?(m=c[42834]|0,o=m+k|0,o>>>0<=m>>>0|o>>>0>a>>>0):0){w=0;l=x;return w|0}d:do if(!(c[42837]&4)){d=c[42732]|0;e:do if(d){e=171352;while(1){o=c[e>>2]|0;if(o>>>0<=d>>>0?(o+(c[e+4>>2]|0)|0)>>>0>d>>>0:0)break;a=c[e+8>>2]|0;if(!a){r=128;break e}else e=a}b=g-h&f;if(b>>>0<2147483647){a=hD(b|0)|0;if((a|0)==((c[e>>2]|0)+(c[e+4>>2]|0)|0)){if((a|0)!=(-1|0)){h=b;g=a;r=145;break d}}else{e=a;r=136}}else b=0}else r=128;while(0);do if((r|0)==128){d=hD(0)|0;if((d|0)!=(-1|0)?(b=d,p=c[42845]|0,q=p+-1|0,b=((q&b|0)==0?0:(q+b&0-p)-b|0)+k|0,p=c[42834]|0,q=b+p|0,b>>>0>n>>>0&b>>>0<2147483647):0){o=c[42836]|0;if(o|0?q>>>0<=p>>>0|q>>>0>o>>>0:0){b=0;break}a=hD(b|0)|0;if((a|0)==(d|0)){h=b;g=d;r=145;break d}else{e=a;r=136}}else b=0}while(0);do if((r|0)==136){d=0-b|0;if(!(i>>>0>b>>>0&(b>>>0<2147483647&(e|0)!=(-1|0))))if((e|0)==(-1|0)){b=0;break}else{h=b;g=e;r=145;break d}a=c[42846]|0;a=j-b+a&0-a;if(a>>>0>=2147483647){h=b;g=e;r=145;break d}if((hD(a|0)|0)==(-1|0)){hD(d|0)|0;b=0;break}else{h=a+b|0;g=e;r=145;break d}}while(0);c[42837]=c[42837]|4;r=143}else{b=0;r=143}while(0);if(((r|0)==143?k>>>0<2147483647:0)?(u=hD(k|0)|0,q=hD(0)|0,s=q-u|0,t=s>>>0>(n+40|0)>>>0,!((u|0)==(-1|0)|t^1|u>>>0<q>>>0&((u|0)!=(-1|0)&(q|0)!=(-1|0))^1)):0){h=t?s:b;g=u;r=145}if((r|0)==145){b=(c[42834]|0)+h|0;c[42834]=b;if(b>>>0>(c[42835]|0)>>>0)c[42835]=b;j=c[42732]|0;f:do if(j){b=171352;while(1){a=c[b>>2]|0;d=c[b+4>>2]|0;if((g|0)==(a+d|0)){r=154;break}e=c[b+8>>2]|0;if(!e)break;else b=e}if(((r|0)==154?(v=b+4|0,(c[b+12>>2]&8|0)==0):0)?g>>>0>j>>>0&a>>>0<=j>>>0:0){c[v>>2]=d+h;w=(c[42729]|0)+h|0;u=j+8|0;u=(u&7|0)==0?0:0-u&7;v=j+u|0;u=w-u|0;c[42732]=v;c[42729]=u;c[v+4>>2]=u|1;c[j+w+4>>2]=40;c[42733]=c[42848];break}if(g>>>0<(c[42730]|0)>>>0)c[42730]=g;d=g+h|0;b=171352;while(1){if((c[b>>2]|0)==(d|0)){r=162;break}a=c[b+8>>2]|0;if(!a)break;else b=a}if((r|0)==162?(c[b+12>>2]&8|0)==0:0){c[b>>2]=g;m=b+4|0;c[m>>2]=(c[m>>2]|0)+h;m=g+8|0;m=g+((m&7|0)==0?0:0-m&7)|0;b=d+8|0;b=d+((b&7|0)==0?0:0-b&7)|0;k=m+n|0;i=b-m-n|0;c[m+4>>2]=n|3;g:do if((j|0)==(b|0)){w=(c[42729]|0)+i|0;c[42729]=w;c[42732]=k;c[k+4>>2]=w|1}else{if((c[42731]|0)==(b|0)){w=(c[42728]|0)+i|0;c[42728]=w;c[42731]=k;c[k+4>>2]=w|1;c[k+w>>2]=w;break}a=c[b+4>>2]|0;if((a&3|0)==1){h=a&-8;e=a>>>3;h:do if(a>>>0<256){a=c[b+8>>2]|0;d=c[b+12>>2]|0;if((d|0)==(a|0)){c[42726]=c[42726]&~(1<<e);break}else{c[a+12>>2]=d;c[d+8>>2]=a;break}}else{g=c[b+24>>2]|0;a=c[b+12>>2]|0;do if((a|0)==(b|0)){d=b+16|0;e=d+4|0;a=c[e>>2]|0;if(!a){a=c[d>>2]|0;if(!a){a=0;break}}else d=e;while(1){f=a+20|0;e=c[f>>2]|0;if(!e){f=a+16|0;e=c[f>>2]|0;if(!e)break;else{a=e;d=f}}else{a=e;d=f}}c[d>>2]=0}else{w=c[b+8>>2]|0;c[w+12>>2]=a;c[a+8>>2]=w}while(0);if(!g)break;d=c[b+28>>2]|0;e=171208+(d<<2)|0;do if((c[e>>2]|0)!=(b|0)){w=g+16|0;c[((c[w>>2]|0)==(b|0)?w:g+20|0)>>2]=a;if(!a)break h}else{c[e>>2]=a;if(a|0)break;c[42727]=c[42727]&~(1<<d);break h}while(0);c[a+24>>2]=g;d=b+16|0;e=c[d>>2]|0;if(e|0){c[a+16>>2]=e;c[e+24>>2]=a}d=c[d+4>>2]|0;if(!d)break;c[a+20>>2]=d;c[d+24>>2]=a}while(0);b=b+h|0;f=h+i|0}else f=i;b=b+4|0;c[b>>2]=c[b>>2]&-2;c[k+4>>2]=f|1;c[k+f>>2]=f;b=f>>>3;if(f>>>0<256){d=170944+(b<<1<<2)|0;a=c[42726]|0;b=1<<b;if(!(a&b)){c[42726]=a|b;b=d;a=d+8|0}else{a=d+8|0;b=c[a>>2]|0}c[a>>2]=k;c[b+12>>2]=k;c[k+8>>2]=b;c[k+12>>2]=d;break}b=f>>>8;do if(!b)e=0;else{if(f>>>0>16777215){e=31;break}v=(b+1048320|0)>>>16&8;w=b<<v;u=(w+520192|0)>>>16&4;w=w<<u;e=(w+245760|0)>>>16&2;e=14-(u|v|e)+(w<<e>>>15)|0;e=f>>>(e+7|0)&1|e<<1}while(0);b=171208+(e<<2)|0;c[k+28>>2]=e;a=k+16|0;c[a+4>>2]=0;c[a>>2]=0;a=c[42727]|0;d=1<<e;if(!(a&d)){c[42727]=a|d;c[b>>2]=k;c[k+24>>2]=b;c[k+12>>2]=k;c[k+8>>2]=k;break}b=c[b>>2]|0;i:do if((c[b+4>>2]&-8|0)!=(f|0)){e=f<<((e|0)==31?0:25-(e>>>1)|0);while(1){d=b+16+(e>>>31<<2)|0;a=c[d>>2]|0;if(!a)break;if((c[a+4>>2]&-8|0)==(f|0)){b=a;break i}else{e=e<<1;b=a}}c[d>>2]=k;c[k+24>>2]=b;c[k+12>>2]=k;c[k+8>>2]=k;break g}while(0);v=b+8|0;w=c[v>>2]|0;c[w+12>>2]=k;c[v>>2]=k;c[k+8>>2]=w;c[k+12>>2]=b;c[k+24>>2]=0}while(0);w=m+8|0;l=x;return w|0}b=171352;while(1){a=c[b>>2]|0;if(a>>>0<=j>>>0?(w=a+(c[b+4>>2]|0)|0,w>>>0>j>>>0):0)break;b=c[b+8>>2]|0}f=w+-47|0;a=f+8|0;a=f+((a&7|0)==0?0:0-a&7)|0;f=j+16|0;a=a>>>0<f>>>0?j:a;b=a+8|0;d=h+-40|0;u=g+8|0;u=(u&7|0)==0?0:0-u&7;v=g+u|0;u=d-u|0;c[42732]=v;c[42729]=u;c[v+4>>2]=u|1;c[g+d+4>>2]=40;c[42733]=c[42848];d=a+4|0;c[d>>2]=27;c[b>>2]=c[42838];c[b+4>>2]=c[42839];c[b+8>>2]=c[42840];c[b+12>>2]=c[42841];c[42838]=g;c[42839]=h;c[42841]=0;c[42840]=b;b=a+24|0;do{v=b;b=b+4|0;c[b>>2]=7}while((v+8|0)>>>0<w>>>0);if((a|0)!=(j|0)){g=a-j|0;c[d>>2]=c[d>>2]&-2;c[j+4>>2]=g|1;c[a>>2]=g;b=g>>>3;if(g>>>0<256){d=170944+(b<<1<<2)|0;a=c[42726]|0;b=1<<b;if(!(a&b)){c[42726]=a|b;b=d;a=d+8|0}else{a=d+8|0;b=c[a>>2]|0}c[a>>2]=j;c[b+12>>2]=j;c[j+8>>2]=b;c[j+12>>2]=d;break}b=g>>>8;if(b)if(g>>>0>16777215)e=31;else{v=(b+1048320|0)>>>16&8;w=b<<v;u=(w+520192|0)>>>16&4;w=w<<u;e=(w+245760|0)>>>16&2;e=14-(u|v|e)+(w<<e>>>15)|0;e=g>>>(e+7|0)&1|e<<1}else e=0;d=171208+(e<<2)|0;c[j+28>>2]=e;c[j+20>>2]=0;c[f>>2]=0;b=c[42727]|0;a=1<<e;if(!(b&a)){c[42727]=b|a;c[d>>2]=j;c[j+24>>2]=d;c[j+12>>2]=j;c[j+8>>2]=j;break}b=c[d>>2]|0;j:do if((c[b+4>>2]&-8|0)!=(g|0)){e=g<<((e|0)==31?0:25-(e>>>1)|0);while(1){d=b+16+(e>>>31<<2)|0;a=c[d>>2]|0;if(!a)break;if((c[a+4>>2]&-8|0)==(g|0)){b=a;break j}else{e=e<<1;b=a}}c[d>>2]=j;c[j+24>>2]=b;c[j+12>>2]=j;c[j+8>>2]=j;break f}while(0);v=b+8|0;w=c[v>>2]|0;c[w+12>>2]=j;c[v>>2]=j;c[j+8>>2]=w;c[j+12>>2]=b;c[j+24>>2]=0}}else{w=c[42730]|0;if((w|0)==0|g>>>0<w>>>0)c[42730]=g;c[42838]=g;c[42839]=h;c[42841]=0;c[42735]=c[42844];c[42734]=-1;c[42739]=170944;c[42738]=170944;c[42741]=170952;c[42740]=170952;c[42743]=170960;c[42742]=170960;c[42745]=170968;c[42744]=170968;c[42747]=170976;c[42746]=170976;c[42749]=170984;c[42748]=170984;c[42751]=170992;c[42750]=170992;c[42753]=171e3;c[42752]=171e3;c[42755]=171008;c[42754]=171008;c[42757]=171016;c[42756]=171016;c[42759]=171024;c[42758]=171024;c[42761]=171032;c[42760]=171032;c[42763]=171040;c[42762]=171040;c[42765]=171048;c[42764]=171048;c[42767]=171056;c[42766]=171056;c[42769]=171064;c[42768]=171064;c[42771]=171072;c[42770]=171072;c[42773]=171080;c[42772]=171080;c[42775]=171088;c[42774]=171088;c[42777]=171096;c[42776]=171096;c[42779]=171104;c[42778]=171104;c[42781]=171112;c[42780]=171112;c[42783]=171120;c[42782]=171120;c[42785]=171128;c[42784]=171128;c[42787]=171136;c[42786]=171136;c[42789]=171144;c[42788]=171144;c[42791]=171152;c[42790]=171152;c[42793]=171160;c[42792]=171160;c[42795]=171168;c[42794]=171168;c[42797]=171176;c[42796]=171176;c[42799]=171184;c[42798]=171184;c[42801]=171192;c[42800]=171192;w=h+-40|0;u=g+8|0;u=(u&7|0)==0?0:0-u&7;v=g+u|0;u=w-u|0;c[42732]=v;c[42729]=u;c[v+4>>2]=u|1;c[g+w+4>>2]=40;c[42733]=c[42848]}while(0);b=c[42729]|0;if(b>>>0>n>>>0){u=b-n|0;c[42729]=u;w=c[42732]|0;v=w+n|0;c[42732]=v;c[v+4>>2]=u|1;c[w+4>>2]=n|3;w=w+8|0;l=x;return w|0}}c[(Xd()|0)>>2]=12;w=0;l=x;return w|0}function vd(a){a=a|0;var b=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0;if(!a)return;d=a+-8|0;f=c[42730]|0;a=c[a+-4>>2]|0;b=a&-8;j=d+b|0;do if(!(a&1)){e=c[d>>2]|0;if(!(a&3))return;h=d+(0-e)|0;g=e+b|0;if(h>>>0<f>>>0)return;if((c[42731]|0)==(h|0)){a=j+4|0;b=c[a>>2]|0;if((b&3|0)!=3){i=h;b=g;break}c[42728]=g;c[a>>2]=b&-2;c[h+4>>2]=g|1;c[h+g>>2]=g;return}d=e>>>3;if(e>>>0<256){a=c[h+8>>2]|0;b=c[h+12>>2]|0;if((b|0)==(a|0)){c[42726]=c[42726]&~(1<<d);i=h;b=g;break}else{c[a+12>>2]=b;c[b+8>>2]=a;i=h;b=g;break}}f=c[h+24>>2]|0;a=c[h+12>>2]|0;do if((a|0)==(h|0)){b=h+16|0;d=b+4|0;a=c[d>>2]|0;if(!a){a=c[b>>2]|0;if(!a){a=0;break}}else b=d;while(1){e=a+20|0;d=c[e>>2]|0;if(!d){e=a+16|0;d=c[e>>2]|0;if(!d)break;else{a=d;b=e}}else{a=d;b=e}}c[b>>2]=0}else{i=c[h+8>>2]|0;c[i+12>>2]=a;c[a+8>>2]=i}while(0);if(f){b=c[h+28>>2]|0;d=171208+(b<<2)|0;if((c[d>>2]|0)==(h|0)){c[d>>2]=a;if(!a){c[42727]=c[42727]&~(1<<b);i=h;b=g;break}}else{i=f+16|0;c[((c[i>>2]|0)==(h|0)?i:f+20|0)>>2]=a;if(!a){i=h;b=g;break}}c[a+24>>2]=f;b=h+16|0;d=c[b>>2]|0;if(d|0){c[a+16>>2]=d;c[d+24>>2]=a}b=c[b+4>>2]|0;if(b){c[a+20>>2]=b;c[b+24>>2]=a;i=h;b=g}else{i=h;b=g}}else{i=h;b=g}}else{i=d;h=d}while(0);if(h>>>0>=j>>>0)return;a=j+4|0;e=c[a>>2]|0;if(!(e&1))return;if(!(e&2)){if((c[42732]|0)==(j|0)){j=(c[42729]|0)+b|0;c[42729]=j;c[42732]=i;c[i+4>>2]=j|1;if((i|0)!=(c[42731]|0))return;c[42731]=0;c[42728]=0;return}if((c[42731]|0)==(j|0)){j=(c[42728]|0)+b|0;c[42728]=j;c[42731]=h;c[i+4>>2]=j|1;c[h+j>>2]=j;return}f=(e&-8)+b|0;d=e>>>3;do if(e>>>0<256){b=c[j+8>>2]|0;a=c[j+12>>2]|0;if((a|0)==(b|0)){c[42726]=c[42726]&~(1<<d);break}else{c[b+12>>2]=a;c[a+8>>2]=b;break}}else{g=c[j+24>>2]|0;a=c[j+12>>2]|0;do if((a|0)==(j|0)){b=j+16|0;d=b+4|0;a=c[d>>2]|0;if(!a){a=c[b>>2]|0;if(!a){d=0;break}}else b=d;while(1){e=a+20|0;d=c[e>>2]|0;if(!d){e=a+16|0;d=c[e>>2]|0;if(!d)break;else{a=d;b=e}}else{a=d;b=e}}c[b>>2]=0;d=a}else{d=c[j+8>>2]|0;c[d+12>>2]=a;c[a+8>>2]=d;d=a}while(0);if(g|0){a=c[j+28>>2]|0;b=171208+(a<<2)|0;if((c[b>>2]|0)==(j|0)){c[b>>2]=d;if(!d){c[42727]=c[42727]&~(1<<a);break}}else{e=g+16|0;c[((c[e>>2]|0)==(j|0)?e:g+20|0)>>2]=d;if(!d)break}c[d+24>>2]=g;a=j+16|0;b=c[a>>2]|0;if(b|0){c[d+16>>2]=b;c[b+24>>2]=d}a=c[a+4>>2]|0;if(a|0){c[d+20>>2]=a;c[a+24>>2]=d}}}while(0);c[i+4>>2]=f|1;c[h+f>>2]=f;if((i|0)==(c[42731]|0)){c[42728]=f;return}}else{c[a>>2]=e&-2;c[i+4>>2]=b|1;c[h+b>>2]=b;f=b}a=f>>>3;if(f>>>0<256){d=170944+(a<<1<<2)|0;b=c[42726]|0;a=1<<a;if(!(b&a)){c[42726]=b|a;a=d;b=d+8|0}else{b=d+8|0;a=c[b>>2]|0}c[b>>2]=i;c[a+12>>2]=i;c[i+8>>2]=a;c[i+12>>2]=d;return}a=f>>>8;if(a)if(f>>>0>16777215)e=31;else{h=(a+1048320|0)>>>16&8;j=a<<h;g=(j+520192|0)>>>16&4;j=j<<g;e=(j+245760|0)>>>16&2;e=14-(g|h|e)+(j<<e>>>15)|0;e=f>>>(e+7|0)&1|e<<1}else e=0;a=171208+(e<<2)|0;c[i+28>>2]=e;c[i+20>>2]=0;c[i+16>>2]=0;b=c[42727]|0;d=1<<e;a:do if(!(b&d)){c[42727]=b|d;c[a>>2]=i;c[i+24>>2]=a;c[i+12>>2]=i;c[i+8>>2]=i}else{a=c[a>>2]|0;b:do if((c[a+4>>2]&-8|0)!=(f|0)){e=f<<((e|0)==31?0:25-(e>>>1)|0);while(1){d=a+16+(e>>>31<<2)|0;b=c[d>>2]|0;if(!b)break;if((c[b+4>>2]&-8|0)==(f|0)){a=b;break b}else{e=e<<1;a=b}}c[d>>2]=i;c[i+24>>2]=a;c[i+12>>2]=i;c[i+8>>2]=i;break a}while(0);h=a+8|0;j=c[h>>2]|0;c[j+12>>2]=i;c[h>>2]=i;c[i+8>>2]=j;c[i+12>>2]=a;c[i+24>>2]=0}while(0);j=(c[42734]|0)+-1|0;c[42734]=j;if(j|0)return;a=171360;while(1){a=c[a>>2]|0;if(!a)break;else a=a+8|0}c[42734]=-1;return}function wd(a,b){a=a|0;b=b|0;var d=0;if(a){d=N(b,a)|0;if((b|a)>>>0>65535)d=((d>>>0)/(a>>>0)|0|0)==(b|0)?d:-1}else d=0;a=ud(d)|0;if(!a)return a|0;if(!(c[a+-4>>2]&3))return a|0;dD(a|0,0,d|0)|0;return a|0}function xd(a,b){a=a|0;b=b|0;var d=0,e=0;if(!a){b=ud(b)|0;return b|0}if(b>>>0>4294967231){c[(Xd()|0)>>2]=12;b=0;return b|0}d=yd(a+-8|0,b>>>0<11?16:b+11&-8)|0;if(d|0){b=d+8|0;return b|0}d=ud(b)|0;if(!d){b=0;return b|0}e=c[a+-4>>2]|0;e=(e&-8)-((e&3|0)==0?8:4)|0;bD(d|0,a|0,(e>>>0<b>>>0?e:b)|0)|0;vd(a);b=d;return b|0}function yd(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0;l=a+4|0;m=c[l>>2]|0;d=m&-8;i=a+d|0;if(!(m&3)){if(b>>>0<256){a=0;return a|0}if(d>>>0>=(b+4|0)>>>0?(d-b|0)>>>0<=c[42846]<<1>>>0:0)return a|0;a=0;return a|0}if(d>>>0>=b>>>0){d=d-b|0;if(d>>>0<=15)return a|0;k=a+b|0;c[l>>2]=m&1|b|2;c[k+4>>2]=d|3;m=i+4|0;c[m>>2]=c[m>>2]|1;zd(k,d);return a|0}if((c[42732]|0)==(i|0)){k=(c[42729]|0)+d|0;d=k-b|0;e=a+b|0;if(k>>>0<=b>>>0){a=0;return a|0}c[l>>2]=m&1|b|2;c[e+4>>2]=d|1;c[42732]=e;c[42729]=d;return a|0}if((c[42731]|0)==(i|0)){e=(c[42728]|0)+d|0;if(e>>>0<b>>>0){a=0;return a|0}d=e-b|0;if(d>>>0>15){k=a+b|0;e=a+e|0;c[l>>2]=m&1|b|2;c[k+4>>2]=d|1;c[e>>2]=d;e=e+4|0;c[e>>2]=c[e>>2]&-2;e=k}else{c[l>>2]=m&1|e|2;e=a+e+4|0;c[e>>2]=c[e>>2]|1;e=0;d=0}c[42728]=d;c[42731]=e;return a|0}e=c[i+4>>2]|0;if(e&2|0){a=0;return a|0}j=(e&-8)+d|0;if(j>>>0<b>>>0){a=0;return a|0}k=j-b|0;f=e>>>3;do if(e>>>0<256){e=c[i+8>>2]|0;d=c[i+12>>2]|0;if((d|0)==(e|0)){c[42726]=c[42726]&~(1<<f);break}else{c[e+12>>2]=d;c[d+8>>2]=e;break}}else{h=c[i+24>>2]|0;d=c[i+12>>2]|0;do if((d|0)==(i|0)){e=i+16|0;f=e+4|0;d=c[f>>2]|0;if(!d){d=c[e>>2]|0;if(!d){f=0;break}}else e=f;while(1){g=d+20|0;f=c[g>>2]|0;if(!f){g=d+16|0;f=c[g>>2]|0;if(!f)break;else{d=f;e=g}}else{d=f;e=g}}c[e>>2]=0;f=d}else{f=c[i+8>>2]|0;c[f+12>>2]=d;c[d+8>>2]=f;f=d}while(0);if(h|0){d=c[i+28>>2]|0;e=171208+(d<<2)|0;if((c[e>>2]|0)==(i|0)){c[e>>2]=f;if(!f){c[42727]=c[42727]&~(1<<d);break}}else{g=h+16|0;c[((c[g>>2]|0)==(i|0)?g:h+20|0)>>2]=f;if(!f)break}c[f+24>>2]=h;d=i+16|0;e=c[d>>2]|0;if(e|0){c[f+16>>2]=e;c[e+24>>2]=f}d=c[d+4>>2]|0;if(d|0){c[f+20>>2]=d;c[d+24>>2]=f}}}while(0);if(k>>>0<16){c[l>>2]=m&1|j|2;m=a+j+4|0;c[m>>2]=c[m>>2]|1;return a|0}else{i=a+b|0;c[l>>2]=m&1|b|2;c[i+4>>2]=k|3;m=a+j+4|0;c[m>>2]=c[m>>2]|1;zd(i,k);return a|0}return 0}function zd(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,i=0;i=a+b|0;d=c[a+4>>2]|0;do if(!(d&1)){f=c[a>>2]|0;if(!(d&3))return;h=a+(0-f)|0;b=f+b|0;if((c[42731]|0)==(h|0)){a=i+4|0;d=c[a>>2]|0;if((d&3|0)!=3)break;c[42728]=b;c[a>>2]=d&-2;c[h+4>>2]=b|1;c[i>>2]=b;return}e=f>>>3;if(f>>>0<256){a=c[h+8>>2]|0;d=c[h+12>>2]|0;if((d|0)==(a|0)){c[42726]=c[42726]&~(1<<e);break}else{c[a+12>>2]=d;c[d+8>>2]=a;break}}g=c[h+24>>2]|0;a=c[h+12>>2]|0;do if((a|0)==(h|0)){d=h+16|0;e=d+4|0;a=c[e>>2]|0;if(!a){a=c[d>>2]|0;if(!a){a=0;break}}else d=e;while(1){f=a+20|0;e=c[f>>2]|0;if(!e){f=a+16|0;e=c[f>>2]|0;if(!e)break;else{a=e;d=f}}else{a=e;d=f}}c[d>>2]=0}else{f=c[h+8>>2]|0;c[f+12>>2]=a;c[a+8>>2]=f}while(0);if(g){d=c[h+28>>2]|0;e=171208+(d<<2)|0;if((c[e>>2]|0)==(h|0)){c[e>>2]=a;if(!a){c[42727]=c[42727]&~(1<<d);break}}else{f=g+16|0;c[((c[f>>2]|0)==(h|0)?f:g+20|0)>>2]=a;if(!a)break}c[a+24>>2]=g;d=h+16|0;e=c[d>>2]|0;if(e|0){c[a+16>>2]=e;c[e+24>>2]=a}d=c[d+4>>2]|0;if(d){c[a+20>>2]=d;c[d+24>>2]=a}}}else h=a;while(0);a=i+4|0;e=c[a>>2]|0;if(!(e&2)){if((c[42732]|0)==(i|0)){i=(c[42729]|0)+b|0;c[42729]=i;c[42732]=h;c[h+4>>2]=i|1;if((h|0)!=(c[42731]|0))return;c[42731]=0;c[42728]=0;return}if((c[42731]|0)==(i|0)){i=(c[42728]|0)+b|0;c[42728]=i;c[42731]=h;c[h+4>>2]=i|1;c[h+i>>2]=i;return}f=(e&-8)+b|0;d=e>>>3;do if(e>>>0<256){a=c[i+8>>2]|0;b=c[i+12>>2]|0;if((b|0)==(a|0)){c[42726]=c[42726]&~(1<<d);break}else{c[a+12>>2]=b;c[b+8>>2]=a;break}}else{g=c[i+24>>2]|0;b=c[i+12>>2]|0;do if((b|0)==(i|0)){a=i+16|0;d=a+4|0;b=c[d>>2]|0;if(!b){b=c[a>>2]|0;if(!b){d=0;break}}else a=d;while(1){e=b+20|0;d=c[e>>2]|0;if(!d){e=b+16|0;d=c[e>>2]|0;if(!d)break;else{b=d;a=e}}else{b=d;a=e}}c[a>>2]=0;d=b}else{d=c[i+8>>2]|0;c[d+12>>2]=b;c[b+8>>2]=d;d=b}while(0);if(g|0){b=c[i+28>>2]|0;a=171208+(b<<2)|0;if((c[a>>2]|0)==(i|0)){c[a>>2]=d;if(!d){c[42727]=c[42727]&~(1<<b);break}}else{e=g+16|0;c[((c[e>>2]|0)==(i|0)?e:g+20|0)>>2]=d;if(!d)break}c[d+24>>2]=g;b=i+16|0;a=c[b>>2]|0;if(a|0){c[d+16>>2]=a;c[a+24>>2]=d}b=c[b+4>>2]|0;if(b|0){c[d+20>>2]=b;c[b+24>>2]=d}}}while(0);c[h+4>>2]=f|1;c[h+f>>2]=f;if((h|0)==(c[42731]|0)){c[42728]=f;return}}else{c[a>>2]=e&-2;c[h+4>>2]=b|1;c[h+b>>2]=b;f=b}b=f>>>3;if(f>>>0<256){d=170944+(b<<1<<2)|0;a=c[42726]|0;b=1<<b;if(!(a&b)){c[42726]=a|b;b=d;a=d+8|0}else{a=d+8|0;b=c[a>>2]|0}c[a>>2]=h;c[b+12>>2]=h;c[h+8>>2]=b;c[h+12>>2]=d;return}b=f>>>8;if(b)if(f>>>0>16777215)e=31;else{g=(b+1048320|0)>>>16&8;i=b<<g;d=(i+520192|0)>>>16&4;i=i<<d;e=(i+245760|0)>>>16&2;e=14-(d|g|e)+(i<<e>>>15)|0;e=f>>>(e+7|0)&1|e<<1}else e=0;b=171208+(e<<2)|0;c[h+28>>2]=e;c[h+20>>2]=0;c[h+16>>2]=0;a=c[42727]|0;d=1<<e;if(!(a&d)){c[42727]=a|d;c[b>>2]=h;c[h+24>>2]=b;c[h+12>>2]=h;c[h+8>>2]=h;return}b=c[b>>2]|0;a:do if((c[b+4>>2]&-8|0)!=(f|0)){e=f<<((e|0)==31?0:25-(e>>>1)|0);while(1){d=b+16+(e>>>31<<2)|0;a=c[d>>2]|0;if(!a)break;if((c[a+4>>2]&-8|0)==(f|0)){b=a;break a}else{e=e<<1;b=a}}c[d>>2]=h;c[h+24>>2]=b;c[h+12>>2]=h;c[h+8>>2]=h;return}while(0);g=b+8|0;i=c[g>>2]|0;c[i+12>>2]=h;c[g>>2]=h;c[h+8>>2]=i;c[h+12>>2]=b;c[h+24>>2]=0;return}function Ad(a,b){a=a|0;b=b|0;var d=0;if(!a){b=0;return b|0}if(b>>>0>4294967231){c[(Xd()|0)>>2]=12;b=0;return b|0}else{d=a+-8|0;b=(yd(d,b>>>0<11?16:b+11&-8)|0)==(d|0);b=b?a:0;return b|0}return 0}function Bd(a,b){a=a|0;b=b|0;if(a>>>0<9){b=ud(b)|0;return b|0}else{b=Cd(a,b)|0;return b|0}return 0}function Cd(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,i=0;d=a>>>0>16?a:16;if(!(d+-1&d))a=d;else{a=16;while(1)if(a>>>0<d>>>0)a=a<<1;else break}if((-64-a|0)>>>0<=b>>>0){c[(Xd()|0)>>2]=12;h=0;return h|0}g=b>>>0<11?16:b+11&-8;d=ud(g+12+a|0)|0;if(!d){h=0;return h|0}f=d+-8|0;do if(a+-1&d){e=(d+a+-1&0-a)+-8|0;b=f;e=(e-b|0)>>>0>15?e:e+a|0;b=e-b|0;a=d+-4|0;i=c[a>>2]|0;d=(i&-8)-b|0;if(!(i&3)){c[e>>2]=(c[f>>2]|0)+b;c[e+4>>2]=d;a=e;b=e;break}else{i=e+4|0;c[i>>2]=d|c[i>>2]&1|2;d=e+d+4|0;c[d>>2]=c[d>>2]|1;c[a>>2]=b|c[a>>2]&1|2;c[i>>2]=c[i>>2]|1;zd(f,b);a=e;b=e;break}}else{a=f;b=f}while(0);a=a+4|0;d=c[a>>2]|0;if(d&3|0?(h=d&-8,h>>>0>(g+16|0)>>>0):0){i=h-g|0;f=b+g|0;c[a>>2]=g|d&1|2;c[f+4>>2]=i|3;h=b+h+4|0;c[h>>2]=c[h>>2]|1;zd(f,i)}i=b+8|0;return i|0}function Dd(a,b,d){a=a|0;b=b|0;d=d|0;var e=0;do if((b|0)!=8){e=b>>>2;if((b&3|0)!=0|(e|0)==0){a=22;return a|0}if(e+1073741823&e|0){a=22;return a|0}if((-64-b|0)>>>0<d>>>0){a=12;return a|0}else{b=Cd(b>>>0>16?b:16,d)|0;break}}else b=ud(d)|0;while(0);if(!b){a=12;return a|0}c[a>>2]=b;a=0;return a|0}function Ed(a){a=a|0;var b=0,d=0;b=l;l=l+16|0;if(!(c[42844]|0)){c[42846]=4096;c[42845]=4096;c[42847]=-1;c[42848]=-1;c[42849]=0;c[42837]=0;c[42844]=b&-16^1431655768;d=4096;a=Bd(d,a)|0;l=b;return a|0}else{d=c[42845]|0;d=Bd(d,a)|0;l=b;return d|0}return 0}function Fd(a){a=a|0;var b=0,d=0;d=l;l=l+16|0;if(!(c[42844]|0)){c[42846]=4096;c[42845]=4096;c[42847]=-1;c[42848]=-1;c[42849]=0;c[42837]=0;c[42844]=d&-16^1431655768;b=4096}else b=c[42845]|0;b=Bd(b,a+-1+b&0-b)|0;l=d;return b|0}function Gd(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0;e=l;l=l+16|0;f=e;c[f>>2]=b;d=Hd(a,f,3,d)|0;l=e;return d|0}function Hd(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,i=0,j=0,k=0,m=0,n=0;n=l;l=l+16|0;if(!(c[42844]|0)){c[42846]=4096;c[42845]=4096;c[42847]=-1;c[42848]=-1;c[42849]=0;c[42837]=0;c[42844]=n&-16^1431655768}f=(a|0)==0;do if(e)if(f){b=e;l=n;return b|0}else h=0;else{if(!f){h=a<<2;e=0;h=h>>>0<11?16:h+11&-8;break}b=ud(0)|0;l=n;return b|0}while(0);if(!(d&1)){g=0;f=0;do{m=c[b+(g<<2)>>2]|0;f=(m>>>0<11?16:m+11&-8)+f|0;g=g+1|0}while((g|0)!=(a|0));m=0}else{f=c[b>>2]|0;f=f>>>0<11?16:f+11&-8;m=f;f=N(f,a)|0}k=ud(h+-4+f|0)|0;if(!k){b=0;l=n;return b|0}g=k+-8|0;i=c[k+-4>>2]&-8;if(d&2|0)dD(k|0,0,-4-h+i|0)|0;h=g+f|0;if(!e){c[h+4>>2]=i-f|3;e=h+8|0}else f=i;c[e>>2]=k;j=a+-1|0;a:do if(j){if(!m){h=0;while(1){m=c[b+(h<<2)>>2]|0;m=m>>>0<11?16:m+11&-8;f=f-m|0;c[g+4>>2]=m|3;g=g+m|0;h=h+1|0;c[e+(h<<2)>>2]=g+8;if((h|0)==(j|0))break a}}a=N(m,1-a|0)|0;i=(N(m,j)|0)+-8|0;d=m|3;h=0;do{c[g+4>>2]=d;g=g+m|0;h=h+1|0;c[e+(h<<2)>>2]=g+8}while((h|0)!=(j|0));g=k+i|0;f=f+a|0}while(0);c[g+4>>2]=f|3;b=e;l=n;return b|0}function Id(a,b,c){a=a|0;b=b|0;c=c|0;return Hd(a,b,0,c)|0}function Jd(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,i=0;i=a+(b<<2)|0;if(!b)return 0;do{d=c[a>>2]|0;do if(!d)a=a+4|0;else{e=d+-8|0;f=d+-4|0;g=c[f>>2]|0;h=g&-8;c[a>>2]=0;a=a+4|0;b=e+h|0;if((a|0)!=(i|0)?(c[a>>2]|0)==(b+8|0):0){h=(c[b+4>>2]&-8)+h|0;c[f>>2]=g&1|h|2;h=e+h+4|0;c[h>>2]=c[h>>2]|1;c[a>>2]=d;break}zd(e,h)}while(0)}while((a|0)!=(i|0));return 0}function Kd(a){a=a|0;var b=0,d=0,e=0,f=0,g=0,h=0,i=0;i=l;l=l+16|0;if(!(c[42844]|0)){c[42846]=4096;c[42845]=4096;c[42847]=-1;c[42848]=-1;c[42849]=0;c[42837]=0;c[42844]=i&-16^1431655768}if(a>>>0>=4294967232){h=0;l=i;return h|0}e=c[42732]|0;if(!e){h=0;l=i;return h|0}b=c[42729]|0;if(b>>>0>(a+40|0)>>>0){f=c[42846]|0;a=((-41-a+b+f|0)>>>0)/(f>>>0)|0;d=171352;while(1){b=c[d>>2]|0;if(b>>>0<=e>>>0?(b+(c[d+4>>2]|0)|0)>>>0>e>>>0:0)break;d=c[d+8>>2]|0}b=d+4|0;a=N(a+-1|0,f)|0;if(((c[d+12>>2]&8|0)==0?(g=hD(0)|0,(g|0)==((c[d>>2]|0)+(c[b>>2]|0)|0)):0)?(e=hD(0-(a>>>0>2147483646?-2147483648-f|0:a)|0)|0,f=hD(0)|0,h=g-f|0,!((e|0)==(-1|0)|f>>>0>=g>>>0|(h|0)==0)):0){c[b>>2]=(c[b>>2]|0)-h;c[42834]=(c[42834]|0)-h;g=c[42732]|0;h=(c[42729]|0)-h|0;e=g+8|0;e=(e&7|0)==0?0:0-e&7;f=g+e|0;e=h-e|0;c[42732]=f;c[42729]=e;c[f+4>>2]=e|1;c[g+h+4>>2]=40;c[42733]=c[42848];h=1;l=i;return h|0}}if((c[42729]|0)>>>0<=(c[42733]|0)>>>0){h=0;l=i;return h|0}c[42733]=-1;h=0;l=i;return h|0}function Ld(){return c[42834]|0}function Md(){return c[42835]|0}function Nd(){var a=0;a=c[42836]|0;return ((a|0)==0?-1:a)|0}function Od(a){a=a|0;var b=0;if((a|0)==-1)a=0;else{b=c[42846]|0;a=a+-1+b&0-b}c[42836]=a;return a|0}function Pd(a){a=a|0;var b=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0,m=0,n=0,o=0;n=l;l=l+16|0;if(!(c[42844]|0)){c[42846]=4096;c[42845]=4096;c[42847]=-1;c[42848]=-1;c[42849]=0;c[42837]=0;c[42844]=n&-16^1431655768}m=c[42732]|0;if(!m){i=0;h=0;g=0;d=0;e=0;f=0;b=0}else{h=c[42729]|0;b=h+40|0;k=171352;d=b;g=1;do{i=c[k>>2]|0;f=i+8|0;j=i+(c[k+4>>2]|0)|0;f=i+((f&7|0)==0?0:0-f&7)|0;do{if(f>>>0>=j>>>0|(m|0)==(f|0))break;e=c[f+4>>2]|0;if((e|0)==7)break;o=e&-8;d=o+d|0;e=(e&3|0)==1;g=g+(e&1)|0;b=(e?o:0)+b|0;f=f+o|0}while(f>>>0>=i>>>0);k=c[k+8>>2]|0}while((k|0)!=0);f=c[42834]|0;i=d;d=f-d|0;e=c[42835]|0;f=f-b|0}c[a>>2]=i;c[a+4>>2]=g;o=a+8|0;c[o>>2]=0;c[o+4>>2]=0;c[a+16>>2]=d;c[a+20>>2]=e;c[a+24>>2]=0;c[a+28>>2]=f;c[a+32>>2]=b;c[a+36>>2]=h;l=n;return}function Qd(){var a=0,b=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0,m=0,n=0,o=0,p=0;o=l;l=l+32|0;n=o+16|0;m=o+8|0;k=o;if(!(c[42844]|0)){c[42846]=4096;c[42845]=4096;c[42847]=-1;c[42848]=-1;c[42849]=0;c[42837]=0;c[42844]=o+20&-16^1431655768}j=c[42732]|0;if(!j){h=0;g=0;i=0;j=c[40439]|0;c[k>>2]=g;Pu(j,166623,k)|0;c[m>>2]=h;Pu(j,166649,m)|0;c[n>>2]=i;Pu(j,166675,n)|0;l=o;return}b=c[42835]|0;d=c[42834]|0;i=171352;a=d+-40-(c[42729]|0)|0;do{g=c[i>>2]|0;f=g+8|0;h=g+(c[i+4>>2]|0)|0;f=g+((f&7|0)==0?0:0-f&7)|0;do{if(f>>>0>=h>>>0|(j|0)==(f|0))break;e=c[f+4>>2]|0;if((e|0)==7)break;p=e&-8;a=a-((e&3|0)==1?p:0)|0;f=f+p|0}while(f>>>0>=g>>>0);i=c[i+8>>2]|0}while((i|0)!=0);p=c[40439]|0;c[k>>2]=b;Pu(p,166623,k)|0;c[m>>2]=d;Pu(p,166649,m)|0;c[n>>2]=a;Pu(p,166675,n)|0;l=o;return}function Rd(a,b){a=a|0;b=b|0;var d=0;d=l;l=l+16|0;if(!(c[42844]|0)){c[42846]=4096;c[42845]=4096;c[42847]=-1;c[42848]=-1;c[42849]=0;c[42837]=0;c[42844]=d&-16^1431655768}switch(a|0){case -1:{c[42848]=b;a=1;break}case -2:{if((c[42845]|0)>>>0<=b>>>0?(b+-1&b|0)==0:0){c[42846]=b;a=1}else a=0;break}case -3:{c[42847]=b;a=1;break}default:a=0}l=d;return a|0}function Sd(a){a=a|0;var b=0;if(!a)return 0;else{b=c[a+-4>>2]|0;a=b&3;return ((a|0)==1?0:(b&-8)-((a|0)==0?8:4)|0)|0}return 0}function Td(a){a=a|0;var b=0,d=0;b=l;l=l+16|0;d=b;c[d>>2]=bd[2&7](c[a+60>>2]|0)|0;a=Wd(Yb(6,d|0)|0)|0;l=b;return a|0}function Ud(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,i=0,j=0,k=0,m=0;k=l;l=l+32|0;f=k+16|0;i=k;c[i>>2]=d;g=i+4|0;j=b+48|0;m=c[j>>2]|0;c[g>>2]=e-((m|0)!=0&1);h=b+44|0;c[i+8>>2]=c[h>>2];c[i+12>>2]=m;c[f>>2]=c[b+60>>2];c[f+4>>2]=i;c[f+8>>2]=2;f=Wd(za(145,f|0)|0)|0;if((f|0)>=1){i=c[g>>2]|0;if(f>>>0>i>>>0){g=c[h>>2]|0;h=b+4|0;c[h>>2]=g;c[b+8>>2]=g+(f-i);if(!(c[j>>2]|0))f=e;else{c[h>>2]=g+1;a[d+(e+-1)>>0]=a[g>>0]|0;f=e}}}else c[b>>2]=c[b>>2]|f&48^16;l=k;return f|0}function Vd(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0;f=l;l=l+32|0;g=f;e=f+20|0;c[g>>2]=c[a+60>>2];c[g+4>>2]=0;c[g+8>>2]=b;c[g+12>>2]=e;c[g+16>>2]=d;if((Wd(wa(140,g|0)|0)|0)<0){c[e>>2]=-1;a=-1}else a=c[e>>2]|0;l=f;return a|0}function Wd(a){a=a|0;if(a>>>0>4294963200){c[(Xd()|0)>>2]=0-a;a=-1}return a|0}function Xd(){return 171508}function Yd(a){a=a|0;return a|0}function Zd(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0;g=l;l=l+32|0;f=g;c[b+36>>2]=4;if((c[b>>2]&64|0)==0?(c[f>>2]=c[b+60>>2],c[f+4>>2]=21523,c[f+8>>2]=g+16,Wb(54,f|0)|0):0)a[b+75>>0]=-1;f=_d(b,d,e)|0;l=g;return f|0}function _d(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0,k=0,m=0,n=0,o=0,p=0;n=l;l=l+48|0;k=n+32|0;g=n+16|0;f=n;i=a+28|0;e=c[i>>2]|0;c[f>>2]=e;j=a+20|0;e=(c[j>>2]|0)-e|0;c[f+4>>2]=e;c[f+8>>2]=b;c[f+12>>2]=d;e=e+d|0;h=a+60|0;c[g>>2]=c[h>>2];c[g+4>>2]=f;c[g+8>>2]=2;g=Wd(Aa(146,g|0)|0)|0;a:do if((e|0)!=(g|0)){b=2;while(1){if((g|0)<0)break;e=e-g|0;p=c[f+4>>2]|0;o=g>>>0>p>>>0;f=o?f+8|0:f;b=b+(o<<31>>31)|0;p=g-(o?p:0)|0;c[f>>2]=(c[f>>2]|0)+p;o=f+4|0;c[o>>2]=(c[o>>2]|0)-p;c[k>>2]=c[h>>2];c[k+4>>2]=f;c[k+8>>2]=b;g=Wd(Aa(146,k|0)|0)|0;if((e|0)==(g|0)){m=3;break a}}c[a+16>>2]=0;c[i>>2]=0;c[j>>2]=0;c[a>>2]=c[a>>2]|32;if((b|0)==2)d=0;else d=d-(c[f+4>>2]|0)|0}else m=3;while(0);if((m|0)==3){p=c[a+44>>2]|0;c[a+16>>2]=p+(c[a+48>>2]|0);c[i>>2]=p;c[j>>2]=p}l=n;return d|0}function $d(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,g=0;f=l;l=l+16|0;g=f;c[g>>2]=a;c[g+4>>2]=b;c[g+8>>2]=d;c[g+12>>2]=e;e=Wd(Cb(320,g|0)|0)|0;l=f;return e|0}function ae(a,b){a=a|0;b=b|0;return be(a,b|4096,0)|0}function be(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0;e=l;l=l+16|0;f=e;c[f>>2]=a;c[f+4>>2]=b;c[f+8>>2]=d;d=Wd(va(14,f|0)|0)|0;l=e;return d|0}function ce(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,i=0,j=0,k=0,m=0,n=0,o=0,p=0;p=l;l=l+192|0;o=p+112|0;n=p+96|0;m=p+80|0;k=p+64|0;h=p+48|0;g=p+32|0;j=p+116|0;f=p;switch(e|0){case 0:{c[g>>2]=a;c[g+4>>2]=b;c[g+8>>2]=d;c[g+12>>2]=0;b=Wd(zb(306,g|0)|0)|0;break}case 256:{e=b;i=j;c[h>>2]=a;c[h+4>>2]=e;c[h+8>>2]=i;c[h+12>>2]=256;b=tb(300,h|0)|0;do if(!b){g=j+12|0;if((c[g>>2]&61440|0)==40960)b=-95;else{c[k>>2]=a;c[k+4>>2]=e;c[k+8>>2]=2752768;e=ob(295,k|0)|0;if((e|0)<0){b=(e|0)==-40?-95:e;break}de(f,e);c[m>>2]=-100;c[m+4>>2]=f;c[m+8>>2]=i;c[m+12>>2]=0;b=tb(300,m|0)|0;if(!b)if((c[g>>2]&61440|0)==40960)b=-95;else{c[n>>2]=-100;c[n+4>>2]=f;c[n+8>>2]=d;b=zb(306,n|0)|0}c[o>>2]=e;Yb(6,o|0)|0}}while(0);b=Wd(b)|0;break}default:b=Wd(-22)|0}l=p;return b|0}function de(b,c){b=b|0;c=c|0;var d=0,e=0,f=0;d=b;e=166701;f=d+15|0;do{a[d>>0]=a[e>>0]|0;d=d+1|0;e=e+1|0}while((d|0)<(f|0));if(!c){a[b+14>>0]=48;a[b+15>>0]=0}else{e=c;d=14;while(1){d=d+1|0;if(e>>>0<10)break;else e=(e>>>0)/10|0}a[b+d>>0]=0;do{f=c;c=(c>>>0)/10|0;d=d+-1|0;a[b+d>>0]=f-(c*10|0)|48}while(f>>>0>=10)}return}function ee(a,b){a=a|0;b=b|0;var d=0,e=0;d=l;l=l+16|0;e=d;c[e>>2]=a;c[e+4>>2]=b;b=Wd(Pb(39,e|0)|0)|0;l=d;return b|0}function fe(a){a=a|0;var b=0,d=0;b=l;l=l+16|0;d=b;c[d>>2]=a;a=Wd(Zb(60,d|0)|0)|0;l=b;return a|0}function ge(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0;g=l;l=l+16|0;f=g;e=b;d=b+64|0;do{c[b>>2]=0;b=b+4|0}while((b|0)<(d|0));c[f>>2]=a;c[f+4>>2]=64;c[f+8>>2]=e;f=Wd(kb(268,f|0)|0)|0;l=g;return f|0}function he(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0;g=l;l=l+16|0;f=g;e=b;d=b+64|0;do{c[b>>2]=0;b=b+4|0}while((b|0)<(d|0));c[f>>2]=a;c[f+4>>2]=64;c[f+8>>2]=e;f=Wd(lb(269,f|0)|0)|0;l=g;return f|0}function ie(a,b){a=a|0;b=b|0;var c=0,d=0;d=l;l=l+64|0;c=d;if((ge(a,c)|0)<0)a=-1;else{je(b,c);a=0}l=d;return a|0}function je(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0;d=a+4|0;e=b+4|0;f=a+36|0;g=f+36|0;do{c[f>>2]=0;f=f+4|0}while((f|0)<(g|0));f=c[e>>2]|0;c[a>>2]=f;g=c[b+40>>2]|0;c[d>>2]=(g|0)==0?f:g;c[a+8>>2]=c[b+8>>2];c[a+12>>2]=c[b+12>>2];c[a+16>>2]=c[b+16>>2];c[a+20>>2]=c[b+20>>2];g=c[b+24>>2]|0;c[a+24>>2]=g;c[a+28>>2]=g;c[a+32>>2]=c[b+28>>2];c[a+40>>2]=c[b+44>>2];c[a+44>>2]=c[b+36>>2];return}function ke(a,b){a=a|0;b=b|0;var c=0,d=0;d=l;l=l+64|0;c=d;if((he(a,c)|0)<0)a=-1;else{je(b,c);a=0}l=d;return a|0}function le(a,b){a=a|0;b=b|0;var d=0,e=0;d=l;l=l+16|0;e=d;c[e>>2]=a;c[e+4>>2]=b;b=Wd(Ra(195,e|0)|0)|0;l=d;return b|0}function me(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0;g=l;l=l+48|0;f=g+40|0;e=g;d=g+32|0;c[d>>2]=a;c[d+4>>2]=b;d=Ta(197,d|0)|0;if((d|0)==-9?(c[e>>2]=a,c[e+4>>2]=1,(jb(221,e|0)|0)>=0):0){de(e,a);c[f>>2]=e;c[f+4>>2]=b;b=Wd(Ra(195,f|0)|0)|0}else b=Wd(d)|0;l=g;return b|0}function ne(a,b,c){a=a|0;b=b|0;c=c|0;return oe(a,b,c|4096,0)|0}function oe(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,g=0;f=l;l=l+16|0;g=f;c[g>>2]=a;c[g+4>>2]=b;c[g+8>>2]=d;c[g+12>>2]=e;e=Wd(qb(297,g|0)|0)|0;l=f;return e|0}function pe(a,b){a=a|0;b=b|0;var d=0,e=0;d=l;l=l+16|0;e=d;c[e>>2]=a;c[e+4>>2]=b;b=Wd(Sa(196,e|0)|0)|0;l=d;return b|0}function qe(a,b){a=a|0;b=b|0;return ce(-100,a,b,256)|0}function re(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,g=0;f=l;l=l+16|0;g=f;c[g>>2]=a;c[g+4>>2]=b;c[g+8>>2]=d;c[g+12>>2]=e;e=Wd(tb(300,g|0)|0)|0;l=f;return e|0}function se(a,b){a=a|0;b=b|0;return $d(a,0,b,0)|0}function te(a,b,c){a=a|0;b=b|0;c=c|0;return me(b,c)|0}function ue(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;return re(b,c,d,e)|0}function ve(a,b,c){a=a|0;b=b|0;c=c|0;return pe(b,c)|0}function we(a,b,c){a=a|0;b=b|0;c=c|0;return le(b,c)|0}function xe(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;return be(b,d,c[e>>2]|0)|0}function ye(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;return oe(b,d,e,c[f>>2]|0)|0}function ze(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0;j=l;l=l+16|0;f=j;g=(d|0)!=0;a:do if(g){e=0;while(1){h=c[d+(e<<3)+4>>2]|0;if(h>>>0>999999)break;c[f+(e<<3)>>2]=c[d+(e<<3)>>2];c[f+(e<<3)+4>>2]=h*1e3;if((e+1|0)>>>0<2)e=1;else{i=6;break a}}e=Wd(-22)|0}else i=6;while(0);if((i|0)==6)e=$d(a,b,g?f:0,0)|0;l=j;return e|0}function Ae(a,b){a=a|0;b=b|0;var d=0,e=0;d=l;l=l+16|0;e=d;c[e>>2]=a;c[e+4>>2]=b;b=Wd(Da(15,e|0)|0)|0;l=d;return b|0}function Be(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0;g=l;l=l+48|0;f=g+40|0;e=g;d=g+32|0;c[d>>2]=a;c[d+4>>2]=b;d=hc(94,d|0)|0;if((d|0)==-9?(c[e>>2]=a,c[e+4>>2]=1,(jb(221,e|0)|0)>=0):0){de(e,a);c[f>>2]=e;c[f+4>>2]=b;a=Wd(Da(15,f|0)|0)|0}else a=Wd(d)|0;l=g;return a|0}function Ce(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0;e=l;l=l+16|0;f=e;c[f>>2]=a;c[f+4>>2]=b;c[f+8>>2]=d;d=Wd(pb(296,f|0)|0)|0;l=e;return d|0}function De(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0;e=l;l=l+16|0;f=e;c[f>>2]=a;c[f+4>>2]=b;c[f+8>>2]=d;d=Wd(Ja(168,f|0)|0)|0;l=e;return d|0}function Ee(a,b,d,e,f,g){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0,i=0,j=0,k=0,m=0,n=0;k=l;l=l+48|0;j=k+8|0;h=k+32|0;i=k;c[h>>2]=g;c[h+4>>2]=8;g=(f|0)!=0;if(g){n=f;m=c[n+4>>2]|0;f=i;c[f>>2]=c[n>>2];c[f+4>>2]=m}c[j>>2]=a;c[j+4>>2]=b;c[j+8>>2]=d;c[j+12>>2]=e;c[j+16>>2]=g?i:0;c[j+20>>2]=h;n=Wd(Bb(308,j|0)|0)|0;l=k;return n|0}function Fe(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0;g=l;l=l+32|0;h=g;c[h>>2]=a;c[h+4>>2]=b;c[h+8>>2]=d;c[h+12>>2]=e;c[h+16>>2]=f;f=Wd(xa(142,h|0)|0)|0;l=g;return f|0}function Ge(a){a=a|0;var c=0,d=0;c=l;l=l+16|0;d=c;b[d>>1]=13070;b[d+2>>1]=a;b[d+4>>1]=a>>>16;He(d)|0;l=c;return}function He(a){a=a|0;bD(172384,166564,6)|0;bD(166564,a|0,6)|0;return 172384}function Ie(a){a=a|0;a=Je(a,166570)|0;a=ZC(a|0,y|0,16)|0;return a|0}function Je(a,c){a=a|0;c=c|0;var d=0,f=0,g=0;g=a+2|0;f=a+4|0;d=WC((e[c+2>>1]|0)<<16|(e[c>>1]|0)|0,e[c+4>>1]|0|0,(e[g>>1]|0)<<16|(e[a>>1]|0)|0,e[f>>1]|0|0)|0;c=QC(d|0,y|0,e[c+6>>1]|0|0,0)|0;d=y;b[a>>1]=c;a=ZC(c|0,d|0,16)|0;b[g>>1]=a;b[f>>1]=d;y=d&65535;return c|0}function Ke(){return Ie(166564)|0}function Le(a){a=a|0;bD(166564,a|0,14)|0;return}function Me(a){a=a|0;a=Je(a,166570)|0;a=ZC(a|0,y|0,17)|0;return a|0}function Ne(){return Me(166564)|0}function Oe(a){a=a|0;var b=0;b=170896;c[b>>2]=a+-1;c[b+4>>2]=0;return}function Pe(){var a=0,b=0,d=0;b=170896;b=WC(c[b>>2]|0,c[b+4>>2]|0,1284865837,1481765933)|0;b=QC(b|0,y|0,1,0)|0;a=y;d=170896;c[d>>2]=b;c[d+4>>2]=a;a=ZC(b|0,a|0,33)|0;return a|0}function Qe(a){a=a|0;var b=0;b=Je(a,166570)|0;b=_C(b|0,y|0,4)|0;a=y|1072693248;c[j>>2]=b;c[j+4>>2]=a;return +(+h[j>>3]+-1.0)}function Re(){return +(+Qe(166564))}function Se(a){a=a|0;var b=0;b=(N(c[a>>2]|0,1103515245)|0)+12345|0;c[a>>2]=b;return (Te(b)|0)>>>1|0}function Te(a){a=a|0;a=a>>>11^a;a=a<<7&-1658038656^a;a=a<<15&-272236544^a;return a>>>18^a|0}function Ue(a){a=a|0;ea(171548);Ve(a);kc(171548);return}function Ve(a){a=a|0;var b=0,d=0,e=0,f=0;f=c[40478]|0;if(!f)c[c[40479]>>2]=a;else{c[40480]=(f|0)==31|(f|0)==7?3:1;c[42889]=0;if((f|0)>0){b=c[40479]|0;e=0;d=0;do{a=We(a,d)|0;d=y;c[b+(e<<2)>>2]=d;e=e+1|0}while((e|0)!=(f|0))}else b=c[40479]|0;c[b>>2]=c[b>>2]|1}return}function We(a,b){a=a|0;b=b|0;b=WC(a|0,b|0,1284865837,1481765933)|0;b=QC(b|0,y|0,1,0)|0;return b|0}function Xe(a,b,d){a=a|0;b=b|0;d=d|0;var e=0;if(d>>>0<8)e=0;else{ea(171548);e=Ye()|0;if(d>>>0>=32)if(d>>>0>=64)if(d>>>0<128)d=15;else d=d>>>0<256?31:63;else d=7;else d=0;c[40478]=d;c[40479]=b+4;Ve(a);Ye()|0;kc(171548)}return e|0}function Ye(){var a=0;a=(c[40479]|0)+-4|0;c[a>>2]=c[40480]<<8|c[40478]<<16|c[42889];return a|0}function Ze(a){a=a|0;var b=0;ea(171548);b=Ye()|0;_e(a);kc(171548);return b|0}function _e(a){a=a|0;c[40479]=a+4;a=c[a>>2]|0;c[40478]=a>>>16;c[40480]=a>>>8&255;c[42889]=a&255;return}function $e(){var a=0,b=0,d=0,e=0,f=0;ea(171548);a=c[40478]|0;b=c[40479]|0;if(!a){a=af(c[b>>2]|0)|0;c[b>>2]=a}else{d=c[42889]|0;e=c[40480]|0;f=b+(e<<2)|0;b=(c[f>>2]|0)+(c[b+(d<<2)>>2]|0)|0;c[f>>2]=b;e=e+1|0;c[40480]=(e|0)==(a|0)?0:e;d=d+1|0;c[42889]=(d|0)==(a|0)?0:d;a=b>>>1}kc(171548);return a|0}function af(a){a=a|0;return (N(a,1103515245)|0)+12345&2147483647|0}function bf(a,b){a=a|0;b=b|0;return cf(a,0,b)|0}function cf(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0,i=0;i=l;l=l+16|0;g=i;e=df(a)|0;a:do if(!(e>>>0<6|(e+-6|0)>>>0<b>>>0)?(f=a+e+(0-b)+-6|0,(ef(f,166716,6)|0)==0):0){e=d&-2097348|194;d=100;do{ff(f)|0;c[g>>2]=384;b=gf(a,e,g)|0;if((b|0)>-1)break a;d=d+-1|0;if(!d)break}while((c[(Xd()|0)>>2]|0)==17);bD(f|0,166716,6)|0;b=-1}else h=3;while(0);if((h|0)==3){c[(Xd()|0)>>2]=22;b=-1}l=i;return b|0}function df(b){b=b|0;var d=0,e=0,f=0;f=b;a:do if(!(f&3))e=5;else{d=f;while(1){if(!(a[b>>0]|0)){b=d;break a}b=b+1|0;d=b;if(!(d&3)){e=5;break}}}while(0);if((e|0)==5){while(1){d=c[b>>2]|0;if(!((d&-2139062144^-2139062144)&d+-16843009))b=b+4|0;else break}if((d&255)<<24>>24)do b=b+1|0;while((a[b>>0]|0)!=0)}return b-f|0}function ef(b,c,d){b=b|0;c=c|0;d=d|0;var e=0,f=0;a:do if(!d)b=0;else{while(1){e=a[b>>0]|0;f=a[c>>0]|0;if(e<<24>>24!=f<<24>>24)break;d=d+-1|0;if(!d){b=0;break a}else{b=b+1|0;c=c+1|0}}b=(e&255)-(f&255)|0}while(0);return b|0}function ff(b){b=b|0;var d=0,e=0,f=0;f=l;l=l+16|0;e=f;ca(0,e|0)|0;d=0;e=(c[e+4>>2]|0)*65537^(e>>>4)+b;while(1){a[b+d>>0]=(e&15)+65|e<<1&32;d=d+1|0;if((d|0)==6)break;else e=e>>>5}l=f;return b|0}function gf(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0,i=0;h=l;l=l+48|0;g=h+32|0;f=h+16|0;e=h;if(!(b&4194368))e=0;else{c[e>>2]=d;i=(c[e>>2]|0)+(4-1)&~(4-1);d=c[i>>2]|0;c[e>>2]=i+4;e=d}c[f>>2]=a;c[f+4>>2]=b|32768;c[f+8>>2]=e;e=Ub(5,f|0)|0;if(!((b&524288|0)==0|(e|0)<0)){c[g>>2]=e;c[g+4>>2]=2;c[g+8>>2]=1;jb(221,g|0)|0}i=Wd(e)|0;l=h;return i|0}function hf(b){b=b|0;var d=0,e=0,f=0,g=0,h=0;h=l;l=l+80|0;e=h;d=df(b)|0;do if(d>>>0>=6?(f=b+d+-6|0,(ef(f,166716,6)|0)==0):0){d=100;while(1){ff(f)|0;if(le(b,e)|0)break;d=d+-1|0;if(!d){g=9;break}}if((g|0)==9){a[b>>0]=0;c[(Xd()|0)>>2]=17;break}if((c[(Xd()|0)>>2]|0)!=2)a[b>>0]=0}else g=4;while(0);if((g|0)==4){c[(Xd()|0)>>2]=22;a[b>>0]=0}l=h;return b|0}function jf(a,b){a=a|0;b=b|0;return cf(a,b,0)|0}function kf(a){a=a|0;return cf(a,0,0)|0}function lf(a){a=a|0;var b=0,d=0,e=0;b=df(a)|0;a:do if(b>>>0>=6?(d=a+b+-6|0,(ef(d,166716,6)|0)==0):0){b=100;do{ff(d)|0;if(!(ee(a,448)|0))break a;b=b+-1|0;if(!b)break}while((c[(Xd()|0)>>2]|0)==17);bD(d|0,166716,6)|0;a=0}else e=4;while(0);if((e|0)==4){c[(Xd()|0)>>2]=22;a=0}return a|0}function mf(a,b){a=a|0;b=b|0;return nf(a)|0}function nf(a){a=a|0;return (of(a)|0)!=(a|0)|0}function of(a){a=a|0;return pf(a,1)|0}function pf(c,f){c=c|0;f=f|0;var g=0,h=0,i=0,j=0,k=0,l=0,m=0;k=(f<<1)+-1|0;l=f+-1|0;a:do if(!((c+-43008|0)>>>0<22272|((c+-11776|0)>>>0<30784|((c+-1536|0)>>>0<2560|(qf(c)|0)==0)))){g=(f|0)!=0;if(g&(c+-4256|0)>>>0<46){if((c|0)>4293)switch(c|0){case 4295:case 4301:break;default:break a}c=c+7264|0;break}if((c+-11520|0)>>>0<38&(g^1)){c=c+-7264|0;break}g=0;do{i=a[640+(g<<2)+2>>0]|0;j=i<<24>>24;h=c-(e[640+(g<<2)>>1]|0)|0;if((h-(l&j)|0)>>>0<(d[640+(g<<2)+3>>0]|0)>>>0){m=11;break}g=g+1|0}while((g|0)!=61);if((m|0)==11)if(i<<24>>24==1){c=f+c-(h&1)|0;break}else{c=(N(k,j)|0)+c|0;break}i=1-f|0;g=b[896+(i<<1)>>1]|0;b:do if(g<<16>>16){h=0;while(1){if((g&65535|0)==(c|0))break;h=h+1|0;g=b[896+(h<<2)+(i<<1)>>1]|0;if(!(g<<16>>16))break b}c=e[896+(h<<2)+(f<<1)>>1]|0;break a}while(0);return ((c+-66600+(f*40|0)|0)>>>0<40?c+-40+(f*80|0)|0:c)|0}while(0);return c|0}function qf(a){a=a|0;if(a>>>0<131072)a=(d[1392+((d[1392+(a>>>8)>>0]|0)<<5|a>>>3&31)>>0]|0)>>>(a&7)&1;else a=a>>>0<196606&1;return a|0}function rf(a,b){a=a|0;b=b|0;return sf(a)|0}function sf(a){a=a|0;if(!(tf(a)|0))a=(uf(a)|0)!=0&1;else a=1;return a|0}function tf(a){a=a|0;return ((a|32)+-97|0)>>>0<26|0}function uf(a){a=a|0;return (a+-48|0)>>>0<10|0}function vf(a,b){a=a|0;b=b|0;return uf(a)|0}function wf(a,b){a=a|0;b=b|0;return xf(a)|0}function xf(a){a=a|0;return zf(a,c[(yf()|0)+188>>2]|0)|0}function yf(){return Ff()|0}function zf(b,e){b=b|0;e=e|0;var f=0,g=0;f=0;while(1){if((d[4368+f>>0]|0)==(b|0)){g=4;break}f=f+1|0;if((f|0)==87){b=87;g=5;break}}if((g|0)==4)if(!f)f=4464;else{b=f;g=5}if((g|0)==5){f=4464;do{do{g=f;f=f+1|0}while((a[g>>0]|0)!=0);b=b+-1|0}while((b|0)!=0)}return Af(f,c[e+20>>2]|0)|0}function Af(a,b){a=a|0;b=b|0;return Bf(a,b)|0}function Bf(a,b){a=a|0;b=b|0;if(!b)b=0;else b=Cf(c[b>>2]|0,c[b+4>>2]|0,a)|0;return ((b|0)==0?a:b)|0}function Cf(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0;o=(c[b>>2]|0)+1794895138|0;h=Df(c[b+8>>2]|0,o)|0;f=Df(c[b+12>>2]|0,o)|0;g=Df(c[b+16>>2]|0,o)|0;a:do if((h>>>0<d>>>2>>>0?(n=d-(h<<2)|0,f>>>0<n>>>0&g>>>0<n>>>0):0)?((g|f)&3|0)==0:0){n=f>>>2;m=g>>>2;l=0;while(1){j=h>>>1;k=l+j|0;i=k<<1;g=i+n|0;f=Df(c[b+(g<<2)>>2]|0,o)|0;g=Df(c[b+(g+1<<2)>>2]|0,o)|0;if(!(g>>>0<d>>>0&f>>>0<(d-g|0)>>>0)){f=0;break a}if(a[b+(g+f)>>0]|0){f=0;break a}f=Ef(e,b+g|0)|0;if(!f)break;f=(f|0)<0;if((h|0)==1){f=0;break a}l=f?l:k;h=f?j:h-j|0}f=i+m|0;g=Df(c[b+(f<<2)>>2]|0,o)|0;f=Df(c[b+(f+1<<2)>>2]|0,o)|0;if(f>>>0<d>>>0&g>>>0<(d-f|0)>>>0)f=(a[b+(f+g)>>0]|0)==0?b+f|0:0;else f=0}else f=0;while(0);return f|0}function Df(a,b){a=a|0;b=b|0;var c=0;c=aD(a|0)|0;return ((b|0)==0?a:c)|0}function Ef(b,c){b=b|0;c=c|0;var d=0,e=0;d=a[b>>0]|0;e=a[c>>0]|0;if(d<<24>>24==0?1:d<<24>>24!=e<<24>>24)b=e;else{do{b=b+1|0;c=c+1|0;d=a[b>>0]|0;e=a[c>>0]|0}while(!(d<<24>>24==0?1:d<<24>>24!=e<<24>>24));b=e}return (d&255)-(b&255)|0}function Ff(){return 161924}function Gf(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0,k=0,m=0,n=0,o=0,p=0;p=l;l=l+272|0;n=p;o=p+256|0;do if(!(a[d>>0]|0)){d=Dc(166723)|0;if(d|0?a[d>>0]|0:0)break;d=Dc(6272+(b*12|0)|0)|0;if(d|0?a[d>>0]|0:0)break;d=Dc(166730)|0;if(d|0?a[d>>0]|0:0)break;d=166735}while(0);e=0;a:while(1){switch(a[d+e>>0]|0){case 47:case 0:break a;default:{}}e=e+1|0;if(e>>>0>=15){e=15;break}}f=a[d>>0]|0;if(f<<24>>24!=46?(a[d+e>>0]|0)==0:0)if(f<<24>>24==67)m=15;else{k=d;m=16}else{d=166735;m=15}if((m|0)==15)if(!(a[d+1>>0]|0))m=18;else{k=d;m=16}b:do if((m|0)==16)if((Ef(k,166735)|0)!=0?(Ef(k,166743)|0)!=0:0){d=c[42890]|0;if(d|0)do{if(!(Ef(k,d+8|0)|0))break b;d=c[d+24>>2]|0}while((d|0)!=0);ea(171564);d=c[42890]|0;c:do if(d|0){while(1){if(!(Ef(k,d+8|0)|0))break;d=c[d+24>>2]|0;if(!d)break c}kc(171564);break b}while(0);d:do if(((c[42860]|0)==0?(g=Dc(166749)|0,(g|0)!=0):0)?(a[g>>0]|0)!=0:0){i=254-e|0;j=e+1|0;f=g;while(1){h=Hf(f,58)|0;d=a[h>>0]|0;g=h-f+((d<<24>>24!=0)<<31>>31)|0;if(g>>>0<i>>>0){bD(n|0,f|0,g|0)|0;f=n+g|0;a[f>>0]=47;bD(f+1|0,k|0,e|0)|0;a[n+(j+g)>>0]=0;f=fa(n|0,o|0)|0;if(f|0)break;d=a[h>>0]|0}f=h+(d<<24>>24!=0&1)|0;if(!(a[f>>0]|0)){m=41;break d}}d=ud(28)|0;if(!d){If(f,c[o>>2]|0)|0;m=41;break}else{c[d>>2]=f;c[d+4>>2]=c[o>>2];o=d+8|0;bD(o|0,k|0,e|0)|0;a[o+e>>0]=0;c[d+24>>2]=c[42890];c[42890]=d;break}}else m=41;while(0);if((m|0)==41){d=ud(28)|0;if(d){c[d>>2]=c[40360];c[d+4>>2]=c[40361];o=d+8|0;bD(o|0,k|0,e|0)|0;a[o+e>>0]=0;c[d+24>>2]=c[42890];c[42890]=d}}kc(171564);d=(b|0)==0&(d|0)==0?161440:d}else{d=k;m=18}while(0);do if((m|0)==18){if((b|0)==0?(a[d+1>>0]|0)==46:0){d=161440;break}d=0}while(0);l=p;return d|0}function Hf(b,d){b=b|0;d=d|0;var e=0,f=0,g=0;f=d&255;a:do if(!f)b=b+(df(b)|0)|0;else{if(b&3){e=d&255;do{g=a[b>>0]|0;if(g<<24>>24==0?1:g<<24>>24==e<<24>>24)break a;b=b+1|0}while((b&3|0)!=0)}f=N(f,16843009)|0;e=c[b>>2]|0;b:do if(!((e&-2139062144^-2139062144)&e+-16843009))do{g=e^f;if((g&-2139062144^-2139062144)&g+-16843009|0)break b;b=b+4|0;e=c[b>>2]|0}while(!((e&-2139062144^-2139062144)&e+-16843009|0));while(0);e=d&255;while(1){g=a[b>>0]|0;if(g<<24>>24==0?1:g<<24>>24==e<<24>>24)break;else b=b+1|0}}while(0);return b|0}function If(a,b){a=a|0;b=b|0;var d=0,e=0;d=l;l=l+16|0;e=d;gd[1&3]();c[e>>2]=a;c[e+4>>2]=b;b=Wd(gc(91,e|0)|0)|0;l=d;return b|0}function Jf(){return}function Kf(a){a=a|0;var b=0,d=0;b=(Lf()|0)+188|0;d=c[b>>2]|0;if(a|0)c[b>>2]=(a|0)==(-1|0)?171472:a;return ((d|0)==171472?-1:d)|0}function Lf(){return Ff()|0}function Mf(a){a=a|0;return Bf(a,c[(c[(Nf()|0)+188>>2]|0)+20>>2]|0)|0}function Nf(){return Ff()|0}function Of(b,d){b=b|0;d=d|0;var e=0,f=0;f=l;l=l+16|0;e=f;c[e+4>>2]=d;d=(a[(Pf(e,b,100)|0)>>0]|0)==59;l=f;return (d?c[e>>2]|0:-1)|0}function Pf(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0;g=e+-1|0;if((e|0)>=1){d=Qf(b,d,0,g)|0;if((a[d>>0]|0)==63){f=c[b>>2]|0;d=Pf(b,d+1|0,g)|0;if((a[d>>0]|0)==58){e=c[b>>2]|0;d=Pf(b,d+1|0,g)|0;if(!f)e=c[b>>2]|0;c[b>>2]=e}else d=172411}}else d=172411;return d|0}function Qf(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,i=0,j=0;i=f+-1|0;f=Sf(b,Rf(b,d,i)|0)|0;h=b+8|0;g=c[h>>2]|0;d=a[166762+g>>0]|0;a:do if((d|0)>(e|0))do{j=c[b>>2]|0;f=Qf(b,f,d,i)|0;if(Tf(b,g,j)|0){f=172411;break a}g=c[h>>2]|0;d=a[166762+g>>0]|0}while((d|0)>(e|0));while(0);return f|0}function Rf(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0;h=l;l=l+16|0;f=h;g=e+-1|0;a:do if((e|0)<1)d=172411;else{e=Uf(d)|0;if(uf(a[e>>0]|0)|0){g=Vf(e,f,10)|0;c[b>>2]=g;d=c[f>>2]|0;if((g|0)==-1|(d|0)==(e|0)){d=172411;break}d=Uf(d)|0;break}switch(a[e>>0]|0){case 110:{c[b>>2]=c[b+4>>2];d=Uf(e+1|0)|0;break a}case 40:{d=Pf(b,e+1|0,g)|0;if((a[d>>0]|0)!=41){d=172411;break a}d=Uf(d+1|0)|0;break a}case 33:{d=Rf(b,e+1|0,g)|0;c[b>>2]=(c[b>>2]|0)==0&1;break a}default:{d=172411;break a}}}while(0);l=h;return d|0}function Sf(b,d){b=b|0;d=d|0;var e=0,f=0,g=0;f=a[d>>0]|0;e=0;while(1){if(f<<24>>24==(a[166776+e>>0]|0)){g=3;break}e=e+1|0;if(e>>>0>=11){g=9;break}}a:do if((g|0)==3){f=d+1|0;do if(e>>>0<6)if((a[f>>0]|0)!=(a[166787+e>>0]|0))if(e>>>0>3)break;else{g=9;break a}else{c[b+8>>2]=e;d=d+2|0;break a}while(0);c[b+8>>2]=e+2;d=f}while(0);if((g|0)==9)c[b+8>>2]=13;return d|0}function Tf(a,b,d){a=a|0;b=b|0;d=d|0;var e=0;e=c[a>>2]|0;do switch(b|0){case 0:{c[a>>2]=(e|d|0)!=0&1;a=0;break}case 1:{c[a>>2]=(d|0)!=0&(e|0)!=0&1;a=0;break}case 2:{c[a>>2]=(e|0)==(d|0)&1;a=0;break}case 3:{c[a>>2]=(e|0)!=(d|0)&1;a=0;break}case 4:{c[a>>2]=e>>>0<=d>>>0&1;a=0;break}case 5:{c[a>>2]=e>>>0>=d>>>0&1;a=0;break}case 6:{c[a>>2]=e>>>0<d>>>0&1;a=0;break}case 7:{c[a>>2]=e>>>0>d>>>0&1;a=0;break}case 8:{c[a>>2]=e+d;a=0;break}case 9:{c[a>>2]=d-e;a=0;break}case 10:{c[a>>2]=N(e,d)|0;a=0;break}case 11:{if(!e)a=1;else{c[a>>2]=(d>>>0)%(e>>>0)|0;a=0}break}case 12:{if(!e)a=1;else{c[a>>2]=(d>>>0)/(e>>>0)|0;a=0}break}default:a=1}while(0);return a|0}function Uf(b){b=b|0;while(1)if(!(_f(a[b>>0]|0)|0))break;else b=b+1|0;return b|0}function Vf(a,b,c){a=a|0;b=b|0;c=c|0;c=Wf(a,b,c,-1,0)|0;return c|0}function Wf(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,i=0,j=0;j=l;l=l+128|0;h=j;c[h>>2]=0;i=h+4|0;c[i>>2]=a;c[h+44>>2]=a;g=h+8|0;c[g>>2]=(a|0)<0?-1:a+2147483647|0;c[h+76>>2]=-1;Xf(h,0);d=Yf(h,d,1,e,f)|0;if(b|0)c[b>>2]=a+((c[i>>2]|0)+(c[h+108>>2]|0)-(c[g>>2]|0));l=j;return d|0}function Xf(a,b){a=a|0;b=b|0;var d=0,e=0,f=0;c[a+104>>2]=b;d=c[a+8>>2]|0;e=c[a+4>>2]|0;f=d-e|0;c[a+108>>2]=f;if((b|0)!=0&(f|0)>(b|0))c[a+100>>2]=e+b;else c[a+100>>2]=d;return}function Yf(b,e,f,g,h){b=b|0;e=e|0;f=f|0;g=g|0;h=h|0;var i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0;a:do if(e>>>0>36){c[(Xd()|0)>>2]=22;h=0;g=0}else{r=b+4|0;q=b+100|0;do{i=c[r>>2]|0;if(i>>>0<(c[q>>2]|0)>>>0){c[r>>2]=i+1;i=d[i>>0]|0}else i=Zf(b)|0}while((_f(i)|0)!=0);b:do switch(i|0){case 43:case 45:{i=((i|0)==45)<<31>>31;j=c[r>>2]|0;if(j>>>0<(c[q>>2]|0)>>>0){c[r>>2]=j+1;p=i;i=d[j>>0]|0;break b}else{p=i;i=Zf(b)|0;break b}}default:p=0}while(0);j=(e|0)==0;do if((e|16|0)==16&(i|0)==48){i=c[r>>2]|0;if(i>>>0<(c[q>>2]|0)>>>0){c[r>>2]=i+1;i=d[i>>0]|0}else i=Zf(b)|0;if((i|32|0)!=120)if(j){o=8;n=47;break}else{n=32;break}i=c[r>>2]|0;if(i>>>0<(c[q>>2]|0)>>>0){c[r>>2]=i+1;i=d[i>>0]|0}else i=Zf(b)|0;if((d[6353+i>>0]|0)>15){g=(c[q>>2]|0)==0;if(!g)c[r>>2]=(c[r>>2]|0)+-1;if(!f){Xf(b,0);h=0;g=0;break a}if(g){h=0;g=0;break a}c[r>>2]=(c[r>>2]|0)+-1;h=0;g=0;break a}else{o=16;n=47}}else{e=j?10:e;if(e>>>0>(d[6353+i>>0]|0)>>>0)n=32;else{if(c[q>>2]|0)c[r>>2]=(c[r>>2]|0)+-1;Xf(b,0);c[(Xd()|0)>>2]=22;h=0;g=0;break a}}while(0);c:do if((n|0)==32)if((e|0)==10){e=i+-48|0;if(e>>>0<10){i=0;do{i=(i*10|0)+e|0;e=c[r>>2]|0;if(e>>>0<(c[q>>2]|0)>>>0){c[r>>2]=e+1;j=d[e>>0]|0}else j=Zf(b)|0;e=j+-48|0}while(e>>>0<10&i>>>0<429496729);if(e>>>0<10){m=0;do{f=WC(i|0,m|0,10,0)|0;k=y;l=((e|0)<0)<<31>>31;o=~l;if(k>>>0>o>>>0|(k|0)==(o|0)&f>>>0>~e>>>0){f=10;e=m;n=76;break c}i=QC(f|0,k|0,e|0,l|0)|0;m=y;e=c[r>>2]|0;if(e>>>0<(c[q>>2]|0)>>>0){c[r>>2]=e+1;j=d[e>>0]|0}else j=Zf(b)|0;e=j+-48|0}while(e>>>0<10&(m>>>0<429496729|(m|0)==429496729&i>>>0<2576980378));if(e>>>0>9){j=p;e=m}else{f=10;e=m;n=76}}else{j=p;e=0}}else{j=p;e=0;i=0}}else{o=e;n=47}while(0);d:do if((n|0)==47){if(!(o+-1&o)){n=a[166793+((o*23|0)>>>5&7)>>0]|0;f=a[6353+i>>0]|0;e=f&255;if(o>>>0>e>>>0){i=0;do{i=e|i<<n;e=c[r>>2]|0;if(e>>>0<(c[q>>2]|0)>>>0){c[r>>2]=e+1;j=d[e>>0]|0}else j=Zf(b)|0;f=a[6353+j>>0]|0;e=f&255}while(i>>>0<134217728&o>>>0>e>>>0);k=e;e=0}else{j=i;k=e;e=0;i=0}l=ZC(-1,-1,n|0)|0;m=y;if(o>>>0<=k>>>0|(m>>>0<e>>>0|(m|0)==(e|0)&l>>>0<i>>>0)){f=o;n=76;break}while(1){i=_C(i|0,e|0,n|0)|0;e=y;i=i|f&255;j=c[r>>2]|0;if(j>>>0<(c[q>>2]|0)>>>0){c[r>>2]=j+1;j=d[j>>0]|0}else j=Zf(b)|0;f=a[6353+j>>0]|0;if(o>>>0<=(f&255)>>>0|(e>>>0>m>>>0|(e|0)==(m|0)&i>>>0>l>>>0)){f=o;n=76;break d}}}e=a[6353+i>>0]|0;f=e&255;if(o>>>0>f>>>0){i=0;do{i=f+(N(i,o)|0)|0;e=c[r>>2]|0;if(e>>>0<(c[q>>2]|0)>>>0){c[r>>2]=e+1;j=d[e>>0]|0}else j=Zf(b)|0;e=a[6353+j>>0]|0;f=e&255}while(i>>>0<119304647&o>>>0>f>>>0);k=e;e=0}else{j=i;k=e;i=0;e=0}if(o>>>0>f>>>0){m=XC(-1,-1,o|0,0)|0;n=y;f=k;while(1){if(e>>>0>n>>>0|(e|0)==(n|0)&i>>>0>m>>>0){f=o;n=76;break d}k=WC(i|0,e|0,o|0,0)|0;l=y;f=f&255;if(l>>>0>4294967295|(l|0)==-1&k>>>0>~f>>>0){f=o;n=76;break d}i=QC(k|0,l|0,f|0,0)|0;e=y;j=c[r>>2]|0;if(j>>>0<(c[q>>2]|0)>>>0){c[r>>2]=j+1;j=d[j>>0]|0}else j=Zf(b)|0;f=a[6353+j>>0]|0;if(o>>>0<=(f&255)>>>0){f=o;n=76;break}}}else{f=o;n=76}}while(0);if((n|0)==76)if(f>>>0>(d[6353+j>>0]|0)>>>0){do{i=c[r>>2]|0;if(i>>>0<(c[q>>2]|0)>>>0){c[r>>2]=i+1;i=d[i>>0]|0}else i=Zf(b)|0}while(f>>>0>(d[6353+i>>0]|0)>>>0);c[(Xd()|0)>>2]=34;j=(g&1|0)==0&0==0?p:0;e=h;i=g}else j=p;if(c[q>>2]|0)c[r>>2]=(c[r>>2]|0)+-1;if(!(e>>>0<h>>>0|(e|0)==(h|0)&i>>>0<g>>>0)){if(!((g&1|0)!=0|0!=0|(j|0)!=0)){c[(Xd()|0)>>2]=34;g=QC(g|0,h|0,-1,-1)|0;h=y;break}if(e>>>0>h>>>0|(e|0)==(h|0)&i>>>0>g>>>0){c[(Xd()|0)>>2]=34;break}}g=((j|0)<0)<<31>>31;g=RC(i^j|0,e^g|0,j|0,g|0)|0;h=y}while(0);y=h;return g|0}function Zf(b){b=b|0;var e=0,f=0,g=0,h=0,i=0,j=0;f=b+104|0;i=c[f>>2]|0;if((i|0)!=0?(c[b+108>>2]|0)>=(i|0):0)j=4;else{e=$f(b)|0;if((e|0)>=0){f=c[f>>2]|0;i=c[b+8>>2]|0;if(f){h=c[b+4>>2]|0;f=f-(c[b+108>>2]|0)|0;g=i;if((i-h|0)<(f|0))j=9;else c[b+100>>2]=h+(f+-1)}else{g=i;j=9}if((j|0)==9)c[b+100>>2]=i;f=b+4|0;if(!g)f=c[f>>2]|0;else{f=c[f>>2]|0;b=b+108|0;c[b>>2]=g+1-f+(c[b>>2]|0)}f=f+-1|0;if((e|0)!=(d[f>>0]|0|0))a[f>>0]=e}else j=4}if((j|0)==4){c[b+100>>2]=0;e=-1}return e|0}function _f(a){a=a|0;return ((a|0)==32|(a+-9|0)>>>0<5)&1|0}function $f(a){a=a|0;var b=0,e=0;e=l;l=l+16|0;b=e;if((ag(a)|0)==0?(dd[c[a+32>>2]&31](a,b,1)|0)==1:0)a=d[b>>0]|0;else a=-1;l=e;return a|0}function ag(b){b=b|0;var d=0,e=0;d=b+74|0;e=a[d>>0]|0;a[d>>0]=e+255|e;d=b+20|0;e=b+28|0;if((c[d>>2]|0)>>>0>(c[e>>2]|0)>>>0)dd[c[b+36>>2]&31](b,0,0)|0;c[b+16>>2]=0;c[e>>2]=0;c[d>>2]=0;d=c[b>>2]|0;if(!(d&4)){e=(c[b+44>>2]|0)+(c[b+48>>2]|0)|0;c[b+8>>2]=e;c[b+4>>2]=e;d=d<<27>>31}else{c[b>>2]=d|32;d=-1}return d|0}function bg(a,b){a=a|0;b=b|0;return cg(a)|0}function cg(a){a=a|0;return (a+-48|0)>>>0<10|0}function dg(a){a=a|0;return (a|0)!=161468&((a|0)!=0&(a|0)!=171400)&1|0}function eg(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0;j=l;l=l+32|0;i=j;a:do if(!(dg(d)|0)){h=(d|0)!=0;f=0;g=0;do{e=1<<g&a;if(h&(e|0)==0)e=c[d+(g<<2)>>2]|0;else e=Gf(g,(e|0)==0?172411:b)|0;f=f+((e|0)!=0&1)|0;c[i+(g<<2)>>2]=e;g=g+1|0}while((g|0)!=6);switch(f&2147483647|0){case 0:{d=171400;break a}case 1:{if((c[i>>2]|0)==161440){d=161468;break a}break}default:{}}}else{e=0;do{if(1<<e&a|0)c[d+(e<<2)>>2]=Gf(e,b)|0;e=e+1|0}while((e|0)!=6)}while(0);l=j;return d|0}function fg(a,b){a=a|0;b=b|0;return gg(a)|0}function gg(a){a=a|0;return pf(a,0)|0}function hg(a){a=a|0;return 0}function ig(a,b,c){a=a|0;b=b|0;c=c|0;return jg(a,b)|0}function jg(a,b){a=a|0;b=b|0;switch(b|0){case 1:{a=gg(a)|0;break}case 2:{a=of(a)|0;break}default:{}}return a|0}function kg(a,b){a=a|0;b=b|0;return lg(a)|0}function lg(a){a=a|0;return mg(a)|0}function mg(a){a=a|0;return ((a|0)==32|(a|0)==9)&1|0}function ng(){return 162168}function og(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;return d|0}function pg(a,b){a=a|0;b=b|0;return qg(a)|0}function qg(a){a=a|0;if(a>>>0>=255)if((a+-57344|0)>>>0<8185|(a>>>0<8232|(a+-8234|0)>>>0<47062))a=1;else return (a&65534|0)!=65534&(a+-65532|0)>>>0<1048580&1|0;else a=(a+1&127)>>>0>32&1;return a|0}function rg(b,d){b=b|0;d=d|0;var e=0,f=0,g=0;g=b>>16;e=b&65535;a:do if((b|0)!=14){switch(g|0){case 1:{if(e>>>0>1){b=172411;break a}else{b=166808;f=8}break}case 2:{if(e>>>0>49){b=172411;break a}else{b=6624;f=8}break}case 4:{if(!e)b=172411;else{b=172411;break a}break}case 5:{if(e>>>0>3){b=172411;break a}else{b=6944;f=8}break}default:{b=172411;break a}}if((f|0)==8){if(e)do{do{f=b;b=b+1|0}while((a[f>>0]|0)!=0);e=e+-1|0}while((e|0)!=0);if((g|0)==1)break}if(a[b>>0]|0)b=Af(b,c[d+(g<<2)>>2]|0)|0}else{b=(c[c[(sg()|0)+188>>2]>>2]|0)==0;b=b?166802:166929}while(0);return b|0}function sg(){return Ff()|0}function tg(a){a=a|0;return rg(a,c[(sg()|0)+188>>2]|0)|0}function ug(a,b){a=a|0;b=b|0;return vg(a)|0}function vg(a){a=a|0;if(!(wg(a)|0))a=0;else a=(sf(a)|0)==0&1;return a|0}function wg(a){a=a|0;return (a+-33|0)>>>0<94|0}function xg(a,b){a=a|0;b=b|0;return yg(a)|0}function yg(a){a=a|0;return ((a+-48|0)>>>0<10|((a|32)+-97|0)>>>0<6)&1|0}function zg(a,b){a=a|0;b=b|0;return Ag(a)|0}function Ag(a){a=a|0;if(!(Ef(a,166811)|0))a=1;else{a=(Ef(a,166819)|0)==0;a=a?2:0}return a|0}function Bg(a,b){a=a|0;b=b|0;return mg(a)|0}function Cg(a,b){a=a|0;b=b|0;return Dg(a)|0}function Dg(a){a=a|0;if(!(Eg(a)|0))a=(qg(a)|0)!=0&1;else a=0;return a|0}function Eg(a){a=a|0;if(!a)a=0;else a=(Fg(6976,a)|0)!=0&1;return a|0}function Fg(a,b){a=a|0;b=b|0;var d=0,e=0;if(!b)a=a+((Gg(a)|0)<<2)|0;else{while(1){e=c[a>>2]|0;d=(e|0)==0;if(d|(e|0)==(b|0))break;else a=a+4|0}a=d?0:a}return a|0}function Gg(a){a=a|0;var b=0;b=a;while(1)if(!(c[b>>2]|0))break;else b=b+4|0;return b-a>>2|0}function Hg(a){a=a|0;var b=0;b=ud(24)|0;if(!b)b=0;else{a=(a|0)==(-1|0)?171472:a;c[b>>2]=c[a>>2];c[b+4>>2]=c[a+4>>2];c[b+8>>2]=c[a+8>>2];c[b+12>>2]=c[a+12>>2];c[b+16>>2]=c[a+16>>2];c[b+20>>2]=c[a+20>>2]}return b|0}function Ig(a,b){a=a|0;b=b|0;return Jg(a)|0}function Jg(a){a=a|0;if(!(cg(a)|0))a=(qf(a)|0)!=0&1;else a=1;return a|0}function Kg(){var a=0;a=c[42893]|0;return ((a|0)==0?166827:a)|0}function Lg(a){a=a|0;var b=0,d=0;do if(!a)b=Kg()|0;else{d=df(a)|0;if(d>>>0>255){c[(Xd()|0)>>2]=22;b=0;break}b=c[42893]|0;if(!b){b=ud(256)|0;c[42893]=b;if(!b){b=0;break}}bD(b|0,a|0,d+1|0)|0;b=c[42893]|0}while(0);return b|0}function Mg(a){a=a|0;return Ng(0,a)|0}function Ng(a,b){a=a|0;b=b|0;return Og(a,b,0,1,5)|0}function Og(b,d,e,f,g){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0,i=0,j=0,k=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0;u=l;l=l+16|0;j=u+4|0;p=u;k=c[(Pg()|0)+188>>2]|0;a:do if(g>>>0<=5){if(!b)b=Kg()|0;m=df(b)|0;if((m>>>0<=255?(n=Qg(b,j)|0,(n|0)!=0):0)?(i=c[k+(g<<2)>>2]|0,(i|0)!=0):0){x=i+8|0;v=a[166836+g>>0]|0;w=df(x)|0;z=c[j>>2]|0;y=z+1|0;i=m+2|0;j=i+w+v+y|0;k=j+4|0;r=Kc()|0;o=l;l=l+((1*k|0)+15&-16)|0;bD(o|0,n|0,z|0)|0;a[o+z>>0]=47;n=o+y|0;bD(n|0,x|0,w|0)|0;a[n+w>>0]=47;n=n+(w+1)|0;bD(n|0,7072+(g*12|0)|0,v|0)|0;a[n+v>>0]=47;g=n+(v+1)|0;bD(g|0,b|0,m|0)|0;a[g+m>>0]=46;a[g+(m+1)>>0]=109;a[g+i>>0]=111;a[g+(m+3)>>0]=0;b=c[42894]|0;b:do if(!b)m=12;else while(1){if(!(Ef(b+20|0,o)|0)){q=b;m=17;break b}b=c[b>>2]|0;if(!b){m=12;break}}while(0);c:do if((m|0)==12){i=fa(o|0,p|0)|0;do if(i|0){b=ud(j+24|0)|0;if(!b){If(i,c[p>>2]|0)|0;break}else{c[b+4>>2]=i;c[b+8>>2]=c[p>>2];bD(b+20|0,o|0,k|0)|0;q=c[42894]|0;c[b>>2]=q;Rg(171576,q,b)|0;q=b;m=17;break c}}while(0)}while(0);d:do if((m|0)==17?(s=q+4|0,t=q+8|0,h=Cf(c[s>>2]|0,c[t>>2]|0,d)|0,h|0):0){e:do if(e){k=q+12|0;if(!(c[k>>2]|0)){b=Cf(c[s>>2]|0,c[t>>2]|0,172411)|0;do if(b){i=0;while(1){if(!(Sg(b,166842,13)|0))break;i=Tg(b,10)|0;if(!i){m=36;break}else b=i+1|0}if((m|0)==36){c[p>>2]=0;i=166874;b=2;break}c[p>>2]=i;i=b+13|0;while(1)if(!(_f(a[i>>0]|0)|0))break;else i=i+1|0;if(!(Sg(i,166856,9)|0)){b=Vf(i+9|0,p,10)|0;i=c[p>>2]|0}else b=2;while(1){z=a[i>>0]|0;j=z<<24>>24==0;if(j^z<<24>>24!=59)i=i+1|0;else break}if(!j){while(1){j=i+1|0;if(!(_f(a[j>>0]|0)|0))break;else i=j}if(!(Sg(j,166866,7)|0))i=i+8|0;else i=166874}else i=166874}else{i=166874;b=2}while(0);z=q+16|0;Ug(z,b);Rg(k,0,i)|0;b=z}else b=q+16|0;if(c[b>>2]|0){i=Of(c[k>>2]|0,f)|0;if(i>>>0>(c[b>>2]|0)>>>0)break d;if(i){while(1){i=i+-1|0;z=(c[s>>2]|0)-h+(c[t>>2]|0)|0;b=(Vg(h,z)|0)+1|0;if(b>>>0>=z>>>0)break;h=h+b|0;if(!i)break e}Jc(r|0);m=7;break a}}}while(0);Jc(r|0);break a}while(0);Jc(r|0);m=7}else m=7}else m=7;while(0);if((m|0)==7)h=(f|0)==1?d:e;l=u;return h|0}function Pg(){return Ff()|0}function Qg(a,b){a=a|0;b=b|0;var d=0;d=c[42895]|0;a:do if(!d)d=0;else{while(1){if((Ef(c[d+12>>2]|0,a)|0)==0?c[d+8>>2]|0:0)break;d=c[d>>2]|0;if(!d){d=0;break a}}c[b>>2]=c[d+4>>2];d=c[d+16>>2]|0}while(0);return d|0}function Rg(a,b,d){a=a|0;b=b|0;d=d|0;if((c[a>>2]|0)==(b|0))c[a>>2]=d;return b|0}function Sg(b,c,e){b=b|0;c=c|0;e=e|0;var f=0,g=0;if(!e)f=0;else{f=a[b>>0]|0;a:do if(!(f<<24>>24))f=0;else while(1){e=e+-1|0;g=a[c>>0]|0;if(!(f<<24>>24==g<<24>>24&((e|0)!=0&g<<24>>24!=0)))break a;b=b+1|0;c=c+1|0;f=a[b>>0]|0;if(!(f<<24>>24)){f=0;break}}while(0);f=(f&255)-(d[c>>0]|0)|0}return f|0}function Tg(b,c){b=b|0;c=c|0;b=Hf(b,c)|0;return ((a[b>>0]|0)==(c&255)<<24>>24?b:0)|0}function Ug(a,b){a=a|0;b=b|0;c[a>>2]=b;return}function Vg(a,b){a=a|0;b=b|0;var c=0;c=Wg(a,0,b)|0;return ((c|0)==0?b:c-a|0)|0}function Wg(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,i=0;h=d&255;f=(e|0)!=0;a:do if(f&(b&3|0)!=0){g=d&255;while(1){if((a[b>>0]|0)==g<<24>>24){i=6;break a}b=b+1|0;e=e+-1|0;f=(e|0)!=0;if(!(f&(b&3|0)!=0)){i=5;break}}}else i=5;while(0);if((i|0)==5)if(f)i=6;else i=16;b:do if((i|0)==6){g=d&255;if((a[b>>0]|0)==g<<24>>24)if(!e){i=16;break}else break;f=N(h,16843009)|0;c:do if(e>>>0>3)while(1){h=c[b>>2]^f;if((h&-2139062144^-2139062144)&h+-16843009|0)break c;b=b+4|0;e=e+-4|0;if(e>>>0<=3){i=11;break}}else i=11;while(0);if((i|0)==11)if(!e){i=16;break}while(1){if((a[b>>0]|0)==g<<24>>24)break b;e=e+-1|0;if(!e){i=16;break}else b=b+1|0}}while(0);if((i|0)==16)b=0;return b|0}function Xg(a,b,c){a=a|0;b=b|0;c=c|0;return Yg(0,a,b,c)|0}function Yg(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;return Og(a,b,c,d,5)|0}function Zg(a,b){a=a|0;b=b|0;return _g(a)|0}function _g(a){a=a|0;var b=0;b=($g(a)|0)==0;return (b?a:a&95)|0}function $g(a){a=a|0;return (a+-97|0)>>>0<26|0}function ah(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;return bh(a,b,c)|0}function bh(b,c,e){b=b|0;c=c|0;e=e|0;var f=0,g=0,h=0;if(!e)b=0;else{f=a[b>>0]|0;a:do if(!(f<<24>>24))b=0;else{h=b;b=f;f=f&255;while(1){e=e+-1|0;g=a[c>>0]|0;if(!((e|0)!=0&g<<24>>24!=0))break a;if(b<<24>>24!=g<<24>>24?(g=ch(f)|0,(g|0)!=(ch(d[c>>0]|0)|0)):0)break;b=h+1|0;c=c+1|0;f=a[b>>0]|0;if(!(f<<24>>24)){b=0;break a}else{h=b;b=f;f=f&255}}b=a[h>>0]|0}while(0);b=ch(b&255)|0;b=b-(ch(d[c>>0]|0)|0)|0}return b|0}function ch(a){a=a|0;var b=0;b=(dh(a)|0)==0;return (b?a:a|32)|0}function dh(a){a=a|0;return (a+-65|0)>>>0<26|0}function eh(a,b){a=a|0;b=b|0;return $g(a)|0}function fh(a,b){a=a|0;b=b|0;return of(a)|0}function gh(a,b){a=a|0;b=b|0;return hh(a)|0}function hh(a){a=a|0;return (a+-32|0)>>>0<95|0}function ih(a,b){a=a|0;b=b|0;return wg(a)|0}function jh(a,b){a=a|0;b=b|0;return kh(a)|0}function kh(b){b=b|0;var c=0,d=0,e=0,f=0;e=a[b>>0]|0;c=1;d=7152;f=97;while(1){if(e<<24>>24==f<<24>>24?(Ef(b,d)|0)==0:0)break;d=d+6|0;f=a[d>>0]|0;if(!(f<<24>>24)){c=0;break}else c=c+1|0}return c|0}function lh(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;d=df(b)|0;if(d>>>0<c>>>0)mh(a,b)|0;return d|0}function mh(a,b){a=a|0;b=b|0;nh(a,b)|0;return a|0}function nh(b,d){b=b|0;d=d|0;var e=0,f=0;e=d;a:do if(!((e^b)&3)){if(e&3)do{e=a[d>>0]|0;a[b>>0]=e;if(!(e<<24>>24))break a;d=d+1|0;b=b+1|0}while((d&3|0)!=0);e=c[d>>2]|0;if(!((e&-2139062144^-2139062144)&e+-16843009)){f=b;while(1){d=d+4|0;b=f+4|0;c[f>>2]=e;e=c[d>>2]|0;if((e&-2139062144^-2139062144)&e+-16843009|0)break;else f=b}}f=10}else f=10;while(0);if((f|0)==10){f=a[d>>0]|0;a[b>>0]=f;if(f<<24>>24)do{d=d+1|0;b=b+1|0;f=a[d>>0]|0;a[b>>0]=f}while(f<<24>>24!=0)}return b|0}function oh(a,b,c){a=a|0;b=b|0;c=c|0;ph()|0;return lh(a,b,c,0)|0}function ph(){return Ff()|0}function qh(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var g=0;d=l;l=l+16|0;g=d;c[g>>2]=f;f=rh(a,b,e,g)|0;l=d;return f|0}function rh(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var g=0,i=0,j=0,k=0,m=0,n=0,o=0,p=0,q=0.0,r=0;p=l;l=l+16|0;n=p;a:do if(!d){g=b;o=27}else{g=b;b:while(1){i=a[e>>0]|0;switch(i<<24>>24){case 0:{o=27;break a}case 37:{e=e+1|0;j=a[e>>0]|0;if(j<<24>>24==37){i=37;o=4}else{i=0;c:while(1){j=j<<24>>24;switch(j|0){case 61:{e=e+1|0;break}case 33:case 43:case 40:case 94:break;case 45:{i=1;break}default:break c}j=e+1|0;e=j;j=a[j>>0]|0}if(!(uf(j)|0))j=0;else{j=0;do{j=(j*10|0)+-48+(a[e>>0]|0)|0;e=e+1|0}while((uf(a[e>>0]|0)|0)!=0)}m=a[e>>0]|0;if(m<<24>>24==35){e=e+1|0;if(!(uf(a[e>>0]|0)|0)){k=0;m=e}else{k=0;do{k=(k*10|0)+-48+(a[e>>0]|0)|0;e=e+1|0}while((uf(a[e>>0]|0)|0)!=0);m=e}e=m;m=a[m>>0]|0}else k=0;if(m<<24>>24==46){e=e+1|0;if(!(uf(a[e>>0]|0)|0))m=0;else{m=0;do{m=(m*10|0)+-48+(a[e>>0]|0)|0;e=e+1|0}while((uf(a[e>>0]|0)|0)!=0)}}else m=2;k=k+1+m|0;r=(c[f>>2]|0)+(8-1)&~(8-1);q=+h[r>>3];c[f>>2]=r+8;c[n>>2]=(i|0)==0&(j|0)>(k|0)?j:k;c[n+4>>2]=m;h[n+8>>3]=q;i=sh(g,d,166880,n)|0;if(d>>>0<=i>>>0)break b;g=g+i|0;d=d-i|0}break}default:o=4}if((o|0)==4){o=0;a[g>>0]=i;g=g+1|0;d=d+-1|0}if(!d){o=27;break a}else e=e+1|0}c[(Xd()|0)>>2]=7;g=-1}while(0);if((o|0)==27)g=g-b|0;l=p;return g|0}function sh(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,g=0;f=l;l=l+16|0;g=f;c[g>>2]=e;e=th(a,b,d,g)|0;l=f;return e|0}function th(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,i=0,j=0,k=0,m=0,n=0;n=l;l=l+128|0;g=n+124|0;m=n;h=m;i=162224;j=h+124|0;do{c[h>>2]=c[i>>2];h=h+4|0;i=i+4|0}while((h|0)<(j|0));if((d+-1|0)>>>0>2147483646)if(!d){b=g;d=1;k=4}else{c[(Xd()|0)>>2]=75;d=-1}else k=4;if((k|0)==4){k=-2-b|0;k=d>>>0>k>>>0?k:d;c[m+48>>2]=k;g=m+20|0;c[g>>2]=b;c[m+44>>2]=b;d=b+k|0;b=m+16|0;c[b>>2]=d;c[m+28>>2]=d;d=uh(m,e,f)|0;if(k){m=c[g>>2]|0;a[m+(((m|0)==(c[b>>2]|0))<<31>>31)>>0]=0}}l=n;return d|0}function uh(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,i=0,j=0,k=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0;s=l;l=l+224|0;n=s+208|0;p=s+160|0;q=s+80|0;r=s;f=p;g=f+40|0;do{c[f>>2]=0;f=f+4|0}while((f|0)<(g|0));c[n>>2]=c[e>>2];if((vh(0,d,n,q,p)|0)<0)e=-1;else{if((c[b+76>>2]|0)>-1)o=wh(b)|0;else o=0;e=c[b>>2]|0;m=e&32;if((a[b+74>>0]|0)<1)c[b>>2]=e&-33;f=b+48|0;if(!(c[f>>2]|0)){g=b+44|0;h=c[g>>2]|0;c[g>>2]=r;i=b+28|0;c[i>>2]=r;j=b+20|0;c[j>>2]=r;c[f>>2]=80;k=b+16|0;c[k>>2]=r+80;e=vh(b,d,n,q,p)|0;if(h){dd[c[b+36>>2]&31](b,0,0)|0;e=(c[j>>2]|0)==0?-1:e;c[g>>2]=h;c[f>>2]=0;c[k>>2]=0;c[i>>2]=0;c[j>>2]=0}}else e=vh(b,d,n,q,p)|0;f=c[b>>2]|0;c[b>>2]=f|m;if(o|0)xh(b);e=(f&32|0)==0?e:-1}l=s;return e|0}function vh(d,e,f,g,i){d=d|0;e=e|0;f=f|0;g=g|0;i=i|0;var j=0,k=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0;I=l;l=l+64|0;D=I+56|0;E=I+40|0;A=I;G=I+48|0;H=I+60|0;c[D>>2]=e;w=(d|0)!=0;x=A+40|0;z=x;A=A+39|0;B=G+4|0;j=0;e=0;m=0;a:while(1){do{do if((e|0)>-1)if((j|0)>(2147483647-e|0)){c[(Xd()|0)>>2]=75;e=-1;break}else{e=j+e|0;break}while(0);s=c[D>>2]|0;j=a[s>>0]|0;if(!(j<<24>>24)){v=94;break a}k=s;b:while(1){switch(j<<24>>24){case 37:{v=10;break b}case 0:{j=k;break b}default:{}}u=k+1|0;c[D>>2]=u;j=a[u>>0]|0;k=u}c:do if((v|0)==10){v=0;j=k;do{if((a[k+1>>0]|0)!=37)break c;j=j+1|0;k=k+2|0;c[D>>2]=k}while((a[k>>0]|0)==37)}while(0);j=j-s|0;if(w)yh(d,s,j)}while((j|0)!=0);u=(uf(a[(c[D>>2]|0)+1>>0]|0)|0)==0;k=c[D>>2]|0;if(!u?(a[k+2>>0]|0)==36:0){q=(a[k+1>>0]|0)+-48|0;o=1;j=3}else{q=-1;o=m;j=1}j=k+j|0;c[D>>2]=j;k=a[j>>0]|0;m=(k<<24>>24)+-32|0;if(m>>>0>31|(1<<m&75913|0)==0)n=0;else{n=0;do{n=1<<m|n;j=j+1|0;c[D>>2]=j;k=a[j>>0]|0;m=(k<<24>>24)+-32|0}while(!(m>>>0>31|(1<<m&75913|0)==0))}if(k<<24>>24==42){if((uf(a[j+1>>0]|0)|0)!=0?(F=c[D>>2]|0,(a[F+2>>0]|0)==36):0){j=F+1|0;c[i+((a[j>>0]|0)+-48<<2)>>2]=10;j=c[g+((a[j>>0]|0)+-48<<3)>>2]|0;m=1;k=F+3|0}else{if(o|0){e=-1;break}if(w){u=(c[f>>2]|0)+(4-1)&~(4-1);j=c[u>>2]|0;c[f>>2]=u+4}else j=0;m=0;k=(c[D>>2]|0)+1|0}c[D>>2]=k;u=(j|0)<0;t=u?0-j|0:j;n=u?n|8192:n;u=m}else{j=zh(D)|0;if((j|0)<0){e=-1;break}t=j;u=o;k=c[D>>2]|0}do if((a[k>>0]|0)==46){j=k+1|0;if((a[j>>0]|0)!=42){c[D>>2]=j;j=zh(D)|0;k=c[D>>2]|0;break}if(uf(a[k+2>>0]|0)|0?(C=c[D>>2]|0,(a[C+3>>0]|0)==36):0){j=C+2|0;c[i+((a[j>>0]|0)+-48<<2)>>2]=10;j=c[g+((a[j>>0]|0)+-48<<3)>>2]|0;k=C+4|0;c[D>>2]=k;break}if(u|0){e=-1;break a}if(w){r=(c[f>>2]|0)+(4-1)&~(4-1);j=c[r>>2]|0;c[f>>2]=r+4}else j=0;k=(c[D>>2]|0)+2|0;c[D>>2]=k}else j=-1;while(0);r=0;while(1){if(((a[k>>0]|0)+-65|0)>>>0>57){e=-1;break a}m=k;k=k+1|0;c[D>>2]=k;m=a[(a[m>>0]|0)+-65+(7232+(r*58|0))>>0]|0;o=m&255;if((o+-1|0)>>>0>=8)break;else r=o}if(!(m<<24>>24)){e=-1;break}p=(q|0)>-1;do if(m<<24>>24==19)if(p){e=-1;break a}else v=54;else{if(p){c[i+(q<<2)>>2]=o;p=g+(q<<3)|0;q=c[p+4>>2]|0;v=E;c[v>>2]=c[p>>2];c[v+4>>2]=q;v=54;break}if(!w){e=0;break a}Ah(E,o,f);k=c[D>>2]|0;v=55}while(0);if((v|0)==54){v=0;if(w)v=55;else j=0}d:do if((v|0)==55){v=0;k=a[k+-1>>0]|0;k=(r|0)!=0&(k&15|0)==3?k&-33:k;m=n&-65537;q=(n&8192|0)==0?n:m;e:do switch(k|0){case 110:switch((r&255)<<24>>24){case 0:{c[c[E>>2]>>2]=e;j=0;break d}case 1:{c[c[E>>2]>>2]=e;j=0;break d}case 2:{j=c[E>>2]|0;c[j>>2]=e;c[j+4>>2]=((e|0)<0)<<31>>31;j=0;break d}case 3:{b[c[E>>2]>>1]=e;j=0;break d}case 4:{a[c[E>>2]>>0]=e;j=0;break d}case 6:{c[c[E>>2]>>2]=e;j=0;break d}case 7:{j=c[E>>2]|0;c[j>>2]=e;c[j+4>>2]=((e|0)<0)<<31>>31;j=0;break d}default:{j=0;break d}}case 112:{k=120;j=j>>>0>8?j:8;m=q|8;v=67;break}case 88:case 120:{m=q;v=67;break}case 111:{m=E;k=c[m>>2]|0;m=c[m+4>>2]|0;p=Ch(k,m,x)|0;v=z-p|0;n=0;o=166886;j=(q&8|0)==0|(j|0)>(v|0)?j:v+1|0;v=73;break}case 105:case 100:{m=E;k=c[m>>2]|0;m=c[m+4>>2]|0;if((m|0)<0){k=RC(0,0,k|0,m|0)|0;m=y;n=E;c[n>>2]=k;c[n+4>>2]=m;n=1;o=166886;v=72;break e}else{n=(q&2049|0)!=0&1;o=(q&2048|0)==0?((q&1|0)==0?166886:166888):166887;v=72;break e}}case 117:{m=E;n=0;o=166886;k=c[m>>2]|0;m=c[m+4>>2]|0;v=72;break}case 99:{a[A>>0]=c[E>>2];r=A;n=0;o=166886;p=1;j=z;break}case 109:{k=xf(c[(Xd()|0)>>2]|0)|0;v=77;break}case 115:{k=c[E>>2]|0;k=(k|0)==0?167044:k;v=77;break}case 67:{c[G>>2]=c[E>>2];c[B>>2]=0;c[E>>2]=G;o=-1;v=81;break}case 83:{if(!j){Eh(d,32,t,0,q);j=0;v=91}else{o=j;v=81}break}case 65:case 71:case 70:case 69:case 97:case 103:case 102:case 101:{j=Gh(d,+h[E>>3],t,j,q,k)|0;break d}default:{r=s;n=0;o=166886;p=j;m=q;j=z}}while(0);f:do if((v|0)==67){s=E;r=c[s>>2]|0;s=c[s+4>>2]|0;p=Bh(r,s,x,k&32)|0;o=(m&8|0)==0|(r|0)==0&(s|0)==0;n=o?0:2;o=o?166886:166886+(k>>>4)|0;q=m;k=r;m=s;v=73}else if((v|0)==72){p=Dh(k,m,x)|0;v=73}else if((v|0)==77){v=0;s=Wg(k,0,j)|0;q=(s|0)==0;r=k;n=0;o=166886;p=q?j:s-k|0;j=q?k+j|0:s}else if((v|0)==81){v=0;n=c[E>>2]|0;j=0;while(1){k=c[n>>2]|0;if(!k)break;k=Fh(H,k)|0;m=(k|0)<0;if(m|k>>>0>(o-j|0)>>>0){v=85;break}j=k+j|0;if(o>>>0>j>>>0)n=n+4|0;else break}if((v|0)==85){v=0;if(m){e=-1;break a}}Eh(d,32,t,j,q);if(!j){j=0;v=91}else{m=c[E>>2]|0;n=0;while(1){k=c[m>>2]|0;if(!k){v=91;break f}k=Fh(H,k)|0;n=k+n|0;if((n|0)>(j|0)){v=91;break f}yh(d,H,k);if(n>>>0>=j>>>0){v=91;break}else m=m+4|0}}}while(0);if((v|0)==73){v=0;m=(k|0)!=0|(m|0)!=0;s=(j|0)!=0|m;m=z-p+((m^1)&1)|0;r=s?p:x;p=s?((j|0)>(m|0)?j:m):0;m=(j|0)>-1?q&-65537:q;j=z}else if((v|0)==91){v=0;Eh(d,32,t,j,q^8192);j=(t|0)>(j|0)?t:j;break}q=j-r|0;p=(p|0)<(q|0)?q:p;s=p+n|0;j=(t|0)<(s|0)?s:t;Eh(d,32,j,s,m);yh(d,o,n);Eh(d,48,j,s,m^65536);Eh(d,48,p,q,0);yh(d,r,q);Eh(d,32,j,s,m^8192)}while(0);m=u}g:do if((v|0)==94)if(!d)if(!m)e=0;else{e=1;while(1){j=c[i+(e<<2)>>2]|0;if(!j)break;Ah(g+(e<<3)|0,j,f);e=e+1|0;if(e>>>0>=10){e=1;break g}}while(1){if(c[i+(e<<2)>>2]|0){e=-1;break g}e=e+1|0;if(e>>>0>=10){e=1;break}}}while(0);l=I;return e|0}function wh(a){a=a|0;return 0}function xh(a){a=a|0;return}function yh(a,b,d){a=a|0;b=b|0;d=d|0;if(!(c[a>>2]&32))Mh(b,d,a)|0;return}function zh(b){b=b|0;var d=0,e=0;if(!(uf(a[c[b>>2]>>0]|0)|0))d=0;else{d=0;do{e=c[b>>2]|0;d=(d*10|0)+-48+(a[e>>0]|0)|0;e=e+1|0;c[b>>2]=e}while((uf(a[e>>0]|0)|0)!=0)}return d|0}function Ah(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0.0;a:do if(b>>>0<=20)do switch(b|0){case 9:{e=(c[d>>2]|0)+(4-1)&~(4-1);b=c[e>>2]|0;c[d>>2]=e+4;c[a>>2]=b;break a}case 10:{e=(c[d>>2]|0)+(4-1)&~(4-1);b=c[e>>2]|0;c[d>>2]=e+4;e=a;c[e>>2]=b;c[e+4>>2]=((b|0)<0)<<31>>31;break a}case 11:{e=(c[d>>2]|0)+(4-1)&~(4-1);b=c[e>>2]|0;c[d>>2]=e+4;e=a;c[e>>2]=b;c[e+4>>2]=0;break a}case 12:{e=(c[d>>2]|0)+(8-1)&~(8-1);b=e;f=c[b>>2]|0;b=c[b+4>>2]|0;c[d>>2]=e+8;e=a;c[e>>2]=f;c[e+4>>2]=b;break a}case 13:{f=(c[d>>2]|0)+(4-1)&~(4-1);e=c[f>>2]|0;c[d>>2]=f+4;e=(e&65535)<<16>>16;f=a;c[f>>2]=e;c[f+4>>2]=((e|0)<0)<<31>>31;break a}case 14:{f=(c[d>>2]|0)+(4-1)&~(4-1);e=c[f>>2]|0;c[d>>2]=f+4;f=a;c[f>>2]=e&65535;c[f+4>>2]=0;break a}case 15:{f=(c[d>>2]|0)+(4-1)&~(4-1);e=c[f>>2]|0;c[d>>2]=f+4;e=(e&255)<<24>>24;f=a;c[f>>2]=e;c[f+4>>2]=((e|0)<0)<<31>>31;break a}case 16:{f=(c[d>>2]|0)+(4-1)&~(4-1);e=c[f>>2]|0;c[d>>2]=f+4;f=a;c[f>>2]=e&255;c[f+4>>2]=0;break a}case 17:{f=(c[d>>2]|0)+(8-1)&~(8-1);g=+h[f>>3];c[d>>2]=f+8;h[a>>3]=g;break a}case 18:{f=(c[d>>2]|0)+(8-1)&~(8-1);g=+h[f>>3];c[d>>2]=f+8;h[a>>3]=g;break a}default:break a}while(0);while(0);return}function Bh(b,c,e,f){b=b|0;c=c|0;e=e|0;f=f|0;if(!((b|0)==0&(c|0)==0))do{e=e+-1|0;a[e>>0]=d[7696+(b&15)>>0]|0|f;b=ZC(b|0,c|0,4)|0;c=y}while(!((b|0)==0&(c|0)==0));return e|0}function Ch(b,c,d){b=b|0;c=c|0;d=d|0;if(!((b|0)==0&(c|0)==0))do{d=d+-1|0;a[d>>0]=b&7|48;b=ZC(b|0,c|0,3)|0;c=y}while(!((b|0)==0&(c|0)==0));return d|0}function Dh(b,c,d){b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0;if(c>>>0>0|(c|0)==0&b>>>0>4294967295){do{e=b;b=XC(b|0,c|0,10,0)|0;f=c;c=y;g=WC(b|0,c|0,10,0)|0;g=RC(e|0,f|0,g|0,y|0)|0;d=d+-1|0;a[d>>0]=g&255|48}while(f>>>0>9|(f|0)==9&e>>>0>4294967295);c=b}else c=b;if(c)do{g=c;c=(c>>>0)/10|0;d=d+-1|0;a[d>>0]=g-(c*10|0)|48}while(g>>>0>=10);return d|0}function Eh(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0;g=l;l=l+256|0;f=g;if((c|0)>(d|0)&(e&73728|0)==0){e=c-d|0;dD(f|0,b<<24>>24|0,(e>>>0<256?e:256)|0)|0;if(e>>>0>255){b=c-d|0;do{yh(a,f,256);e=e+-256|0}while(e>>>0>255);e=b&255}yh(a,f,e)}l=g;return}function Fh(a,b){a=a|0;b=b|0;if(!a)a=0;else a=Kh(a,b,0)|0;return a|0}function Gh(b,e,f,g,h,i){b=b|0;e=+e;f=f|0;g=g|0;h=h|0;i=i|0;var j=0,k=0,m=0,n=0,o=0,p=0,q=0,r=0.0,s=0,t=0,u=0,v=0,w=0,x=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0;H=l;l=l+560|0;m=H+32|0;v=H+536|0;G=H;F=G;n=H+540|0;c[v>>2]=0;E=n+12|0;Hh(e)|0;j=y;if((j|0)<0){e=-e;Hh(e)|0;D=1;C=166896;j=y}else{D=(h&2049|0)!=0&1;C=(h&2048|0)==0?((h&1|0)==0?166897:166902):166899}do if(0==0&(j&2146435072|0)==2146435072){G=(i&32|0)!=0;j=D+3|0;Eh(b,32,f,j,h&-65537);yh(b,C,D);yh(b,e!=e|0.0!=0.0?(G?166981:166923):G?166915:166919,3);Eh(b,32,f,j,h^8192)}else{r=+Ih(e,v)*2.0;j=r!=0.0;if(j)c[v>>2]=(c[v>>2]|0)+-1;u=i|32;if((u|0)==97){p=i&32;s=(p|0)==0?C:C+9|0;q=D|2;j=12-g|0;do if(!(g>>>0>11|(j|0)==0)){e=8.0;do{j=j+-1|0;e=e*16.0}while((j|0)!=0);if((a[s>>0]|0)==45){e=-(e+(-r-e));break}else{e=r+e-e;break}}else e=r;while(0);k=c[v>>2]|0;j=(k|0)<0?0-k|0:k;j=Dh(j,((j|0)<0)<<31>>31,E)|0;if((j|0)==(E|0)){j=n+11|0;a[j>>0]=48}a[j+-1>>0]=(k>>31&2)+43;o=j+-2|0;a[o>>0]=i+15;k=(g|0)<1;m=(h&8|0)==0;n=G;do{D=~~e;j=n+1|0;a[n>>0]=p|d[7696+D>>0];e=(e-+(D|0))*16.0;if((j-F|0)==1?!(m&(k&e==0.0)):0){a[j>>0]=46;n=n+2|0}else n=j}while(e!=0.0);if((g|0)!=0?(-2-F+n|0)<(g|0):0){k=E;m=o;j=g+2+k-m|0}else{k=E;m=o;j=k-F-m+n|0}E=j+q|0;Eh(b,32,f,E,h);yh(b,s,q);Eh(b,48,f,E,h^65536);F=n-F|0;yh(b,G,F);G=k-m|0;Eh(b,48,j-(F+G)|0,0,0);yh(b,o,G);Eh(b,32,f,E,h^8192);j=E;break}k=(g|0)<0?6:g;if(j){j=(c[v>>2]|0)+-28|0;c[v>>2]=j;e=r*268435456.0}else{e=r;j=c[v>>2]|0}B=(j|0)<0?m:m+288|0;m=B;do{z=~~e>>>0;c[m>>2]=z;m=m+4|0;e=(e-+(z>>>0))*1.0e9}while(e!=0.0);z=B;if((j|0)>0){p=B;while(1){o=(j|0)<29?j:29;j=m+-4|0;if(j>>>0>=p>>>0){n=0;do{t=_C(c[j>>2]|0,0,o|0)|0;t=QC(t|0,y|0,n|0,0)|0;w=y;n=XC(t|0,w|0,1e9,0)|0;x=WC(n|0,y|0,1e9,0)|0;x=RC(t|0,w|0,x|0,y|0)|0;c[j>>2]=x;j=j+-4|0}while(j>>>0>=p>>>0);if(n){x=p+-4|0;c[x>>2]=n;n=x}else n=p}else n=p;a:do if(m>>>0>n>>>0){j=m;while(1){m=j+-4|0;if(c[m>>2]|0){m=j;break a}if(m>>>0>n>>>0)j=m;else break}}while(0);j=(c[v>>2]|0)-o|0;c[v>>2]=j;if((j|0)>0)p=n;else break}}else n=B;if((j|0)<0){g=((k+25|0)/9|0)+1|0;t=(u|0)==102;do{s=0-j|0;s=(s|0)<9?s:9;if(n>>>0<m>>>0){o=(1<<s)+-1|0;p=1e9>>>s;q=0;j=n;do{x=c[j>>2]|0;c[j>>2]=(x>>>s)+q;q=N(x&o,p)|0;j=j+4|0}while(j>>>0<m>>>0);n=(c[n>>2]|0)==0?n+4|0:n;if(q){c[m>>2]=q;m=m+4|0}}else n=(c[n>>2]|0)==0?n+4|0:n;j=t?B:n;m=(m-j>>2|0)>(g|0)?j+(g<<2)|0:m;j=(c[v>>2]|0)+s|0;c[v>>2]=j}while((j|0)<0);t=n}else t=n;if(t>>>0<m>>>0){j=(z-t>>2)*9|0;o=c[t>>2]|0;if(o>>>0>=10){n=10;do{n=n*10|0;j=j+1|0}while(o>>>0>=n>>>0)}}else j=0;w=(u|0)==103;x=(k|0)!=0;n=k-((u|0)==102?0:j)+((x&w)<<31>>31)|0;if((n|0)<(((m-z>>2)*9|0)+-9|0)){v=n+9216|0;n=(v|0)/9|0;g=B+4+(n+-1024<<2)|0;n=v-(n*9|0)|0;if((n|0)<8){o=10;while(1){o=o*10|0;if((n|0)<7)n=n+1|0;else break}}else o=10;q=c[g>>2]|0;n=(q>>>0)/(o>>>0)|0;s=q-(N(n,o)|0)|0;p=(g+4|0)==(m|0);if(!(p&(s|0)==0)){r=(n&1|0)==0?9007199254740992.0:9007199254740994.0;v=o>>>1;e=s>>>0<v>>>0?.5:p&(s|0)==(v|0)?1.0:1.5;if(D){v=(a[C>>0]|0)==45;e=v?-e:e;r=v?-r:r}n=q-s|0;c[g>>2]=n;if(r+e!=r){v=n+o|0;c[g>>2]=v;if(v>>>0>999999999){o=g;j=t;while(1){n=o+-4|0;c[o>>2]=0;if(n>>>0<j>>>0){j=j+-4|0;c[j>>2]=0}v=(c[n>>2]|0)+1|0;c[n>>2]=v;if(v>>>0>999999999)o=n;else{o=j;break}}}else{n=g;o=t}j=(z-o>>2)*9|0;q=c[o>>2]|0;if(q>>>0>=10){p=10;do{p=p*10|0;j=j+1|0}while(q>>>0>=p>>>0)}}else{n=g;o=t}}else{n=g;o=t}v=n+4|0;m=m>>>0>v>>>0?v:m}else o=t;g=0-j|0;b:do if(m>>>0>o>>>0)while(1){n=m+-4|0;if(c[n>>2]|0){v=m;u=1;break b}if(n>>>0>o>>>0)m=n;else{v=n;u=0;break}}else{v=m;u=0}while(0);do if(w){k=k+((x^1)&1)|0;if((k|0)>(j|0)&(j|0)>-5){p=i+-1|0;k=k+-1-j|0}else{p=i+-2|0;k=k+-1|0}if(!(h&8)){if(u?(A=c[v+-4>>2]|0,(A|0)!=0):0)if(!((A>>>0)%10|0)){n=0;m=10;do{m=m*10|0;n=n+1|0}while(!((A>>>0)%(m>>>0)|0|0))}else n=0;else n=9;m=((v-z>>2)*9|0)+-9|0;if((p|32|0)==102){i=m-n|0;i=(i|0)>0?i:0;k=(k|0)<(i|0)?k:i;break}else{i=m+j-n|0;i=(i|0)>0?i:0;k=(k|0)<(i|0)?k:i;break}}}else p=i;while(0);t=(k|0)!=0;q=t?1:h>>>3&1;s=(p|32|0)==102;if(s){w=0;j=(j|0)>0?j:0}else{m=(j|0)<0?g:j;m=Dh(m,((m|0)<0)<<31>>31,E)|0;n=E;if((n-m|0)<2)do{m=m+-1|0;a[m>>0]=48}while((n-m|0)<2);a[m+-1>>0]=(j>>31&2)+43;j=m+-2|0;a[j>>0]=p;w=j;j=n-j|0}j=D+1+k+q+j|0;Eh(b,32,f,j,h);yh(b,C,D);Eh(b,48,f,j,h^65536);if(s){q=o>>>0>B>>>0?B:o;s=G+9|0;o=s;p=G+8|0;n=q;do{m=Dh(c[n>>2]|0,0,s)|0;if((n|0)==(q|0)){if((m|0)==(s|0)){a[p>>0]=48;m=p}}else if(m>>>0>G>>>0){dD(G|0,48,m-F|0)|0;do m=m+-1|0;while(m>>>0>G>>>0)}yh(b,m,o-m|0);n=n+4|0}while(n>>>0<=B>>>0);if(!((h&8|0)==0&(t^1)))yh(b,167761,1);if(n>>>0<v>>>0&(k|0)>0)while(1){m=Dh(c[n>>2]|0,0,s)|0;if(m>>>0>G>>>0){dD(G|0,48,m-F|0)|0;do m=m+-1|0;while(m>>>0>G>>>0)}yh(b,m,(k|0)<9?k:9);n=n+4|0;m=k+-9|0;if(!(n>>>0<v>>>0&(k|0)>9)){k=m;break}else k=m}Eh(b,48,k+9|0,9,0)}else{v=u?v:o+4|0;if(o>>>0<v>>>0&(k|0)>-1){g=G+9|0;t=(h&8|0)==0;u=g;q=0-F|0;s=G+8|0;p=o;do{m=Dh(c[p>>2]|0,0,g)|0;if((m|0)==(g|0)){a[s>>0]=48;m=s}do if((p|0)==(o|0)){n=m+1|0;yh(b,m,1);if(t&(k|0)<1){m=n;break}yh(b,167761,1);m=n}else{if(m>>>0<=G>>>0)break;dD(G|0,48,m+q|0)|0;do m=m+-1|0;while(m>>>0>G>>>0)}while(0);F=u-m|0;yh(b,m,(k|0)>(F|0)?F:k);k=k-F|0;p=p+4|0}while(p>>>0<v>>>0&(k|0)>-1)}Eh(b,48,k+18|0,18,0);yh(b,w,E-w|0)}Eh(b,32,f,j,h^8192)}while(0);l=H;return ((j|0)<(f|0)?f:j)|0}function Hh(a){a=+a;var b=0;h[j>>3]=a;b=c[j>>2]|0;y=c[j+4>>2]|0;return b|0}function Ih(a,b){a=+a;b=b|0;return +(+Jh(a,b))}function Jh(a,b){a=+a;b=b|0;var d=0,e=0,f=0;h[j>>3]=a;d=c[j>>2]|0;e=c[j+4>>2]|0;f=ZC(d|0,e|0,52)|0;switch(f&2047){case 0:{if(a!=0.0){a=+Jh(a*18446744073709551616.0,b);d=(c[b>>2]|0)+-64|0}else d=0;c[b>>2]=d;break}case 2047:break;default:{c[b>>2]=(f&2047)+-1022;c[j>>2]=d;c[j+4>>2]=e&-2146435073|1071644672;a=+h[j>>3]}}return +a}function Kh(b,d,e){b=b|0;d=d|0;e=e|0;do if(b){if(d>>>0<128){a[b>>0]=d;b=1;break}if(!(c[c[(Lh()|0)+188>>2]>>2]|0))if((d&-128|0)==57216){a[b>>0]=d;b=1;break}else{c[(Xd()|0)>>2]=84;b=-1;break}if(d>>>0<2048){a[b>>0]=d>>>6|192;a[b+1>>0]=d&63|128;b=2;break}if(d>>>0<55296|(d&-8192|0)==57344){a[b>>0]=d>>>12|224;a[b+1>>0]=d>>>6&63|128;a[b+2>>0]=d&63|128;b=3;break}if((d+-65536|0)>>>0<1048576){a[b>>0]=d>>>18|240;a[b+1>>0]=d>>>12&63|128;a[b+2>>0]=d>>>6&63|128;a[b+3>>0]=d&63|128;b=4;break}else{c[(Xd()|0)>>2]=84;b=-1;break}}else b=1;while(0);return b|0}function Lh(){return Ff()|0}function Mh(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,i=0,j=0;f=e+16|0;g=c[f>>2]|0;if(!g)if(!(Nh(e)|0)){g=c[f>>2]|0;h=5}else f=0;else h=5;a:do if((h|0)==5){j=e+20|0;i=c[j>>2]|0;f=i;if((g-i|0)>>>0<d>>>0){f=dd[c[e+36>>2]&31](e,b,d)|0;break}b:do if((a[e+75>>0]|0)<0|(d|0)==0){h=0;g=b}else{i=d;while(1){g=i+-1|0;if((a[b+g>>0]|0)==10)break;if(!g){h=0;g=b;break b}else i=g}f=dd[c[e+36>>2]&31](e,b,i)|0;if(f>>>0<i>>>0)break a;h=i;g=b+i|0;d=d-i|0;f=c[j>>2]|0}while(0);bD(f|0,g|0,d|0)|0;c[j>>2]=(c[j>>2]|0)+d;f=h+d|0}while(0);return f|0}function Nh(b){b=b|0;var d=0,e=0;d=b+74|0;e=a[d>>0]|0;a[d>>0]=e+255|e;d=c[b>>2]|0;if(!(d&8)){c[b+8>>2]=0;c[b+4>>2]=0;e=c[b+44>>2]|0;c[b+28>>2]=e;c[b+20>>2]=e;c[b+16>>2]=e+(c[b+48>>2]|0);b=0}else{c[b>>2]=d|32;b=-1}return b|0}function Oh(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0;e=a+20|0;f=c[e>>2]|0;a=(c[a+16>>2]|0)-f|0;a=a>>>0>d>>>0?d:a;bD(f|0,b|0,a|0)|0;c[e>>2]=(c[e>>2]|0)+a;return d|0}function Ph(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,g=0;f=l;l=l+16|0;g=f;c[g>>2]=e;Qh()|0;e=rh(a,b,d,g)|0;l=f;return e|0}function Qh(){return Ff()|0}function Rh(a,b){a=a|0;b=b|0;return dh(a)|0}function Sh(a,b){a=a|0;b=b|0;return ch(a)|0}function Th(a,b,c){a=a|0;b=b|0;c=c|0;return Ef(a,b)|0}function Uh(a,b){a=a|0;b=b|0;Vh()|0;return Th(a,b,0)|0}function Vh(){return Ff()|0}function Wh(a,b){a=a|0;b=b|0;return Eg(a)|0}function Xh(a,b,c){a=a|0;b=b|0;c=c|0;return Yh(a,b)|0}function Yh(a,b){a=a|0;b=b|0;var d=0,e=0;d=c[a>>2]|0;e=c[b>>2]|0;if((e|0)==0|((d|0)==0|(d|0)!=(e|0)))a=e;else{do{a=a+4|0;b=b+4|0;d=c[a>>2]|0;e=c[b>>2]|0}while(!((e|0)==0|((d|0)==0|(d|0)!=(e|0))));a=e}return d-a|0}function Zh(a,b){a=a|0;b=b|0;_h()|0;return Xh(a,b,0)|0}function _h(){return Ff()|0}function $h(a,b){a=a|0;b=b|0;return tf(a)|0}function ai(a,b){a=a|0;b=b|0;return bi(a)|0}function bi(a){a=a|0;if(a>>>0<131072)a=(d[7712+((d[7712+(a>>>8)>>0]|0)<<5|a>>>3&31)>>0]|0)>>>(a&7)&1;else a=0;return a|0}function ci(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,i=0;h=l;l=l+16|0;d=h;a:do if(!a)d=0;else{if(!b){c[d>>2]=0;d=Qg(a,d)|0;break}e=df(a)|0;f=df(b)|0;if(e>>>0>255|f>>>0>4095){c[(Xd()|0)>>2]=22;d=0;break}ea(171584);d=c[42895]|0;b:do if(!d)g=11;else while(1){if((Ef(c[d+12>>2]|0,a)|0)==0?(Ef(c[d+16>>2]|0,b)|0)==0:0){f=d;break b}d=c[d>>2]|0;if(!d){g=11;break}}while(0);do if((g|0)==11){d=ud(e+22+f|0)|0;if(!d){kc(171584);d=0;break a}else{c[d>>2]=c[42895];c[d+4>>2]=f;i=d+20|0;c[d+12>>2]=i;g=d+16|0;c[g>>2]=i+e+1;bD(i|0,a|0,e+1|0)|0;bD(c[g>>2]|0,b|0,f+1|0)|0;Rg(171580,c[42895]|0,d)|0;f=d;break}}while(0);Ug(f+8|0,1);d=c[42895]|0;if(d|0){e=f+12|0;do{if(!((d|0)==(f|0)|(Ef(c[e>>2]|0,a)|0)!=0))Ug(d+8|0,0);d=c[d>>2]|0}while((d|0)!=0)}kc(171584);d=c[f+16>>2]|0}while(0);l=h;return d|0}function di(a,b,c){a=a|0;b=b|0;c=c|0;return Og(a,b,0,1,c)|0}function ei(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0;h=l;l=l+16|0;g=h;do if(b>>>0>6)d=0;else{ea(171592);if((b|0)!=6){d=fi(b,d)|0;kc(171592);break}if(d|0){c[g>>2]=c[2720];c[g+4>>2]=c[2721];c[g+8>>2]=c[2722];c[g+12>>2]=c[2723];f=0;do{b=Hf(d,59)|0;e=b-d|0;if((e|0)<16){bD(g|0,d|0,e|0)|0;a[g+e>>0]=0;d=(a[b>>0]|0)==0?d:b+1|0}fi(f,g)|0;f=f+1|0}while((f|0)!=6)}d=170192;b=0;while(1){g=c[171472+(b<<2)>>2]|0;g=(g|0)==0?166927:g+8|0;e=df(g)|0;bD(d|0,g|0,e|0)|0;a[d+e>>0]=59;b=b+1|0;if((b|0)==6)break;else d=d+(e+1)|0}a[d+e>>0]=0;kc(171592);d=170192}while(0);l=h;return d|0}function fi(a,b){a=a|0;b=b|0;if(!b)a=c[171472+(a<<2)>>2]|0;else{b=Gf(a,b)|0;c[171472+(a<<2)>>2]=b;a=b}return ((a|0)==0?166927:a+8|0)|0}function gi(a,b){a=a|0;b=b|0;return hi(a)|0}function hi(a){a=a|0;return (a>>>0<32|(a|0)==127)&1|0}function ii(a){a=a|0;if(dg(a)|0)vd(a);return}function ji(a,b){a=a|0;b=b|0;return qf(a)|0}function ki(a,b,c){a=a|0;b=b|0;c=c|0;return li(a,b)|0}function li(a,b){a=a|0;b=b|0;do switch(b|0){case 1:{a=Jg(a)|0;break}case 2:{a=qf(a)|0;break}case 3:{a=lg(a)|0;break}case 4:{a=mi(a)|0;break}case 5:{a=cg(a)|0;break}case 6:{a=Dg(a)|0;break}case 7:{a=ni(a)|0;break}case 8:{a=qg(a)|0;break}case 9:{a=bi(a)|0;break}case 10:{a=Eg(a)|0;break}case 11:{a=nf(a)|0;break}case 12:{a=yg(a)|0;break}default:a=0}while(0);return a|0}function mi(a){a=a|0;return ((a+-65529|0)>>>0<3|((a&-2|0)==8232|(a>>>0<32|(a+-127|0)>>>0<33)))&1|0}function ni(a){a=a|0;return (gg(a)|0)!=(a|0)|0}function oi(a,b){a=a|0;b=b|0;return mi(a)|0}function pi(a,b,c){a=a|0;b=b|0;c=c|0;return qi(a,b)|0}function qi(b,c){b=b|0;c=c|0;var e=0,f=0,g=0;e=a[b>>0]|0;a:do if(!(e<<24>>24))b=0;else{g=b;b=e;f=e&255;while(1){e=a[c>>0]|0;if(!(e<<24>>24))break a;if(b<<24>>24!=e<<24>>24?(f=ch(f)|0,(f|0)!=(ch(d[c>>0]|0)|0)):0)break;b=g+1|0;c=c+1|0;e=a[b>>0]|0;if(!(e<<24>>24)){b=0;break a}else{g=b;b=e;f=e&255}}b=a[g>>0]|0}while(0);g=ch(b&255)|0;return g-(ch(d[c>>0]|0)|0)|0}function ri(a,b){a=a|0;b=b|0;return si(a)|0}function si(a){a=a|0;return (((a|32)+-97|0)>>>0<6|(uf(a)|0)!=0)&1|0}function ti(a,b){a=a|0;b=b|0;return -1|0}function ui(a,b){a=a|0;b=b|0;return _f(a)|0}function vi(a,b){a=a|0;b=b|0;if(b|0?qi(b,166929)|0:0)c[(Xd()|0)>>2]=22;return 0}function wi(a,b){a=a|0;b=b|0;var e=0;a=xi(a)|0;if(((a|0)!=-1?(e=xi(b)|0,(e|0)!=-1):0)?(d[10896+a>>0]|0)<=207:0)a=e<<16|a;else{c[(Xd()|0)>>2]=22;a=-1}return a|0}function xi(b){b=b|0;var c=0,d=0,e=0;d=(a[b>>0]|0)==0?10896:b;b=10896;while(1){if(!(yi(d,b)|0)){e=3;break}b=b+((df(b)|0)+1)|0;c=a[b>>0]|0;if(!(c<<24>>24)){c=a[b+1>>0]|0;if((c&255)>128)c=2;else c=(((128-(c&255)|0)>>>2)*5|0)+2|0;c=b+c|0;b=c;c=a[c>>0]|0}if(!(c<<24>>24)){b=-1;break}}if((e|0)==3){if(a[b>>0]|0)do b=b+((df(b)|0)+1)|0;while((a[b>>0]|0)!=0);b=b+1-10896|0}return b|0}function yi(b,c){b=b|0;c=c|0;var d=0,e=0,f=0,g=0;d=a[b>>0]|0;a:do if(!(d<<24>>24)){d=0;g=9}else while(1){f=a[c>>0]|0;if(!(f<<24>>24)){g=9;break a}e=d;d=d&255;while(1){if(!((d+-48|0)>>>0>10&((d|32)+-97|0)>>>0>26)){d=e;break}b=b+1|0;d=a[b>>0]|0;if(!(d<<24>>24)){d=0;break}else{e=d;d=d&255}}if((d|32)<<24>>24!=f<<24>>24){d=1;break a}b=b+1|0;c=c+1|0;d=a[b>>0]|0;if(!(d<<24>>24)){d=0;g=9;break}}while(0);if((g|0)==9)d=d<<24>>24!=(a[c>>0]|0)&1;return d|0}function zi(a){a=a|0;return 0}function Ai(f,g,h,i,j){f=f|0;g=g|0;h=h|0;i=i|0;j=j|0;var k=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0;R=l;l=l+32|0;K=R;L=R+16|0;M=R+12|0;N=R+8|0;O=R+20|0;v=f;f=v&65535;v=10896+(v>>>16)|0;t=v+1|0;w=10896+f|0;u=w+1|0;P=K;c[P>>2]=0;c[P+4>>2]=0;v=a[v>>0]|0;w=a[w>>0]|0;P=(Bi()|0)+188|0;Q=c[P>>2]|0;do if(((g|0)!=0?(c[g>>2]|0)!=0:0)?(k=c[h>>2]|0,(k|0)!=0):0){c[P>>2]=161468;x=v&255;y=w&255;z=(x+-192|0)>>>0<7;A=x+128|0;B=(v&-2)<<24>>24==-60;C=y+128|0;D=(x&254|0)==196;E=v<<24>>24==-38;F=128-y|0;G=(F|0)==0;H=v<<24>>24==-40;J=y+-192|0;I=J>>>0>8;J=166935+J|0;s=f;f=0;p=c[g>>2]|0;r=k;a:while(1){o=a[p>>0]|0;m=o&255;b:do if(o<<24>>24<0|z){do switch(v<<24>>24){case -57:{f=84;q=115;break a}case -56:{k=Ci(L,p,r,K)|0;switch(k|0){case -1:{f=84;q=115;break a}case -2:{f=22;break a}case 0:{k=1;break}default:{}}m=c[L>>2]|0;q=87;break b}case -58:{if(r>>>0<4){f=22;break a}m=c[p>>2]|0;q=14;break}case -61:case -64:{if(r>>>0<4){f=22;break a}m=Di(p,x)|0;q=14;break}case -63:case -62:case -59:case -60:{if(r>>>0<2){f=22;break a}m=Ei(p,x)|0;switch(m&-1024|0){case 56320:{f=84;q=115;break a}case 55296:break;default:{k=2;q=87;break b}}if(D){f=84;q=115;break a}if(r>>>0<4){f=22;break a}n=(Ei(p+2|0,x)|0)+-56320|0;if(n>>>0>1023){f=84;q=115;break a}k=4;m=(m<<10)+-56557568+n|0;q=87;break b}case -47:{if((m+-161|0)>>>0<63){k=1;m=m+65216|0;q=87;break b}if(r>>>0<2){f=22;break a}n=a[p+1>>0]|0;o=n&255;k=m+-129|0;if(k>>>0>=31){if((m&240|0)!=224){f=84;q=115;break a}k=m+-193|0}k=k<<1;m=o+-64|0;if(m>>>0<95){if(n<<24>>24==127){f=84;q=115;break a}m=m+(n<<24>>24>>7<<24>>24)|0}else{m=o+-159|0;q=m>>>0<94;m=q?m:o;k=k|q&1}m=b[15264+(k*188|0)+(m<<1)>>1]|0;if(!(m<<16>>16)){f=84;q=115;break a}else{k=2;m=m&65535;q=87;break b}}case -48:{if(r>>>0<2){f=22;break a}n=d[p+1>>0]|0;if(o<<24>>24!=-114){m=m+-161|0;k=n+-161|0;if(m>>>0>83|k>>>0>93){f=84;q=115;break a}m=b[15264+(m*188|0)+(k<<1)>>1]|0;if(!(m<<16>>16)){f=84;q=115;break a}else{k=2;m=m&65535;q=87;break b}}else{if((n+-161|0)>>>0>62){f=84;q=115;break a}k=2;m=n+65216|0;q=87;break b}}case -38:{if((o&255)<161){f=84;q=115;break a}break}case -40:case -39:break;case -32:{if(r>>>0<2){f=22;break a}k=d[p+1>>0]|0;n=k+-64|0;if(n>>>0>190|(k+-127|0)>>>0<34){f=84;q=115;break a}n=n>>>0>62?k+-98|0:n;k=m+-161|0;if(k>>>0<=88){m=e[89296+(k*314|0)+(n<<1)>>1]|0;c:do if((k|0)==39){switch(n|0){case 66:case 58:case 60:{k=131072;break c}default:{}}k=0}else k=0;while(0);m=k|m;if(!m){f=84;q=115;break a}else{k=2;q=87;break b}}k=m+-135|0;if(k>>>0>119){f=84;q=115;break a}m=n+(((o&255)<161?k:m+-224|0)*157|0)|0;n=e[78944+(m<<1)>>1]|0;m=(e[78944+((m>>>4)+4867<<1)>>1]|0)>>>(m&15)<<17&131072|n;if((m&196352|0)!=56320)if(!m){f=84;q=115;break a}else{k=2;q=87;break b}if(I)k=2;else k=a[J>>0]|0;if(k>>>0>(c[j>>2]|0)>>>0){f=7;q=115;break a}c[M>>2]=166945+(n&255);c[N>>2]=4;k=2;f=(Ai(s,M,N,i,j)|0)+f|0;break b}case -24:{if(r>>>0<2){f=22;break a}n=a[p+1>>0]|0;o=n&255;p=m+-161|0;k=o+-161|0;if(!(p>>>0>92|k>>>0>93)){m=b[117248+(p*188|0)+(k<<1)>>1]|0;if(!(m<<16>>16)){f=84;q=115;break a}else{k=2;m=m&65535;q=87;break b}}m=m+-129|0;if(m>>>0>92){f=84;q=115;break a}if(m>>>0>68&(n&255)>82){f=84;q=115;break a}k=o+-65|0;do if(k>>>0>=26){if((o+-97|0)>>>0<26){k=o+-71|0;break}if((o+-129|0)>>>0>=126){f=84;q=115;break a}k=o+-77|0}while(0);m=(m>>>0<32?m*178|0:(p*84|0)+5696|0)+44032+k|0;if(m>>>0<44032){k=2;q=87;break b}q=44032;while(1){p=m-q|0;n=0;k=0;do{o=0;do{k=k+(((e[117248+(n*188|0)+(o<<1)>>1]|0)-q|0)>>>0<=p>>>0&1)|0;o=o+1|0}while((o|0)!=94);n=n+1|0}while((n|0)!=93);q=m+1|0;m=k+m|0;if(m>>>0<q>>>0){k=2;q=87;break b}}}default:{if(A>>>0>m>>>0){k=1;q=87;break b}q=m-A|0;p=(q*5|0)>>>2;q=q<<1&6;q=d[t+(p+1)>>0]<<8-q&1023|(d[t+p>>0]|0)>>>q;m=(q|0)==0?m:e[134736+(q<<1)>>1]|0;if((m|0)==1){f=84;q=115;break a}else{k=1;q=87;break b}}}while(0);if((q|0)==14)if(m>>>0>1114111|(m&-2048|0)==55296){f=84;q=115;break a}else{k=4;q=87;break}n=m+-129|0;if(n>>>0>125){f=84;q=115;break a}if(r>>>0<2){f=22;break a}k=a[p+1>>0]|0;o=k&255;if(E&(k&255)<161){f=84;q=115;break a}m=o+-64|0;if(!(k<<24>>24==127|m>>>0>190)){k=2;m=e[31056+(n*380|0)+((m>>>0>63?o+-65|0:m)<<1)>>1]|0;q=87;break}if(!(H&(o+-48|0)>>>0<10)){f=84;q=115;break a}if(r>>>0<4){f=22;break a}m=(d[p+2>>0]|0)+-129|0;if(m>>>0>126){f=84;q=115;break a}k=(d[p+3>>0]|0)+-48|0;if(k>>>0>9){f=84;q=115;break a}q=0;m=(((n*10|0)+o|0)*1260|0)+-60352+(m*10|0)+k|0;do{p=m-q|0;o=0;k=0;do{n=0;do{k=k+(((e[31056+(o*380|0)+(n<<1)>>1]|0)-q|0)>>>0<=p>>>0&1)|0;n=n+1|0}while((n|0)!=190);o=o+1|0}while((o|0)!=126);q=m+1|0;m=k+m|0}while(m>>>0>=q>>>0);k=4;q=87}else{k=1;q=87}while(0);d:do if((q|0)==87){q=0;switch(w<<24>>24){case -58:{n=c[j>>2]|0;if(n>>>0<4){f=7;q=115;break a}p=c[i>>2]|0;c[p>>2]=m;c[i>>2]=p+4;c[j>>2]=n+-4;break d}case -56:{if((c[j>>2]|0)>>>0<4){m=Fh(O,m)|0;if((c[j>>2]|0)>>>0<m>>>0){q=93;break a}n=c[i>>2]|0;bD(n|0,O|0,m|0)|0}else{n=c[i>>2]|0;m=Fh(n,m)|0}c[i>>2]=n+m;c[j>>2]=(c[j>>2]|0)-m;break d}case -57:{if(m>>>0>127)q=97;break}case -63:case -62:case -59:case -60:{n=c[j>>2]|0;if(B|m>>>0<65536){if(n>>>0<2){f=7;q=115;break a}p=c[i>>2]|0;Fi(p,m>>>0>65535?65533:m,y);c[i>>2]=p+2;c[j>>2]=(c[j>>2]|0)+-2;break d}else{if(n>>>0<4){f=7;q=115;break a}o=m+-65536|0;p=c[i>>2]|0;Fi(p,o>>>10|55296,y);Fi(p+2|0,o&1023|56320,y);c[i>>2]=p+4;c[j>>2]=(c[j>>2]|0)+-4;break d}}case -61:case -64:{if((c[j>>2]|0)>>>0<4){f=7;q=115;break a}p=c[i>>2]|0;Gi(p,m,y);c[i>>2]=p+4;c[j>>2]=(c[j>>2]|0)+-4;break d}default:{}}e:while(1){if((q|0)==97){q=0;m=42;f=f+1|0}if(!(c[j>>2]|0)){f=7;q=115;break a}if(m>>>0<C>>>0)break;if(G){q=97;continue}n=0;while(1){p=(n*5|0)>>>2;q=n<<1&6;if((m|0)==(e[134736+((d[u+(p+1)>>0]<<8-q&1023|(d[u+p>>0]|0)>>>q)<<1)>>1]|0)){q=104;break e}n=n+1|0;if(n>>>0>=F>>>0){q=97;continue e}}}if((q|0)==104){q=0;m=n+128|0}p=c[i>>2]|0;c[i>>2]=p+1;a[p>>0]=m;c[j>>2]=(c[j>>2]|0)+-1}while(0);p=(c[g>>2]|0)+k|0;c[g>>2]=p;r=r-k|0;c[h>>2]=r;if(!r){q=114;break}}if((q|0)==93)f=7;else if((q|0)==114){c[P>>2]=Q;break}c[(Xd()|0)>>2]=f;c[P>>2]=Q;f=-1}else f=0;while(0);l=R;return f|0}function Bi(){return Ff()|0}function Ci(b,e,f,g){b=b|0;e=e|0;f=f|0;g=g|0;var h=0,i=0,j=0,k=0,m=0,n=0;m=l;l=l+16|0;h=m;j=(g|0)==0?171600:g;g=c[j>>2]|0;a:do if(!e)if(!g)g=0;else k=19;else{i=(b|0)==0?h:b;if(!f)g=-2;else{if(!g){g=a[e>>0]|0;if(g<<24>>24>-1){c[i>>2]=g&255;g=g<<24>>24!=0&1;break}h=(c[c[(Hi()|0)+188>>2]>>2]|0)==0;g=a[e>>0]|0;if(h){c[i>>2]=g<<24>>24&57343;g=1;break}g=(g&255)+-194|0;if(g>>>0>50){k=19;break}g=c[176+(g<<2)>>2]|0;h=f+-1|0;if(h){e=e+1|0;k=11}}else{h=f;k=11}b:do if((k|0)==11){b=d[e>>0]|0;n=b>>>3;if((n+-16|n+(g>>26))>>>0>7){k=19;break a}g=b+-128|g<<6;b=h+-1|0;if((g|0)<0)do{e=e+1|0;if(!b)break b;h=a[e>>0]|0;if((h&-64)<<24>>24!=-128){k=19;break a}g=(h&255)+-128|g<<6;b=b+-1|0}while((g|0)<0);c[j>>2]=0;c[i>>2]=g;g=f-b|0;break a}while(0);c[j>>2]=g;g=-2}}while(0);if((k|0)==19){c[j>>2]=0;c[(Xd()|0)>>2]=84;g=-1}l=m;return g|0}function Di(a,b){a=a|0;b=b|0;b=b&3;return (d[a+(b^1)>>0]|0)<<16|(d[a+b>>0]|0)<<24|(d[a+(b^2)>>0]|0)<<8|(d[a+(b^3)>>0]|0)|0}function Ei(a,b){a=a|0;b=b|0;b=b&1;return (d[a+b>>0]|0)<<8|(d[a+(b^1)>>0]|0)|0}function Fi(b,c,d){b=b|0;c=c|0;d=d|0;d=d&1;a[b+d>>0]=c>>>8;a[b+(d^1)>>0]=c;return}function Gi(b,c,d){b=b|0;c=c|0;d=d|0;d=d&3;a[b+d>>0]=c>>>24;a[b+(d^1)>>0]=c>>>16;a[b+(d^2)>>0]=c>>>8;a[b+(d^3)>>0]=c;return}function Hi(){return Ff()|0}function Ii(a,b){a=a|0;b=b|0;return ni(a)|0}function Ji(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0;e=Gg(b)|0;if(e>>>0>=d>>>0){f=d+-1|0;if(d|0){Ki(a,b,f)|0;c[a+(f<<2)>>2]=0}}else Ki(a,b,e+1|0)|0;return e|0}function Ki(a,b,d){a=a|0;b=b|0;d=d|0;var e=0;if(d|0){e=a;while(1){d=d+-1|0;c[e>>2]=c[b>>2];if(!d)break;else{b=b+4|0;e=e+4|0}}}return a|0}function Li(a,b,c){a=a|0;b=b|0;c=c|0;Mi()|0;return Ji(a,b,c,0)|0}function Mi(){return Ff()|0}function Ni(a){a=a|0;if(!(a&-3073))a=Oi(a)|0;else a=-1;return a|0}function Oi(a){a=a|0;return 0}function Pi(a,b){a=a|0;b=b|0;return 0}function Qi(a){a=a|0;return 0}function Ri(a){a=a|0;return 0}function Si(a){a=a|0;return 0}function Ti(a){a=a|0;return 0}function Ui(a){a=a|0;return 0}function Vi(a){a=a|0;return 0}function Wi(a){a=a|0;return 0}function Xi(){var a=0;a=Yi()|0;switch(a>>>10|a<<22|0){case 3:{a=0;break}case 0:{a=1;break}case 2:{a=2;break}case 1:{a=3;break}default:a=-1}return a|0}function Yi(){return 0}function Zi(a,c){a=a|0;c=c|0;b[a>>1]=Ti(c)|0;return 0}function _i(a,b){a=a|0;b=b|0;var d=0,e=0;d=l;l=l+16|0;e=d;c[e>>2]=a;c[e+4>>2]=b;b=Wd(Fa(151,e|0)|0)|0;l=d;return b|0}function $i(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,i=0,j=0;i=l;l=l+48|0;h=i+16|0;g=i;if(d>>>0>2147483646){c[(Xd()|0)>>2]=12;g=-1}else{if(!(e&2))g=0;else{gd[1&3]();c[g>>2]=f;j=(c[g>>2]|0)+(4-1)&~(4-1);f=c[j>>2]|0;c[g>>2]=j+4;g=f}c[h>>2]=a;c[h+4>>2]=b;c[h+8>>2]=d;c[h+12>>2]=e;c[h+16>>2]=g;g=Wd(Ia(163,h|0)|0)|0}l=i;return g|0}function aj(){var a=0,b=0;b=l;l=l+16|0;a=Wd(Ha(153,b|0)|0)|0;l=b;return a|0}function bj(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0;e=l;l=l+16|0;f=e;c[f>>2]=a;c[f+4>>2]=b;c[f+8>>2]=d;d=Wd(ya(144,f|0)|0)|0;l=e;return d|0}function cj(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0;e=l;l=l+16|0;f=e;g=a&-16384;c[f>>2]=g;c[f+4>>2]=(a+b+16384+-1&-16384)-g;c[f+8>>2]=d;d=Wd(sa(125,f|0)|0)|0;l=e;return d|0}function dj(b,d){b=b|0;d=d|0;var e=0,f=0,g=0;while(1)if((a[b>>0]|0)==47)b=b+1|0;else break;f=Hf(b,47)|0;do if((f|0)==(b|0)|(a[f>>0]|0)!=0)g=7;else{e=f-b|0;if((e|0)<3){if((a[b>>0]|0)==46?(a[f+-1>>0]|0)==46:0){g=7;break}}else if((e|0)>255){c[(Xd()|0)>>2]=36;d=0;break}bD(d|0,166962,9)|0;bD(d+9|0,b|0,e+1|0)|0}while(0);if((g|0)==7){c[(Xd()|0)>>2]=22;d=0}return d|0}function ej(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0;g=l;l=l+288|0;f=g+272|0;e=g+276|0;a=dj(a,g)|0;if(!a)a=-1;else{Oc(1,e|0)|0;c[f>>2]=d;a=gf(a,b|657408,f)|0;Oc(c[e>>2]|0,0)|0}l=g;return a|0}function fj(a){a=a|0;var b=0;b=l;l=l+272|0;a=dj(a,b)|0;if(!a)a=-1;else a=gj(a)|0;l=b;return a|0}function gj(a){a=a|0;var b=0,d=0;b=l;l=l+16|0;d=b;c[d>>2]=a;a=Wd(la(10,d|0)|0)|0;l=b;return a|0}function hj(a,b,d,e,f,g){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0,i=0;i=l;l=l+32|0;h=i;do if((g&4095|0)==0&(((g|0)<0)<<31>>31&-4096|0)==0){if(b>>>0>2147483646){c[(Xd()|0)>>2]=12;a=-1;break}if(e&16|0)gd[1&3]();c[h>>2]=a;c[h+4>>2]=b;c[h+8>>2]=d;c[h+12>>2]=e;c[h+16>>2]=f;c[h+20>>2]=g>>12;a=Wd(Oa(192,h|0)|0)|0}else{c[(Xd()|0)>>2]=22;a=-1}while(0);l=i;return a|0}function ij(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0;e=l;l=l+16|0;f=e;c[f>>2]=a;c[f+4>>2]=b;c[f+8>>2]=d;d=Wd(gb(218,f|0)|0)|0;l=e;return d|0}function jj(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0;f=l;l=l+16|0;e=f;if((d|0)==4)a=0;else{c[e>>2]=a;c[e+4>>2]=b;c[e+8>>2]=d;a=0-(hb(219,e|0)|0)|0}l=f;return a|0}function kj(a,b){a=a|0;b=b|0;var d=0,e=0;d=l;l=l+16|0;e=d;c[e>>2]=a;c[e+4>>2]=b;b=Wd(Ea(150,e|0)|0)|0;l=d;return b|0}function lj(a){a=a|0;var b=0,d=0;b=l;l=l+16|0;d=b;c[d>>2]=a;a=Wd(Ga(152,d|0)|0)|0;l=b;return a|0}function mj(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0;e=l;l=l+16|0;f=e;c[f>>2]=a;c[f+4>>2]=b;c[f+8>>2]=d;d=Wd(hb(219,f|0)|0)|0;l=e;return d|0}function nj(a,b){a=a|0;b=b|0;var d=0,e=0;d=l;l=l+16|0;e=d;c[e>>2]=b;b=gf(a,577,e)|0;l=d;return b|0}function oj(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,g=0;f=l;l=l+32|0;g=f;c[g>>2]=a;c[g+4>>2]=0;c[g+8>>2]=b;c[g+12>>2]=b>>31;c[g+16>>2]=d;c[g+20>>2]=d>>31;c[g+24>>2]=e;e=0-(mb(272,g|0)|0)|0;l=f;return e|0}function pj(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0,k=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0;s=l;l=l+192|0;i=s+168|0;h=s+152|0;r=s+136|0;q=s+120|0;p=s+112|0;m=s+96|0;k=s+80|0;f=s+64|0;n=s+48|0;g=s+32|0;e=s+16|0;t=s;j=s+184|0;c[t>>2]=d;d=(c[t>>2]|0)+(4-1)&~(4-1);o=c[d>>2]|0;c[t>>2]=d+4;o=(b|0)==4?o|32768:o;a:do switch(b|0){case 14:{c[e>>2]=a;c[e+4>>2]=14;c[e+8>>2]=o;d=Wd(jb(221,e|0)|0)|0;break}case 9:{c[g>>2]=a;c[g+4>>2]=16;c[g+8>>2]=j;d=jb(221,g|0)|0;switch(d|0){case -22:{c[n>>2]=a;c[n+4>>2]=9;c[n+8>>2]=o;d=jb(221,n|0)|0;break}case 0:{d=c[j+4>>2]|0;d=(c[j>>2]|0)==2?0-d|0:d;break}default:d=Wd(d)|0}break}case 1030:{c[f>>2]=a;c[f+4>>2]=1030;c[f+8>>2]=o;d=jb(221,f|0)|0;if((d|0)!=-22){if((d|0)>-1){c[k>>2]=d;c[k+4>>2]=2;c[k+8>>2]=1;jb(221,k|0)|0}d=Wd(d)|0;break a}c[m>>2]=a;c[m+4>>2]=1030;c[m+8>>2]=0;d=jb(221,m|0)|0;if((d|0)==-22){c[q>>2]=a;c[q+4>>2]=0;c[q+8>>2]=o;d=jb(221,q|0)|0;if((d|0)>-1){c[r>>2]=d;c[r+4>>2]=2;c[r+8>>2]=1;jb(221,r|0)|0}d=Wd(d)|0;break a}else{if((d|0)>-1){c[p>>2]=d;Yb(6,p|0)|0}d=Wd(-22)|0;break a}}case 15:case 16:case 12:case 13:{c[h>>2]=a;c[h+4>>2]=b;c[h+8>>2]=o;d=Wd(jb(221,h|0)|0)|0;break}default:{c[i>>2]=a;c[i+4>>2]=b;c[i+8>>2]=o;d=Wd(jb(221,i|0)|0)|0}}while(0);l=s;return d|0}function qj(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,i=0;h=l;l=l+32|0;g=h+16|0;f=h;if(!(d&4194368))f=0;else{c[f>>2]=e;i=(c[f>>2]|0)+(4-1)&~(4-1);e=c[i>>2]|0;c[f>>2]=i+4;f=e}c[g>>2]=a;c[g+4>>2]=b;c[g+8>>2]=d|32768;c[g+12>>2]=f;i=Wd(ob(295,g|0)|0)|0;l=h;return i|0}function rj(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0;e=l;l=l+32|0;f=e;c[f>>2]=a;c[f+4>>2]=0;c[f+8>>2]=b;c[f+12>>2]=b>>31;c[f+16>>2]=d;c[f+20>>2]=d>>31;d=0-(Db(324,f|0)|0)|0;l=e;return d|0}function sj(a){a=a|0;return ((a|0)>0?a:0-a|0)|0}function tj(a,b){a=a|0;b=b|0;return +(+uj(a,b,0))}function uj(a,b,d){a=a|0;b=b|0;d=d|0;var e=0.0,f=0,g=0,h=0,i=0;i=l;l=l+128|0;h=i;f=h;g=f+124|0;do{c[f>>2]=0;f=f+4|0}while((f|0)<(g|0));f=h+4|0;c[f>>2]=a;g=h+8|0;c[g>>2]=-1;c[h+44>>2]=a;c[h+76>>2]=-1;Xf(h,0);e=+vj(h,d,1);d=(c[f>>2]|0)-(c[g>>2]|0)+(c[h+108>>2]|0)|0;if(b|0)c[b>>2]=(d|0)==0?a:a+d|0;l=i;return +e}function vj(b,e,f){b=b|0;e=e|0;f=f|0;var g=0.0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0;switch(e|0){case 0:{l=-149;m=24;j=4;break}case 1:{l=-1074;m=53;j=4;break}case 2:{l=-1074;m=53;j=4;break}default:g=0.0}a:do if((j|0)==4){o=b+4|0;n=b+100|0;do{e=c[o>>2]|0;if(e>>>0<(c[n>>2]|0)>>>0){c[o>>2]=e+1;e=d[e>>0]|0}else e=Zf(b)|0}while((_f(e)|0)!=0);b:do switch(e|0){case 43:case 45:{i=1-(((e|0)==45&1)<<1)|0;e=c[o>>2]|0;if(e>>>0<(c[n>>2]|0)>>>0){c[o>>2]=e+1;h=d[e>>0]|0;break b}else{h=Zf(b)|0;break b}}default:{h=e;i=1}}while(0);e=0;while(1){if((h|32|0)!=(a[166972+e>>0]|0))break;do if(e>>>0<7){h=c[o>>2]|0;if(h>>>0<(c[n>>2]|0)>>>0){c[o>>2]=h+1;h=d[h>>0]|0;break}else{h=Zf(b)|0;break}}while(0);e=e+1|0;if(e>>>0>=8){e=8;break}}c:do switch(e&2147483647|0){case 8:break;case 3:{j=23;break}default:{k=(f|0)!=0;if(k&e>>>0>3)if((e|0)==8)break c;else{j=23;break c}d:do if(!e){e=0;while(1){if((h|32|0)!=(a[166981+e>>0]|0))break d;do if(e>>>0<2){h=c[o>>2]|0;if(h>>>0<(c[n>>2]|0)>>>0){c[o>>2]=h+1;h=d[h>>0]|0;break}else{h=Zf(b)|0;break}}while(0);e=e+1|0;if(e>>>0>=3){e=3;break}}}while(0);switch(e|0){case 3:{e=c[o>>2]|0;if(e>>>0<(c[n>>2]|0)>>>0){c[o>>2]=e+1;e=d[e>>0]|0}else e=Zf(b)|0;if((e|0)!=40){if(!(c[n>>2]|0)){g=r;break a}c[o>>2]=(c[o>>2]|0)+-1;g=r;break a}e=1;while(1){h=c[o>>2]|0;if(h>>>0<(c[n>>2]|0)>>>0){c[o>>2]=h+1;h=d[h>>0]|0}else h=Zf(b)|0;if(!((h+-48|0)>>>0<10|(h+-65|0)>>>0<26)?!((h|0)==95|(h+-97|0)>>>0<26):0)break;e=e+1|0}if((h|0)==41){g=r;break a}h=(c[n>>2]|0)==0;if(!h)c[o>>2]=(c[o>>2]|0)+-1;if(!k){c[(Xd()|0)>>2]=22;Xf(b,0);g=0.0;break a}if(!e){g=r;break a}while(1){e=e+-1|0;if(!h)c[o>>2]=(c[o>>2]|0)+-1;if(!e){g=r;break a}}}case 0:{if((h|0)==48){e=c[o>>2]|0;if(e>>>0<(c[n>>2]|0)>>>0){c[o>>2]=e+1;e=d[e>>0]|0}else e=Zf(b)|0;if((e|32|0)==120){g=+wj(b,m,l,i,f);break a}if(!(c[n>>2]|0))e=48;else{c[o>>2]=(c[o>>2]|0)+-1;e=48}}else e=h;g=+xj(b,e,m,l,i,f);break a}default:{if(c[n>>2]|0)c[o>>2]=(c[o>>2]|0)+-1;c[(Xd()|0)>>2]=22;Xf(b,0);g=0.0;break a}}}}while(0);if((j|0)==23){h=(c[n>>2]|0)==0;if(!h)c[o>>2]=(c[o>>2]|0)+-1;if((f|0)!=0&e>>>0>3)do{if(!h)c[o>>2]=(c[o>>2]|0)+-1;e=e+-1|0}while(e>>>0>3)}g=+(i|0)*s}while(0);return +g}function wj(a,b,e,f,g){a=a|0;b=b|0;e=e|0;f=f|0;g=g|0;var h=0.0,i=0,j=0,k=0.0,l=0,m=0,n=0.0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,z=0;z=a+4|0;i=c[z>>2]|0;x=a+100|0;if(i>>>0<(c[x>>2]|0)>>>0){c[z>>2]=i+1;i=d[i>>0]|0}else i=Zf(a)|0;j=0;a:while(1){switch(i|0){case 46:{w=10;break a}case 48:break;default:{p=0;m=j;l=0;j=0;break a}}i=c[z>>2]|0;if(i>>>0<(c[x>>2]|0)>>>0){c[z>>2]=i+1;i=d[i>>0]|0}else i=Zf(a)|0;j=1}if((w|0)==10){i=c[z>>2]|0;if(i>>>0<(c[x>>2]|0)>>>0){c[z>>2]=i+1;i=d[i>>0]|0}else i=Zf(a)|0;if((i|0)==48){l=0;j=0;do{i=c[z>>2]|0;if(i>>>0<(c[x>>2]|0)>>>0){c[z>>2]=i+1;i=d[i>>0]|0}else i=Zf(a)|0;l=QC(l|0,j|0,-1,-1)|0;j=y}while((i|0)==48);p=1;m=1}else{p=1;m=j;l=0;j=0}}o=0;n=1.0;h=0.0;v=0;s=p;t=m;u=0;m=0;while(1){q=i+-48|0;p=i|32;if(q>>>0>=10){r=(i|0)==46;if(!(r|(p+-97|0)>>>0<6))break;if(r)if(!s){s=1;k=n;q=v;r=t;l=m;j=u;p=u}else{i=46;break}else w=24}else w=24;if((w|0)==24){w=0;i=(i|0)>57?p+-87|0:q;do if(!((u|0)<0|(u|0)==0&m>>>0<8))if((u|0)<0|(u|0)==0&m>>>0<14){n=n*.0625;k=n;h=h+n*+(i|0);i=v;break}else{i=(o|0)!=0|(i|0)==0;o=i?o:1;k=n;h=i?h:h+n*.5;i=v;break}else{k=n;i=i+(v<<4)|0}while(0);m=QC(m|0,u|0,1,0)|0;q=i;r=1;p=y}i=c[z>>2]|0;if(i>>>0<(c[x>>2]|0)>>>0){c[z>>2]=i+1;i=d[i>>0]|0}else i=Zf(a)|0;n=k;v=q;t=r;u=p}do if(!t){i=(c[x>>2]|0)==0;if(!i)c[z>>2]=(c[z>>2]|0)+-1;if(g){if(!i?(c[z>>2]=(c[z>>2]|0)+-1,!((s|0)==0|i)):0)c[z>>2]=(c[z>>2]|0)+-1}else Xf(a,0);h=+(f|0)*0.0}else{o=(s|0)==0;p=o?m:l;o=o?u:j;if((u|0)<0|(u|0)==0&m>>>0<8){j=v;l=u;while(1){j=j<<4;w=m;m=QC(m|0,l|0,1,0)|0;if(!((l|0)<0|(l|0)==0&w>>>0<7)){m=j;break}else l=y}}else m=v;if((i|32|0)==112){j=yj(a,g)|0;i=y;if((j|0)==0&(i|0)==-2147483648){if(!g){Xf(a,0);h=0.0;break}if(!(c[x>>2]|0)){j=0;i=0}else{c[z>>2]=(c[z>>2]|0)+-1;j=0;i=0}}}else if(!(c[x>>2]|0)){j=0;i=0}else{c[z>>2]=(c[z>>2]|0)+-1;j=0;i=0}l=_C(p|0,o|0,2)|0;l=QC(l|0,y|0,-32,-1)|0;l=QC(l|0,y|0,j|0,i|0)|0;i=y;if(!m){h=+(f|0)*0.0;break}z=0-e|0;g=((z|0)<0)<<31>>31;if((i|0)>(g|0)|(i|0)==(g|0)&l>>>0>z>>>0){c[(Xd()|0)>>2]=34;h=+(f|0)*1797693134862315708145274.0e284*1797693134862315708145274.0e284;break}z=e+-106|0;g=((z|0)<0)<<31>>31;if((i|0)<(g|0)|(i|0)==(g|0)&l>>>0<z>>>0){c[(Xd()|0)>>2]=34;h=+(f|0)*2.2250738585072014e-308*2.2250738585072014e-308;break}if((m|0)>-1){j=m;do{z=!(h>=.5);j=j<<1|(z^1)&1;h=h+(z?h:h+-1.0);l=QC(l|0,i|0,-1,-1)|0;i=y}while((j|0)>-1);n=h;m=j}else n=h;z=((b|0)<0)<<31>>31;e=RC(32,0,e|0,((e|0)<0)<<31>>31|0)|0;i=QC(e|0,y|0,l|0,i|0)|0;e=y;if((e|0)<(z|0)|(e|0)==(z|0)&i>>>0<b>>>0)if((i|0)>0)w=65;else{j=0;i=84;w=67}else{i=b;w=65}if((w|0)==65)if((i|0)<53){j=i;i=84-i|0;w=67}else{k=0.0;h=+(f|0)}if((w|0)==67){h=+(f|0);k=+Aj(+zj(1.0,i),h);i=j}f=(m&1|0)==0&(n!=0.0&(i|0)<32);h=(f?0.0:n)*h+(k+h*+((m+(f&1)|0)>>>0))-k;if(!(h!=0.0))c[(Xd()|0)>>2]=34;h=+Cj(h,l)}while(0);return +h}
function TC(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0;l=a;j=b;k=j;h=d;n=e;i=n;if(!k){g=(f|0)!=0;if(!i){if(g){c[f>>2]=(l>>>0)%(h>>>0);c[f+4>>2]=0}n=0;f=(l>>>0)/(h>>>0)>>>0;return (y=n,f)|0}else{if(!g){n=0;f=0;return (y=n,f)|0}c[f>>2]=a|0;c[f+4>>2]=b&0;n=0;f=0;return (y=n,f)|0}}g=(i|0)==0;do if(h){if(!g){g=(Q(i|0)|0)-(Q(k|0)|0)|0;if(g>>>0<=31){m=g+1|0;i=31-g|0;b=g-31>>31;h=m;a=l>>>(m>>>0)&b|k<<i;b=k>>>(m>>>0)&b;g=0;i=l<<i;break}if(!f){n=0;f=0;return (y=n,f)|0}c[f>>2]=a|0;c[f+4>>2]=j|b&0;n=0;f=0;return (y=n,f)|0}g=h-1|0;if(g&h|0){i=(Q(h|0)|0)+33-(Q(k|0)|0)|0;p=64-i|0;m=32-i|0;j=m>>31;o=i-32|0;b=o>>31;h=i;a=m-1>>31&k>>>(o>>>0)|(k<<m|l>>>(i>>>0))&b;b=b&k>>>(i>>>0);g=l<<p&j;i=(k<<p|l>>>(o>>>0))&j|l<<m&i-33>>31;break}if(f|0){c[f>>2]=g&l;c[f+4>>2]=0}if((h|0)==1){o=j|b&0;p=a|0|0;return (y=o,p)|0}else{p=SC(h|0)|0;o=k>>>(p>>>0)|0;p=k<<32-p|l>>>(p>>>0)|0;return (y=o,p)|0}}else{if(g){if(f|0){c[f>>2]=(k>>>0)%(h>>>0);c[f+4>>2]=0}o=0;p=(k>>>0)/(h>>>0)>>>0;return (y=o,p)|0}if(!l){if(f|0){c[f>>2]=0;c[f+4>>2]=(k>>>0)%(i>>>0)}o=0;p=(k>>>0)/(i>>>0)>>>0;return (y=o,p)|0}g=i-1|0;if(!(g&i)){if(f|0){c[f>>2]=a|0;c[f+4>>2]=g&k|b&0}o=0;p=k>>>((SC(i|0)|0)>>>0);return (y=o,p)|0}g=(Q(i|0)|0)-(Q(k|0)|0)|0;if(g>>>0<=30){b=g+1|0;i=31-g|0;h=b;a=k<<i|l>>>(b>>>0);b=k>>>(b>>>0);g=0;i=l<<i;break}if(!f){o=0;p=0;return (y=o,p)|0}c[f>>2]=a|0;c[f+4>>2]=j|b&0;o=0;p=0;return (y=o,p)|0}while(0);if(!h){k=i;j=0;i=0}else{m=d|0|0;l=n|e&0;k=QC(m|0,l|0,-1,-1)|0;d=y;j=i;i=0;do{e=j;j=g>>>31|j<<1;g=i|g<<1;e=a<<1|e>>>31|0;n=a>>>31|b<<1|0;RC(k|0,d|0,e|0,n|0)|0;p=y;o=p>>31|((p|0)<0?-1:0)<<1;i=o&1;a=RC(e|0,n|0,o&m|0,(((p|0)<0?-1:0)>>31|((p|0)<0?-1:0)<<1)&l|0)|0;b=y;h=h-1|0}while((h|0)!=0);k=j;j=0}h=0;if(f|0){c[f>>2]=a;c[f+4>>2]=b}o=(g|0)>>>31|(k|h)<<1|(h<<1|g>>>31)&0|j;p=(g<<1|0>>>31)&-2|i;return (y=o,p)|0}function UC(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0;j=b>>31|((b|0)<0?-1:0)<<1;i=((b|0)<0?-1:0)>>31|((b|0)<0?-1:0)<<1;f=d>>31|((d|0)<0?-1:0)<<1;e=((d|0)<0?-1:0)>>31|((d|0)<0?-1:0)<<1;h=RC(j^a|0,i^b|0,j|0,i|0)|0;g=y;a=f^j;b=e^i;return RC((TC(h,g,RC(f^c|0,e^d|0,f|0,e|0)|0,y,0)|0)^a|0,y^b|0,a|0,b|0)|0}function VC(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0;f=a&65535;e=b&65535;c=N(e,f)|0;d=a>>>16;a=(c>>>16)+(N(e,d)|0)|0;e=b>>>16;b=N(e,f)|0;return (y=(a>>>16)+(N(e,d)|0)+(((a&65535)+b|0)>>>16)|0,a+b<<16|c&65535|0)|0}function WC(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0;e=a;f=c;c=VC(e,f)|0;a=y;return (y=(N(b,f)|0)+(N(d,e)|0)+a|a&0,c|0|0)|0}function XC(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;return TC(a,b,c,d,0)|0}function YC(a,b,c){a=a|0;b=b|0;c=c|0;if((c|0)<32){y=b>>c;return a>>>c|(b&(1<<c)-1)<<32-c}y=(b|0)<0?-1:0;return b>>c-32|0}function ZC(a,b,c){a=a|0;b=b|0;c=c|0;if((c|0)<32){y=b>>>c;return a>>>c|(b&(1<<c)-1)<<32-c}y=0;return b>>>c-32|0}function _C(a,b,c){a=a|0;b=b|0;c=c|0;if((c|0)<32){y=b<<c|(a&(1<<c)-1<<32-c)>>>32-c;return a<<c}y=a<<c-32;return 0}function $C(a){a=a|0;return (a&255)<<8|a>>8&255|0}function aD(a){a=a|0;return (a&255)<<24|(a>>8&255)<<16|(a>>16&255)<<8|a>>>24|0}function bD(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0;if((e|0)>=8192)return zc(b|0,d|0,e|0)|0;h=b|0;g=b+e|0;if((b&3)==(d&3)){while(b&3){if(!e)return h|0;a[b>>0]=a[d>>0]|0;b=b+1|0;d=d+1|0;e=e-1|0}e=g&-4|0;f=e-64|0;while((b|0)<=(f|0)){c[b>>2]=c[d>>2];c[b+4>>2]=c[d+4>>2];c[b+8>>2]=c[d+8>>2];c[b+12>>2]=c[d+12>>2];c[b+16>>2]=c[d+16>>2];c[b+20>>2]=c[d+20>>2];c[b+24>>2]=c[d+24>>2];c[b+28>>2]=c[d+28>>2];c[b+32>>2]=c[d+32>>2];c[b+36>>2]=c[d+36>>2];c[b+40>>2]=c[d+40>>2];c[b+44>>2]=c[d+44>>2];c[b+48>>2]=c[d+48>>2];c[b+52>>2]=c[d+52>>2];c[b+56>>2]=c[d+56>>2];c[b+60>>2]=c[d+60>>2];b=b+64|0;d=d+64|0}while((b|0)<(e|0)){c[b>>2]=c[d>>2];b=b+4|0;d=d+4|0}}else{e=g-4|0;while((b|0)<(e|0)){a[b>>0]=a[d>>0]|0;a[b+1>>0]=a[d+1>>0]|0;a[b+2>>0]=a[d+2>>0]|0;a[b+3>>0]=a[d+3>>0]|0;b=b+4|0;d=d+4|0}}while((b|0)<(g|0)){a[b>>0]=a[d>>0]|0;b=b+1|0;d=d+1|0}return h|0}function cD(b,c,d){b=b|0;c=c|0;d=d|0;var e=0;if((c|0)<(b|0)&(b|0)<(c+d|0)){e=b;c=c+d|0;b=b+d|0;while((d|0)>0){b=b-1|0;c=c-1|0;d=d-1|0;a[b>>0]=a[c>>0]|0}b=e}else bD(b,c,d)|0;return b|0}function dD(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,i=0;h=b+e|0;d=d&255;if((e|0)>=67){while(b&3){a[b>>0]=d;b=b+1|0}f=h&-4|0;g=f-64|0;i=d|d<<8|d<<16|d<<24;while((b|0)<=(g|0)){c[b>>2]=i;c[b+4>>2]=i;c[b+8>>2]=i;c[b+12>>2]=i;c[b+16>>2]=i;c[b+20>>2]=i;c[b+24>>2]=i;c[b+28>>2]=i;c[b+32>>2]=i;c[b+36>>2]=i;c[b+40>>2]=i;c[b+44>>2]=i;c[b+48>>2]=i;c[b+52>>2]=i;c[b+56>>2]=i;c[b+60>>2]=i;b=b+64|0}while((b|0)<(f|0)){c[b>>2]=i;b=b+4|0}}while((b|0)<(h|0)){a[b>>0]=d;b=b+1|0}return h-e|0}function eD(a){a=+a;return a>=0.0?+z(a+.5):+M(a-.5)}function fD(a){a=+a;return a-+z(a)!=.5?+eD(a):+eD(a/2.0)*2.0}function gD(a){a=+a;return a>=0.0?+z(a+.5):+M(a-.5)}function hD(a){a=a|0;var b=0,d=0;d=c[i>>2]|0;b=d+a|0;if((a|0)>0&(b|0)<(d|0)|(b|0)<0){V()|0;ja(12);return -1}c[i>>2]=b;if((b|0)>(U()|0)?(T()|0)==0:0){c[i>>2]=d;ja(12);return -1}return d|0}function iD(a,b){a=a|0;b=b|0;return bd[a&7](b|0)|0}function jD(a,b,c){a=a|0;b=b|0;c=c|0;return cd[a&7](b|0,c|0)|0}function kD(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;return dd[a&31](b|0,c|0,d|0)|0}function lD(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;return ed[a&0](b|0,c|0,d|0,e|0)|0}function mD(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;return fd[a&3](b|0,c|0,d|0,e|0,f|0)|0}function nD(a){a=a|0;gd[a&3]()}function oD(a,b){a=a|0;b=b|0;hd[a&7](b|0)}function pD(a){a=a|0;R(0);return 0}function qD(a,b){a=a|0;b=b|0;R(1);return 0}function rD(a,b,c){a=a|0;b=b|0;c=c|0;R(2);return 0}function sD(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;R(3);return 0}function tD(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;R(4);return 0}function uD(){R(5)}function vD(a){a=a|0;R(6)}

// EMSCRIPTEN_END_FUNCS
var bd=[pD,Td,Yd,On,eo,yu,dv,Tw];var cd=[qD,hx,lx,ny,cA,wA,CA,Yu];var dd=[rD,Ud,Vd,Zd,_d,Oh,_j,mk,vu,wu,xu,bv,cv,Gv,Qv,aw,vw,Rw,Sw,rD,rD,rD,rD,rD,rD,rD,rD,rD,rD,rD,rD,rD];var ed=[sD];var fd=[tD,Ly,eA,tD];var gd=[uD,Jf,sv,uD];var hd=[vD,Dn,Ry,dz,sB,vD,vD,vD];return{_BF_crypt:GC,_BF_decode:IC,_BF_encode:LC,_BF_encrypt:KC,_BF_set_key:HC,_BF_swap:JC,_S:es,___DOUBLE_BITS:Yk,___DOUBLE_BITS_124:dl,___DOUBLE_BITS_336:sq,___DOUBLE_BITS_344:Ej,___DOUBLE_BITS_347:Vq,___DOUBLE_BITS_397:dr,___DOUBLE_BITS_398:ys,___DOUBLE_BITS_401:Js,___DOUBLE_BITS_402:Os,___DOUBLE_BITS_413:Ys,___DOUBLE_BITS_436:Wk,___DOUBLE_BITS_440:rt,___DOUBLE_BITS_441:tt,___DOUBLE_BITS_460:Kr,___DOUBLE_BITS_475:Ot,___DOUBLE_BITS_537:Hh,___DOUBLE_BITS_91:al,___FLOAT_BITS:jl,___FLOAT_BITS_102:Fk,___FLOAT_BITS_105:sl,___FLOAT_BITS_339:Qq,___FLOAT_BITS_354:zr,___FLOAT_BITS_358:Yr,___FLOAT_BITS_386:rs,___FLOAT_BITS_405:pr,___FLOAT_BITS_408:Ss,___FLOAT_BITS_424:dt,___FLOAT_BITS_439:qt,___FLOAT_BITS_442:wt,___FLOAT_BITS_480:Rt,___bswap_16:Uy,___bswap_16_712:iA,___bswap_32:xz,___bswap_32_717:ez,___cos:Nq,___cosdf:Ws,___crypt_blowfish:dC,___crypt_des:gC,___crypt_md5:VB,___crypt_r:cC,___crypt_sha256:eC,___crypt_sha512:fC,___ctype_b_loc:vm,___ctype_get_mb_cur_max:mm,___ctype_tolower_loc:Km,___ctype_toupper_loc:zm,___des_setkey:iC,___divdi3:UC,___dn_comp:sz,___dn_expand:Ly,___dns_count_addrs:jz,___dns_doqueries:az,___dns_get_rr:iz,___dns_parse:yz,___dns_query:fz,___do_des:nC,___do_orphaned_stdio_locks:Hv,___dup3:ko,___duplocale:Hg,___emscripten_pthread_data_constructor:GB,___errno_location:Xd,___expo2:Vk,___expo2f:Jk,___fbufsize:Ew,___fclose_ca:Ow,___fdopen:Yu,___fesetround:Oi,___fflush_unlocked:qu,___fgetwc_unlocked:Cu,___fgetwc_unlocked_internal:Fu,___flbf:Dw,___floatscan:vj,___flt_rounds:Xi,___fmodeflags:Xu,___fopen_rb_ca:su,___fpclassify:Rr,___fpclassifyf:er,___fpclassifyl:Qr,___fpending:Fw,___fpurge:Gw,___fputwc_unlocked:Qu,___freadable:Bw,___freadahead:Vw,___freading:Aw,___freadptr:Ww,___freadptrinc:Xw,___frexp_exp:Ck,___frexp_expf:Ok,___fseeko:Av,___fseeko_unlocked:zv,___fseterr:Yw,___fsetlocking:yw,___fstatfs:he,___ftello:pw,___ftello_unlocked:qw,___futimesat:ze,___fwritable:Cw,___fwritex:Mh,___fwriting:zw,___fxstat:te,___fxstatat:ue,___get_locale:Gf,___get_resolv_conf:Wy,___getdents:hq,___getopt_long:PB,___getopt_long_core:QB,___getopt_msg:IB,___gettextdomain:Kg,___h_errno_location:Kz,___inet_aton:Yy,___intscan:Yf,___ipparse:bz,___isalnum_l:Tm,___isalpha_l:Sm,___isblank_l:ym,___iscntrl_l:um,___isdigit_l:om,___isgraph_l:Pm,___islower_l:Rm,___isprint_l:Vm,___ispunct_l:Qm,___isspace_l:Am,___isupper_l:qm,___iswalnum_l:wm,___iswalpha_l:lm,___iswblank_l:rm,___iswcntrl_l:Ym,___iswctype_l:Bm,___iswdigit_l:km,___iswgraph_l:Jm,___iswlower_l:Dm,___iswprint_l:Wm,___iswpunct_l:Mm,___iswspace_l:xm,___iswupper_l:pm,___iswxdigit_l:Im,___isxdigit_l:Um,___lctrans:Af,___lctrans_cur:Mf,___lctrans_impl:Bf,___ldexp_cexp:Bk,___ldexp_cexpf:Nk,___lgamma_r:Lq,___lgammaf_r:ht,___lgammal_r:yt,___libc_get_version:nq,___loc_is_allocated:dg,___lockfile:wh,___lookup_ipliteral:Xy,___lookup_name:Uz,___lookup_serv:Jz,___lxstat:ve,___madvise:mj,___memrchr:qp,___mkostemps:cf,___mmap:hj,___mo_lookup:Cf,___mprotect:cj,___mremap:$i,___muldi3:WC,___muldsi3:VC,___munmap:If,___netlink_enumerate:ty,___newlocale:eg,___nl_langinfo:tg,___nl_langinfo_l:rg,___ofl_add:zu,___ofl_lock:nu,___ofl_unlock:ou,___openlog:aB,___overflow:Su,___pleval:Of,___procfdname:de,___pthread_self:Lf,___pthread_self_131:nm,___pthread_self_18:Nf,___pthread_self_209:$m,___pthread_self_215:Lh,___pthread_self_219:mn,___pthread_self_222:Hi,___pthread_self_223:on,___pthread_self_224:qn,___pthread_self_23:sg,___pthread_self_30:ph,___pthread_self_308:yf,___pthread_self_32:Qh,___pthread_self_39:Vh,___pthread_self_40:_h,___pthread_self_41:Pg,___pthread_self_511:Ev,___pthread_self_512:ru,___pthread_self_53:Bi,___pthread_self_549:Ru,___pthread_self_554:pv,___pthread_self_56:Mi,___pthread_self_592:Gu,___pthread_self_607:Du,___pthread_self_628:tx,___ptsname_r:AB,___rand48_step:Je,___randname:ff,___rem_pio2:pq,___rem_pio2_large:qq,___rem_pio2f:Xq,___res_mkquery:Hz,___res_msend:Vy,___res_msend_rc:Oy,___res_send:gA,___res_state:Gz,___rtnetlink_enumerate:ry,___setrlimit:qB,___setxid:Cn,___shgetc:Zf,___shlim:Xf,___shm_mapname:dj,___signbit:oq,___signbitf:ws,___signbitl:as,___sin:tq,___sindf:Vs,___srandom:Ve,___statfs:ge,___stdio_close:Td,___stdio_exit:sv,___stdio_read:Ud,___stdio_seek:Vd,___stdio_write:_d,___stdout_write:Zd,___stpcpy:nh,___stpncpy:xp,___strcasecmp_l:op,___strchrnul:Hf,___strcoll_l:Th,___strdup:On,___strerror_l:zf,___string_read:bw,___strncasecmp_l:mp,___strxfrm_l:lh,___synccall:En,___syscall_ret:Wd,___tan:ps,___tandf:ss,___tolower_l:Nm,___toread:ag,___toread_needs_stdio_exit:rv,___toupper_l:Xm,___towcase:pf,___towctrans_l:Hm,___towlower_l:Fm,___towrite:Nh,___towrite_needs_stdio_exit:Lw,___towupper_l:Em,___tre_mem_alloc_impl:Cx,___tre_mem_destroy:Dx,___tre_mem_new_impl:Bx,___udivdi3:XC,___udivmoddi4:TC,___uflow:$f,___unlist_locked_file:mu,___unlockfile:xh,___uselocale:Kf,___vsyslog:bB,___wcscoll_l:Xh,___wcsxfrm_l:Ji,___wctrans_l:Gm,___wctype_l:Cm,___xmknod:xe,___xmknodat:ye,___xstat:we,__crypt_extended_r_uut:hC,__flushlbf:xw,__redupi:Fl,__redupif:bm,__strcolcmp:PA,__vsyslog:cB,_a64l:LA,_a_cas:Kv,_a_cas_p:Rg,_a_ctz_64:LB,_a_ctz_l:yk,_a_ctz_l_741:TA,_a_ctz_l_770:uB,_a_ctz_l_781:MB,_a_store:Ug,_a_store_513:Iv,_accept:lz,_accept4:qz,_access:Zn,_acct:Tn,_acosh:Tr,_acoshf:Ps,_acoshl:Sr,_add_adjusted:Or,_add_and_denormalize:Pr,_add_icase_literals:py,_addmntent:jB,_addr_decode:td,_addr_encode:sd,_addrcmp:cA,_aligned_alloc:fx,_alphasort:aq,_append:kx,_arg_n:iv,_arg_n_612:nv,_ascii_is_unsafe:lC,_ascii_to_bin:jC,_asinh:bs,_asinhf:vq,_asinhl:Fs,_asprintf:sw,_atanh:nt,_atanhf:Ft,_atanhl:mt,_atof:rk,_atoi:Lj,_atol:qk,_atoll:Wj,_basename:UA,_bcmp:Gp,_bcopy:lp,_bind:Qy,_bind_textdomain_codeset:vi,_bindtextdomain:ci,_binop:Tf,_bitshift64Ashr:YC,_bitshift64Lshr:ZC,_bitshift64Shl:_C,_bsearch:Xj,_btowc:nn,_bulk_free:Jd,_bzero:up,_c16rtomb:kn,_c32rtomb:en,_cabs:gl,_cabsf:pl,_cabsl:im,_cacos:Cl,_cacosf:Hl,_cacosh:Zl,_cacoshf:jm,_cacoshl:gm,_cacosl:Ml,_calloc:wd,_carg:hl,_cargf:ql,_cargl:Al,_casefold:rx,_casin:vl,_casinf:ml,_casinh:ul,_casinhf:ll,_casinhl:Il,_casinl:Gl,_catan:El,_catanf:am,_catanh:Dl,_catanhf:fm,_catanhl:Wl,_catanl:Vl,_catclose:hg,_catgets:og,_catopen:ti,_cbrt:Cq,_cbrtf:Es,_cbrtl:As,_ccos:Jl,_ccosf:Kk,_ccosh:Kl,_ccoshf:Lk,_ccoshl:Yl,_ccosl:cm,_cexp:Pl,_cexpf:dm,_cexpl:$l,_cfgetispeed:bu,_cfgetospeed:au,_cfmakeraw:_t,_cfsetispeed:Yt,_cfsetospeed:Xt,_chdir:to,_checker:eo,_chmod:Ae,_chown:Mo,_cimag:Ql,_cimagf:Bl,_cimagl:Tl,_cleanup:Ry,_cleanup_650:dz,_clearerr:gw,_clog:fl,_clogf:ol,_clogl:Sl,_close:wo,_close_file:tv,_closedir:eq,_closelog:_A,_common:yq,_common_355:Cr,_common_367:ks,_common_443:Bt,_conj:kl,_conjf:Nl,_conjl:Xl,_connect:$z,_convert_bits:rd,_copy_addr:yA,_copy_lladdr:xA,_copysign:Fj,_copysignf:Gk,_copysignl:Aj,_cosh:Tk,_coshf:Mk,_coshl:ft,_cpow:Ol,_cpowf:hm,_cpowl:em,_cproj:cl,_cprojf:il,_cprojl:bl,_creal:Pk,_crealf:tl,_creall:Rl,_creat:nj,_crypt:MC,_csin:Ll,_csinf:wl,_csinh:Rk,_csinhf:xl,_csinhl:Qk,_csinl:_l,_csqrt:Xk,_csqrtf:nl,_csqrtl:el,_ctan:zl,_ctanf:Dk,_ctanh:$k,_ctanhf:Ek,_ctanhl:Ul,_ctanl:yl,_ctermid:oo,_cycle:zk,_dcgettext:di,_dcngettext:Og,_dd_add:Mr,_dd_mul:Lr,_decfloat:xj,_decode:qd,_des_cipher:kC,_dgettext:Ng,_dirfd:gq,_dirname:yB,_dispose_chunk:zd,_div:Mj,_dn_skipname:Iy,_dngettext:Yg,_dns_parse_callback:eA,_do_nftw:wB,_do_read:_j,_do_read_583:aw,_do_read_89:mk,_do_setrlimit:sB,_do_setxid:Dn,_do_wordexp:mB,_dprintf:Ov,_drand48:Re,_dummy:Jf,_dummy_245:Yd,_dup:xn,_dup2:un,_ecvt:Rj,_encode:pd,_encrypt:OC,_endhostent:Ay,_endmntent:gB,_endservent:mz,_erand48:Qe,_erf:sr,_erfc:wr,_erfc1:ur,_erfc1_423:at,_erfc2:tr,_erfc2_422:$s,_erfcf:bt,_erfcl:vr,_erff:_s,_erfl:rr,_ether_aton:kA,_ether_aton_r:jA,_ether_hostton:pA,_ether_line:nA,_ether_ntoa:mA,_ether_ntoa_r:lA,_ether_ntohost:oA,_evalbinop:Qf,_evalexpr:Pf,_evalprim:Rf,_exp10:ir,_exp10f:Fq,_exp10l:os,_exp2:Iq,_exp2f:Hq,_exp2l:qr,_expm1:Uk,_expm1f:Ik,_expm1l:kt,_faccessat:$n,_fchdir:_n,_fchmod:Be,_fchmodat:ce,_fchown:Co,_fchownat:Eo,_fclose:lu,_fcntl:pj,_fcvt:Nj,_fdatasync:sn,_fdim:Nt,_fdimf:Qt,_fdiml:Tt,_fdopendir:fq,_feclearexcept:Qi,_fegetenv:Wi,_fegetexceptflag:Zi,_fegetround:Yi,_feholdexcept:Vi,_feof:Tu,_feraiseexcept:Ri,_ferror:Lv,_fesetenv:Ui,_fesetexceptflag:Pi,_fesetround:Ni,_fetestexcept:Ti,_feupdateenv:Si,_fflush:pu,_ffs:tB,_ffsl:SA,_ffsll:KB,_fgetc:kw,_fgetln:lw,_fgetpos:ow,_fgets:ju,_fgetwc:Bu,_fgetws:Xv,_fileno:Iw,_find_charmap:xi,_finite:xs,_finitef:vt,_fixup:je,_flockfile:ww,_fma:Jr,_fmaf:zs,_fmal:Ir,_fmax:Uq,_fmaxf:ct,_fmaxl:Tq,_fmemopen:uu,_fmin:Xs,_fminf:Xr,_fminl:St,_fmod:Dj,_fmodf:Rs,_fmodl:Bj,_fmt_fp:Gh,_fmt_o:Ch,_fmt_u:Dh,_fmt_x:Bh,_fmtmsg:OA,_fnmatch:nx,_fnmatch_internal:px,_fopen:Wu,_forkpty:GA,_fourbyte_memmem:Kp,_fourbyte_strstr:cp,_fprintf:Pu,_fputc:Mv,_fputs:Yv,_fputwc:Ou,_fputws:Dv,_fread:$u,_free:vd,_freeaddrinfo:Tz,_freeifaddrs:uA,_freelist:jx,_freelocale:ii,_freopen:Nw,_frexp:Jh,_frexpf:Zs,_frexpl:Ih,_fscanf:lv,_fseek:Bv,_fsetpos:rw,_fstat:me,_fstatat:re,_fstatvfs:ke,_fsync:xo,_ftell:Kw,_ftruncate:So,_ftrylockfile:Jv,_funlockfile:Cv,_futimens:se,_fuzzycmp:yi,_fwide:Eu,_fwprintf:nw,_fwrite:Zv,_fwscanf:hw,_gcvt:Vj,_gen_netmask:zA,_get_16:Ei,_get_32:Di,_get_current_dir_name:WA,_getauxval:JA,_getc:cw,_getc_unlocked:vv,_getchar:jw,_getchar_unlocked:ew,_getcwd:Nn,_getdelim:yv,_getdomainname:CB,_getegid:Un,_geteuid:bo,_getgid:co,_getgrouplist:NA,_getgroups:Mn,_gethostent:zy,_gethostid:QA,_gethostname:ho,_getifaddrs:vA,_getint:zh,_getint_561:Mu,_getlens:tz,_getline:xv,_getlogin:qo,_getlogin_r:po,_getmntent:iB,_getmntent_r:hB,_getnetbyaddr:zz,_getnetbyname:Az,_getoffs:vz,_getopt:JB,_getopt_long:OB,_getopt_long_only:SB,_getpeername:DA,_getpgid:Xn,_getpgrp:An,_getpid:mo,_getppid:Lo,_getpriority:KA,_getresgid:xB,_getresuid:RA,_getrlimit:NB,_getrusage:BB,_gets:iu,_getservbyname:Pz,_getservbyname_r:Iz,_getservbyport:Dz,_getservbyport_r:Ez,_getservent:oz,_getsid:Jo,_getsockname:Cy,_getsockopt:Mz,_getsubopt:UB,_gettext:Mg,_gettextdir:Qg,_getuid:ao,_getw:_u,_getwc:Au,_getwchar:Wv,_getword:pB,_glob:gx,_globfree:ux,_grantpt:EB,_hashmd:sC,_hashmd_827:BC,_hasmntopt:kB,_herror:Nz,_hexfloat:wj,_hexval:ly,_hexval_703:$y,_hstrerror:Oz,_htonl:cz,_htons:Py,_hypot:Zk,_hypotf:rl,_hypotl:Zr,_i64Add:QC,_i64Subtract:RC,_ialloc:Hd,_iconv:Ai,_iconv_close:zi,_iconv_open:wi,_if_freenameindex:EA,_if_indextoname:pz,_if_nameindex:BA,_if_nametoindex:_y,_ignore_err:hx,_ilogb:Nr,_ilogbf:Rq,_ilogbl:Ks,_imaxabs:Tj,_imaxdiv:Ak,_in_set:kv,_independent_calloc:Gd,_independent_comalloc:Id,_index:Mp,_inet_lnaof:sA,_inet_makeaddr:rA,_inet_netof:tA,_inet_network:qA,_inet_ntoa:rz,_inet_ntop:kz,_inet_pton:Zy,_initgroups:YA,_initstate:Xe,_internal_memalign:Cd,_ioctl:zn,_is_literal:mx,_is_lost_conn:dB,_is_valid_hostname:fA,_isalnum:sf,_isalnum_l:rf,_isalpha:tf,_isalpha_l:$h,_isascii:sm,_isatty:Gn,_isblank:mg,_isblank_l:Bg,_iscntrl:hi,_iscntrl_l:gi,_isdigit:uf,_isdigit_l:vf,_isgraph:wg,_isgraph_l:ih,_islower:$g,_islower_l:eh,_isprint:hh,_isprint_l:gh,_ispunct:vg,_ispunct_l:ug,_issetugid:XA,_isspace:_f,_isspace_l:ui,_isupper:dh,_isupper_l:Rh,_iswalnum:Jg,_iswalnum_l:Ig,_iswalpha:qf,_iswalpha_l:ji,_iswblank:lg,_iswblank_l:kg,_iswcntrl:mi,_iswcntrl_l:oi,_iswctype:li,_iswctype_l:ki,_iswdigit:cg,_iswdigit_l:bg,_iswgraph:Dg,_iswgraph_l:Cg,_iswlower:ni,_iswlower_l:Ii,_iswprint:qg,_iswprint_l:pg,_iswpunct:bi,_iswpunct_l:ai,_iswspace:Eg,_iswspace_l:Wh,_iswupper:nf,_iswupper_l:mf,_iswxdigit:yg,_iswxdigit_l:xg,_isxdigit:si,_isxdigit_l:ri,_j0:js,_j0f:Br,_j1:At,_j1f:xq,_jn:Jt,_jnf:Ut,_jrand48:Ie,_l64a:MA,_labelof:aA,_labs:sj,_lcg31:af,_lcg64:We,_lchmod:qe,_lchown:To,_lcong48:Le,_ldexp:uq,_ldexpf:Ls,_ldexpl:Gt,_ldiv:ek,_lgamma:Vr,_lgammaf:lt,_lgammal:zt,_link:so,_linkat:Go,_listen:By,_llabs:Uj,_lldiv:pk,_llrint:gr,_llrintf:Ds,_llrintl:fr,_llround:Mt,_llroundf:et,_llroundl:Dq,_llvm_bswap_i16:$C,_llvm_bswap_i32:aD,_llvm_cttz_i32:SC,_loadstate:_e,_localeconv:ng,_lockf:HB,_log10:xr,_log10f:Pt,_log10l:_r,_log1p:kr,_log1pf:wq,_log1pl:jr,_log2:lr,_log2f:xt,_log2l:It,_logb:Ns,_logbf:Pq,_logbl:Is,_login_tty:IA,_lrand48:Ne,_lrint:Wr,_lrintf:Gs,_lrintl:ts,_lround:mr,_lroundf:Qs,_lroundl:_q,_lseek:Qo,_lstat:pe,_mallinfo:Pd,_malloc:ud,_malloc_footprint:Ld,_malloc_footprint_limit:Nd,_malloc_max_footprint:Md,_malloc_set_footprint_limit:Od,_malloc_stats:Qd,_malloc_trim:Kd,_malloc_usable_size:Sd,_mallopt:Rd,_marksub:hy,_match:uz,_match_bracket:sx,_match_in_dir:ix,_mblen:rn,_mbrlen:gn,_mbrtoc16:an,_mbrtoc32:fn,_mbrtowc:Ci,_mbsinit:Zm,_mbsnrtowcs:dn,_mbsrtowcs:_m,_mbstowcs:hn,_mbtowc:pn,_mclose:yu,_md5_init:XB,_md5_sum:ZB,_md5_update:YB,_md5crypt:WB,_memalign:Bd,_memccpy:Sp,_memchr:Wg,_memcmp:ef,_memcpy:bD,_memmem:Hp,_memmove:cD,_mempcpy:_p,_memset:dD,_mincore:ij,_mkdir:ee,_mkdirat:Ce,_mkdtemp:lf,_mkfifo:ae,_mkfifoat:ne,_mknod:be,_mknodat:oe,_mkostemp:bf,_mkptr4:hz,_mkptr6:gz,_mkstemp:kf,_mkstemps:jf,_mktemp:hf,_mlock:kj,_mlockall:lj,_modf:ar,_modff:Gq,_modfl:$q,_mrand48:Ke,_mread:vu,_ms_close:Tw,_ms_seek:Sw,_ms_write:Rw,_mseek:xu,_msync:bj,_mtime:Ty,_munlock:_i,_munlockall:aj,_mwrite:wu,_name_from_dns:dA,_name_from_dns_search:Yz,_name_from_hosts:Xz,_name_from_null:Vz,_name_from_numeric:Wz,_nan:Lt,_nanf:Bs,_nanl:Oq,_nearbyint:Hr,_nearbyintf:Ar,_nearbyintl:Gr,_netlink_msg_to_ifaddr:wA,_netlink_msg_to_nameindex:CA,_nextafter:cr,_nextafterf:qs,_nextafterl:Ur,_nexttoward:br,_nexttowardf:pt,_nexttowardl:jt,_nftw:vB,_ngettext:Xg,_nice:Ln,_nrand48:Me,_ns_get16:Dy,_ns_get32:Ey,_ns_initparse:Jy,_ns_name_uncompress:Ky,_ns_parserr:My,_ns_put16:Fy,_ns_put32:Gy,_ns_skiprr:Hy,_ntohl:wz,_ntohs:hA,_open:gf,_open_memstream:Qw,_open_wmemstream:av,_openat:qj,_opendir:cq,_openlog:$A,_openpty:HA,_out:yh,_out_560:Lu,_pad:Eh,_pad_790:$B,_pad_813:uC,_pad_831:DC,_parse_atom:fy,_parse_bracket:jy,_parse_bracket_terms:my,_parse_dup:gy,_parse_dup_count:iy,_parseop:Sf,_pat_next:ox,_pause:vn,_pclose:Zu,_permute:RB,_perror:fw,_pipe:Rn,_pipe2:Qn,_pntz:xk,_policyof:Zz,_poll:De,_pone:Ct,_ponef:zq,_pop_arg:Ah,_pop_arg_563:Nu,_posix_close:vo,_posix_fadvise:oj,_posix_fallocate:rj,_posix_madvise:jj,_posix_memalign:Dd,_posix_openpt:DB,_pread:Ao,_preadv:zo,_prefixmatch:bA,_printf:Tv,_printf_core:vh,_processblock:aC,_processblock_814:vC,_processblock_832:EC,_pselect:Ee,_pthread_self:Ff,_ptsname:zB,_put_16:Fi,_put_32:Gi,_putc:dw,_putc_unlocked:Uu,_putchar:Pw,_putchar_unlocked:uv,_puts:Mw,_putw:mw,_putwc:Nv,_putwchar:Jw,_pvalloc:Fd,_pwrite:Hn,_pwritev:fo,_pzero:ls,_pzerof:Dr,_qone:Dt,_qonef:Aq,_qsort:sk,_qzero:ms,_qzerof:Er,_rand:Pe,_rand_r:Se,_random:$e,_read:Kn,_readdir:dq,_readdir_r:jq,_readlink:tn,_readlinkat:Sn,_readv:Fn,_realloc:xd,_realloc_in_place:Ad,_realpath:FA,_reap:oB,_recv:vy,_recvfrom:wy,_recvmmsg:Bz,_recvmsg:Cz,_regcomp:Ex,_regerror:qy,_regexec:vx,_regfree:Ox,_remainder:Kq,_remainderf:nr,_remainderl:Jq,_remove:wv,_remquo:rq,_remquof:or,_remquol:is,_rename:Vu,_renameat:lo,_res_init:Sz,_res_querydomain:Ny,_rewind:_w,_rewinddir:lq,_rindex:Pp,_rint:hr,_rintf:fD,_rintl:Ht,_rmdir:In,_rol:bC,_ror:wC,_ror_833:FC,_round:eD,_roundf:gD,_roundl:Eq,_savestate:Ye,_sbrk:hD,_scalb:st,_scalbf:yr,_scalbln:$r,_scalblnf:gt,_scalblnl:Hs,_scalbn:zj,_scalbnf:Zq,_scalbnl:Cj,_scandir:bq,_scanexp:yj,_scanf:Hw,_scopeof:_z,_seed48:He,_seekdir:iq,_select:Fe,_send:uy,_sendmmsg:Lz,_sendmsg:Qz,_sendto:xy,_setbuf:gu,_setbuffer:tu,_setdomainname:TB,_setegid:ro,_seteuid:Pn,_setgid:Ro,_sethostent:yy,_setkey:NC,_setlinebuf:Sv,_setlocale:ei,_setlocale_one_unlocked:fi,_setlogmask:ZA,_setmntent:fB,_setpgid:Wn,_setpgrp:Po,_setpriority:VA,_setregid:Ko,_setresgid:go,_setresuid:Bn,_setreuid:Fo,_setrlimit:rB,_setservent:nz,_setsid:yo,_setsockopt:Sy,_setstate:Ze,_setuid:Oo,_setup_salt:mC,_setvbuf:hu,_sha256_init:yC,_sha256_sum:AC,_sha256_update:zC,_sha256crypt:xC,_sha512_init:pC,_sha512_sum:rC,_sha512_update:qC,_sha512crypt:oC,_shl:wk,_shm_open:ej,_shm_unlink:fj,_shr:uk,_shutdown:AA,_sift:tk,_significand:Cs,_significandf:Yq,_sin_pi:Mq,_sin_pi_433:it,_sincos:Sq,_sincosf:Us,_sincosl:Ts,_sinh:Sk,_sinhf:Hk,_sinhl:Wq,_sinpi:fs,_skipspace:Uf,_sleep:Ho,_sn_write:Oh,_snprintf:sh,_sockatmark:Rz,_socket:sy,_socketpair:Fz,_sort:lx,_sprintf:Oj,_sq:_k,_srand:Oe,_srand48:Ge,_srandom:Ue,_sscanf:_v,_stat:le,_statvfs:ie,_store_int:jv,_store_int_613:ov,_str_next:qx,_strcasecmp:qi,_strcasecmp_l:pi,_strcasestr:jp,_strcat:wp,_strchr:Tg,_strcmp:Ef,_strcoll:Uh,_strcpy:mh,_strcspn:Qj,_strerror:xf,_strerror_l:wf,_strerror_r:Fp,_strfmon:Ph,_strfmon_l:qh,_strlcat:sp,_strlcpy:tp,_strlen:df,_strlwr:$w,_strncasecmp:bh,_strncasecmp_l:ah,_strncat:vp,_strncmp:Sg,_strncpy:$p,_strndup:Uo,_strnlen:Vg,_strpbrk:rp,_strrchr:pp,_strsep:Ap,_strsignal:Wp,_strspn:Pj,_strstr:$o,_strtod:Gj,_strtod_l:Jj,_strtof:tj,_strtof_l:Ij,_strtoimax:ik,_strtok:Np,_strtok_r:Vp,_strtol:hk,_strtol_l:dx,_strtold:Hj,_strtold_l:Kj,_strtoll:gk,_strtoll_l:bx,_strtoul:Vf,_strtoul_l:cx,_strtoull:fk,_strtoull_l:ax,_strtoumax:jk,_strtox:uj,_strtox_85:Wf,_strupr:ex,_strverscmp:Xo,_strxfrm:oh,_sw_write:vw,_swab:Up,_swapc:Df,_swprintf:tw,_swscanf:Uv,_symlink:jo,_symlinkat:Do,_sync:wn,_syslog:eB,_tanh:hs,_tanhf:Ms,_tanhl:gs,_tcdrain:du,_tcflow:eu,_tcflush:cu,_tcgetattr:Zt,_tcgetpgrp:yn,_tcgetsid:Wt,_tcsendbreak:fu,_tcsetattr:$t,_tcsetpgrp:Io,_telldir:mq,_temper:Te,_tempnam:Uw,_textdomain:Lg,_tgamma:ds,_tgammaf:ut,_tgammal:cs,_threebyte_memmem:Jp,_threebyte_strstr:bp,_tmpfile:Zw,_tmpnam:Vv,_to64:_B,_to64_811:tC,_to64_829:CC,_toascii:tm,_tolower:ch,_tolower_l:Sh,_toupper:_g,_toupper_l:Zg,_towctrans:jg,_towctrans_l:ig,_towlower:of,_towlower_l:fh,_towupper:gg,_towupper_l:fg,_tre_add_tag_left:cy,_tre_add_tag_right:ey,_tre_add_tags:Ix,_tre_ast_new_catenation:Lx,_tre_ast_new_iter:ay,_tre_ast_new_literal:Kx,_tre_ast_new_node:_x,_tre_ast_new_union:by,_tre_ast_to_tnfa:Nx,_tre_compare_lit:ny,_tre_compute_nfl:Mx,_tre_copy_ast:$x,_tre_expand_ast:Jx,_tre_expand_macro:ky,_tre_fill_pmatch:yx,_tre_make_trans:Px,_tre_match_empty:Yx,_tre_neg_char_classes_match:zx,_tre_new_lit:oy,_tre_parse:Hx,_tre_purge_regset:dy,_tre_set_empty:Wx,_tre_set_one:Vx,_tre_set_union:Xx,_tre_stack_destroy:Gx,_tre_stack_new:Fx,_tre_stack_num_objects:Qx,_tre_stack_pop_int:Tx,_tre_stack_pop_voidptr:Ux,_tre_stack_push:Zx,_tre_stack_push_int:Sx,_tre_stack_push_voidptr:Rx,_tre_tag_order:Ax,_tre_tnfa_run_backtrack:wx,_tre_tnfa_run_parallel:xx,_trinkle:vk,_trunc:vs,_truncate:Vn,_truncf:ot,_truncl:us,_try_realloc_chunk:yd,_ttyname:uo,_ttyname_r:Yn,_twobyte_memmem:Ip,_twobyte_strstr:ap,_twoway_memmem:Lp,_twoway_strstr:dp,_twoway_wcsstr:gp,_ualarm:Jn,_umask:fe,_uname:io,_ungetc:iw,_ungetwc:hv,_unlink:gj,_unlinkat:No,_unlockpt:FB,_utimensat:$d,_valloc:Ed,_vasprintf:ku,_vdprintf:Pv,_versionsort:kq,_vfprintf:uh,_vfscanf:mv,_vfwprintf:Ju,_vfwscanf:gv,_vprintf:Rv,_vscanf:qv,_vsnprintf:th,_vsprintf:Sj,_vsscanf:$v,_vstrfmon_l:rh,_vswprintf:uw,_vswscanf:Fv,_vwprintf:Iu,_vwscanf:fv,_wcpcpy:Zo,_wcpncpy:Bp,_wcrtomb:Kh,_wcscasecmp:zp,_wcscasecmp_l:yp,_wcscat:np,_wcschr:Fg,_wcscmp:Yh,_wcscoll:Zh,_wcscpy:_o,_wcscspn:Yo,_wcsdup:Tp,_wcslen:Gg,_wcsncasecmp:Wo,_wcsncasecmp_l:Vo,_wcsncat:kp,_wcsncmp:Op,_wcsncpy:Cp,_wcsnlen:Dp,_wcsnrtombs:jn,_wcspbrk:Xp,_wcsrchr:Qp,_wcsrtombs:cn,_wcsspn:Zp,_wcsstr:fp,_wcstod:nk,_wcstof:kk,_wcstoimax:ck,_wcstok:Yp,_wcstol:bk,_wcstold:ok,_wcstoll:$j,_wcstombs:bn,_wcstoul:ak,_wcstoull:Yj,_wcstoumax:dk,_wcstox:Zj,_wcstox_88:lk,_wcswcs:ep,_wcswidth:Om,_wcsxfrm:Li,_wctob:ln,_wctomb:Fh,_wctrans:Ag,_wctrans_l:zg,_wctype:kh,_wctype_l:jh,_wcwidth:Lm,_wmemchr:ip,_wmemcmp:hp,_wmemcpy:Ki,_wmemmove:Rp,_wmemset:Ep,_wms_close:dv,_wms_seek:cv,_wms_write:bv,_wordexp:lB,_wordfree:nB,_wprintf:Hu,_wprintf_core:Ku,_wrap_write:Qv,_write:Bo,_writev:no,_wscanf:ev,_wstring_read:Gv,_y0:ns,_y0f:Fr,_y1:Et,_y1f:Bq,_yn:Kt,_ynf:Vt,dynCall_ii:iD,dynCall_iii:jD,dynCall_iiii:kD,dynCall_iiiii:lD,dynCall_iiiiii:mD,dynCall_v:nD,dynCall_vi:oD,establishStackSpace:ld,getTempRet0:od,runPostSets:PC,setTempRet0:nd,setThrew:md,stackAlloc:id,stackRestore:kd,stackSave:jd}})


// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg,Module.asmLibraryArg,buffer);var _BF_crypt=Module["_BF_crypt"]=asm["_BF_crypt"];var _BF_decode=Module["_BF_decode"]=asm["_BF_decode"];var _BF_encode=Module["_BF_encode"]=asm["_BF_encode"];var _BF_encrypt=Module["_BF_encrypt"]=asm["_BF_encrypt"];var _BF_set_key=Module["_BF_set_key"]=asm["_BF_set_key"];var _BF_swap=Module["_BF_swap"]=asm["_BF_swap"];var _S=Module["_S"]=asm["_S"];var ___DOUBLE_BITS=Module["___DOUBLE_BITS"]=asm["___DOUBLE_BITS"];var ___DOUBLE_BITS_124=Module["___DOUBLE_BITS_124"]=asm["___DOUBLE_BITS_124"];var ___DOUBLE_BITS_336=Module["___DOUBLE_BITS_336"]=asm["___DOUBLE_BITS_336"];var ___DOUBLE_BITS_344=Module["___DOUBLE_BITS_344"]=asm["___DOUBLE_BITS_344"];var ___DOUBLE_BITS_347=Module["___DOUBLE_BITS_347"]=asm["___DOUBLE_BITS_347"];var ___DOUBLE_BITS_397=Module["___DOUBLE_BITS_397"]=asm["___DOUBLE_BITS_397"];var ___DOUBLE_BITS_398=Module["___DOUBLE_BITS_398"]=asm["___DOUBLE_BITS_398"];var ___DOUBLE_BITS_401=Module["___DOUBLE_BITS_401"]=asm["___DOUBLE_BITS_401"];var ___DOUBLE_BITS_402=Module["___DOUBLE_BITS_402"]=asm["___DOUBLE_BITS_402"];var ___DOUBLE_BITS_413=Module["___DOUBLE_BITS_413"]=asm["___DOUBLE_BITS_413"];var ___DOUBLE_BITS_436=Module["___DOUBLE_BITS_436"]=asm["___DOUBLE_BITS_436"];var ___DOUBLE_BITS_440=Module["___DOUBLE_BITS_440"]=asm["___DOUBLE_BITS_440"];var ___DOUBLE_BITS_441=Module["___DOUBLE_BITS_441"]=asm["___DOUBLE_BITS_441"];var ___DOUBLE_BITS_460=Module["___DOUBLE_BITS_460"]=asm["___DOUBLE_BITS_460"];var ___DOUBLE_BITS_475=Module["___DOUBLE_BITS_475"]=asm["___DOUBLE_BITS_475"];var ___DOUBLE_BITS_537=Module["___DOUBLE_BITS_537"]=asm["___DOUBLE_BITS_537"];var ___DOUBLE_BITS_91=Module["___DOUBLE_BITS_91"]=asm["___DOUBLE_BITS_91"];var ___FLOAT_BITS=Module["___FLOAT_BITS"]=asm["___FLOAT_BITS"];var ___FLOAT_BITS_102=Module["___FLOAT_BITS_102"]=asm["___FLOAT_BITS_102"];var ___FLOAT_BITS_105=Module["___FLOAT_BITS_105"]=asm["___FLOAT_BITS_105"];var ___FLOAT_BITS_339=Module["___FLOAT_BITS_339"]=asm["___FLOAT_BITS_339"];var ___FLOAT_BITS_354=Module["___FLOAT_BITS_354"]=asm["___FLOAT_BITS_354"];var ___FLOAT_BITS_358=Module["___FLOAT_BITS_358"]=asm["___FLOAT_BITS_358"];var ___FLOAT_BITS_386=Module["___FLOAT_BITS_386"]=asm["___FLOAT_BITS_386"];var ___FLOAT_BITS_405=Module["___FLOAT_BITS_405"]=asm["___FLOAT_BITS_405"];var ___FLOAT_BITS_408=Module["___FLOAT_BITS_408"]=asm["___FLOAT_BITS_408"];var ___FLOAT_BITS_424=Module["___FLOAT_BITS_424"]=asm["___FLOAT_BITS_424"];var ___FLOAT_BITS_439=Module["___FLOAT_BITS_439"]=asm["___FLOAT_BITS_439"];var ___FLOAT_BITS_442=Module["___FLOAT_BITS_442"]=asm["___FLOAT_BITS_442"];var ___FLOAT_BITS_480=Module["___FLOAT_BITS_480"]=asm["___FLOAT_BITS_480"];var ___bswap_16=Module["___bswap_16"]=asm["___bswap_16"];var ___bswap_16_712=Module["___bswap_16_712"]=asm["___bswap_16_712"];var ___bswap_32=Module["___bswap_32"]=asm["___bswap_32"];var ___bswap_32_717=Module["___bswap_32_717"]=asm["___bswap_32_717"];var ___cos=Module["___cos"]=asm["___cos"];var ___cosdf=Module["___cosdf"]=asm["___cosdf"];var ___crypt_blowfish=Module["___crypt_blowfish"]=asm["___crypt_blowfish"];var ___crypt_des=Module["___crypt_des"]=asm["___crypt_des"];var ___crypt_md5=Module["___crypt_md5"]=asm["___crypt_md5"];var ___crypt_r=Module["___crypt_r"]=asm["___crypt_r"];var ___crypt_sha256=Module["___crypt_sha256"]=asm["___crypt_sha256"];var ___crypt_sha512=Module["___crypt_sha512"]=asm["___crypt_sha512"];var ___ctype_b_loc=Module["___ctype_b_loc"]=asm["___ctype_b_loc"];var ___ctype_get_mb_cur_max=Module["___ctype_get_mb_cur_max"]=asm["___ctype_get_mb_cur_max"];var ___ctype_tolower_loc=Module["___ctype_tolower_loc"]=asm["___ctype_tolower_loc"];var ___ctype_toupper_loc=Module["___ctype_toupper_loc"]=asm["___ctype_toupper_loc"];var ___des_setkey=Module["___des_setkey"]=asm["___des_setkey"];var ___divdi3=Module["___divdi3"]=asm["___divdi3"];var ___dn_comp=Module["___dn_comp"]=asm["___dn_comp"];var ___dn_expand=Module["___dn_expand"]=asm["___dn_expand"];var ___dns_count_addrs=Module["___dns_count_addrs"]=asm["___dns_count_addrs"];var ___dns_doqueries=Module["___dns_doqueries"]=asm["___dns_doqueries"];var ___dns_get_rr=Module["___dns_get_rr"]=asm["___dns_get_rr"];var ___dns_parse=Module["___dns_parse"]=asm["___dns_parse"];var ___dns_query=Module["___dns_query"]=asm["___dns_query"];var ___do_des=Module["___do_des"]=asm["___do_des"];var ___do_orphaned_stdio_locks=Module["___do_orphaned_stdio_locks"]=asm["___do_orphaned_stdio_locks"];var ___dup3=Module["___dup3"]=asm["___dup3"];var ___duplocale=Module["___duplocale"]=asm["___duplocale"];var ___emscripten_pthread_data_constructor=Module["___emscripten_pthread_data_constructor"]=asm["___emscripten_pthread_data_constructor"];var ___errno_location=Module["___errno_location"]=asm["___errno_location"];var ___expo2=Module["___expo2"]=asm["___expo2"];var ___expo2f=Module["___expo2f"]=asm["___expo2f"];var ___fbufsize=Module["___fbufsize"]=asm["___fbufsize"];var ___fclose_ca=Module["___fclose_ca"]=asm["___fclose_ca"];var ___fdopen=Module["___fdopen"]=asm["___fdopen"];var ___fesetround=Module["___fesetround"]=asm["___fesetround"];var ___fflush_unlocked=Module["___fflush_unlocked"]=asm["___fflush_unlocked"];var ___fgetwc_unlocked=Module["___fgetwc_unlocked"]=asm["___fgetwc_unlocked"];var ___fgetwc_unlocked_internal=Module["___fgetwc_unlocked_internal"]=asm["___fgetwc_unlocked_internal"];var ___flbf=Module["___flbf"]=asm["___flbf"];var ___floatscan=Module["___floatscan"]=asm["___floatscan"];var ___flt_rounds=Module["___flt_rounds"]=asm["___flt_rounds"];var ___fmodeflags=Module["___fmodeflags"]=asm["___fmodeflags"];var ___fopen_rb_ca=Module["___fopen_rb_ca"]=asm["___fopen_rb_ca"];var ___fpclassify=Module["___fpclassify"]=asm["___fpclassify"];var ___fpclassifyf=Module["___fpclassifyf"]=asm["___fpclassifyf"];var ___fpclassifyl=Module["___fpclassifyl"]=asm["___fpclassifyl"];var ___fpending=Module["___fpending"]=asm["___fpending"];var ___fpurge=Module["___fpurge"]=asm["___fpurge"];var ___fputwc_unlocked=Module["___fputwc_unlocked"]=asm["___fputwc_unlocked"];var ___freadable=Module["___freadable"]=asm["___freadable"];var ___freadahead=Module["___freadahead"]=asm["___freadahead"];var ___freading=Module["___freading"]=asm["___freading"];var ___freadptr=Module["___freadptr"]=asm["___freadptr"];var ___freadptrinc=Module["___freadptrinc"]=asm["___freadptrinc"];var ___frexp_exp=Module["___frexp_exp"]=asm["___frexp_exp"];var ___frexp_expf=Module["___frexp_expf"]=asm["___frexp_expf"];var ___fseeko=Module["___fseeko"]=asm["___fseeko"];var ___fseeko_unlocked=Module["___fseeko_unlocked"]=asm["___fseeko_unlocked"];var ___fseterr=Module["___fseterr"]=asm["___fseterr"];var ___fsetlocking=Module["___fsetlocking"]=asm["___fsetlocking"];var ___fstatfs=Module["___fstatfs"]=asm["___fstatfs"];var ___ftello=Module["___ftello"]=asm["___ftello"];var ___ftello_unlocked=Module["___ftello_unlocked"]=asm["___ftello_unlocked"];var ___futimesat=Module["___futimesat"]=asm["___futimesat"];var ___fwritable=Module["___fwritable"]=asm["___fwritable"];var ___fwritex=Module["___fwritex"]=asm["___fwritex"];var ___fwriting=Module["___fwriting"]=asm["___fwriting"];var ___fxstat=Module["___fxstat"]=asm["___fxstat"];var ___fxstatat=Module["___fxstatat"]=asm["___fxstatat"];var ___get_locale=Module["___get_locale"]=asm["___get_locale"];var ___get_resolv_conf=Module["___get_resolv_conf"]=asm["___get_resolv_conf"];var ___getdents=Module["___getdents"]=asm["___getdents"];var ___getopt_long=Module["___getopt_long"]=asm["___getopt_long"];var ___getopt_long_core=Module["___getopt_long_core"]=asm["___getopt_long_core"];var ___getopt_msg=Module["___getopt_msg"]=asm["___getopt_msg"];var ___gettextdomain=Module["___gettextdomain"]=asm["___gettextdomain"];var ___h_errno_location=Module["___h_errno_location"]=asm["___h_errno_location"];var ___inet_aton=Module["___inet_aton"]=asm["___inet_aton"];var ___intscan=Module["___intscan"]=asm["___intscan"];var ___ipparse=Module["___ipparse"]=asm["___ipparse"];var ___isalnum_l=Module["___isalnum_l"]=asm["___isalnum_l"];var ___isalpha_l=Module["___isalpha_l"]=asm["___isalpha_l"];var ___isblank_l=Module["___isblank_l"]=asm["___isblank_l"];var ___iscntrl_l=Module["___iscntrl_l"]=asm["___iscntrl_l"];var ___isdigit_l=Module["___isdigit_l"]=asm["___isdigit_l"];var ___isgraph_l=Module["___isgraph_l"]=asm["___isgraph_l"];var ___islower_l=Module["___islower_l"]=asm["___islower_l"];var ___isprint_l=Module["___isprint_l"]=asm["___isprint_l"];var ___ispunct_l=Module["___ispunct_l"]=asm["___ispunct_l"];var ___isspace_l=Module["___isspace_l"]=asm["___isspace_l"];var ___isupper_l=Module["___isupper_l"]=asm["___isupper_l"];var ___iswalnum_l=Module["___iswalnum_l"]=asm["___iswalnum_l"];var ___iswalpha_l=Module["___iswalpha_l"]=asm["___iswalpha_l"];var ___iswblank_l=Module["___iswblank_l"]=asm["___iswblank_l"];var ___iswcntrl_l=Module["___iswcntrl_l"]=asm["___iswcntrl_l"];var ___iswctype_l=Module["___iswctype_l"]=asm["___iswctype_l"];var ___iswdigit_l=Module["___iswdigit_l"]=asm["___iswdigit_l"];var ___iswgraph_l=Module["___iswgraph_l"]=asm["___iswgraph_l"];var ___iswlower_l=Module["___iswlower_l"]=asm["___iswlower_l"];var ___iswprint_l=Module["___iswprint_l"]=asm["___iswprint_l"];var ___iswpunct_l=Module["___iswpunct_l"]=asm["___iswpunct_l"];var ___iswspace_l=Module["___iswspace_l"]=asm["___iswspace_l"];var ___iswupper_l=Module["___iswupper_l"]=asm["___iswupper_l"];var ___iswxdigit_l=Module["___iswxdigit_l"]=asm["___iswxdigit_l"];var ___isxdigit_l=Module["___isxdigit_l"]=asm["___isxdigit_l"];var ___lctrans=Module["___lctrans"]=asm["___lctrans"];var ___lctrans_cur=Module["___lctrans_cur"]=asm["___lctrans_cur"];var ___lctrans_impl=Module["___lctrans_impl"]=asm["___lctrans_impl"];var ___ldexp_cexp=Module["___ldexp_cexp"]=asm["___ldexp_cexp"];var ___ldexp_cexpf=Module["___ldexp_cexpf"]=asm["___ldexp_cexpf"];var ___lgamma_r=Module["___lgamma_r"]=asm["___lgamma_r"];var ___lgammaf_r=Module["___lgammaf_r"]=asm["___lgammaf_r"];var ___lgammal_r=Module["___lgammal_r"]=asm["___lgammal_r"];var ___libc_get_version=Module["___libc_get_version"]=asm["___libc_get_version"];var ___loc_is_allocated=Module["___loc_is_allocated"]=asm["___loc_is_allocated"];var ___lockfile=Module["___lockfile"]=asm["___lockfile"];var ___lookup_ipliteral=Module["___lookup_ipliteral"]=asm["___lookup_ipliteral"];var ___lookup_name=Module["___lookup_name"]=asm["___lookup_name"];var ___lookup_serv=Module["___lookup_serv"]=asm["___lookup_serv"];var ___lxstat=Module["___lxstat"]=asm["___lxstat"];var ___madvise=Module["___madvise"]=asm["___madvise"];var ___memrchr=Module["___memrchr"]=asm["___memrchr"];var ___mkostemps=Module["___mkostemps"]=asm["___mkostemps"];var ___mmap=Module["___mmap"]=asm["___mmap"];var ___mo_lookup=Module["___mo_lookup"]=asm["___mo_lookup"];var ___mprotect=Module["___mprotect"]=asm["___mprotect"];var ___mremap=Module["___mremap"]=asm["___mremap"];var ___muldi3=Module["___muldi3"]=asm["___muldi3"];var ___muldsi3=Module["___muldsi3"]=asm["___muldsi3"];var ___munmap=Module["___munmap"]=asm["___munmap"];var ___netlink_enumerate=Module["___netlink_enumerate"]=asm["___netlink_enumerate"];var ___newlocale=Module["___newlocale"]=asm["___newlocale"];var ___nl_langinfo=Module["___nl_langinfo"]=asm["___nl_langinfo"];var ___nl_langinfo_l=Module["___nl_langinfo_l"]=asm["___nl_langinfo_l"];var ___ofl_add=Module["___ofl_add"]=asm["___ofl_add"];var ___ofl_lock=Module["___ofl_lock"]=asm["___ofl_lock"];var ___ofl_unlock=Module["___ofl_unlock"]=asm["___ofl_unlock"];var ___openlog=Module["___openlog"]=asm["___openlog"];var ___overflow=Module["___overflow"]=asm["___overflow"];var ___pleval=Module["___pleval"]=asm["___pleval"];var ___procfdname=Module["___procfdname"]=asm["___procfdname"];var ___pthread_self=Module["___pthread_self"]=asm["___pthread_self"];var ___pthread_self_131=Module["___pthread_self_131"]=asm["___pthread_self_131"];var ___pthread_self_18=Module["___pthread_self_18"]=asm["___pthread_self_18"];var ___pthread_self_209=Module["___pthread_self_209"]=asm["___pthread_self_209"];var ___pthread_self_215=Module["___pthread_self_215"]=asm["___pthread_self_215"];var ___pthread_self_219=Module["___pthread_self_219"]=asm["___pthread_self_219"];var ___pthread_self_222=Module["___pthread_self_222"]=asm["___pthread_self_222"];var ___pthread_self_223=Module["___pthread_self_223"]=asm["___pthread_self_223"];var ___pthread_self_224=Module["___pthread_self_224"]=asm["___pthread_self_224"];var ___pthread_self_23=Module["___pthread_self_23"]=asm["___pthread_self_23"];var ___pthread_self_30=Module["___pthread_self_30"]=asm["___pthread_self_30"];var ___pthread_self_308=Module["___pthread_self_308"]=asm["___pthread_self_308"];var ___pthread_self_32=Module["___pthread_self_32"]=asm["___pthread_self_32"];var ___pthread_self_39=Module["___pthread_self_39"]=asm["___pthread_self_39"];var ___pthread_self_40=Module["___pthread_self_40"]=asm["___pthread_self_40"];var ___pthread_self_41=Module["___pthread_self_41"]=asm["___pthread_self_41"];var ___pthread_self_511=Module["___pthread_self_511"]=asm["___pthread_self_511"];var ___pthread_self_512=Module["___pthread_self_512"]=asm["___pthread_self_512"];var ___pthread_self_53=Module["___pthread_self_53"]=asm["___pthread_self_53"];var ___pthread_self_549=Module["___pthread_self_549"]=asm["___pthread_self_549"];var ___pthread_self_554=Module["___pthread_self_554"]=asm["___pthread_self_554"];var ___pthread_self_56=Module["___pthread_self_56"]=asm["___pthread_self_56"];var ___pthread_self_592=Module["___pthread_self_592"]=asm["___pthread_self_592"];var ___pthread_self_607=Module["___pthread_self_607"]=asm["___pthread_self_607"];var ___pthread_self_628=Module["___pthread_self_628"]=asm["___pthread_self_628"];var ___ptsname_r=Module["___ptsname_r"]=asm["___ptsname_r"];var ___rand48_step=Module["___rand48_step"]=asm["___rand48_step"];var ___randname=Module["___randname"]=asm["___randname"];var ___rem_pio2=Module["___rem_pio2"]=asm["___rem_pio2"];var ___rem_pio2_large=Module["___rem_pio2_large"]=asm["___rem_pio2_large"];var ___rem_pio2f=Module["___rem_pio2f"]=asm["___rem_pio2f"];var ___res_mkquery=Module["___res_mkquery"]=asm["___res_mkquery"];var ___res_msend=Module["___res_msend"]=asm["___res_msend"];var ___res_msend_rc=Module["___res_msend_rc"]=asm["___res_msend_rc"];var ___res_send=Module["___res_send"]=asm["___res_send"];var ___res_state=Module["___res_state"]=asm["___res_state"];var ___rtnetlink_enumerate=Module["___rtnetlink_enumerate"]=asm["___rtnetlink_enumerate"];var ___setrlimit=Module["___setrlimit"]=asm["___setrlimit"];var ___setxid=Module["___setxid"]=asm["___setxid"];var ___shgetc=Module["___shgetc"]=asm["___shgetc"];var ___shlim=Module["___shlim"]=asm["___shlim"];var ___shm_mapname=Module["___shm_mapname"]=asm["___shm_mapname"];var ___signbit=Module["___signbit"]=asm["___signbit"];var ___signbitf=Module["___signbitf"]=asm["___signbitf"];var ___signbitl=Module["___signbitl"]=asm["___signbitl"];var ___sin=Module["___sin"]=asm["___sin"];var ___sindf=Module["___sindf"]=asm["___sindf"];var ___srandom=Module["___srandom"]=asm["___srandom"];var ___statfs=Module["___statfs"]=asm["___statfs"];var ___stdio_close=Module["___stdio_close"]=asm["___stdio_close"];var ___stdio_exit=Module["___stdio_exit"]=asm["___stdio_exit"];var ___stdio_read=Module["___stdio_read"]=asm["___stdio_read"];var ___stdio_seek=Module["___stdio_seek"]=asm["___stdio_seek"];var ___stdio_write=Module["___stdio_write"]=asm["___stdio_write"];var ___stdout_write=Module["___stdout_write"]=asm["___stdout_write"];var ___stpcpy=Module["___stpcpy"]=asm["___stpcpy"];var ___stpncpy=Module["___stpncpy"]=asm["___stpncpy"];var ___strcasecmp_l=Module["___strcasecmp_l"]=asm["___strcasecmp_l"];var ___strchrnul=Module["___strchrnul"]=asm["___strchrnul"];var ___strcoll_l=Module["___strcoll_l"]=asm["___strcoll_l"];var ___strdup=Module["___strdup"]=asm["___strdup"];var ___strerror_l=Module["___strerror_l"]=asm["___strerror_l"];var ___string_read=Module["___string_read"]=asm["___string_read"];var ___strncasecmp_l=Module["___strncasecmp_l"]=asm["___strncasecmp_l"];var ___strxfrm_l=Module["___strxfrm_l"]=asm["___strxfrm_l"];var ___synccall=Module["___synccall"]=asm["___synccall"];var ___syscall_ret=Module["___syscall_ret"]=asm["___syscall_ret"];var ___tan=Module["___tan"]=asm["___tan"];var ___tandf=Module["___tandf"]=asm["___tandf"];var ___tolower_l=Module["___tolower_l"]=asm["___tolower_l"];var ___toread=Module["___toread"]=asm["___toread"];var ___toread_needs_stdio_exit=Module["___toread_needs_stdio_exit"]=asm["___toread_needs_stdio_exit"];var ___toupper_l=Module["___toupper_l"]=asm["___toupper_l"];var ___towcase=Module["___towcase"]=asm["___towcase"];var ___towctrans_l=Module["___towctrans_l"]=asm["___towctrans_l"];var ___towlower_l=Module["___towlower_l"]=asm["___towlower_l"];var ___towrite=Module["___towrite"]=asm["___towrite"];var ___towrite_needs_stdio_exit=Module["___towrite_needs_stdio_exit"]=asm["___towrite_needs_stdio_exit"];var ___towupper_l=Module["___towupper_l"]=asm["___towupper_l"];var ___tre_mem_alloc_impl=Module["___tre_mem_alloc_impl"]=asm["___tre_mem_alloc_impl"];var ___tre_mem_destroy=Module["___tre_mem_destroy"]=asm["___tre_mem_destroy"];var ___tre_mem_new_impl=Module["___tre_mem_new_impl"]=asm["___tre_mem_new_impl"];var ___udivdi3=Module["___udivdi3"]=asm["___udivdi3"];var ___udivmoddi4=Module["___udivmoddi4"]=asm["___udivmoddi4"];var ___uflow=Module["___uflow"]=asm["___uflow"];var ___unlist_locked_file=Module["___unlist_locked_file"]=asm["___unlist_locked_file"];var ___unlockfile=Module["___unlockfile"]=asm["___unlockfile"];var ___uselocale=Module["___uselocale"]=asm["___uselocale"];var ___vsyslog=Module["___vsyslog"]=asm["___vsyslog"];var ___wcscoll_l=Module["___wcscoll_l"]=asm["___wcscoll_l"];var ___wcsxfrm_l=Module["___wcsxfrm_l"]=asm["___wcsxfrm_l"];var ___wctrans_l=Module["___wctrans_l"]=asm["___wctrans_l"];var ___wctype_l=Module["___wctype_l"]=asm["___wctype_l"];var ___xmknod=Module["___xmknod"]=asm["___xmknod"];var ___xmknodat=Module["___xmknodat"]=asm["___xmknodat"];var ___xstat=Module["___xstat"]=asm["___xstat"];var __crypt_extended_r_uut=Module["__crypt_extended_r_uut"]=asm["__crypt_extended_r_uut"];var __flushlbf=Module["__flushlbf"]=asm["__flushlbf"];var __redupi=Module["__redupi"]=asm["__redupi"];var __redupif=Module["__redupif"]=asm["__redupif"];var __strcolcmp=Module["__strcolcmp"]=asm["__strcolcmp"];var __vsyslog=Module["__vsyslog"]=asm["__vsyslog"];var _a64l=Module["_a64l"]=asm["_a64l"];var _a_cas=Module["_a_cas"]=asm["_a_cas"];var _a_cas_p=Module["_a_cas_p"]=asm["_a_cas_p"];var _a_ctz_64=Module["_a_ctz_64"]=asm["_a_ctz_64"];var _a_ctz_l=Module["_a_ctz_l"]=asm["_a_ctz_l"];var _a_ctz_l_741=Module["_a_ctz_l_741"]=asm["_a_ctz_l_741"];var _a_ctz_l_770=Module["_a_ctz_l_770"]=asm["_a_ctz_l_770"];var _a_ctz_l_781=Module["_a_ctz_l_781"]=asm["_a_ctz_l_781"];var _a_store=Module["_a_store"]=asm["_a_store"];var _a_store_513=Module["_a_store_513"]=asm["_a_store_513"];var _accept=Module["_accept"]=asm["_accept"];var _accept4=Module["_accept4"]=asm["_accept4"];var _access=Module["_access"]=asm["_access"];var _acct=Module["_acct"]=asm["_acct"];var _acosh=Module["_acosh"]=asm["_acosh"];var _acoshf=Module["_acoshf"]=asm["_acoshf"];var _acoshl=Module["_acoshl"]=asm["_acoshl"];var _add_adjusted=Module["_add_adjusted"]=asm["_add_adjusted"];var _add_and_denormalize=Module["_add_and_denormalize"]=asm["_add_and_denormalize"];var _add_icase_literals=Module["_add_icase_literals"]=asm["_add_icase_literals"];var _addmntent=Module["_addmntent"]=asm["_addmntent"];var _addr_decode=Module["_addr_decode"]=asm["_addr_decode"];var _addr_encode=Module["_addr_encode"]=asm["_addr_encode"];var _addrcmp=Module["_addrcmp"]=asm["_addrcmp"];var _aligned_alloc=Module["_aligned_alloc"]=asm["_aligned_alloc"];var _alphasort=Module["_alphasort"]=asm["_alphasort"];var _append=Module["_append"]=asm["_append"];var _arg_n=Module["_arg_n"]=asm["_arg_n"];var _arg_n_612=Module["_arg_n_612"]=asm["_arg_n_612"];var _ascii_is_unsafe=Module["_ascii_is_unsafe"]=asm["_ascii_is_unsafe"];var _ascii_to_bin=Module["_ascii_to_bin"]=asm["_ascii_to_bin"];var _asinh=Module["_asinh"]=asm["_asinh"];var _asinhf=Module["_asinhf"]=asm["_asinhf"];var _asinhl=Module["_asinhl"]=asm["_asinhl"];var _asprintf=Module["_asprintf"]=asm["_asprintf"];var _atanh=Module["_atanh"]=asm["_atanh"];var _atanhf=Module["_atanhf"]=asm["_atanhf"];var _atanhl=Module["_atanhl"]=asm["_atanhl"];var _atof=Module["_atof"]=asm["_atof"];var _atoi=Module["_atoi"]=asm["_atoi"];var _atol=Module["_atol"]=asm["_atol"];var _atoll=Module["_atoll"]=asm["_atoll"];var _basename=Module["_basename"]=asm["_basename"];var _bcmp=Module["_bcmp"]=asm["_bcmp"];var _bcopy=Module["_bcopy"]=asm["_bcopy"];var _bind=Module["_bind"]=asm["_bind"];var _bind_textdomain_codeset=Module["_bind_textdomain_codeset"]=asm["_bind_textdomain_codeset"];var _bindtextdomain=Module["_bindtextdomain"]=asm["_bindtextdomain"];var _binop=Module["_binop"]=asm["_binop"];var _bitshift64Ashr=Module["_bitshift64Ashr"]=asm["_bitshift64Ashr"];var _bitshift64Lshr=Module["_bitshift64Lshr"]=asm["_bitshift64Lshr"];var _bitshift64Shl=Module["_bitshift64Shl"]=asm["_bitshift64Shl"];var _bsearch=Module["_bsearch"]=asm["_bsearch"];var _btowc=Module["_btowc"]=asm["_btowc"];var _bulk_free=Module["_bulk_free"]=asm["_bulk_free"];var _bzero=Module["_bzero"]=asm["_bzero"];var _c16rtomb=Module["_c16rtomb"]=asm["_c16rtomb"];var _c32rtomb=Module["_c32rtomb"]=asm["_c32rtomb"];var _cabs=Module["_cabs"]=asm["_cabs"];var _cabsf=Module["_cabsf"]=asm["_cabsf"];var _cabsl=Module["_cabsl"]=asm["_cabsl"];var _cacos=Module["_cacos"]=asm["_cacos"];var _cacosf=Module["_cacosf"]=asm["_cacosf"];var _cacosh=Module["_cacosh"]=asm["_cacosh"];var _cacoshf=Module["_cacoshf"]=asm["_cacoshf"];var _cacoshl=Module["_cacoshl"]=asm["_cacoshl"];var _cacosl=Module["_cacosl"]=asm["_cacosl"];var _calloc=Module["_calloc"]=asm["_calloc"];var _carg=Module["_carg"]=asm["_carg"];var _cargf=Module["_cargf"]=asm["_cargf"];var _cargl=Module["_cargl"]=asm["_cargl"];var _casefold=Module["_casefold"]=asm["_casefold"];var _casin=Module["_casin"]=asm["_casin"];var _casinf=Module["_casinf"]=asm["_casinf"];var _casinh=Module["_casinh"]=asm["_casinh"];var _casinhf=Module["_casinhf"]=asm["_casinhf"];var _casinhl=Module["_casinhl"]=asm["_casinhl"];var _casinl=Module["_casinl"]=asm["_casinl"];var _catan=Module["_catan"]=asm["_catan"];var _catanf=Module["_catanf"]=asm["_catanf"];var _catanh=Module["_catanh"]=asm["_catanh"];var _catanhf=Module["_catanhf"]=asm["_catanhf"];var _catanhl=Module["_catanhl"]=asm["_catanhl"];var _catanl=Module["_catanl"]=asm["_catanl"];var _catclose=Module["_catclose"]=asm["_catclose"];var _catgets=Module["_catgets"]=asm["_catgets"];var _catopen=Module["_catopen"]=asm["_catopen"];var _cbrt=Module["_cbrt"]=asm["_cbrt"];var _cbrtf=Module["_cbrtf"]=asm["_cbrtf"];var _cbrtl=Module["_cbrtl"]=asm["_cbrtl"];var _ccos=Module["_ccos"]=asm["_ccos"];var _ccosf=Module["_ccosf"]=asm["_ccosf"];var _ccosh=Module["_ccosh"]=asm["_ccosh"];var _ccoshf=Module["_ccoshf"]=asm["_ccoshf"];var _ccoshl=Module["_ccoshl"]=asm["_ccoshl"];var _ccosl=Module["_ccosl"]=asm["_ccosl"];var _cexp=Module["_cexp"]=asm["_cexp"];var _cexpf=Module["_cexpf"]=asm["_cexpf"];var _cexpl=Module["_cexpl"]=asm["_cexpl"];var _cfgetispeed=Module["_cfgetispeed"]=asm["_cfgetispeed"];var _cfgetospeed=Module["_cfgetospeed"]=asm["_cfgetospeed"];var _cfmakeraw=Module["_cfmakeraw"]=asm["_cfmakeraw"];var _cfsetispeed=Module["_cfsetispeed"]=asm["_cfsetispeed"];var _cfsetospeed=Module["_cfsetospeed"]=asm["_cfsetospeed"];var _chdir=Module["_chdir"]=asm["_chdir"];var _checker=Module["_checker"]=asm["_checker"];var _chmod=Module["_chmod"]=asm["_chmod"];var _chown=Module["_chown"]=asm["_chown"];var _cimag=Module["_cimag"]=asm["_cimag"];var _cimagf=Module["_cimagf"]=asm["_cimagf"];var _cimagl=Module["_cimagl"]=asm["_cimagl"];var _cleanup=Module["_cleanup"]=asm["_cleanup"];var _cleanup_650=Module["_cleanup_650"]=asm["_cleanup_650"];var _clearerr=Module["_clearerr"]=asm["_clearerr"];var _clog=Module["_clog"]=asm["_clog"];var _clogf=Module["_clogf"]=asm["_clogf"];var _clogl=Module["_clogl"]=asm["_clogl"];var _close=Module["_close"]=asm["_close"];var _close_file=Module["_close_file"]=asm["_close_file"];var _closedir=Module["_closedir"]=asm["_closedir"];var _closelog=Module["_closelog"]=asm["_closelog"];var _common=Module["_common"]=asm["_common"];var _common_355=Module["_common_355"]=asm["_common_355"];var _common_367=Module["_common_367"]=asm["_common_367"];var _common_443=Module["_common_443"]=asm["_common_443"];var _conj=Module["_conj"]=asm["_conj"];var _conjf=Module["_conjf"]=asm["_conjf"];var _conjl=Module["_conjl"]=asm["_conjl"];var _connect=Module["_connect"]=asm["_connect"];var _convert_bits=Module["_convert_bits"]=asm["_convert_bits"];var _copy_addr=Module["_copy_addr"]=asm["_copy_addr"];var _copy_lladdr=Module["_copy_lladdr"]=asm["_copy_lladdr"];var _copysign=Module["_copysign"]=asm["_copysign"];var _copysignf=Module["_copysignf"]=asm["_copysignf"];var _copysignl=Module["_copysignl"]=asm["_copysignl"];var _cosh=Module["_cosh"]=asm["_cosh"];var _coshf=Module["_coshf"]=asm["_coshf"];var _coshl=Module["_coshl"]=asm["_coshl"];var _cpow=Module["_cpow"]=asm["_cpow"];var _cpowf=Module["_cpowf"]=asm["_cpowf"];var _cpowl=Module["_cpowl"]=asm["_cpowl"];var _cproj=Module["_cproj"]=asm["_cproj"];var _cprojf=Module["_cprojf"]=asm["_cprojf"];var _cprojl=Module["_cprojl"]=asm["_cprojl"];var _creal=Module["_creal"]=asm["_creal"];var _crealf=Module["_crealf"]=asm["_crealf"];var _creall=Module["_creall"]=asm["_creall"];var _creat=Module["_creat"]=asm["_creat"];var _crypt=Module["_crypt"]=asm["_crypt"];var _csin=Module["_csin"]=asm["_csin"];var _csinf=Module["_csinf"]=asm["_csinf"];var _csinh=Module["_csinh"]=asm["_csinh"];var _csinhf=Module["_csinhf"]=asm["_csinhf"];var _csinhl=Module["_csinhl"]=asm["_csinhl"];var _csinl=Module["_csinl"]=asm["_csinl"];var _csqrt=Module["_csqrt"]=asm["_csqrt"];var _csqrtf=Module["_csqrtf"]=asm["_csqrtf"];var _csqrtl=Module["_csqrtl"]=asm["_csqrtl"];var _ctan=Module["_ctan"]=asm["_ctan"];var _ctanf=Module["_ctanf"]=asm["_ctanf"];var _ctanh=Module["_ctanh"]=asm["_ctanh"];var _ctanhf=Module["_ctanhf"]=asm["_ctanhf"];var _ctanhl=Module["_ctanhl"]=asm["_ctanhl"];var _ctanl=Module["_ctanl"]=asm["_ctanl"];var _ctermid=Module["_ctermid"]=asm["_ctermid"];var _cycle=Module["_cycle"]=asm["_cycle"];var _dcgettext=Module["_dcgettext"]=asm["_dcgettext"];var _dcngettext=Module["_dcngettext"]=asm["_dcngettext"];var _dd_add=Module["_dd_add"]=asm["_dd_add"];var _dd_mul=Module["_dd_mul"]=asm["_dd_mul"];var _decfloat=Module["_decfloat"]=asm["_decfloat"];var _decode=Module["_decode"]=asm["_decode"];var _des_cipher=Module["_des_cipher"]=asm["_des_cipher"];var _dgettext=Module["_dgettext"]=asm["_dgettext"];var _dirfd=Module["_dirfd"]=asm["_dirfd"];var _dirname=Module["_dirname"]=asm["_dirname"];var _dispose_chunk=Module["_dispose_chunk"]=asm["_dispose_chunk"];var _div=Module["_div"]=asm["_div"];var _dn_skipname=Module["_dn_skipname"]=asm["_dn_skipname"];var _dngettext=Module["_dngettext"]=asm["_dngettext"];var _dns_parse_callback=Module["_dns_parse_callback"]=asm["_dns_parse_callback"];var _do_nftw=Module["_do_nftw"]=asm["_do_nftw"];var _do_read=Module["_do_read"]=asm["_do_read"];var _do_read_583=Module["_do_read_583"]=asm["_do_read_583"];var _do_read_89=Module["_do_read_89"]=asm["_do_read_89"];var _do_setrlimit=Module["_do_setrlimit"]=asm["_do_setrlimit"];var _do_setxid=Module["_do_setxid"]=asm["_do_setxid"];var _do_wordexp=Module["_do_wordexp"]=asm["_do_wordexp"];var _dprintf=Module["_dprintf"]=asm["_dprintf"];var _drand48=Module["_drand48"]=asm["_drand48"];var _dummy=Module["_dummy"]=asm["_dummy"];var _dummy_245=Module["_dummy_245"]=asm["_dummy_245"];var _dup=Module["_dup"]=asm["_dup"];var _dup2=Module["_dup2"]=asm["_dup2"];var _ecvt=Module["_ecvt"]=asm["_ecvt"];var _encode=Module["_encode"]=asm["_encode"];var _encrypt=Module["_encrypt"]=asm["_encrypt"];var _endhostent=Module["_endhostent"]=asm["_endhostent"];var _endmntent=Module["_endmntent"]=asm["_endmntent"];var _endservent=Module["_endservent"]=asm["_endservent"];var _erand48=Module["_erand48"]=asm["_erand48"];var _erf=Module["_erf"]=asm["_erf"];var _erfc=Module["_erfc"]=asm["_erfc"];var _erfc1=Module["_erfc1"]=asm["_erfc1"];var _erfc1_423=Module["_erfc1_423"]=asm["_erfc1_423"];var _erfc2=Module["_erfc2"]=asm["_erfc2"];var _erfc2_422=Module["_erfc2_422"]=asm["_erfc2_422"];var _erfcf=Module["_erfcf"]=asm["_erfcf"];var _erfcl=Module["_erfcl"]=asm["_erfcl"];var _erff=Module["_erff"]=asm["_erff"];var _erfl=Module["_erfl"]=asm["_erfl"];var _ether_aton=Module["_ether_aton"]=asm["_ether_aton"];var _ether_aton_r=Module["_ether_aton_r"]=asm["_ether_aton_r"];var _ether_hostton=Module["_ether_hostton"]=asm["_ether_hostton"];var _ether_line=Module["_ether_line"]=asm["_ether_line"];var _ether_ntoa=Module["_ether_ntoa"]=asm["_ether_ntoa"];var _ether_ntoa_r=Module["_ether_ntoa_r"]=asm["_ether_ntoa_r"];var _ether_ntohost=Module["_ether_ntohost"]=asm["_ether_ntohost"];var _evalbinop=Module["_evalbinop"]=asm["_evalbinop"];var _evalexpr=Module["_evalexpr"]=asm["_evalexpr"];var _evalprim=Module["_evalprim"]=asm["_evalprim"];var _exp10=Module["_exp10"]=asm["_exp10"];var _exp10f=Module["_exp10f"]=asm["_exp10f"];var _exp10l=Module["_exp10l"]=asm["_exp10l"];var _exp2=Module["_exp2"]=asm["_exp2"];var _exp2f=Module["_exp2f"]=asm["_exp2f"];var _exp2l=Module["_exp2l"]=asm["_exp2l"];var _expm1=Module["_expm1"]=asm["_expm1"];var _expm1f=Module["_expm1f"]=asm["_expm1f"];var _expm1l=Module["_expm1l"]=asm["_expm1l"];var _faccessat=Module["_faccessat"]=asm["_faccessat"];var _fchdir=Module["_fchdir"]=asm["_fchdir"];var _fchmod=Module["_fchmod"]=asm["_fchmod"];var _fchmodat=Module["_fchmodat"]=asm["_fchmodat"];var _fchown=Module["_fchown"]=asm["_fchown"];var _fchownat=Module["_fchownat"]=asm["_fchownat"];var _fclose=Module["_fclose"]=asm["_fclose"];var _fcntl=Module["_fcntl"]=asm["_fcntl"];var _fcvt=Module["_fcvt"]=asm["_fcvt"];var _fdatasync=Module["_fdatasync"]=asm["_fdatasync"];var _fdim=Module["_fdim"]=asm["_fdim"];var _fdimf=Module["_fdimf"]=asm["_fdimf"];var _fdiml=Module["_fdiml"]=asm["_fdiml"];var _fdopendir=Module["_fdopendir"]=asm["_fdopendir"];var _feclearexcept=Module["_feclearexcept"]=asm["_feclearexcept"];var _fegetenv=Module["_fegetenv"]=asm["_fegetenv"];var _fegetexceptflag=Module["_fegetexceptflag"]=asm["_fegetexceptflag"];var _fegetround=Module["_fegetround"]=asm["_fegetround"];var _feholdexcept=Module["_feholdexcept"]=asm["_feholdexcept"];var _feof=Module["_feof"]=asm["_feof"];var _feraiseexcept=Module["_feraiseexcept"]=asm["_feraiseexcept"];var _ferror=Module["_ferror"]=asm["_ferror"];var _fesetenv=Module["_fesetenv"]=asm["_fesetenv"];var _fesetexceptflag=Module["_fesetexceptflag"]=asm["_fesetexceptflag"];var _fesetround=Module["_fesetround"]=asm["_fesetround"];var _fetestexcept=Module["_fetestexcept"]=asm["_fetestexcept"];var _feupdateenv=Module["_feupdateenv"]=asm["_feupdateenv"];var _fflush=Module["_fflush"]=asm["_fflush"];var _ffs=Module["_ffs"]=asm["_ffs"];var _ffsl=Module["_ffsl"]=asm["_ffsl"];var _ffsll=Module["_ffsll"]=asm["_ffsll"];var _fgetc=Module["_fgetc"]=asm["_fgetc"];var _fgetln=Module["_fgetln"]=asm["_fgetln"];var _fgetpos=Module["_fgetpos"]=asm["_fgetpos"];var _fgets=Module["_fgets"]=asm["_fgets"];var _fgetwc=Module["_fgetwc"]=asm["_fgetwc"];var _fgetws=Module["_fgetws"]=asm["_fgetws"];var _fileno=Module["_fileno"]=asm["_fileno"];var _find_charmap=Module["_find_charmap"]=asm["_find_charmap"];var _finite=Module["_finite"]=asm["_finite"];var _finitef=Module["_finitef"]=asm["_finitef"];var _fixup=Module["_fixup"]=asm["_fixup"];var _flockfile=Module["_flockfile"]=asm["_flockfile"];var _fma=Module["_fma"]=asm["_fma"];var _fmaf=Module["_fmaf"]=asm["_fmaf"];var _fmal=Module["_fmal"]=asm["_fmal"];var _fmax=Module["_fmax"]=asm["_fmax"];var _fmaxf=Module["_fmaxf"]=asm["_fmaxf"];var _fmaxl=Module["_fmaxl"]=asm["_fmaxl"];var _fmemopen=Module["_fmemopen"]=asm["_fmemopen"];var _fmin=Module["_fmin"]=asm["_fmin"];var _fminf=Module["_fminf"]=asm["_fminf"];var _fminl=Module["_fminl"]=asm["_fminl"];var _fmod=Module["_fmod"]=asm["_fmod"];var _fmodf=Module["_fmodf"]=asm["_fmodf"];var _fmodl=Module["_fmodl"]=asm["_fmodl"];var _fmt_fp=Module["_fmt_fp"]=asm["_fmt_fp"];var _fmt_o=Module["_fmt_o"]=asm["_fmt_o"];var _fmt_u=Module["_fmt_u"]=asm["_fmt_u"];var _fmt_x=Module["_fmt_x"]=asm["_fmt_x"];var _fmtmsg=Module["_fmtmsg"]=asm["_fmtmsg"];var _fnmatch=Module["_fnmatch"]=asm["_fnmatch"];var _fnmatch_internal=Module["_fnmatch_internal"]=asm["_fnmatch_internal"];var _fopen=Module["_fopen"]=asm["_fopen"];var _forkpty=Module["_forkpty"]=asm["_forkpty"];var _fourbyte_memmem=Module["_fourbyte_memmem"]=asm["_fourbyte_memmem"];var _fourbyte_strstr=Module["_fourbyte_strstr"]=asm["_fourbyte_strstr"];var _fprintf=Module["_fprintf"]=asm["_fprintf"];var _fputc=Module["_fputc"]=asm["_fputc"];var _fputs=Module["_fputs"]=asm["_fputs"];var _fputwc=Module["_fputwc"]=asm["_fputwc"];var _fputws=Module["_fputws"]=asm["_fputws"];var _fread=Module["_fread"]=asm["_fread"];var _free=Module["_free"]=asm["_free"];var _freeaddrinfo=Module["_freeaddrinfo"]=asm["_freeaddrinfo"];var _freeifaddrs=Module["_freeifaddrs"]=asm["_freeifaddrs"];var _freelist=Module["_freelist"]=asm["_freelist"];var _freelocale=Module["_freelocale"]=asm["_freelocale"];var _freopen=Module["_freopen"]=asm["_freopen"];var _frexp=Module["_frexp"]=asm["_frexp"];var _frexpf=Module["_frexpf"]=asm["_frexpf"];var _frexpl=Module["_frexpl"]=asm["_frexpl"];var _fscanf=Module["_fscanf"]=asm["_fscanf"];var _fseek=Module["_fseek"]=asm["_fseek"];var _fsetpos=Module["_fsetpos"]=asm["_fsetpos"];var _fstat=Module["_fstat"]=asm["_fstat"];var _fstatat=Module["_fstatat"]=asm["_fstatat"];var _fstatvfs=Module["_fstatvfs"]=asm["_fstatvfs"];var _fsync=Module["_fsync"]=asm["_fsync"];var _ftell=Module["_ftell"]=asm["_ftell"];var _ftruncate=Module["_ftruncate"]=asm["_ftruncate"];var _ftrylockfile=Module["_ftrylockfile"]=asm["_ftrylockfile"];var _funlockfile=Module["_funlockfile"]=asm["_funlockfile"];var _futimens=Module["_futimens"]=asm["_futimens"];var _fuzzycmp=Module["_fuzzycmp"]=asm["_fuzzycmp"];var _fwide=Module["_fwide"]=asm["_fwide"];var _fwprintf=Module["_fwprintf"]=asm["_fwprintf"];var _fwrite=Module["_fwrite"]=asm["_fwrite"];var _fwscanf=Module["_fwscanf"]=asm["_fwscanf"];var _gcvt=Module["_gcvt"]=asm["_gcvt"];var _gen_netmask=Module["_gen_netmask"]=asm["_gen_netmask"];var _get_16=Module["_get_16"]=asm["_get_16"];var _get_32=Module["_get_32"]=asm["_get_32"];var _get_current_dir_name=Module["_get_current_dir_name"]=asm["_get_current_dir_name"];var _getauxval=Module["_getauxval"]=asm["_getauxval"];var _getc=Module["_getc"]=asm["_getc"];var _getc_unlocked=Module["_getc_unlocked"]=asm["_getc_unlocked"];var _getchar=Module["_getchar"]=asm["_getchar"];var _getchar_unlocked=Module["_getchar_unlocked"]=asm["_getchar_unlocked"];var _getcwd=Module["_getcwd"]=asm["_getcwd"];var _getdelim=Module["_getdelim"]=asm["_getdelim"];var _getdomainname=Module["_getdomainname"]=asm["_getdomainname"];var _getegid=Module["_getegid"]=asm["_getegid"];var _geteuid=Module["_geteuid"]=asm["_geteuid"];var _getgid=Module["_getgid"]=asm["_getgid"];var _getgrouplist=Module["_getgrouplist"]=asm["_getgrouplist"];var _getgroups=Module["_getgroups"]=asm["_getgroups"];var _gethostent=Module["_gethostent"]=asm["_gethostent"];var _gethostid=Module["_gethostid"]=asm["_gethostid"];var _gethostname=Module["_gethostname"]=asm["_gethostname"];var _getifaddrs=Module["_getifaddrs"]=asm["_getifaddrs"];var _getint=Module["_getint"]=asm["_getint"];var _getint_561=Module["_getint_561"]=asm["_getint_561"];var _getlens=Module["_getlens"]=asm["_getlens"];var _getline=Module["_getline"]=asm["_getline"];var _getlogin=Module["_getlogin"]=asm["_getlogin"];var _getlogin_r=Module["_getlogin_r"]=asm["_getlogin_r"];var _getmntent=Module["_getmntent"]=asm["_getmntent"];var _getmntent_r=Module["_getmntent_r"]=asm["_getmntent_r"];var _getnetbyaddr=Module["_getnetbyaddr"]=asm["_getnetbyaddr"];var _getnetbyname=Module["_getnetbyname"]=asm["_getnetbyname"];var _getoffs=Module["_getoffs"]=asm["_getoffs"];var _getopt=Module["_getopt"]=asm["_getopt"];var _getopt_long=Module["_getopt_long"]=asm["_getopt_long"];var _getopt_long_only=Module["_getopt_long_only"]=asm["_getopt_long_only"];var _getpeername=Module["_getpeername"]=asm["_getpeername"];var _getpgid=Module["_getpgid"]=asm["_getpgid"];var _getpgrp=Module["_getpgrp"]=asm["_getpgrp"];var _getpid=Module["_getpid"]=asm["_getpid"];var _getppid=Module["_getppid"]=asm["_getppid"];var _getpriority=Module["_getpriority"]=asm["_getpriority"];var _getresgid=Module["_getresgid"]=asm["_getresgid"];var _getresuid=Module["_getresuid"]=asm["_getresuid"];var _getrlimit=Module["_getrlimit"]=asm["_getrlimit"];var _getrusage=Module["_getrusage"]=asm["_getrusage"];var _gets=Module["_gets"]=asm["_gets"];var _getservbyname=Module["_getservbyname"]=asm["_getservbyname"];var _getservbyname_r=Module["_getservbyname_r"]=asm["_getservbyname_r"];var _getservbyport=Module["_getservbyport"]=asm["_getservbyport"];var _getservbyport_r=Module["_getservbyport_r"]=asm["_getservbyport_r"];var _getservent=Module["_getservent"]=asm["_getservent"];var _getsid=Module["_getsid"]=asm["_getsid"];var _getsockname=Module["_getsockname"]=asm["_getsockname"];var _getsockopt=Module["_getsockopt"]=asm["_getsockopt"];var _getsubopt=Module["_getsubopt"]=asm["_getsubopt"];var _gettext=Module["_gettext"]=asm["_gettext"];var _gettextdir=Module["_gettextdir"]=asm["_gettextdir"];var _getuid=Module["_getuid"]=asm["_getuid"];var _getw=Module["_getw"]=asm["_getw"];var _getwc=Module["_getwc"]=asm["_getwc"];var _getwchar=Module["_getwchar"]=asm["_getwchar"];var _getword=Module["_getword"]=asm["_getword"];var _glob=Module["_glob"]=asm["_glob"];var _globfree=Module["_globfree"]=asm["_globfree"];var _grantpt=Module["_grantpt"]=asm["_grantpt"];var _hashmd=Module["_hashmd"]=asm["_hashmd"];var _hashmd_827=Module["_hashmd_827"]=asm["_hashmd_827"];var _hasmntopt=Module["_hasmntopt"]=asm["_hasmntopt"];var _herror=Module["_herror"]=asm["_herror"];var _hexfloat=Module["_hexfloat"]=asm["_hexfloat"];var _hexval=Module["_hexval"]=asm["_hexval"];var _hexval_703=Module["_hexval_703"]=asm["_hexval_703"];var _hstrerror=Module["_hstrerror"]=asm["_hstrerror"];var _htonl=Module["_htonl"]=asm["_htonl"];var _htons=Module["_htons"]=asm["_htons"];var _hypot=Module["_hypot"]=asm["_hypot"];var _hypotf=Module["_hypotf"]=asm["_hypotf"];var _hypotl=Module["_hypotl"]=asm["_hypotl"];var _i64Add=Module["_i64Add"]=asm["_i64Add"];var _i64Subtract=Module["_i64Subtract"]=asm["_i64Subtract"];var _ialloc=Module["_ialloc"]=asm["_ialloc"];var _iconv=Module["_iconv"]=asm["_iconv"];var _iconv_close=Module["_iconv_close"]=asm["_iconv_close"];var _iconv_open=Module["_iconv_open"]=asm["_iconv_open"];var _if_freenameindex=Module["_if_freenameindex"]=asm["_if_freenameindex"];var _if_indextoname=Module["_if_indextoname"]=asm["_if_indextoname"];var _if_nameindex=Module["_if_nameindex"]=asm["_if_nameindex"];var _if_nametoindex=Module["_if_nametoindex"]=asm["_if_nametoindex"];var _ignore_err=Module["_ignore_err"]=asm["_ignore_err"];var _ilogb=Module["_ilogb"]=asm["_ilogb"];var _ilogbf=Module["_ilogbf"]=asm["_ilogbf"];var _ilogbl=Module["_ilogbl"]=asm["_ilogbl"];var _imaxabs=Module["_imaxabs"]=asm["_imaxabs"];var _imaxdiv=Module["_imaxdiv"]=asm["_imaxdiv"];var _in_set=Module["_in_set"]=asm["_in_set"];var _independent_calloc=Module["_independent_calloc"]=asm["_independent_calloc"];var _independent_comalloc=Module["_independent_comalloc"]=asm["_independent_comalloc"];var _index=Module["_index"]=asm["_index"];var _inet_lnaof=Module["_inet_lnaof"]=asm["_inet_lnaof"];var _inet_makeaddr=Module["_inet_makeaddr"]=asm["_inet_makeaddr"];var _inet_netof=Module["_inet_netof"]=asm["_inet_netof"];var _inet_network=Module["_inet_network"]=asm["_inet_network"];var _inet_ntoa=Module["_inet_ntoa"]=asm["_inet_ntoa"];var _inet_ntop=Module["_inet_ntop"]=asm["_inet_ntop"];var _inet_pton=Module["_inet_pton"]=asm["_inet_pton"];var _initgroups=Module["_initgroups"]=asm["_initgroups"];var _initstate=Module["_initstate"]=asm["_initstate"];var _internal_memalign=Module["_internal_memalign"]=asm["_internal_memalign"];var _ioctl=Module["_ioctl"]=asm["_ioctl"];var _is_literal=Module["_is_literal"]=asm["_is_literal"];var _is_lost_conn=Module["_is_lost_conn"]=asm["_is_lost_conn"];var _is_valid_hostname=Module["_is_valid_hostname"]=asm["_is_valid_hostname"];var _isalnum=Module["_isalnum"]=asm["_isalnum"];var _isalnum_l=Module["_isalnum_l"]=asm["_isalnum_l"];var _isalpha=Module["_isalpha"]=asm["_isalpha"];var _isalpha_l=Module["_isalpha_l"]=asm["_isalpha_l"];var _isascii=Module["_isascii"]=asm["_isascii"];var _isatty=Module["_isatty"]=asm["_isatty"];var _isblank=Module["_isblank"]=asm["_isblank"];var _isblank_l=Module["_isblank_l"]=asm["_isblank_l"];var _iscntrl=Module["_iscntrl"]=asm["_iscntrl"];var _iscntrl_l=Module["_iscntrl_l"]=asm["_iscntrl_l"];var _isdigit=Module["_isdigit"]=asm["_isdigit"];var _isdigit_l=Module["_isdigit_l"]=asm["_isdigit_l"];var _isgraph=Module["_isgraph"]=asm["_isgraph"];var _isgraph_l=Module["_isgraph_l"]=asm["_isgraph_l"];var _islower=Module["_islower"]=asm["_islower"];var _islower_l=Module["_islower_l"]=asm["_islower_l"];var _isprint=Module["_isprint"]=asm["_isprint"];var _isprint_l=Module["_isprint_l"]=asm["_isprint_l"];var _ispunct=Module["_ispunct"]=asm["_ispunct"];var _ispunct_l=Module["_ispunct_l"]=asm["_ispunct_l"];var _issetugid=Module["_issetugid"]=asm["_issetugid"];var _isspace=Module["_isspace"]=asm["_isspace"];var _isspace_l=Module["_isspace_l"]=asm["_isspace_l"];var _isupper=Module["_isupper"]=asm["_isupper"];var _isupper_l=Module["_isupper_l"]=asm["_isupper_l"];var _iswalnum=Module["_iswalnum"]=asm["_iswalnum"];var _iswalnum_l=Module["_iswalnum_l"]=asm["_iswalnum_l"];var _iswalpha=Module["_iswalpha"]=asm["_iswalpha"];var _iswalpha_l=Module["_iswalpha_l"]=asm["_iswalpha_l"];var _iswblank=Module["_iswblank"]=asm["_iswblank"];var _iswblank_l=Module["_iswblank_l"]=asm["_iswblank_l"];var _iswcntrl=Module["_iswcntrl"]=asm["_iswcntrl"];var _iswcntrl_l=Module["_iswcntrl_l"]=asm["_iswcntrl_l"];var _iswctype=Module["_iswctype"]=asm["_iswctype"];var _iswctype_l=Module["_iswctype_l"]=asm["_iswctype_l"];var _iswdigit=Module["_iswdigit"]=asm["_iswdigit"];var _iswdigit_l=Module["_iswdigit_l"]=asm["_iswdigit_l"];var _iswgraph=Module["_iswgraph"]=asm["_iswgraph"];var _iswgraph_l=Module["_iswgraph_l"]=asm["_iswgraph_l"];var _iswlower=Module["_iswlower"]=asm["_iswlower"];var _iswlower_l=Module["_iswlower_l"]=asm["_iswlower_l"];var _iswprint=Module["_iswprint"]=asm["_iswprint"];var _iswprint_l=Module["_iswprint_l"]=asm["_iswprint_l"];var _iswpunct=Module["_iswpunct"]=asm["_iswpunct"];var _iswpunct_l=Module["_iswpunct_l"]=asm["_iswpunct_l"];var _iswspace=Module["_iswspace"]=asm["_iswspace"];var _iswspace_l=Module["_iswspace_l"]=asm["_iswspace_l"];var _iswupper=Module["_iswupper"]=asm["_iswupper"];var _iswupper_l=Module["_iswupper_l"]=asm["_iswupper_l"];var _iswxdigit=Module["_iswxdigit"]=asm["_iswxdigit"];var _iswxdigit_l=Module["_iswxdigit_l"]=asm["_iswxdigit_l"];var _isxdigit=Module["_isxdigit"]=asm["_isxdigit"];var _isxdigit_l=Module["_isxdigit_l"]=asm["_isxdigit_l"];var _j0=Module["_j0"]=asm["_j0"];var _j0f=Module["_j0f"]=asm["_j0f"];var _j1=Module["_j1"]=asm["_j1"];var _j1f=Module["_j1f"]=asm["_j1f"];var _jn=Module["_jn"]=asm["_jn"];var _jnf=Module["_jnf"]=asm["_jnf"];var _jrand48=Module["_jrand48"]=asm["_jrand48"];var _l64a=Module["_l64a"]=asm["_l64a"];var _labelof=Module["_labelof"]=asm["_labelof"];var _labs=Module["_labs"]=asm["_labs"];var _lcg31=Module["_lcg31"]=asm["_lcg31"];var _lcg64=Module["_lcg64"]=asm["_lcg64"];var _lchmod=Module["_lchmod"]=asm["_lchmod"];var _lchown=Module["_lchown"]=asm["_lchown"];var _lcong48=Module["_lcong48"]=asm["_lcong48"];var _ldexp=Module["_ldexp"]=asm["_ldexp"];var _ldexpf=Module["_ldexpf"]=asm["_ldexpf"];var _ldexpl=Module["_ldexpl"]=asm["_ldexpl"];var _ldiv=Module["_ldiv"]=asm["_ldiv"];var _lgamma=Module["_lgamma"]=asm["_lgamma"];var _lgammaf=Module["_lgammaf"]=asm["_lgammaf"];var _lgammal=Module["_lgammal"]=asm["_lgammal"];var _link=Module["_link"]=asm["_link"];var _linkat=Module["_linkat"]=asm["_linkat"];var _listen=Module["_listen"]=asm["_listen"];var _llabs=Module["_llabs"]=asm["_llabs"];var _lldiv=Module["_lldiv"]=asm["_lldiv"];var _llrint=Module["_llrint"]=asm["_llrint"];var _llrintf=Module["_llrintf"]=asm["_llrintf"];var _llrintl=Module["_llrintl"]=asm["_llrintl"];var _llround=Module["_llround"]=asm["_llround"];var _llroundf=Module["_llroundf"]=asm["_llroundf"];var _llroundl=Module["_llroundl"]=asm["_llroundl"];var _llvm_bswap_i16=Module["_llvm_bswap_i16"]=asm["_llvm_bswap_i16"];var _llvm_bswap_i32=Module["_llvm_bswap_i32"]=asm["_llvm_bswap_i32"];var _llvm_cttz_i32=Module["_llvm_cttz_i32"]=asm["_llvm_cttz_i32"];var _loadstate=Module["_loadstate"]=asm["_loadstate"];var _localeconv=Module["_localeconv"]=asm["_localeconv"];var _lockf=Module["_lockf"]=asm["_lockf"];var _log10=Module["_log10"]=asm["_log10"];var _log10f=Module["_log10f"]=asm["_log10f"];var _log10l=Module["_log10l"]=asm["_log10l"];var _log1p=Module["_log1p"]=asm["_log1p"];var _log1pf=Module["_log1pf"]=asm["_log1pf"];var _log1pl=Module["_log1pl"]=asm["_log1pl"];var _log2=Module["_log2"]=asm["_log2"];var _log2f=Module["_log2f"]=asm["_log2f"];var _log2l=Module["_log2l"]=asm["_log2l"];var _logb=Module["_logb"]=asm["_logb"];var _logbf=Module["_logbf"]=asm["_logbf"];var _logbl=Module["_logbl"]=asm["_logbl"];var _login_tty=Module["_login_tty"]=asm["_login_tty"];var _lrand48=Module["_lrand48"]=asm["_lrand48"];var _lrint=Module["_lrint"]=asm["_lrint"];var _lrintf=Module["_lrintf"]=asm["_lrintf"];var _lrintl=Module["_lrintl"]=asm["_lrintl"];var _lround=Module["_lround"]=asm["_lround"];var _lroundf=Module["_lroundf"]=asm["_lroundf"];var _lroundl=Module["_lroundl"]=asm["_lroundl"];var _lseek=Module["_lseek"]=asm["_lseek"];var _lstat=Module["_lstat"]=asm["_lstat"];var _mallinfo=Module["_mallinfo"]=asm["_mallinfo"];var _malloc=Module["_malloc"]=asm["_malloc"];var _malloc_footprint=Module["_malloc_footprint"]=asm["_malloc_footprint"];var _malloc_footprint_limit=Module["_malloc_footprint_limit"]=asm["_malloc_footprint_limit"];var _malloc_max_footprint=Module["_malloc_max_footprint"]=asm["_malloc_max_footprint"];var _malloc_set_footprint_limit=Module["_malloc_set_footprint_limit"]=asm["_malloc_set_footprint_limit"];var _malloc_stats=Module["_malloc_stats"]=asm["_malloc_stats"];var _malloc_trim=Module["_malloc_trim"]=asm["_malloc_trim"];var _malloc_usable_size=Module["_malloc_usable_size"]=asm["_malloc_usable_size"];var _mallopt=Module["_mallopt"]=asm["_mallopt"];var _marksub=Module["_marksub"]=asm["_marksub"];var _match=Module["_match"]=asm["_match"];var _match_bracket=Module["_match_bracket"]=asm["_match_bracket"];var _match_in_dir=Module["_match_in_dir"]=asm["_match_in_dir"];var _mblen=Module["_mblen"]=asm["_mblen"];var _mbrlen=Module["_mbrlen"]=asm["_mbrlen"];var _mbrtoc16=Module["_mbrtoc16"]=asm["_mbrtoc16"];var _mbrtoc32=Module["_mbrtoc32"]=asm["_mbrtoc32"];var _mbrtowc=Module["_mbrtowc"]=asm["_mbrtowc"];var _mbsinit=Module["_mbsinit"]=asm["_mbsinit"];var _mbsnrtowcs=Module["_mbsnrtowcs"]=asm["_mbsnrtowcs"];var _mbsrtowcs=Module["_mbsrtowcs"]=asm["_mbsrtowcs"];var _mbstowcs=Module["_mbstowcs"]=asm["_mbstowcs"];var _mbtowc=Module["_mbtowc"]=asm["_mbtowc"];var _mclose=Module["_mclose"]=asm["_mclose"];var _md5_init=Module["_md5_init"]=asm["_md5_init"];var _md5_sum=Module["_md5_sum"]=asm["_md5_sum"];var _md5_update=Module["_md5_update"]=asm["_md5_update"];var _md5crypt=Module["_md5crypt"]=asm["_md5crypt"];var _memalign=Module["_memalign"]=asm["_memalign"];var _memccpy=Module["_memccpy"]=asm["_memccpy"];var _memchr=Module["_memchr"]=asm["_memchr"];var _memcmp=Module["_memcmp"]=asm["_memcmp"];var _memcpy=Module["_memcpy"]=asm["_memcpy"];var _memmem=Module["_memmem"]=asm["_memmem"];var _memmove=Module["_memmove"]=asm["_memmove"];var _mempcpy=Module["_mempcpy"]=asm["_mempcpy"];var _memset=Module["_memset"]=asm["_memset"];var _mincore=Module["_mincore"]=asm["_mincore"];var _mkdir=Module["_mkdir"]=asm["_mkdir"];var _mkdirat=Module["_mkdirat"]=asm["_mkdirat"];var _mkdtemp=Module["_mkdtemp"]=asm["_mkdtemp"];var _mkfifo=Module["_mkfifo"]=asm["_mkfifo"];var _mkfifoat=Module["_mkfifoat"]=asm["_mkfifoat"];var _mknod=Module["_mknod"]=asm["_mknod"];var _mknodat=Module["_mknodat"]=asm["_mknodat"];var _mkostemp=Module["_mkostemp"]=asm["_mkostemp"];var _mkptr4=Module["_mkptr4"]=asm["_mkptr4"];var _mkptr6=Module["_mkptr6"]=asm["_mkptr6"];var _mkstemp=Module["_mkstemp"]=asm["_mkstemp"];var _mkstemps=Module["_mkstemps"]=asm["_mkstemps"];var _mktemp=Module["_mktemp"]=asm["_mktemp"];var _mlock=Module["_mlock"]=asm["_mlock"];var _mlockall=Module["_mlockall"]=asm["_mlockall"];var _modf=Module["_modf"]=asm["_modf"];var _modff=Module["_modff"]=asm["_modff"];var _modfl=Module["_modfl"]=asm["_modfl"];var _mrand48=Module["_mrand48"]=asm["_mrand48"];var _mread=Module["_mread"]=asm["_mread"];var _ms_close=Module["_ms_close"]=asm["_ms_close"];var _ms_seek=Module["_ms_seek"]=asm["_ms_seek"];var _ms_write=Module["_ms_write"]=asm["_ms_write"];var _mseek=Module["_mseek"]=asm["_mseek"];var _msync=Module["_msync"]=asm["_msync"];var _mtime=Module["_mtime"]=asm["_mtime"];var _munlock=Module["_munlock"]=asm["_munlock"];var _munlockall=Module["_munlockall"]=asm["_munlockall"];var _mwrite=Module["_mwrite"]=asm["_mwrite"];var _name_from_dns=Module["_name_from_dns"]=asm["_name_from_dns"];var _name_from_dns_search=Module["_name_from_dns_search"]=asm["_name_from_dns_search"];var _name_from_hosts=Module["_name_from_hosts"]=asm["_name_from_hosts"];var _name_from_null=Module["_name_from_null"]=asm["_name_from_null"];var _name_from_numeric=Module["_name_from_numeric"]=asm["_name_from_numeric"];var _nan=Module["_nan"]=asm["_nan"];var _nanf=Module["_nanf"]=asm["_nanf"];var _nanl=Module["_nanl"]=asm["_nanl"];var _nearbyint=Module["_nearbyint"]=asm["_nearbyint"];var _nearbyintf=Module["_nearbyintf"]=asm["_nearbyintf"];var _nearbyintl=Module["_nearbyintl"]=asm["_nearbyintl"];var _netlink_msg_to_ifaddr=Module["_netlink_msg_to_ifaddr"]=asm["_netlink_msg_to_ifaddr"];var _netlink_msg_to_nameindex=Module["_netlink_msg_to_nameindex"]=asm["_netlink_msg_to_nameindex"];var _nextafter=Module["_nextafter"]=asm["_nextafter"];var _nextafterf=Module["_nextafterf"]=asm["_nextafterf"];var _nextafterl=Module["_nextafterl"]=asm["_nextafterl"];var _nexttoward=Module["_nexttoward"]=asm["_nexttoward"];var _nexttowardf=Module["_nexttowardf"]=asm["_nexttowardf"];var _nexttowardl=Module["_nexttowardl"]=asm["_nexttowardl"];var _nftw=Module["_nftw"]=asm["_nftw"];var _ngettext=Module["_ngettext"]=asm["_ngettext"];var _nice=Module["_nice"]=asm["_nice"];var _nrand48=Module["_nrand48"]=asm["_nrand48"];var _ns_get16=Module["_ns_get16"]=asm["_ns_get16"];var _ns_get32=Module["_ns_get32"]=asm["_ns_get32"];var _ns_initparse=Module["_ns_initparse"]=asm["_ns_initparse"];var _ns_name_uncompress=Module["_ns_name_uncompress"]=asm["_ns_name_uncompress"];var _ns_parserr=Module["_ns_parserr"]=asm["_ns_parserr"];var _ns_put16=Module["_ns_put16"]=asm["_ns_put16"];var _ns_put32=Module["_ns_put32"]=asm["_ns_put32"];var _ns_skiprr=Module["_ns_skiprr"]=asm["_ns_skiprr"];var _ntohl=Module["_ntohl"]=asm["_ntohl"];var _ntohs=Module["_ntohs"]=asm["_ntohs"];var _open=Module["_open"]=asm["_open"];var _open_memstream=Module["_open_memstream"]=asm["_open_memstream"];var _open_wmemstream=Module["_open_wmemstream"]=asm["_open_wmemstream"];var _openat=Module["_openat"]=asm["_openat"];var _opendir=Module["_opendir"]=asm["_opendir"];var _openlog=Module["_openlog"]=asm["_openlog"];var _openpty=Module["_openpty"]=asm["_openpty"];var _out=Module["_out"]=asm["_out"];var _out_560=Module["_out_560"]=asm["_out_560"];var _pad=Module["_pad"]=asm["_pad"];var _pad_790=Module["_pad_790"]=asm["_pad_790"];var _pad_813=Module["_pad_813"]=asm["_pad_813"];var _pad_831=Module["_pad_831"]=asm["_pad_831"];var _parse_atom=Module["_parse_atom"]=asm["_parse_atom"];var _parse_bracket=Module["_parse_bracket"]=asm["_parse_bracket"];var _parse_bracket_terms=Module["_parse_bracket_terms"]=asm["_parse_bracket_terms"];var _parse_dup=Module["_parse_dup"]=asm["_parse_dup"];var _parse_dup_count=Module["_parse_dup_count"]=asm["_parse_dup_count"];var _parseop=Module["_parseop"]=asm["_parseop"];var _pat_next=Module["_pat_next"]=asm["_pat_next"];var _pause=Module["_pause"]=asm["_pause"];var _pclose=Module["_pclose"]=asm["_pclose"];var _permute=Module["_permute"]=asm["_permute"];var _perror=Module["_perror"]=asm["_perror"];var _pipe=Module["_pipe"]=asm["_pipe"];var _pipe2=Module["_pipe2"]=asm["_pipe2"];var _pntz=Module["_pntz"]=asm["_pntz"];var _policyof=Module["_policyof"]=asm["_policyof"];var _poll=Module["_poll"]=asm["_poll"];var _pone=Module["_pone"]=asm["_pone"];var _ponef=Module["_ponef"]=asm["_ponef"];var _pop_arg=Module["_pop_arg"]=asm["_pop_arg"];var _pop_arg_563=Module["_pop_arg_563"]=asm["_pop_arg_563"];var _posix_close=Module["_posix_close"]=asm["_posix_close"];var _posix_fadvise=Module["_posix_fadvise"]=asm["_posix_fadvise"];var _posix_fallocate=Module["_posix_fallocate"]=asm["_posix_fallocate"];var _posix_madvise=Module["_posix_madvise"]=asm["_posix_madvise"];var _posix_memalign=Module["_posix_memalign"]=asm["_posix_memalign"];var _posix_openpt=Module["_posix_openpt"]=asm["_posix_openpt"];var _pread=Module["_pread"]=asm["_pread"];var _preadv=Module["_preadv"]=asm["_preadv"];var _prefixmatch=Module["_prefixmatch"]=asm["_prefixmatch"];var _printf=Module["_printf"]=asm["_printf"];var _printf_core=Module["_printf_core"]=asm["_printf_core"];var _processblock=Module["_processblock"]=asm["_processblock"];var _processblock_814=Module["_processblock_814"]=asm["_processblock_814"];var _processblock_832=Module["_processblock_832"]=asm["_processblock_832"];var _pselect=Module["_pselect"]=asm["_pselect"];var _pthread_self=Module["_pthread_self"]=asm["_pthread_self"];var _ptsname=Module["_ptsname"]=asm["_ptsname"];var _put_16=Module["_put_16"]=asm["_put_16"];var _put_32=Module["_put_32"]=asm["_put_32"];var _putc=Module["_putc"]=asm["_putc"];var _putc_unlocked=Module["_putc_unlocked"]=asm["_putc_unlocked"];var _putchar=Module["_putchar"]=asm["_putchar"];var _putchar_unlocked=Module["_putchar_unlocked"]=asm["_putchar_unlocked"];var _puts=Module["_puts"]=asm["_puts"];var _putw=Module["_putw"]=asm["_putw"];var _putwc=Module["_putwc"]=asm["_putwc"];var _putwchar=Module["_putwchar"]=asm["_putwchar"];var _pvalloc=Module["_pvalloc"]=asm["_pvalloc"];var _pwrite=Module["_pwrite"]=asm["_pwrite"];var _pwritev=Module["_pwritev"]=asm["_pwritev"];var _pzero=Module["_pzero"]=asm["_pzero"];var _pzerof=Module["_pzerof"]=asm["_pzerof"];var _qone=Module["_qone"]=asm["_qone"];var _qonef=Module["_qonef"]=asm["_qonef"];var _qsort=Module["_qsort"]=asm["_qsort"];var _qzero=Module["_qzero"]=asm["_qzero"];var _qzerof=Module["_qzerof"]=asm["_qzerof"];var _rand=Module["_rand"]=asm["_rand"];var _rand_r=Module["_rand_r"]=asm["_rand_r"];var _random=Module["_random"]=asm["_random"];var _read=Module["_read"]=asm["_read"];var _readdir=Module["_readdir"]=asm["_readdir"];var _readdir_r=Module["_readdir_r"]=asm["_readdir_r"];var _readlink=Module["_readlink"]=asm["_readlink"];var _readlinkat=Module["_readlinkat"]=asm["_readlinkat"];var _readv=Module["_readv"]=asm["_readv"];var _realloc=Module["_realloc"]=asm["_realloc"];var _realloc_in_place=Module["_realloc_in_place"]=asm["_realloc_in_place"];var _realpath=Module["_realpath"]=asm["_realpath"];var _reap=Module["_reap"]=asm["_reap"];var _recv=Module["_recv"]=asm["_recv"];var _recvfrom=Module["_recvfrom"]=asm["_recvfrom"];var _recvmmsg=Module["_recvmmsg"]=asm["_recvmmsg"];var _recvmsg=Module["_recvmsg"]=asm["_recvmsg"];var _regcomp=Module["_regcomp"]=asm["_regcomp"];var _regerror=Module["_regerror"]=asm["_regerror"];var _regexec=Module["_regexec"]=asm["_regexec"];var _regfree=Module["_regfree"]=asm["_regfree"];var _remainder=Module["_remainder"]=asm["_remainder"];var _remainderf=Module["_remainderf"]=asm["_remainderf"];var _remainderl=Module["_remainderl"]=asm["_remainderl"];var _remove=Module["_remove"]=asm["_remove"];var _remquo=Module["_remquo"]=asm["_remquo"];var _remquof=Module["_remquof"]=asm["_remquof"];var _remquol=Module["_remquol"]=asm["_remquol"];var _rename=Module["_rename"]=asm["_rename"];var _renameat=Module["_renameat"]=asm["_renameat"];var _res_init=Module["_res_init"]=asm["_res_init"];var _res_querydomain=Module["_res_querydomain"]=asm["_res_querydomain"];var _rewind=Module["_rewind"]=asm["_rewind"];var _rewinddir=Module["_rewinddir"]=asm["_rewinddir"];var _rindex=Module["_rindex"]=asm["_rindex"];var _rint=Module["_rint"]=asm["_rint"];var _rintf=Module["_rintf"]=asm["_rintf"];var _rintl=Module["_rintl"]=asm["_rintl"];var _rmdir=Module["_rmdir"]=asm["_rmdir"];var _rol=Module["_rol"]=asm["_rol"];var _ror=Module["_ror"]=asm["_ror"];var _ror_833=Module["_ror_833"]=asm["_ror_833"];var _round=Module["_round"]=asm["_round"];var _roundf=Module["_roundf"]=asm["_roundf"];var _roundl=Module["_roundl"]=asm["_roundl"];var _savestate=Module["_savestate"]=asm["_savestate"];var _sbrk=Module["_sbrk"]=asm["_sbrk"];var _scalb=Module["_scalb"]=asm["_scalb"];var _scalbf=Module["_scalbf"]=asm["_scalbf"];var _scalbln=Module["_scalbln"]=asm["_scalbln"];var _scalblnf=Module["_scalblnf"]=asm["_scalblnf"];var _scalblnl=Module["_scalblnl"]=asm["_scalblnl"];var _scalbn=Module["_scalbn"]=asm["_scalbn"];var _scalbnf=Module["_scalbnf"]=asm["_scalbnf"];var _scalbnl=Module["_scalbnl"]=asm["_scalbnl"];var _scandir=Module["_scandir"]=asm["_scandir"];var _scanexp=Module["_scanexp"]=asm["_scanexp"];var _scanf=Module["_scanf"]=asm["_scanf"];var _scopeof=Module["_scopeof"]=asm["_scopeof"];var _seed48=Module["_seed48"]=asm["_seed48"];var _seekdir=Module["_seekdir"]=asm["_seekdir"];var _select=Module["_select"]=asm["_select"];var _send=Module["_send"]=asm["_send"];var _sendmmsg=Module["_sendmmsg"]=asm["_sendmmsg"];var _sendmsg=Module["_sendmsg"]=asm["_sendmsg"];var _sendto=Module["_sendto"]=asm["_sendto"];var _setbuf=Module["_setbuf"]=asm["_setbuf"];var _setbuffer=Module["_setbuffer"]=asm["_setbuffer"];var _setdomainname=Module["_setdomainname"]=asm["_setdomainname"];var _setegid=Module["_setegid"]=asm["_setegid"];var _seteuid=Module["_seteuid"]=asm["_seteuid"];var _setgid=Module["_setgid"]=asm["_setgid"];var _sethostent=Module["_sethostent"]=asm["_sethostent"];var _setkey=Module["_setkey"]=asm["_setkey"];var _setlinebuf=Module["_setlinebuf"]=asm["_setlinebuf"];var _setlocale=Module["_setlocale"]=asm["_setlocale"];var _setlocale_one_unlocked=Module["_setlocale_one_unlocked"]=asm["_setlocale_one_unlocked"];var _setlogmask=Module["_setlogmask"]=asm["_setlogmask"];var _setmntent=Module["_setmntent"]=asm["_setmntent"];var _setpgid=Module["_setpgid"]=asm["_setpgid"];var _setpgrp=Module["_setpgrp"]=asm["_setpgrp"];var _setpriority=Module["_setpriority"]=asm["_setpriority"];var _setregid=Module["_setregid"]=asm["_setregid"];var _setresgid=Module["_setresgid"]=asm["_setresgid"];var _setresuid=Module["_setresuid"]=asm["_setresuid"];var _setreuid=Module["_setreuid"]=asm["_setreuid"];var _setrlimit=Module["_setrlimit"]=asm["_setrlimit"];var _setservent=Module["_setservent"]=asm["_setservent"];var _setsid=Module["_setsid"]=asm["_setsid"];var _setsockopt=Module["_setsockopt"]=asm["_setsockopt"];var _setstate=Module["_setstate"]=asm["_setstate"];var _setuid=Module["_setuid"]=asm["_setuid"];var _setup_salt=Module["_setup_salt"]=asm["_setup_salt"];var _setvbuf=Module["_setvbuf"]=asm["_setvbuf"];var _sha256_init=Module["_sha256_init"]=asm["_sha256_init"];var _sha256_sum=Module["_sha256_sum"]=asm["_sha256_sum"];var _sha256_update=Module["_sha256_update"]=asm["_sha256_update"];var _sha256crypt=Module["_sha256crypt"]=asm["_sha256crypt"];var _sha512_init=Module["_sha512_init"]=asm["_sha512_init"];var _sha512_sum=Module["_sha512_sum"]=asm["_sha512_sum"];var _sha512_update=Module["_sha512_update"]=asm["_sha512_update"];var _sha512crypt=Module["_sha512crypt"]=asm["_sha512crypt"];var _shl=Module["_shl"]=asm["_shl"];var _shm_open=Module["_shm_open"]=asm["_shm_open"];var _shm_unlink=Module["_shm_unlink"]=asm["_shm_unlink"];var _shr=Module["_shr"]=asm["_shr"];var _shutdown=Module["_shutdown"]=asm["_shutdown"];var _sift=Module["_sift"]=asm["_sift"];var _significand=Module["_significand"]=asm["_significand"];var _significandf=Module["_significandf"]=asm["_significandf"];var _sin_pi=Module["_sin_pi"]=asm["_sin_pi"];var _sin_pi_433=Module["_sin_pi_433"]=asm["_sin_pi_433"];var _sincos=Module["_sincos"]=asm["_sincos"];var _sincosf=Module["_sincosf"]=asm["_sincosf"];var _sincosl=Module["_sincosl"]=asm["_sincosl"];var _sinh=Module["_sinh"]=asm["_sinh"];var _sinhf=Module["_sinhf"]=asm["_sinhf"];var _sinhl=Module["_sinhl"]=asm["_sinhl"];var _sinpi=Module["_sinpi"]=asm["_sinpi"];var _skipspace=Module["_skipspace"]=asm["_skipspace"];var _sleep=Module["_sleep"]=asm["_sleep"];var _sn_write=Module["_sn_write"]=asm["_sn_write"];var _snprintf=Module["_snprintf"]=asm["_snprintf"];var _sockatmark=Module["_sockatmark"]=asm["_sockatmark"];var _socket=Module["_socket"]=asm["_socket"];var _socketpair=Module["_socketpair"]=asm["_socketpair"];var _sort=Module["_sort"]=asm["_sort"];var _sprintf=Module["_sprintf"]=asm["_sprintf"];var _sq=Module["_sq"]=asm["_sq"];var _srand=Module["_srand"]=asm["_srand"];var _srand48=Module["_srand48"]=asm["_srand48"];var _srandom=Module["_srandom"]=asm["_srandom"];var _sscanf=Module["_sscanf"]=asm["_sscanf"];var _stat=Module["_stat"]=asm["_stat"];var _statvfs=Module["_statvfs"]=asm["_statvfs"];var _store_int=Module["_store_int"]=asm["_store_int"];var _store_int_613=Module["_store_int_613"]=asm["_store_int_613"];var _str_next=Module["_str_next"]=asm["_str_next"];var _strcasecmp=Module["_strcasecmp"]=asm["_strcasecmp"];var _strcasecmp_l=Module["_strcasecmp_l"]=asm["_strcasecmp_l"];var _strcasestr=Module["_strcasestr"]=asm["_strcasestr"];var _strcat=Module["_strcat"]=asm["_strcat"];var _strchr=Module["_strchr"]=asm["_strchr"];var _strcmp=Module["_strcmp"]=asm["_strcmp"];var _strcoll=Module["_strcoll"]=asm["_strcoll"];var _strcpy=Module["_strcpy"]=asm["_strcpy"];var _strcspn=Module["_strcspn"]=asm["_strcspn"];var _strerror=Module["_strerror"]=asm["_strerror"];var _strerror_l=Module["_strerror_l"]=asm["_strerror_l"];var _strerror_r=Module["_strerror_r"]=asm["_strerror_r"];var _strfmon=Module["_strfmon"]=asm["_strfmon"];var _strfmon_l=Module["_strfmon_l"]=asm["_strfmon_l"];var _strlcat=Module["_strlcat"]=asm["_strlcat"];var _strlcpy=Module["_strlcpy"]=asm["_strlcpy"];var _strlen=Module["_strlen"]=asm["_strlen"];var _strlwr=Module["_strlwr"]=asm["_strlwr"];var _strncasecmp=Module["_strncasecmp"]=asm["_strncasecmp"];var _strncasecmp_l=Module["_strncasecmp_l"]=asm["_strncasecmp_l"];var _strncat=Module["_strncat"]=asm["_strncat"];var _strncmp=Module["_strncmp"]=asm["_strncmp"];var _strncpy=Module["_strncpy"]=asm["_strncpy"];var _strndup=Module["_strndup"]=asm["_strndup"];var _strnlen=Module["_strnlen"]=asm["_strnlen"];var _strpbrk=Module["_strpbrk"]=asm["_strpbrk"];var _strrchr=Module["_strrchr"]=asm["_strrchr"];var _strsep=Module["_strsep"]=asm["_strsep"];var _strsignal=Module["_strsignal"]=asm["_strsignal"];var _strspn=Module["_strspn"]=asm["_strspn"];var _strstr=Module["_strstr"]=asm["_strstr"];var _strtod=Module["_strtod"]=asm["_strtod"];var _strtod_l=Module["_strtod_l"]=asm["_strtod_l"];var _strtof=Module["_strtof"]=asm["_strtof"];var _strtof_l=Module["_strtof_l"]=asm["_strtof_l"];var _strtoimax=Module["_strtoimax"]=asm["_strtoimax"];var _strtok=Module["_strtok"]=asm["_strtok"];var _strtok_r=Module["_strtok_r"]=asm["_strtok_r"];var _strtol=Module["_strtol"]=asm["_strtol"];var _strtol_l=Module["_strtol_l"]=asm["_strtol_l"];var _strtold=Module["_strtold"]=asm["_strtold"];var _strtold_l=Module["_strtold_l"]=asm["_strtold_l"];var _strtoll=Module["_strtoll"]=asm["_strtoll"];var _strtoll_l=Module["_strtoll_l"]=asm["_strtoll_l"];var _strtoul=Module["_strtoul"]=asm["_strtoul"];var _strtoul_l=Module["_strtoul_l"]=asm["_strtoul_l"];var _strtoull=Module["_strtoull"]=asm["_strtoull"];var _strtoull_l=Module["_strtoull_l"]=asm["_strtoull_l"];var _strtoumax=Module["_strtoumax"]=asm["_strtoumax"];var _strtox=Module["_strtox"]=asm["_strtox"];var _strtox_85=Module["_strtox_85"]=asm["_strtox_85"];var _strupr=Module["_strupr"]=asm["_strupr"];var _strverscmp=Module["_strverscmp"]=asm["_strverscmp"];var _strxfrm=Module["_strxfrm"]=asm["_strxfrm"];var _sw_write=Module["_sw_write"]=asm["_sw_write"];var _swab=Module["_swab"]=asm["_swab"];var _swapc=Module["_swapc"]=asm["_swapc"];var _swprintf=Module["_swprintf"]=asm["_swprintf"];var _swscanf=Module["_swscanf"]=asm["_swscanf"];var _symlink=Module["_symlink"]=asm["_symlink"];var _symlinkat=Module["_symlinkat"]=asm["_symlinkat"];var _sync=Module["_sync"]=asm["_sync"];var _syslog=Module["_syslog"]=asm["_syslog"];var _tanh=Module["_tanh"]=asm["_tanh"];var _tanhf=Module["_tanhf"]=asm["_tanhf"];var _tanhl=Module["_tanhl"]=asm["_tanhl"];var _tcdrain=Module["_tcdrain"]=asm["_tcdrain"];var _tcflow=Module["_tcflow"]=asm["_tcflow"];var _tcflush=Module["_tcflush"]=asm["_tcflush"];var _tcgetattr=Module["_tcgetattr"]=asm["_tcgetattr"];var _tcgetpgrp=Module["_tcgetpgrp"]=asm["_tcgetpgrp"];var _tcgetsid=Module["_tcgetsid"]=asm["_tcgetsid"];var _tcsendbreak=Module["_tcsendbreak"]=asm["_tcsendbreak"];var _tcsetattr=Module["_tcsetattr"]=asm["_tcsetattr"];var _tcsetpgrp=Module["_tcsetpgrp"]=asm["_tcsetpgrp"];var _telldir=Module["_telldir"]=asm["_telldir"];var _temper=Module["_temper"]=asm["_temper"];var _tempnam=Module["_tempnam"]=asm["_tempnam"];var _textdomain=Module["_textdomain"]=asm["_textdomain"];var _tgamma=Module["_tgamma"]=asm["_tgamma"];var _tgammaf=Module["_tgammaf"]=asm["_tgammaf"];var _tgammal=Module["_tgammal"]=asm["_tgammal"];var _threebyte_memmem=Module["_threebyte_memmem"]=asm["_threebyte_memmem"];var _threebyte_strstr=Module["_threebyte_strstr"]=asm["_threebyte_strstr"];var _tmpfile=Module["_tmpfile"]=asm["_tmpfile"];var _tmpnam=Module["_tmpnam"]=asm["_tmpnam"];var _to64=Module["_to64"]=asm["_to64"];var _to64_811=Module["_to64_811"]=asm["_to64_811"];var _to64_829=Module["_to64_829"]=asm["_to64_829"];var _toascii=Module["_toascii"]=asm["_toascii"];var _tolower=Module["_tolower"]=asm["_tolower"];var _tolower_l=Module["_tolower_l"]=asm["_tolower_l"];var _toupper=Module["_toupper"]=asm["_toupper"];var _toupper_l=Module["_toupper_l"]=asm["_toupper_l"];var _towctrans=Module["_towctrans"]=asm["_towctrans"];var _towctrans_l=Module["_towctrans_l"]=asm["_towctrans_l"];var _towlower=Module["_towlower"]=asm["_towlower"];var _towlower_l=Module["_towlower_l"]=asm["_towlower_l"];var _towupper=Module["_towupper"]=asm["_towupper"];var _towupper_l=Module["_towupper_l"]=asm["_towupper_l"];var _tre_add_tag_left=Module["_tre_add_tag_left"]=asm["_tre_add_tag_left"];var _tre_add_tag_right=Module["_tre_add_tag_right"]=asm["_tre_add_tag_right"];var _tre_add_tags=Module["_tre_add_tags"]=asm["_tre_add_tags"];var _tre_ast_new_catenation=Module["_tre_ast_new_catenation"]=asm["_tre_ast_new_catenation"];var _tre_ast_new_iter=Module["_tre_ast_new_iter"]=asm["_tre_ast_new_iter"];var _tre_ast_new_literal=Module["_tre_ast_new_literal"]=asm["_tre_ast_new_literal"];var _tre_ast_new_node=Module["_tre_ast_new_node"]=asm["_tre_ast_new_node"];var _tre_ast_new_union=Module["_tre_ast_new_union"]=asm["_tre_ast_new_union"];var _tre_ast_to_tnfa=Module["_tre_ast_to_tnfa"]=asm["_tre_ast_to_tnfa"];var _tre_compare_lit=Module["_tre_compare_lit"]=asm["_tre_compare_lit"];var _tre_compute_nfl=Module["_tre_compute_nfl"]=asm["_tre_compute_nfl"];var _tre_copy_ast=Module["_tre_copy_ast"]=asm["_tre_copy_ast"];var _tre_expand_ast=Module["_tre_expand_ast"]=asm["_tre_expand_ast"];var _tre_expand_macro=Module["_tre_expand_macro"]=asm["_tre_expand_macro"];var _tre_fill_pmatch=Module["_tre_fill_pmatch"]=asm["_tre_fill_pmatch"];var _tre_make_trans=Module["_tre_make_trans"]=asm["_tre_make_trans"];var _tre_match_empty=Module["_tre_match_empty"]=asm["_tre_match_empty"];var _tre_neg_char_classes_match=Module["_tre_neg_char_classes_match"]=asm["_tre_neg_char_classes_match"];var _tre_new_lit=Module["_tre_new_lit"]=asm["_tre_new_lit"];var _tre_parse=Module["_tre_parse"]=asm["_tre_parse"];var _tre_purge_regset=Module["_tre_purge_regset"]=asm["_tre_purge_regset"];var _tre_set_empty=Module["_tre_set_empty"]=asm["_tre_set_empty"];var _tre_set_one=Module["_tre_set_one"]=asm["_tre_set_one"];var _tre_set_union=Module["_tre_set_union"]=asm["_tre_set_union"];var _tre_stack_destroy=Module["_tre_stack_destroy"]=asm["_tre_stack_destroy"];var _tre_stack_new=Module["_tre_stack_new"]=asm["_tre_stack_new"];var _tre_stack_num_objects=Module["_tre_stack_num_objects"]=asm["_tre_stack_num_objects"];var _tre_stack_pop_int=Module["_tre_stack_pop_int"]=asm["_tre_stack_pop_int"];var _tre_stack_pop_voidptr=Module["_tre_stack_pop_voidptr"]=asm["_tre_stack_pop_voidptr"];var _tre_stack_push=Module["_tre_stack_push"]=asm["_tre_stack_push"];var _tre_stack_push_int=Module["_tre_stack_push_int"]=asm["_tre_stack_push_int"];var _tre_stack_push_voidptr=Module["_tre_stack_push_voidptr"]=asm["_tre_stack_push_voidptr"];var _tre_tag_order=Module["_tre_tag_order"]=asm["_tre_tag_order"];var _tre_tnfa_run_backtrack=Module["_tre_tnfa_run_backtrack"]=asm["_tre_tnfa_run_backtrack"];var _tre_tnfa_run_parallel=Module["_tre_tnfa_run_parallel"]=asm["_tre_tnfa_run_parallel"];var _trinkle=Module["_trinkle"]=asm["_trinkle"];var _trunc=Module["_trunc"]=asm["_trunc"];var _truncate=Module["_truncate"]=asm["_truncate"];var _truncf=Module["_truncf"]=asm["_truncf"];var _truncl=Module["_truncl"]=asm["_truncl"];var _try_realloc_chunk=Module["_try_realloc_chunk"]=asm["_try_realloc_chunk"];var _ttyname=Module["_ttyname"]=asm["_ttyname"];var _ttyname_r=Module["_ttyname_r"]=asm["_ttyname_r"];var _twobyte_memmem=Module["_twobyte_memmem"]=asm["_twobyte_memmem"];var _twobyte_strstr=Module["_twobyte_strstr"]=asm["_twobyte_strstr"];var _twoway_memmem=Module["_twoway_memmem"]=asm["_twoway_memmem"];var _twoway_strstr=Module["_twoway_strstr"]=asm["_twoway_strstr"];var _twoway_wcsstr=Module["_twoway_wcsstr"]=asm["_twoway_wcsstr"];var _ualarm=Module["_ualarm"]=asm["_ualarm"];var _umask=Module["_umask"]=asm["_umask"];var _uname=Module["_uname"]=asm["_uname"];var _ungetc=Module["_ungetc"]=asm["_ungetc"];var _ungetwc=Module["_ungetwc"]=asm["_ungetwc"];var _unlink=Module["_unlink"]=asm["_unlink"];var _unlinkat=Module["_unlinkat"]=asm["_unlinkat"];var _unlockpt=Module["_unlockpt"]=asm["_unlockpt"];var _utimensat=Module["_utimensat"]=asm["_utimensat"];var _valloc=Module["_valloc"]=asm["_valloc"];var _vasprintf=Module["_vasprintf"]=asm["_vasprintf"];var _vdprintf=Module["_vdprintf"]=asm["_vdprintf"];var _versionsort=Module["_versionsort"]=asm["_versionsort"];var _vfprintf=Module["_vfprintf"]=asm["_vfprintf"];var _vfscanf=Module["_vfscanf"]=asm["_vfscanf"];var _vfwprintf=Module["_vfwprintf"]=asm["_vfwprintf"];var _vfwscanf=Module["_vfwscanf"]=asm["_vfwscanf"];var _vprintf=Module["_vprintf"]=asm["_vprintf"];var _vscanf=Module["_vscanf"]=asm["_vscanf"];var _vsnprintf=Module["_vsnprintf"]=asm["_vsnprintf"];var _vsprintf=Module["_vsprintf"]=asm["_vsprintf"];var _vsscanf=Module["_vsscanf"]=asm["_vsscanf"];var _vstrfmon_l=Module["_vstrfmon_l"]=asm["_vstrfmon_l"];var _vswprintf=Module["_vswprintf"]=asm["_vswprintf"];var _vswscanf=Module["_vswscanf"]=asm["_vswscanf"];var _vwprintf=Module["_vwprintf"]=asm["_vwprintf"];var _vwscanf=Module["_vwscanf"]=asm["_vwscanf"];var _wcpcpy=Module["_wcpcpy"]=asm["_wcpcpy"];var _wcpncpy=Module["_wcpncpy"]=asm["_wcpncpy"];var _wcrtomb=Module["_wcrtomb"]=asm["_wcrtomb"];var _wcscasecmp=Module["_wcscasecmp"]=asm["_wcscasecmp"];var _wcscasecmp_l=Module["_wcscasecmp_l"]=asm["_wcscasecmp_l"];var _wcscat=Module["_wcscat"]=asm["_wcscat"];var _wcschr=Module["_wcschr"]=asm["_wcschr"];var _wcscmp=Module["_wcscmp"]=asm["_wcscmp"];var _wcscoll=Module["_wcscoll"]=asm["_wcscoll"];var _wcscpy=Module["_wcscpy"]=asm["_wcscpy"];var _wcscspn=Module["_wcscspn"]=asm["_wcscspn"];var _wcsdup=Module["_wcsdup"]=asm["_wcsdup"];var _wcslen=Module["_wcslen"]=asm["_wcslen"];var _wcsncasecmp=Module["_wcsncasecmp"]=asm["_wcsncasecmp"];var _wcsncasecmp_l=Module["_wcsncasecmp_l"]=asm["_wcsncasecmp_l"];var _wcsncat=Module["_wcsncat"]=asm["_wcsncat"];var _wcsncmp=Module["_wcsncmp"]=asm["_wcsncmp"];var _wcsncpy=Module["_wcsncpy"]=asm["_wcsncpy"];var _wcsnlen=Module["_wcsnlen"]=asm["_wcsnlen"];var _wcsnrtombs=Module["_wcsnrtombs"]=asm["_wcsnrtombs"];var _wcspbrk=Module["_wcspbrk"]=asm["_wcspbrk"];var _wcsrchr=Module["_wcsrchr"]=asm["_wcsrchr"];var _wcsrtombs=Module["_wcsrtombs"]=asm["_wcsrtombs"];var _wcsspn=Module["_wcsspn"]=asm["_wcsspn"];var _wcsstr=Module["_wcsstr"]=asm["_wcsstr"];var _wcstod=Module["_wcstod"]=asm["_wcstod"];var _wcstof=Module["_wcstof"]=asm["_wcstof"];var _wcstoimax=Module["_wcstoimax"]=asm["_wcstoimax"];var _wcstok=Module["_wcstok"]=asm["_wcstok"];var _wcstol=Module["_wcstol"]=asm["_wcstol"];var _wcstold=Module["_wcstold"]=asm["_wcstold"];var _wcstoll=Module["_wcstoll"]=asm["_wcstoll"];var _wcstombs=Module["_wcstombs"]=asm["_wcstombs"];var _wcstoul=Module["_wcstoul"]=asm["_wcstoul"];var _wcstoull=Module["_wcstoull"]=asm["_wcstoull"];var _wcstoumax=Module["_wcstoumax"]=asm["_wcstoumax"];var _wcstox=Module["_wcstox"]=asm["_wcstox"];var _wcstox_88=Module["_wcstox_88"]=asm["_wcstox_88"];var _wcswcs=Module["_wcswcs"]=asm["_wcswcs"];var _wcswidth=Module["_wcswidth"]=asm["_wcswidth"];var _wcsxfrm=Module["_wcsxfrm"]=asm["_wcsxfrm"];var _wctob=Module["_wctob"]=asm["_wctob"];var _wctomb=Module["_wctomb"]=asm["_wctomb"];var _wctrans=Module["_wctrans"]=asm["_wctrans"];var _wctrans_l=Module["_wctrans_l"]=asm["_wctrans_l"];var _wctype=Module["_wctype"]=asm["_wctype"];var _wctype_l=Module["_wctype_l"]=asm["_wctype_l"];var _wcwidth=Module["_wcwidth"]=asm["_wcwidth"];var _wmemchr=Module["_wmemchr"]=asm["_wmemchr"];var _wmemcmp=Module["_wmemcmp"]=asm["_wmemcmp"];var _wmemcpy=Module["_wmemcpy"]=asm["_wmemcpy"];var _wmemmove=Module["_wmemmove"]=asm["_wmemmove"];var _wmemset=Module["_wmemset"]=asm["_wmemset"];var _wms_close=Module["_wms_close"]=asm["_wms_close"];var _wms_seek=Module["_wms_seek"]=asm["_wms_seek"];var _wms_write=Module["_wms_write"]=asm["_wms_write"];var _wordexp=Module["_wordexp"]=asm["_wordexp"];var _wordfree=Module["_wordfree"]=asm["_wordfree"];var _wprintf=Module["_wprintf"]=asm["_wprintf"];var _wprintf_core=Module["_wprintf_core"]=asm["_wprintf_core"];var _wrap_write=Module["_wrap_write"]=asm["_wrap_write"];var _write=Module["_write"]=asm["_write"];var _writev=Module["_writev"]=asm["_writev"];var _wscanf=Module["_wscanf"]=asm["_wscanf"];var _wstring_read=Module["_wstring_read"]=asm["_wstring_read"];var _y0=Module["_y0"]=asm["_y0"];var _y0f=Module["_y0f"]=asm["_y0f"];var _y1=Module["_y1"]=asm["_y1"];var _y1f=Module["_y1f"]=asm["_y1f"];var _yn=Module["_yn"]=asm["_yn"];var _ynf=Module["_ynf"]=asm["_ynf"];var establishStackSpace=Module["establishStackSpace"]=asm["establishStackSpace"];var getTempRet0=Module["getTempRet0"]=asm["getTempRet0"];var runPostSets=Module["runPostSets"]=asm["runPostSets"];var setTempRet0=Module["setTempRet0"]=asm["setTempRet0"];var setThrew=Module["setThrew"]=asm["setThrew"];var stackAlloc=Module["stackAlloc"]=asm["stackAlloc"];var stackRestore=Module["stackRestore"]=asm["stackRestore"];var stackSave=Module["stackSave"]=asm["stackSave"];var dynCall_ii=Module["dynCall_ii"]=asm["dynCall_ii"];var dynCall_iii=Module["dynCall_iii"]=asm["dynCall_iii"];var dynCall_iiii=Module["dynCall_iiii"]=asm["dynCall_iiii"];var dynCall_iiiii=Module["dynCall_iiiii"]=asm["dynCall_iiiii"];var dynCall_iiiiii=Module["dynCall_iiiiii"]=asm["dynCall_iiiiii"];var dynCall_v=Module["dynCall_v"]=asm["dynCall_v"];var dynCall_vi=Module["dynCall_vi"]=asm["dynCall_vi"];Module["asm"]=asm;Module["intArrayFromString"]=intArrayFromString;Module["ccall"]=ccall;Module["cwrap"]=cwrap;Module["setValue"]=setValue;Module["getValue"]=getValue;Module["allocate"]=allocate;Module["ALLOC_NORMAL"]=ALLOC_NORMAL;if(memoryInitializer){if(!isDataURI(memoryInitializer)){memoryInitializer=locateFile(memoryInitializer)}if(ENVIRONMENT_IS_NODE||ENVIRONMENT_IS_SHELL){var data=Module["readBinary"](memoryInitializer);HEAPU8.set(data,GLOBAL_BASE)}else{addRunDependency("memory initializer");var applyMemoryInitializer=(function(data){if(data.byteLength)data=new Uint8Array(data);HEAPU8.set(data,GLOBAL_BASE);if(Module["memoryInitializerRequest"])delete Module["memoryInitializerRequest"].response;removeRunDependency("memory initializer")});function doBrowserLoad(){Module["readAsync"](memoryInitializer,applyMemoryInitializer,(function(){throw"could not load memory initializer "+memoryInitializer}))}var memoryInitializerBytes=tryParseAsDataURI(memoryInitializer);if(memoryInitializerBytes){applyMemoryInitializer(memoryInitializerBytes.buffer)}else if(Module["memoryInitializerRequest"]){function useRequest(){var request=Module["memoryInitializerRequest"];var response=request.response;if(request.status!==200&&request.status!==0){var data=tryParseAsDataURI(Module["memoryInitializerRequestURL"]);if(data){response=data.buffer}else{console.warn("a problem seems to have happened with Module.memoryInitializerRequest, status: "+request.status+", retrying "+memoryInitializer);doBrowserLoad();return}}applyMemoryInitializer(response)}if(Module["memoryInitializerRequest"].response){setTimeout(useRequest,0)}else{Module["memoryInitializerRequest"].addEventListener("load",useRequest)}}else{doBrowserLoad()}}}Module["then"]=(function(func){if(Module["calledRun"]){func(Module)}else{var old=Module["onRuntimeInitialized"];Module["onRuntimeInitialized"]=(function(){if(old)old();func(Module)})}return Module});function ExitStatus(status){this.name="ExitStatus";this.message="Program terminated with exit("+status+")";this.status=status}ExitStatus.prototype=new Error;ExitStatus.prototype.constructor=ExitStatus;var initialStackTop;dependenciesFulfilled=function runCaller(){if(!Module["calledRun"])run();if(!Module["calledRun"])dependenciesFulfilled=runCaller};function run(args){args=args||Module["arguments"];if(runDependencies>0){return}preRun();if(runDependencies>0)return;if(Module["calledRun"])return;function doRun(){if(Module["calledRun"])return;Module["calledRun"]=true;if(ABORT)return;ensureInitRuntime();preMain();if(Module["onRuntimeInitialized"])Module["onRuntimeInitialized"]();postRun()}if(Module["setStatus"]){Module["setStatus"]("Running...");setTimeout((function(){setTimeout((function(){Module["setStatus"]("")}),1);doRun()}),1)}else{doRun()}}Module["run"]=run;function exit(status,implicit){if(implicit&&Module["noExitRuntime"]&&status===0){return}if(Module["noExitRuntime"]){}else{ABORT=true;EXITSTATUS=status;STACKTOP=initialStackTop;exitRuntime();if(Module["onExit"])Module["onExit"](status)}Module["quit"](status,new ExitStatus(status))}function abort(what){if(Module["onAbort"]){Module["onAbort"](what)}if(what!==undefined){out(what);err(what);what=JSON.stringify(what)}else{what=""}ABORT=true;EXITSTATUS=1;throw"abort("+what+"). Build with -s ASSERTIONS=1 for more info."}Module["abort"]=abort;if(Module["preInit"]){if(typeof Module["preInit"]=="function")Module["preInit"]=[Module["preInit"]];while(Module["preInit"].length>0){Module["preInit"].pop()()}}Module["noExitRuntime"]=true;run()






  return Module;
}
);
})();
if (typeof exports === 'object' && typeof module === 'object')
    module.exports = Module;
  else if (typeof define === 'function' && define['amd'])
    define([], function() { return Module; });
  else if (typeof exports === 'object')
    exports["Module"] = Module;
  
}).call(this)}).call(this,require('_process'),require("buffer").Buffer)
},{"_process":10,"buffer":4}],62:[function(require,module,exports){
(function (module, exports) {
  'use strict';

  // Utils
  function assert (val, msg) {
    if (!val) throw new Error(msg || 'Assertion failed');
  }

  // Could use `inherits` module, but don't want to move from single file
  // architecture yet.
  function inherits (ctor, superCtor) {
    ctor.super_ = superCtor;
    var TempCtor = function () {};
    TempCtor.prototype = superCtor.prototype;
    ctor.prototype = new TempCtor();
    ctor.prototype.constructor = ctor;
  }

  // BN

  function BN (number, base, endian) {
    if (BN.isBN(number)) {
      return number;
    }

    this.negative = 0;
    this.words = null;
    this.length = 0;

    // Reduction context
    this.red = null;

    if (number !== null) {
      if (base === 'le' || base === 'be') {
        endian = base;
        base = 10;
      }

      this._init(number || 0, base || 10, endian || 'be');
    }
  }
  if (typeof module === 'object') {
    module.exports = BN;
  } else {
    exports.BN = BN;
  }

  BN.BN = BN;
  BN.wordSize = 26;

  var Buffer;
  try {
    Buffer = require('buffer').Buffer;
  } catch (e) {
  }

  BN.isBN = function isBN (num) {
    if (num instanceof BN) {
      return true;
    }

    return num !== null && typeof num === 'object' &&
      num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
  };

  BN.max = function max (left, right) {
    if (left.cmp(right) > 0) return left;
    return right;
  };

  BN.min = function min (left, right) {
    if (left.cmp(right) < 0) return left;
    return right;
  };

  BN.prototype._init = function init (number, base, endian) {
    if (typeof number === 'number') {
      return this._initNumber(number, base, endian);
    }

    if (typeof number === 'object') {
      return this._initArray(number, base, endian);
    }

    if (base === 'hex') {
      base = 16;
    }
    assert(base === (base | 0) && base >= 2 && base <= 36);

    number = number.toString().replace(/\s+/g, '');
    var start = 0;
    if (number[0] === '-') {
      start++;
    }

    if (base === 16) {
      this._parseHex(number, start);
    } else {
      this._parseBase(number, base, start);
    }

    if (number[0] === '-') {
      this.negative = 1;
    }

    this.strip();

    if (endian !== 'le') return;

    this._initArray(this.toArray(), base, endian);
  };

  BN.prototype._initNumber = function _initNumber (number, base, endian) {
    if (number < 0) {
      this.negative = 1;
      number = -number;
    }
    if (number < 0x4000000) {
      this.words = [ number & 0x3ffffff ];
      this.length = 1;
    } else if (number < 0x10000000000000) {
      this.words = [
        number & 0x3ffffff,
        (number / 0x4000000) & 0x3ffffff
      ];
      this.length = 2;
    } else {
      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
      this.words = [
        number & 0x3ffffff,
        (number / 0x4000000) & 0x3ffffff,
        1
      ];
      this.length = 3;
    }

    if (endian !== 'le') return;

    // Reverse the bytes
    this._initArray(this.toArray(), base, endian);
  };

  BN.prototype._initArray = function _initArray (number, base, endian) {
    // Perhaps a Uint8Array
    assert(typeof number.length === 'number');
    if (number.length <= 0) {
      this.words = [ 0 ];
      this.length = 1;
      return this;
    }

    this.length = Math.ceil(number.length / 3);
    this.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      this.words[i] = 0;
    }

    var j, w;
    var off = 0;
    if (endian === 'be') {
      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
        w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
    } else if (endian === 'le') {
      for (i = 0, j = 0; i < number.length; i += 3) {
        w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
    }
    return this.strip();
  };

  function parseHex (str, start, end) {
    var r = 0;
    var len = Math.min(str.length, end);
    for (var i = start; i < len; i++) {
      var c = str.charCodeAt(i) - 48;

      r <<= 4;

      // 'a' - 'f'
      if (c >= 49 && c <= 54) {
        r |= c - 49 + 0xa;

      // 'A' - 'F'
      } else if (c >= 17 && c <= 22) {
        r |= c - 17 + 0xa;

      // '0' - '9'
      } else {
        r |= c & 0xf;
      }
    }
    return r;
  }

  BN.prototype._parseHex = function _parseHex (number, start) {
    // Create possibly bigger array to ensure that it fits the number
    this.length = Math.ceil((number.length - start) / 6);
    this.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      this.words[i] = 0;
    }

    var j, w;
    // Scan 24-bit chunks and add them to the number
    var off = 0;
    for (i = number.length - 6, j = 0; i >= start; i -= 6) {
      w = parseHex(number, i, i + 6);
      this.words[j] |= (w << off) & 0x3ffffff;
      // NOTE: `0x3fffff` is intentional here, 26bits max shift + 24bit hex limb
      this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
      off += 24;
      if (off >= 26) {
        off -= 26;
        j++;
      }
    }
    if (i + 6 !== start) {
      w = parseHex(number, start, i + 6);
      this.words[j] |= (w << off) & 0x3ffffff;
      this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
    }
    this.strip();
  };

  function parseBase (str, start, end, mul) {
    var r = 0;
    var len = Math.min(str.length, end);
    for (var i = start; i < len; i++) {
      var c = str.charCodeAt(i) - 48;

      r *= mul;

      // 'a'
      if (c >= 49) {
        r += c - 49 + 0xa;

      // 'A'
      } else if (c >= 17) {
        r += c - 17 + 0xa;

      // '0' - '9'
      } else {
        r += c;
      }
    }
    return r;
  }

  BN.prototype._parseBase = function _parseBase (number, base, start) {
    // Initialize as zero
    this.words = [ 0 ];
    this.length = 1;

    // Find length of limb in base
    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
      limbLen++;
    }
    limbLen--;
    limbPow = (limbPow / base) | 0;

    var total = number.length - start;
    var mod = total % limbLen;
    var end = Math.min(total, total - mod) + start;

    var word = 0;
    for (var i = start; i < end; i += limbLen) {
      word = parseBase(number, i, i + limbLen, base);

      this.imuln(limbPow);
      if (this.words[0] + word < 0x4000000) {
        this.words[0] += word;
      } else {
        this._iaddn(word);
      }
    }

    if (mod !== 0) {
      var pow = 1;
      word = parseBase(number, i, number.length, base);

      for (i = 0; i < mod; i++) {
        pow *= base;
      }

      this.imuln(pow);
      if (this.words[0] + word < 0x4000000) {
        this.words[0] += word;
      } else {
        this._iaddn(word);
      }
    }
  };

  BN.prototype.copy = function copy (dest) {
    dest.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      dest.words[i] = this.words[i];
    }
    dest.length = this.length;
    dest.negative = this.negative;
    dest.red = this.red;
  };

  BN.prototype.clone = function clone () {
    var r = new BN(null);
    this.copy(r);
    return r;
  };

  BN.prototype._expand = function _expand (size) {
    while (this.length < size) {
      this.words[this.length++] = 0;
    }
    return this;
  };

  // Remove leading `0` from `this`
  BN.prototype.strip = function strip () {
    while (this.length > 1 && this.words[this.length - 1] === 0) {
      this.length--;
    }
    return this._normSign();
  };

  BN.prototype._normSign = function _normSign () {
    // -0 = 0
    if (this.length === 1 && this.words[0] === 0) {
      this.negative = 0;
    }
    return this;
  };

  BN.prototype.inspect = function inspect () {
    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
  };

  /*

  var zeros = [];
  var groupSizes = [];
  var groupBases = [];

  var s = '';
  var i = -1;
  while (++i < BN.wordSize) {
    zeros[i] = s;
    s += '0';
  }
  groupSizes[0] = 0;
  groupSizes[1] = 0;
  groupBases[0] = 0;
  groupBases[1] = 0;
  var base = 2 - 1;
  while (++base < 36 + 1) {
    var groupSize = 0;
    var groupBase = 1;
    while (groupBase < (1 << BN.wordSize) / base) {
      groupBase *= base;
      groupSize += 1;
    }
    groupSizes[base] = groupSize;
    groupBases[base] = groupBase;
  }

  */

  var zeros = [
    '',
    '0',
    '00',
    '000',
    '0000',
    '00000',
    '000000',
    '0000000',
    '00000000',
    '000000000',
    '0000000000',
    '00000000000',
    '000000000000',
    '0000000000000',
    '00000000000000',
    '000000000000000',
    '0000000000000000',
    '00000000000000000',
    '000000000000000000',
    '0000000000000000000',
    '00000000000000000000',
    '000000000000000000000',
    '0000000000000000000000',
    '00000000000000000000000',
    '000000000000000000000000',
    '0000000000000000000000000'
  ];

  var groupSizes = [
    0, 0,
    25, 16, 12, 11, 10, 9, 8,
    8, 7, 7, 7, 7, 6, 6,
    6, 6, 6, 6, 6, 5, 5,
    5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5
  ];

  var groupBases = [
    0, 0,
    33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
    43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
    16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
    6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
    24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
  ];

  BN.prototype.toString = function toString (base, padding) {
    base = base || 10;
    padding = padding | 0 || 1;

    var out;
    if (base === 16 || base === 'hex') {
      out = '';
      var off = 0;
      var carry = 0;
      for (var i = 0; i < this.length; i++) {
        var w = this.words[i];
        var word = (((w << off) | carry) & 0xffffff).toString(16);
        carry = (w >>> (24 - off)) & 0xffffff;
        if (carry !== 0 || i !== this.length - 1) {
          out = zeros[6 - word.length] + word + out;
        } else {
          out = word + out;
        }
        off += 2;
        if (off >= 26) {
          off -= 26;
          i--;
        }
      }
      if (carry !== 0) {
        out = carry.toString(16) + out;
      }
      while (out.length % padding !== 0) {
        out = '0' + out;
      }
      if (this.negative !== 0) {
        out = '-' + out;
      }
      return out;
    }

    if (base === (base | 0) && base >= 2 && base <= 36) {
      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
      var groupSize = groupSizes[base];
      // var groupBase = Math.pow(base, groupSize);
      var groupBase = groupBases[base];
      out = '';
      var c = this.clone();
      c.negative = 0;
      while (!c.isZero()) {
        var r = c.modn(groupBase).toString(base);
        c = c.idivn(groupBase);

        if (!c.isZero()) {
          out = zeros[groupSize - r.length] + r + out;
        } else {
          out = r + out;
        }
      }
      if (this.isZero()) {
        out = '0' + out;
      }
      while (out.length % padding !== 0) {
        out = '0' + out;
      }
      if (this.negative !== 0) {
        out = '-' + out;
      }
      return out;
    }

    assert(false, 'Base should be between 2 and 36');
  };

  BN.prototype.toNumber = function toNumber () {
    var ret = this.words[0];
    if (this.length === 2) {
      ret += this.words[1] * 0x4000000;
    } else if (this.length === 3 && this.words[2] === 0x01) {
      // NOTE: at this stage it is known that the top bit is set
      ret += 0x10000000000000 + (this.words[1] * 0x4000000);
    } else if (this.length > 2) {
      assert(false, 'Number can only safely store up to 53 bits');
    }
    return (this.negative !== 0) ? -ret : ret;
  };

  BN.prototype.toJSON = function toJSON () {
    return this.toString(16);
  };

  BN.prototype.toBuffer = function toBuffer (endian, length) {
    assert(typeof Buffer !== 'undefined');
    return this.toArrayLike(Buffer, endian, length);
  };

  BN.prototype.toArray = function toArray (endian, length) {
    return this.toArrayLike(Array, endian, length);
  };

  BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {
    var byteLength = this.byteLength();
    var reqLength = length || Math.max(1, byteLength);
    assert(byteLength <= reqLength, 'byte array longer than desired length');
    assert(reqLength > 0, 'Requested array length <= 0');

    this.strip();
    var littleEndian = endian === 'le';
    var res = new ArrayType(reqLength);

    var b, i;
    var q = this.clone();
    if (!littleEndian) {
      // Assume big-endian
      for (i = 0; i < reqLength - byteLength; i++) {
        res[i] = 0;
      }

      for (i = 0; !q.isZero(); i++) {
        b = q.andln(0xff);
        q.iushrn(8);

        res[reqLength - i - 1] = b;
      }
    } else {
      for (i = 0; !q.isZero(); i++) {
        b = q.andln(0xff);
        q.iushrn(8);

        res[i] = b;
      }

      for (; i < reqLength; i++) {
        res[i] = 0;
      }
    }

    return res;
  };

  if (Math.clz32) {
    BN.prototype._countBits = function _countBits (w) {
      return 32 - Math.clz32(w);
    };
  } else {
    BN.prototype._countBits = function _countBits (w) {
      var t = w;
      var r = 0;
      if (t >= 0x1000) {
        r += 13;
        t >>>= 13;
      }
      if (t >= 0x40) {
        r += 7;
        t >>>= 7;
      }
      if (t >= 0x8) {
        r += 4;
        t >>>= 4;
      }
      if (t >= 0x02) {
        r += 2;
        t >>>= 2;
      }
      return r + t;
    };
  }

  BN.prototype._zeroBits = function _zeroBits (w) {
    // Short-cut
    if (w === 0) return 26;

    var t = w;
    var r = 0;
    if ((t & 0x1fff) === 0) {
      r += 13;
      t >>>= 13;
    }
    if ((t & 0x7f) === 0) {
      r += 7;
      t >>>= 7;
    }
    if ((t & 0xf) === 0) {
      r += 4;
      t >>>= 4;
    }
    if ((t & 0x3) === 0) {
      r += 2;
      t >>>= 2;
    }
    if ((t & 0x1) === 0) {
      r++;
    }
    return r;
  };

  // Return number of used bits in a BN
  BN.prototype.bitLength = function bitLength () {
    var w = this.words[this.length - 1];
    var hi = this._countBits(w);
    return (this.length - 1) * 26 + hi;
  };

  function toBitArray (num) {
    var w = new Array(num.bitLength());

    for (var bit = 0; bit < w.length; bit++) {
      var off = (bit / 26) | 0;
      var wbit = bit % 26;

      w[bit] = (num.words[off] & (1 << wbit)) >>> wbit;
    }

    return w;
  }

  // Number of trailing zero bits
  BN.prototype.zeroBits = function zeroBits () {
    if (this.isZero()) return 0;

    var r = 0;
    for (var i = 0; i < this.length; i++) {
      var b = this._zeroBits(this.words[i]);
      r += b;
      if (b !== 26) break;
    }
    return r;
  };

  BN.prototype.byteLength = function byteLength () {
    return Math.ceil(this.bitLength() / 8);
  };

  BN.prototype.toTwos = function toTwos (width) {
    if (this.negative !== 0) {
      return this.abs().inotn(width).iaddn(1);
    }
    return this.clone();
  };

  BN.prototype.fromTwos = function fromTwos (width) {
    if (this.testn(width - 1)) {
      return this.notn(width).iaddn(1).ineg();
    }
    return this.clone();
  };

  BN.prototype.isNeg = function isNeg () {
    return this.negative !== 0;
  };

  // Return negative clone of `this`
  BN.prototype.neg = function neg () {
    return this.clone().ineg();
  };

  BN.prototype.ineg = function ineg () {
    if (!this.isZero()) {
      this.negative ^= 1;
    }

    return this;
  };

  // Or `num` with `this` in-place
  BN.prototype.iuor = function iuor (num) {
    while (this.length < num.length) {
      this.words[this.length++] = 0;
    }

    for (var i = 0; i < num.length; i++) {
      this.words[i] = this.words[i] | num.words[i];
    }

    return this.strip();
  };

  BN.prototype.ior = function ior (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuor(num);
  };

  // Or `num` with `this`
  BN.prototype.or = function or (num) {
    if (this.length > num.length) return this.clone().ior(num);
    return num.clone().ior(this);
  };

  BN.prototype.uor = function uor (num) {
    if (this.length > num.length) return this.clone().iuor(num);
    return num.clone().iuor(this);
  };

  // And `num` with `this` in-place
  BN.prototype.iuand = function iuand (num) {
    // b = min-length(num, this)
    var b;
    if (this.length > num.length) {
      b = num;
    } else {
      b = this;
    }

    for (var i = 0; i < b.length; i++) {
      this.words[i] = this.words[i] & num.words[i];
    }

    this.length = b.length;

    return this.strip();
  };

  BN.prototype.iand = function iand (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuand(num);
  };

  // And `num` with `this`
  BN.prototype.and = function and (num) {
    if (this.length > num.length) return this.clone().iand(num);
    return num.clone().iand(this);
  };

  BN.prototype.uand = function uand (num) {
    if (this.length > num.length) return this.clone().iuand(num);
    return num.clone().iuand(this);
  };

  // Xor `num` with `this` in-place
  BN.prototype.iuxor = function iuxor (num) {
    // a.length > b.length
    var a;
    var b;
    if (this.length > num.length) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    for (var i = 0; i < b.length; i++) {
      this.words[i] = a.words[i] ^ b.words[i];
    }

    if (this !== a) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    this.length = a.length;

    return this.strip();
  };

  BN.prototype.ixor = function ixor (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuxor(num);
  };

  // Xor `num` with `this`
  BN.prototype.xor = function xor (num) {
    if (this.length > num.length) return this.clone().ixor(num);
    return num.clone().ixor(this);
  };

  BN.prototype.uxor = function uxor (num) {
    if (this.length > num.length) return this.clone().iuxor(num);
    return num.clone().iuxor(this);
  };

  // Not ``this`` with ``width`` bitwidth
  BN.prototype.inotn = function inotn (width) {
    assert(typeof width === 'number' && width >= 0);

    var bytesNeeded = Math.ceil(width / 26) | 0;
    var bitsLeft = width % 26;

    // Extend the buffer with leading zeroes
    this._expand(bytesNeeded);

    if (bitsLeft > 0) {
      bytesNeeded--;
    }

    // Handle complete words
    for (var i = 0; i < bytesNeeded; i++) {
      this.words[i] = ~this.words[i] & 0x3ffffff;
    }

    // Handle the residue
    if (bitsLeft > 0) {
      this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));
    }

    // And remove leading zeroes
    return this.strip();
  };

  BN.prototype.notn = function notn (width) {
    return this.clone().inotn(width);
  };

  // Set `bit` of `this`
  BN.prototype.setn = function setn (bit, val) {
    assert(typeof bit === 'number' && bit >= 0);

    var off = (bit / 26) | 0;
    var wbit = bit % 26;

    this._expand(off + 1);

    if (val) {
      this.words[off] = this.words[off] | (1 << wbit);
    } else {
      this.words[off] = this.words[off] & ~(1 << wbit);
    }

    return this.strip();
  };

  // Add `num` to `this` in-place
  BN.prototype.iadd = function iadd (num) {
    var r;

    // negative + positive
    if (this.negative !== 0 && num.negative === 0) {
      this.negative = 0;
      r = this.isub(num);
      this.negative ^= 1;
      return this._normSign();

    // positive + negative
    } else if (this.negative === 0 && num.negative !== 0) {
      num.negative = 0;
      r = this.isub(num);
      num.negative = 1;
      return r._normSign();
    }

    // a.length > b.length
    var a, b;
    if (this.length > num.length) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    var carry = 0;
    for (var i = 0; i < b.length; i++) {
      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
      this.words[i] = r & 0x3ffffff;
      carry = r >>> 26;
    }
    for (; carry !== 0 && i < a.length; i++) {
      r = (a.words[i] | 0) + carry;
      this.words[i] = r & 0x3ffffff;
      carry = r >>> 26;
    }

    this.length = a.length;
    if (carry !== 0) {
      this.words[this.length] = carry;
      this.length++;
    // Copy the rest of the words
    } else if (a !== this) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    return this;
  };

  // Add `num` to `this`
  BN.prototype.add = function add (num) {
    var res;
    if (num.negative !== 0 && this.negative === 0) {
      num.negative = 0;
      res = this.sub(num);
      num.negative ^= 1;
      return res;
    } else if (num.negative === 0 && this.negative !== 0) {
      this.negative = 0;
      res = num.sub(this);
      this.negative = 1;
      return res;
    }

    if (this.length > num.length) return this.clone().iadd(num);

    return num.clone().iadd(this);
  };

  // Subtract `num` from `this` in-place
  BN.prototype.isub = function isub (num) {
    // this - (-num) = this + num
    if (num.negative !== 0) {
      num.negative = 0;
      var r = this.iadd(num);
      num.negative = 1;
      return r._normSign();

    // -this - num = -(this + num)
    } else if (this.negative !== 0) {
      this.negative = 0;
      this.iadd(num);
      this.negative = 1;
      return this._normSign();
    }

    // At this point both numbers are positive
    var cmp = this.cmp(num);

    // Optimization - zeroify
    if (cmp === 0) {
      this.negative = 0;
      this.length = 1;
      this.words[0] = 0;
      return this;
    }

    // a > b
    var a, b;
    if (cmp > 0) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    var carry = 0;
    for (var i = 0; i < b.length; i++) {
      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
      carry = r >> 26;
      this.words[i] = r & 0x3ffffff;
    }
    for (; carry !== 0 && i < a.length; i++) {
      r = (a.words[i] | 0) + carry;
      carry = r >> 26;
      this.words[i] = r & 0x3ffffff;
    }

    // Copy rest of the words
    if (carry === 0 && i < a.length && a !== this) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    this.length = Math.max(this.length, i);

    if (a !== this) {
      this.negative = 1;
    }

    return this.strip();
  };

  // Subtract `num` from `this`
  BN.prototype.sub = function sub (num) {
    return this.clone().isub(num);
  };

  function smallMulTo (self, num, out) {
    out.negative = num.negative ^ self.negative;
    var len = (self.length + num.length) | 0;
    out.length = len;
    len = (len - 1) | 0;

    // Peel one iteration (compiler can't do it, because of code complexity)
    var a = self.words[0] | 0;
    var b = num.words[0] | 0;
    var r = a * b;

    var lo = r & 0x3ffffff;
    var carry = (r / 0x4000000) | 0;
    out.words[0] = lo;

    for (var k = 1; k < len; k++) {
      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
      // note that ncarry could be >= 0x3ffffff
      var ncarry = carry >>> 26;
      var rword = carry & 0x3ffffff;
      var maxJ = Math.min(k, num.length - 1);
      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
        var i = (k - j) | 0;
        a = self.words[i] | 0;
        b = num.words[j] | 0;
        r = a * b + rword;
        ncarry += (r / 0x4000000) | 0;
        rword = r & 0x3ffffff;
      }
      out.words[k] = rword | 0;
      carry = ncarry | 0;
    }
    if (carry !== 0) {
      out.words[k] = carry | 0;
    } else {
      out.length--;
    }

    return out.strip();
  }

  // TODO(indutny): it may be reasonable to omit it for users who don't need
  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
  // multiplication (like elliptic secp256k1).
  var comb10MulTo = function comb10MulTo (self, num, out) {
    var a = self.words;
    var b = num.words;
    var o = out.words;
    var c = 0;
    var lo;
    var mid;
    var hi;
    var a0 = a[0] | 0;
    var al0 = a0 & 0x1fff;
    var ah0 = a0 >>> 13;
    var a1 = a[1] | 0;
    var al1 = a1 & 0x1fff;
    var ah1 = a1 >>> 13;
    var a2 = a[2] | 0;
    var al2 = a2 & 0x1fff;
    var ah2 = a2 >>> 13;
    var a3 = a[3] | 0;
    var al3 = a3 & 0x1fff;
    var ah3 = a3 >>> 13;
    var a4 = a[4] | 0;
    var al4 = a4 & 0x1fff;
    var ah4 = a4 >>> 13;
    var a5 = a[5] | 0;
    var al5 = a5 & 0x1fff;
    var ah5 = a5 >>> 13;
    var a6 = a[6] | 0;
    var al6 = a6 & 0x1fff;
    var ah6 = a6 >>> 13;
    var a7 = a[7] | 0;
    var al7 = a7 & 0x1fff;
    var ah7 = a7 >>> 13;
    var a8 = a[8] | 0;
    var al8 = a8 & 0x1fff;
    var ah8 = a8 >>> 13;
    var a9 = a[9] | 0;
    var al9 = a9 & 0x1fff;
    var ah9 = a9 >>> 13;
    var b0 = b[0] | 0;
    var bl0 = b0 & 0x1fff;
    var bh0 = b0 >>> 13;
    var b1 = b[1] | 0;
    var bl1 = b1 & 0x1fff;
    var bh1 = b1 >>> 13;
    var b2 = b[2] | 0;
    var bl2 = b2 & 0x1fff;
    var bh2 = b2 >>> 13;
    var b3 = b[3] | 0;
    var bl3 = b3 & 0x1fff;
    var bh3 = b3 >>> 13;
    var b4 = b[4] | 0;
    var bl4 = b4 & 0x1fff;
    var bh4 = b4 >>> 13;
    var b5 = b[5] | 0;
    var bl5 = b5 & 0x1fff;
    var bh5 = b5 >>> 13;
    var b6 = b[6] | 0;
    var bl6 = b6 & 0x1fff;
    var bh6 = b6 >>> 13;
    var b7 = b[7] | 0;
    var bl7 = b7 & 0x1fff;
    var bh7 = b7 >>> 13;
    var b8 = b[8] | 0;
    var bl8 = b8 & 0x1fff;
    var bh8 = b8 >>> 13;
    var b9 = b[9] | 0;
    var bl9 = b9 & 0x1fff;
    var bh9 = b9 >>> 13;

    out.negative = self.negative ^ num.negative;
    out.length = 19;
    /* k = 0 */
    lo = Math.imul(al0, bl0);
    mid = Math.imul(al0, bh0);
    mid = (mid + Math.imul(ah0, bl0)) | 0;
    hi = Math.imul(ah0, bh0);
    var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;
    w0 &= 0x3ffffff;
    /* k = 1 */
    lo = Math.imul(al1, bl0);
    mid = Math.imul(al1, bh0);
    mid = (mid + Math.imul(ah1, bl0)) | 0;
    hi = Math.imul(ah1, bh0);
    lo = (lo + Math.imul(al0, bl1)) | 0;
    mid = (mid + Math.imul(al0, bh1)) | 0;
    mid = (mid + Math.imul(ah0, bl1)) | 0;
    hi = (hi + Math.imul(ah0, bh1)) | 0;
    var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;
    w1 &= 0x3ffffff;
    /* k = 2 */
    lo = Math.imul(al2, bl0);
    mid = Math.imul(al2, bh0);
    mid = (mid + Math.imul(ah2, bl0)) | 0;
    hi = Math.imul(ah2, bh0);
    lo = (lo + Math.imul(al1, bl1)) | 0;
    mid = (mid + Math.imul(al1, bh1)) | 0;
    mid = (mid + Math.imul(ah1, bl1)) | 0;
    hi = (hi + Math.imul(ah1, bh1)) | 0;
    lo = (lo + Math.imul(al0, bl2)) | 0;
    mid = (mid + Math.imul(al0, bh2)) | 0;
    mid = (mid + Math.imul(ah0, bl2)) | 0;
    hi = (hi + Math.imul(ah0, bh2)) | 0;
    var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;
    w2 &= 0x3ffffff;
    /* k = 3 */
    lo = Math.imul(al3, bl0);
    mid = Math.imul(al3, bh0);
    mid = (mid + Math.imul(ah3, bl0)) | 0;
    hi = Math.imul(ah3, bh0);
    lo = (lo + Math.imul(al2, bl1)) | 0;
    mid = (mid + Math.imul(al2, bh1)) | 0;
    mid = (mid + Math.imul(ah2, bl1)) | 0;
    hi = (hi + Math.imul(ah2, bh1)) | 0;
    lo = (lo + Math.imul(al1, bl2)) | 0;
    mid = (mid + Math.imul(al1, bh2)) | 0;
    mid = (mid + Math.imul(ah1, bl2)) | 0;
    hi = (hi + Math.imul(ah1, bh2)) | 0;
    lo = (lo + Math.imul(al0, bl3)) | 0;
    mid = (mid + Math.imul(al0, bh3)) | 0;
    mid = (mid + Math.imul(ah0, bl3)) | 0;
    hi = (hi + Math.imul(ah0, bh3)) | 0;
    var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;
    w3 &= 0x3ffffff;
    /* k = 4 */
    lo = Math.imul(al4, bl0);
    mid = Math.imul(al4, bh0);
    mid = (mid + Math.imul(ah4, bl0)) | 0;
    hi = Math.imul(ah4, bh0);
    lo = (lo + Math.imul(al3, bl1)) | 0;
    mid = (mid + Math.imul(al3, bh1)) | 0;
    mid = (mid + Math.imul(ah3, bl1)) | 0;
    hi = (hi + Math.imul(ah3, bh1)) | 0;
    lo = (lo + Math.imul(al2, bl2)) | 0;
    mid = (mid + Math.imul(al2, bh2)) | 0;
    mid = (mid + Math.imul(ah2, bl2)) | 0;
    hi = (hi + Math.imul(ah2, bh2)) | 0;
    lo = (lo + Math.imul(al1, bl3)) | 0;
    mid = (mid + Math.imul(al1, bh3)) | 0;
    mid = (mid + Math.imul(ah1, bl3)) | 0;
    hi = (hi + Math.imul(ah1, bh3)) | 0;
    lo = (lo + Math.imul(al0, bl4)) | 0;
    mid = (mid + Math.imul(al0, bh4)) | 0;
    mid = (mid + Math.imul(ah0, bl4)) | 0;
    hi = (hi + Math.imul(ah0, bh4)) | 0;
    var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;
    w4 &= 0x3ffffff;
    /* k = 5 */
    lo = Math.imul(al5, bl0);
    mid = Math.imul(al5, bh0);
    mid = (mid + Math.imul(ah5, bl0)) | 0;
    hi = Math.imul(ah5, bh0);
    lo = (lo + Math.imul(al4, bl1)) | 0;
    mid = (mid + Math.imul(al4, bh1)) | 0;
    mid = (mid + Math.imul(ah4, bl1)) | 0;
    hi = (hi + Math.imul(ah4, bh1)) | 0;
    lo = (lo + Math.imul(al3, bl2)) | 0;
    mid = (mid + Math.imul(al3, bh2)) | 0;
    mid = (mid + Math.imul(ah3, bl2)) | 0;
    hi = (hi + Math.imul(ah3, bh2)) | 0;
    lo = (lo + Math.imul(al2, bl3)) | 0;
    mid = (mid + Math.imul(al2, bh3)) | 0;
    mid = (mid + Math.imul(ah2, bl3)) | 0;
    hi = (hi + Math.imul(ah2, bh3)) | 0;
    lo = (lo + Math.imul(al1, bl4)) | 0;
    mid = (mid + Math.imul(al1, bh4)) | 0;
    mid = (mid + Math.imul(ah1, bl4)) | 0;
    hi = (hi + Math.imul(ah1, bh4)) | 0;
    lo = (lo + Math.imul(al0, bl5)) | 0;
    mid = (mid + Math.imul(al0, bh5)) | 0;
    mid = (mid + Math.imul(ah0, bl5)) | 0;
    hi = (hi + Math.imul(ah0, bh5)) | 0;
    var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;
    w5 &= 0x3ffffff;
    /* k = 6 */
    lo = Math.imul(al6, bl0);
    mid = Math.imul(al6, bh0);
    mid = (mid + Math.imul(ah6, bl0)) | 0;
    hi = Math.imul(ah6, bh0);
    lo = (lo + Math.imul(al5, bl1)) | 0;
    mid = (mid + Math.imul(al5, bh1)) | 0;
    mid = (mid + Math.imul(ah5, bl1)) | 0;
    hi = (hi + Math.imul(ah5, bh1)) | 0;
    lo = (lo + Math.imul(al4, bl2)) | 0;
    mid = (mid + Math.imul(al4, bh2)) | 0;
    mid = (mid + Math.imul(ah4, bl2)) | 0;
    hi = (hi + Math.imul(ah4, bh2)) | 0;
    lo = (lo + Math.imul(al3, bl3)) | 0;
    mid = (mid + Math.imul(al3, bh3)) | 0;
    mid = (mid + Math.imul(ah3, bl3)) | 0;
    hi = (hi + Math.imul(ah3, bh3)) | 0;
    lo = (lo + Math.imul(al2, bl4)) | 0;
    mid = (mid + Math.imul(al2, bh4)) | 0;
    mid = (mid + Math.imul(ah2, bl4)) | 0;
    hi = (hi + Math.imul(ah2, bh4)) | 0;
    lo = (lo + Math.imul(al1, bl5)) | 0;
    mid = (mid + Math.imul(al1, bh5)) | 0;
    mid = (mid + Math.imul(ah1, bl5)) | 0;
    hi = (hi + Math.imul(ah1, bh5)) | 0;
    lo = (lo + Math.imul(al0, bl6)) | 0;
    mid = (mid + Math.imul(al0, bh6)) | 0;
    mid = (mid + Math.imul(ah0, bl6)) | 0;
    hi = (hi + Math.imul(ah0, bh6)) | 0;
    var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;
    w6 &= 0x3ffffff;
    /* k = 7 */
    lo = Math.imul(al7, bl0);
    mid = Math.imul(al7, bh0);
    mid = (mid + Math.imul(ah7, bl0)) | 0;
    hi = Math.imul(ah7, bh0);
    lo = (lo + Math.imul(al6, bl1)) | 0;
    mid = (mid + Math.imul(al6, bh1)) | 0;
    mid = (mid + Math.imul(ah6, bl1)) | 0;
    hi = (hi + Math.imul(ah6, bh1)) | 0;
    lo = (lo + Math.imul(al5, bl2)) | 0;
    mid = (mid + Math.imul(al5, bh2)) | 0;
    mid = (mid + Math.imul(ah5, bl2)) | 0;
    hi = (hi + Math.imul(ah5, bh2)) | 0;
    lo = (lo + Math.imul(al4, bl3)) | 0;
    mid = (mid + Math.imul(al4, bh3)) | 0;
    mid = (mid + Math.imul(ah4, bl3)) | 0;
    hi = (hi + Math.imul(ah4, bh3)) | 0;
    lo = (lo + Math.imul(al3, bl4)) | 0;
    mid = (mid + Math.imul(al3, bh4)) | 0;
    mid = (mid + Math.imul(ah3, bl4)) | 0;
    hi = (hi + Math.imul(ah3, bh4)) | 0;
    lo = (lo + Math.imul(al2, bl5)) | 0;
    mid = (mid + Math.imul(al2, bh5)) | 0;
    mid = (mid + Math.imul(ah2, bl5)) | 0;
    hi = (hi + Math.imul(ah2, bh5)) | 0;
    lo = (lo + Math.imul(al1, bl6)) | 0;
    mid = (mid + Math.imul(al1, bh6)) | 0;
    mid = (mid + Math.imul(ah1, bl6)) | 0;
    hi = (hi + Math.imul(ah1, bh6)) | 0;
    lo = (lo + Math.imul(al0, bl7)) | 0;
    mid = (mid + Math.imul(al0, bh7)) | 0;
    mid = (mid + Math.imul(ah0, bl7)) | 0;
    hi = (hi + Math.imul(ah0, bh7)) | 0;
    var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;
    w7 &= 0x3ffffff;
    /* k = 8 */
    lo = Math.imul(al8, bl0);
    mid = Math.imul(al8, bh0);
    mid = (mid + Math.imul(ah8, bl0)) | 0;
    hi = Math.imul(ah8, bh0);
    lo = (lo + Math.imul(al7, bl1)) | 0;
    mid = (mid + Math.imul(al7, bh1)) | 0;
    mid = (mid + Math.imul(ah7, bl1)) | 0;
    hi = (hi + Math.imul(ah7, bh1)) | 0;
    lo = (lo + Math.imul(al6, bl2)) | 0;
    mid = (mid + Math.imul(al6, bh2)) | 0;
    mid = (mid + Math.imul(ah6, bl2)) | 0;
    hi = (hi + Math.imul(ah6, bh2)) | 0;
    lo = (lo + Math.imul(al5, bl3)) | 0;
    mid = (mid + Math.imul(al5, bh3)) | 0;
    mid = (mid + Math.imul(ah5, bl3)) | 0;
    hi = (hi + Math.imul(ah5, bh3)) | 0;
    lo = (lo + Math.imul(al4, bl4)) | 0;
    mid = (mid + Math.imul(al4, bh4)) | 0;
    mid = (mid + Math.imul(ah4, bl4)) | 0;
    hi = (hi + Math.imul(ah4, bh4)) | 0;
    lo = (lo + Math.imul(al3, bl5)) | 0;
    mid = (mid + Math.imul(al3, bh5)) | 0;
    mid = (mid + Math.imul(ah3, bl5)) | 0;
    hi = (hi + Math.imul(ah3, bh5)) | 0;
    lo = (lo + Math.imul(al2, bl6)) | 0;
    mid = (mid + Math.imul(al2, bh6)) | 0;
    mid = (mid + Math.imul(ah2, bl6)) | 0;
    hi = (hi + Math.imul(ah2, bh6)) | 0;
    lo = (lo + Math.imul(al1, bl7)) | 0;
    mid = (mid + Math.imul(al1, bh7)) | 0;
    mid = (mid + Math.imul(ah1, bl7)) | 0;
    hi = (hi + Math.imul(ah1, bh7)) | 0;
    lo = (lo + Math.imul(al0, bl8)) | 0;
    mid = (mid + Math.imul(al0, bh8)) | 0;
    mid = (mid + Math.imul(ah0, bl8)) | 0;
    hi = (hi + Math.imul(ah0, bh8)) | 0;
    var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;
    w8 &= 0x3ffffff;
    /* k = 9 */
    lo = Math.imul(al9, bl0);
    mid = Math.imul(al9, bh0);
    mid = (mid + Math.imul(ah9, bl0)) | 0;
    hi = Math.imul(ah9, bh0);
    lo = (lo + Math.imul(al8, bl1)) | 0;
    mid = (mid + Math.imul(al8, bh1)) | 0;
    mid = (mid + Math.imul(ah8, bl1)) | 0;
    hi = (hi + Math.imul(ah8, bh1)) | 0;
    lo = (lo + Math.imul(al7, bl2)) | 0;
    mid = (mid + Math.imul(al7, bh2)) | 0;
    mid = (mid + Math.imul(ah7, bl2)) | 0;
    hi = (hi + Math.imul(ah7, bh2)) | 0;
    lo = (lo + Math.imul(al6, bl3)) | 0;
    mid = (mid + Math.imul(al6, bh3)) | 0;
    mid = (mid + Math.imul(ah6, bl3)) | 0;
    hi = (hi + Math.imul(ah6, bh3)) | 0;
    lo = (lo + Math.imul(al5, bl4)) | 0;
    mid = (mid + Math.imul(al5, bh4)) | 0;
    mid = (mid + Math.imul(ah5, bl4)) | 0;
    hi = (hi + Math.imul(ah5, bh4)) | 0;
    lo = (lo + Math.imul(al4, bl5)) | 0;
    mid = (mid + Math.imul(al4, bh5)) | 0;
    mid = (mid + Math.imul(ah4, bl5)) | 0;
    hi = (hi + Math.imul(ah4, bh5)) | 0;
    lo = (lo + Math.imul(al3, bl6)) | 0;
    mid = (mid + Math.imul(al3, bh6)) | 0;
    mid = (mid + Math.imul(ah3, bl6)) | 0;
    hi = (hi + Math.imul(ah3, bh6)) | 0;
    lo = (lo + Math.imul(al2, bl7)) | 0;
    mid = (mid + Math.imul(al2, bh7)) | 0;
    mid = (mid + Math.imul(ah2, bl7)) | 0;
    hi = (hi + Math.imul(ah2, bh7)) | 0;
    lo = (lo + Math.imul(al1, bl8)) | 0;
    mid = (mid + Math.imul(al1, bh8)) | 0;
    mid = (mid + Math.imul(ah1, bl8)) | 0;
    hi = (hi + Math.imul(ah1, bh8)) | 0;
    lo = (lo + Math.imul(al0, bl9)) | 0;
    mid = (mid + Math.imul(al0, bh9)) | 0;
    mid = (mid + Math.imul(ah0, bl9)) | 0;
    hi = (hi + Math.imul(ah0, bh9)) | 0;
    var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;
    w9 &= 0x3ffffff;
    /* k = 10 */
    lo = Math.imul(al9, bl1);
    mid = Math.imul(al9, bh1);
    mid = (mid + Math.imul(ah9, bl1)) | 0;
    hi = Math.imul(ah9, bh1);
    lo = (lo + Math.imul(al8, bl2)) | 0;
    mid = (mid + Math.imul(al8, bh2)) | 0;
    mid = (mid + Math.imul(ah8, bl2)) | 0;
    hi = (hi + Math.imul(ah8, bh2)) | 0;
    lo = (lo + Math.imul(al7, bl3)) | 0;
    mid = (mid + Math.imul(al7, bh3)) | 0;
    mid = (mid + Math.imul(ah7, bl3)) | 0;
    hi = (hi + Math.imul(ah7, bh3)) | 0;
    lo = (lo + Math.imul(al6, bl4)) | 0;
    mid = (mid + Math.imul(al6, bh4)) | 0;
    mid = (mid + Math.imul(ah6, bl4)) | 0;
    hi = (hi + Math.imul(ah6, bh4)) | 0;
    lo = (lo + Math.imul(al5, bl5)) | 0;
    mid = (mid + Math.imul(al5, bh5)) | 0;
    mid = (mid + Math.imul(ah5, bl5)) | 0;
    hi = (hi + Math.imul(ah5, bh5)) | 0;
    lo = (lo + Math.imul(al4, bl6)) | 0;
    mid = (mid + Math.imul(al4, bh6)) | 0;
    mid = (mid + Math.imul(ah4, bl6)) | 0;
    hi = (hi + Math.imul(ah4, bh6)) | 0;
    lo = (lo + Math.imul(al3, bl7)) | 0;
    mid = (mid + Math.imul(al3, bh7)) | 0;
    mid = (mid + Math.imul(ah3, bl7)) | 0;
    hi = (hi + Math.imul(ah3, bh7)) | 0;
    lo = (lo + Math.imul(al2, bl8)) | 0;
    mid = (mid + Math.imul(al2, bh8)) | 0;
    mid = (mid + Math.imul(ah2, bl8)) | 0;
    hi = (hi + Math.imul(ah2, bh8)) | 0;
    lo = (lo + Math.imul(al1, bl9)) | 0;
    mid = (mid + Math.imul(al1, bh9)) | 0;
    mid = (mid + Math.imul(ah1, bl9)) | 0;
    hi = (hi + Math.imul(ah1, bh9)) | 0;
    var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;
    w10 &= 0x3ffffff;
    /* k = 11 */
    lo = Math.imul(al9, bl2);
    mid = Math.imul(al9, bh2);
    mid = (mid + Math.imul(ah9, bl2)) | 0;
    hi = Math.imul(ah9, bh2);
    lo = (lo + Math.imul(al8, bl3)) | 0;
    mid = (mid + Math.imul(al8, bh3)) | 0;
    mid = (mid + Math.imul(ah8, bl3)) | 0;
    hi = (hi + Math.imul(ah8, bh3)) | 0;
    lo = (lo + Math.imul(al7, bl4)) | 0;
    mid = (mid + Math.imul(al7, bh4)) | 0;
    mid = (mid + Math.imul(ah7, bl4)) | 0;
    hi = (hi + Math.imul(ah7, bh4)) | 0;
    lo = (lo + Math.imul(al6, bl5)) | 0;
    mid = (mid + Math.imul(al6, bh5)) | 0;
    mid = (mid + Math.imul(ah6, bl5)) | 0;
    hi = (hi + Math.imul(ah6, bh5)) | 0;
    lo = (lo + Math.imul(al5, bl6)) | 0;
    mid = (mid + Math.imul(al5, bh6)) | 0;
    mid = (mid + Math.imul(ah5, bl6)) | 0;
    hi = (hi + Math.imul(ah5, bh6)) | 0;
    lo = (lo + Math.imul(al4, bl7)) | 0;
    mid = (mid + Math.imul(al4, bh7)) | 0;
    mid = (mid + Math.imul(ah4, bl7)) | 0;
    hi = (hi + Math.imul(ah4, bh7)) | 0;
    lo = (lo + Math.imul(al3, bl8)) | 0;
    mid = (mid + Math.imul(al3, bh8)) | 0;
    mid = (mid + Math.imul(ah3, bl8)) | 0;
    hi = (hi + Math.imul(ah3, bh8)) | 0;
    lo = (lo + Math.imul(al2, bl9)) | 0;
    mid = (mid + Math.imul(al2, bh9)) | 0;
    mid = (mid + Math.imul(ah2, bl9)) | 0;
    hi = (hi + Math.imul(ah2, bh9)) | 0;
    var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;
    w11 &= 0x3ffffff;
    /* k = 12 */
    lo = Math.imul(al9, bl3);
    mid = Math.imul(al9, bh3);
    mid = (mid + Math.imul(ah9, bl3)) | 0;
    hi = Math.imul(ah9, bh3);
    lo = (lo + Math.imul(al8, bl4)) | 0;
    mid = (mid + Math.imul(al8, bh4)) | 0;
    mid = (mid + Math.imul(ah8, bl4)) | 0;
    hi = (hi + Math.imul(ah8, bh4)) | 0;
    lo = (lo + Math.imul(al7, bl5)) | 0;
    mid = (mid + Math.imul(al7, bh5)) | 0;
    mid = (mid + Math.imul(ah7, bl5)) | 0;
    hi = (hi + Math.imul(ah7, bh5)) | 0;
    lo = (lo + Math.imul(al6, bl6)) | 0;
    mid = (mid + Math.imul(al6, bh6)) | 0;
    mid = (mid + Math.imul(ah6, bl6)) | 0;
    hi = (hi + Math.imul(ah6, bh6)) | 0;
    lo = (lo + Math.imul(al5, bl7)) | 0;
    mid = (mid + Math.imul(al5, bh7)) | 0;
    mid = (mid + Math.imul(ah5, bl7)) | 0;
    hi = (hi + Math.imul(ah5, bh7)) | 0;
    lo = (lo + Math.imul(al4, bl8)) | 0;
    mid = (mid + Math.imul(al4, bh8)) | 0;
    mid = (mid + Math.imul(ah4, bl8)) | 0;
    hi = (hi + Math.imul(ah4, bh8)) | 0;
    lo = (lo + Math.imul(al3, bl9)) | 0;
    mid = (mid + Math.imul(al3, bh9)) | 0;
    mid = (mid + Math.imul(ah3, bl9)) | 0;
    hi = (hi + Math.imul(ah3, bh9)) | 0;
    var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;
    w12 &= 0x3ffffff;
    /* k = 13 */
    lo = Math.imul(al9, bl4);
    mid = Math.imul(al9, bh4);
    mid = (mid + Math.imul(ah9, bl4)) | 0;
    hi = Math.imul(ah9, bh4);
    lo = (lo + Math.imul(al8, bl5)) | 0;
    mid = (mid + Math.imul(al8, bh5)) | 0;
    mid = (mid + Math.imul(ah8, bl5)) | 0;
    hi = (hi + Math.imul(ah8, bh5)) | 0;
    lo = (lo + Math.imul(al7, bl6)) | 0;
    mid = (mid + Math.imul(al7, bh6)) | 0;
    mid = (mid + Math.imul(ah7, bl6)) | 0;
    hi = (hi + Math.imul(ah7, bh6)) | 0;
    lo = (lo + Math.imul(al6, bl7)) | 0;
    mid = (mid + Math.imul(al6, bh7)) | 0;
    mid = (mid + Math.imul(ah6, bl7)) | 0;
    hi = (hi + Math.imul(ah6, bh7)) | 0;
    lo = (lo + Math.imul(al5, bl8)) | 0;
    mid = (mid + Math.imul(al5, bh8)) | 0;
    mid = (mid + Math.imul(ah5, bl8)) | 0;
    hi = (hi + Math.imul(ah5, bh8)) | 0;
    lo = (lo + Math.imul(al4, bl9)) | 0;
    mid = (mid + Math.imul(al4, bh9)) | 0;
    mid = (mid + Math.imul(ah4, bl9)) | 0;
    hi = (hi + Math.imul(ah4, bh9)) | 0;
    var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;
    w13 &= 0x3ffffff;
    /* k = 14 */
    lo = Math.imul(al9, bl5);
    mid = Math.imul(al9, bh5);
    mid = (mid + Math.imul(ah9, bl5)) | 0;
    hi = Math.imul(ah9, bh5);
    lo = (lo + Math.imul(al8, bl6)) | 0;
    mid = (mid + Math.imul(al8, bh6)) | 0;
    mid = (mid + Math.imul(ah8, bl6)) | 0;
    hi = (hi + Math.imul(ah8, bh6)) | 0;
    lo = (lo + Math.imul(al7, bl7)) | 0;
    mid = (mid + Math.imul(al7, bh7)) | 0;
    mid = (mid + Math.imul(ah7, bl7)) | 0;
    hi = (hi + Math.imul(ah7, bh7)) | 0;
    lo = (lo + Math.imul(al6, bl8)) | 0;
    mid = (mid + Math.imul(al6, bh8)) | 0;
    mid = (mid + Math.imul(ah6, bl8)) | 0;
    hi = (hi + Math.imul(ah6, bh8)) | 0;
    lo = (lo + Math.imul(al5, bl9)) | 0;
    mid = (mid + Math.imul(al5, bh9)) | 0;
    mid = (mid + Math.imul(ah5, bl9)) | 0;
    hi = (hi + Math.imul(ah5, bh9)) | 0;
    var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;
    w14 &= 0x3ffffff;
    /* k = 15 */
    lo = Math.imul(al9, bl6);
    mid = Math.imul(al9, bh6);
    mid = (mid + Math.imul(ah9, bl6)) | 0;
    hi = Math.imul(ah9, bh6);
    lo = (lo + Math.imul(al8, bl7)) | 0;
    mid = (mid + Math.imul(al8, bh7)) | 0;
    mid = (mid + Math.imul(ah8, bl7)) | 0;
    hi = (hi + Math.imul(ah8, bh7)) | 0;
    lo = (lo + Math.imul(al7, bl8)) | 0;
    mid = (mid + Math.imul(al7, bh8)) | 0;
    mid = (mid + Math.imul(ah7, bl8)) | 0;
    hi = (hi + Math.imul(ah7, bh8)) | 0;
    lo = (lo + Math.imul(al6, bl9)) | 0;
    mid = (mid + Math.imul(al6, bh9)) | 0;
    mid = (mid + Math.imul(ah6, bl9)) | 0;
    hi = (hi + Math.imul(ah6, bh9)) | 0;
    var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;
    w15 &= 0x3ffffff;
    /* k = 16 */
    lo = Math.imul(al9, bl7);
    mid = Math.imul(al9, bh7);
    mid = (mid + Math.imul(ah9, bl7)) | 0;
    hi = Math.imul(ah9, bh7);
    lo = (lo + Math.imul(al8, bl8)) | 0;
    mid = (mid + Math.imul(al8, bh8)) | 0;
    mid = (mid + Math.imul(ah8, bl8)) | 0;
    hi = (hi + Math.imul(ah8, bh8)) | 0;
    lo = (lo + Math.imul(al7, bl9)) | 0;
    mid = (mid + Math.imul(al7, bh9)) | 0;
    mid = (mid + Math.imul(ah7, bl9)) | 0;
    hi = (hi + Math.imul(ah7, bh9)) | 0;
    var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;
    w16 &= 0x3ffffff;
    /* k = 17 */
    lo = Math.imul(al9, bl8);
    mid = Math.imul(al9, bh8);
    mid = (mid + Math.imul(ah9, bl8)) | 0;
    hi = Math.imul(ah9, bh8);
    lo = (lo + Math.imul(al8, bl9)) | 0;
    mid = (mid + Math.imul(al8, bh9)) | 0;
    mid = (mid + Math.imul(ah8, bl9)) | 0;
    hi = (hi + Math.imul(ah8, bh9)) | 0;
    var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;
    w17 &= 0x3ffffff;
    /* k = 18 */
    lo = Math.imul(al9, bl9);
    mid = Math.imul(al9, bh9);
    mid = (mid + Math.imul(ah9, bl9)) | 0;
    hi = Math.imul(ah9, bh9);
    var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;
    w18 &= 0x3ffffff;
    o[0] = w0;
    o[1] = w1;
    o[2] = w2;
    o[3] = w3;
    o[4] = w4;
    o[5] = w5;
    o[6] = w6;
    o[7] = w7;
    o[8] = w8;
    o[9] = w9;
    o[10] = w10;
    o[11] = w11;
    o[12] = w12;
    o[13] = w13;
    o[14] = w14;
    o[15] = w15;
    o[16] = w16;
    o[17] = w17;
    o[18] = w18;
    if (c !== 0) {
      o[19] = c;
      out.length++;
    }
    return out;
  };

  // Polyfill comb
  if (!Math.imul) {
    comb10MulTo = smallMulTo;
  }

  function bigMulTo (self, num, out) {
    out.negative = num.negative ^ self.negative;
    out.length = self.length + num.length;

    var carry = 0;
    var hncarry = 0;
    for (var k = 0; k < out.length - 1; k++) {
      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
      // note that ncarry could be >= 0x3ffffff
      var ncarry = hncarry;
      hncarry = 0;
      var rword = carry & 0x3ffffff;
      var maxJ = Math.min(k, num.length - 1);
      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
        var i = k - j;
        var a = self.words[i] | 0;
        var b = num.words[j] | 0;
        var r = a * b;

        var lo = r & 0x3ffffff;
        ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
        lo = (lo + rword) | 0;
        rword = lo & 0x3ffffff;
        ncarry = (ncarry + (lo >>> 26)) | 0;

        hncarry += ncarry >>> 26;
        ncarry &= 0x3ffffff;
      }
      out.words[k] = rword;
      carry = ncarry;
      ncarry = hncarry;
    }
    if (carry !== 0) {
      out.words[k] = carry;
    } else {
      out.length--;
    }

    return out.strip();
  }

  function jumboMulTo (self, num, out) {
    var fftm = new FFTM();
    return fftm.mulp(self, num, out);
  }

  BN.prototype.mulTo = function mulTo (num, out) {
    var res;
    var len = this.length + num.length;
    if (this.length === 10 && num.length === 10) {
      res = comb10MulTo(this, num, out);
    } else if (len < 63) {
      res = smallMulTo(this, num, out);
    } else if (len < 1024) {
      res = bigMulTo(this, num, out);
    } else {
      res = jumboMulTo(this, num, out);
    }

    return res;
  };

  // Cooley-Tukey algorithm for FFT
  // slightly revisited to rely on looping instead of recursion

  function FFTM (x, y) {
    this.x = x;
    this.y = y;
  }

  FFTM.prototype.makeRBT = function makeRBT (N) {
    var t = new Array(N);
    var l = BN.prototype._countBits(N) - 1;
    for (var i = 0; i < N; i++) {
      t[i] = this.revBin(i, l, N);
    }

    return t;
  };

  // Returns binary-reversed representation of `x`
  FFTM.prototype.revBin = function revBin (x, l, N) {
    if (x === 0 || x === N - 1) return x;

    var rb = 0;
    for (var i = 0; i < l; i++) {
      rb |= (x & 1) << (l - i - 1);
      x >>= 1;
    }

    return rb;
  };

  // Performs "tweedling" phase, therefore 'emulating'
  // behaviour of the recursive algorithm
  FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {
    for (var i = 0; i < N; i++) {
      rtws[i] = rws[rbt[i]];
      itws[i] = iws[rbt[i]];
    }
  };

  FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {
    this.permute(rbt, rws, iws, rtws, itws, N);

    for (var s = 1; s < N; s <<= 1) {
      var l = s << 1;

      var rtwdf = Math.cos(2 * Math.PI / l);
      var itwdf = Math.sin(2 * Math.PI / l);

      for (var p = 0; p < N; p += l) {
        var rtwdf_ = rtwdf;
        var itwdf_ = itwdf;

        for (var j = 0; j < s; j++) {
          var re = rtws[p + j];
          var ie = itws[p + j];

          var ro = rtws[p + j + s];
          var io = itws[p + j + s];

          var rx = rtwdf_ * ro - itwdf_ * io;

          io = rtwdf_ * io + itwdf_ * ro;
          ro = rx;

          rtws[p + j] = re + ro;
          itws[p + j] = ie + io;

          rtws[p + j + s] = re - ro;
          itws[p + j + s] = ie - io;

          /* jshint maxdepth : false */
          if (j !== l) {
            rx = rtwdf * rtwdf_ - itwdf * itwdf_;

            itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
            rtwdf_ = rx;
          }
        }
      }
    }
  };

  FFTM.prototype.guessLen13b = function guessLen13b (n, m) {
    var N = Math.max(m, n) | 1;
    var odd = N & 1;
    var i = 0;
    for (N = N / 2 | 0; N; N = N >>> 1) {
      i++;
    }

    return 1 << i + 1 + odd;
  };

  FFTM.prototype.conjugate = function conjugate (rws, iws, N) {
    if (N <= 1) return;

    for (var i = 0; i < N / 2; i++) {
      var t = rws[i];

      rws[i] = rws[N - i - 1];
      rws[N - i - 1] = t;

      t = iws[i];

      iws[i] = -iws[N - i - 1];
      iws[N - i - 1] = -t;
    }
  };

  FFTM.prototype.normalize13b = function normalize13b (ws, N) {
    var carry = 0;
    for (var i = 0; i < N / 2; i++) {
      var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +
        Math.round(ws[2 * i] / N) +
        carry;

      ws[i] = w & 0x3ffffff;

      if (w < 0x4000000) {
        carry = 0;
      } else {
        carry = w / 0x4000000 | 0;
      }
    }

    return ws;
  };

  FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {
    var carry = 0;
    for (var i = 0; i < len; i++) {
      carry = carry + (ws[i] | 0);

      rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;
      rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;
    }

    // Pad with zeroes
    for (i = 2 * len; i < N; ++i) {
      rws[i] = 0;
    }

    assert(carry === 0);
    assert((carry & ~0x1fff) === 0);
  };

  FFTM.prototype.stub = function stub (N) {
    var ph = new Array(N);
    for (var i = 0; i < N; i++) {
      ph[i] = 0;
    }

    return ph;
  };

  FFTM.prototype.mulp = function mulp (x, y, out) {
    var N = 2 * this.guessLen13b(x.length, y.length);

    var rbt = this.makeRBT(N);

    var _ = this.stub(N);

    var rws = new Array(N);
    var rwst = new Array(N);
    var iwst = new Array(N);

    var nrws = new Array(N);
    var nrwst = new Array(N);
    var niwst = new Array(N);

    var rmws = out.words;
    rmws.length = N;

    this.convert13b(x.words, x.length, rws, N);
    this.convert13b(y.words, y.length, nrws, N);

    this.transform(rws, _, rwst, iwst, N, rbt);
    this.transform(nrws, _, nrwst, niwst, N, rbt);

    for (var i = 0; i < N; i++) {
      var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
      iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
      rwst[i] = rx;
    }

    this.conjugate(rwst, iwst, N);
    this.transform(rwst, iwst, rmws, _, N, rbt);
    this.conjugate(rmws, _, N);
    this.normalize13b(rmws, N);

    out.negative = x.negative ^ y.negative;
    out.length = x.length + y.length;
    return out.strip();
  };

  // Multiply `this` by `num`
  BN.prototype.mul = function mul (num) {
    var out = new BN(null);
    out.words = new Array(this.length + num.length);
    return this.mulTo(num, out);
  };

  // Multiply employing FFT
  BN.prototype.mulf = function mulf (num) {
    var out = new BN(null);
    out.words = new Array(this.length + num.length);
    return jumboMulTo(this, num, out);
  };

  // In-place Multiplication
  BN.prototype.imul = function imul (num) {
    return this.clone().mulTo(num, this);
  };

  BN.prototype.imuln = function imuln (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);

    // Carry
    var carry = 0;
    for (var i = 0; i < this.length; i++) {
      var w = (this.words[i] | 0) * num;
      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
      carry >>= 26;
      carry += (w / 0x4000000) | 0;
      // NOTE: lo is 27bit maximum
      carry += lo >>> 26;
      this.words[i] = lo & 0x3ffffff;
    }

    if (carry !== 0) {
      this.words[i] = carry;
      this.length++;
    }

    return this;
  };

  BN.prototype.muln = function muln (num) {
    return this.clone().imuln(num);
  };

  // `this` * `this`
  BN.prototype.sqr = function sqr () {
    return this.mul(this);
  };

  // `this` * `this` in-place
  BN.prototype.isqr = function isqr () {
    return this.imul(this.clone());
  };

  // Math.pow(`this`, `num`)
  BN.prototype.pow = function pow (num) {
    var w = toBitArray(num);
    if (w.length === 0) return new BN(1);

    // Skip leading zeroes
    var res = this;
    for (var i = 0; i < w.length; i++, res = res.sqr()) {
      if (w[i] !== 0) break;
    }

    if (++i < w.length) {
      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
        if (w[i] === 0) continue;

        res = res.mul(q);
      }
    }

    return res;
  };

  // Shift-left in-place
  BN.prototype.iushln = function iushln (bits) {
    assert(typeof bits === 'number' && bits >= 0);
    var r = bits % 26;
    var s = (bits - r) / 26;
    var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);
    var i;

    if (r !== 0) {
      var carry = 0;

      for (i = 0; i < this.length; i++) {
        var newCarry = this.words[i] & carryMask;
        var c = ((this.words[i] | 0) - newCarry) << r;
        this.words[i] = c | carry;
        carry = newCarry >>> (26 - r);
      }

      if (carry) {
        this.words[i] = carry;
        this.length++;
      }
    }

    if (s !== 0) {
      for (i = this.length - 1; i >= 0; i--) {
        this.words[i + s] = this.words[i];
      }

      for (i = 0; i < s; i++) {
        this.words[i] = 0;
      }

      this.length += s;
    }

    return this.strip();
  };

  BN.prototype.ishln = function ishln (bits) {
    // TODO(indutny): implement me
    assert(this.negative === 0);
    return this.iushln(bits);
  };

  // Shift-right in-place
  // NOTE: `hint` is a lowest bit before trailing zeroes
  // NOTE: if `extended` is present - it will be filled with destroyed bits
  BN.prototype.iushrn = function iushrn (bits, hint, extended) {
    assert(typeof bits === 'number' && bits >= 0);
    var h;
    if (hint) {
      h = (hint - (hint % 26)) / 26;
    } else {
      h = 0;
    }

    var r = bits % 26;
    var s = Math.min((bits - r) / 26, this.length);
    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
    var maskedWords = extended;

    h -= s;
    h = Math.max(0, h);

    // Extended mode, copy masked part
    if (maskedWords) {
      for (var i = 0; i < s; i++) {
        maskedWords.words[i] = this.words[i];
      }
      maskedWords.length = s;
    }

    if (s === 0) {
      // No-op, we should not move anything at all
    } else if (this.length > s) {
      this.length -= s;
      for (i = 0; i < this.length; i++) {
        this.words[i] = this.words[i + s];
      }
    } else {
      this.words[0] = 0;
      this.length = 1;
    }

    var carry = 0;
    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
      var word = this.words[i] | 0;
      this.words[i] = (carry << (26 - r)) | (word >>> r);
      carry = word & mask;
    }

    // Push carried bits as a mask
    if (maskedWords && carry !== 0) {
      maskedWords.words[maskedWords.length++] = carry;
    }

    if (this.length === 0) {
      this.words[0] = 0;
      this.length = 1;
    }

    return this.strip();
  };

  BN.prototype.ishrn = function ishrn (bits, hint, extended) {
    // TODO(indutny): implement me
    assert(this.negative === 0);
    return this.iushrn(bits, hint, extended);
  };

  // Shift-left
  BN.prototype.shln = function shln (bits) {
    return this.clone().ishln(bits);
  };

  BN.prototype.ushln = function ushln (bits) {
    return this.clone().iushln(bits);
  };

  // Shift-right
  BN.prototype.shrn = function shrn (bits) {
    return this.clone().ishrn(bits);
  };

  BN.prototype.ushrn = function ushrn (bits) {
    return this.clone().iushrn(bits);
  };

  // Test if n bit is set
  BN.prototype.testn = function testn (bit) {
    assert(typeof bit === 'number' && bit >= 0);
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r;

    // Fast case: bit is much higher than all existing words
    if (this.length <= s) return false;

    // Check bit and return
    var w = this.words[s];

    return !!(w & q);
  };

  // Return only lowers bits of number (in-place)
  BN.prototype.imaskn = function imaskn (bits) {
    assert(typeof bits === 'number' && bits >= 0);
    var r = bits % 26;
    var s = (bits - r) / 26;

    assert(this.negative === 0, 'imaskn works only with positive numbers');

    if (this.length <= s) {
      return this;
    }

    if (r !== 0) {
      s++;
    }
    this.length = Math.min(s, this.length);

    if (r !== 0) {
      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
      this.words[this.length - 1] &= mask;
    }

    return this.strip();
  };

  // Return only lowers bits of number
  BN.prototype.maskn = function maskn (bits) {
    return this.clone().imaskn(bits);
  };

  // Add plain number `num` to `this`
  BN.prototype.iaddn = function iaddn (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);
    if (num < 0) return this.isubn(-num);

    // Possible sign change
    if (this.negative !== 0) {
      if (this.length === 1 && (this.words[0] | 0) < num) {
        this.words[0] = num - (this.words[0] | 0);
        this.negative = 0;
        return this;
      }

      this.negative = 0;
      this.isubn(num);
      this.negative = 1;
      return this;
    }

    // Add without checks
    return this._iaddn(num);
  };

  BN.prototype._iaddn = function _iaddn (num) {
    this.words[0] += num;

    // Carry
    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
      this.words[i] -= 0x4000000;
      if (i === this.length - 1) {
        this.words[i + 1] = 1;
      } else {
        this.words[i + 1]++;
      }
    }
    this.length = Math.max(this.length, i + 1);

    return this;
  };

  // Subtract plain number `num` from `this`
  BN.prototype.isubn = function isubn (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);
    if (num < 0) return this.iaddn(-num);

    if (this.negative !== 0) {
      this.negative = 0;
      this.iaddn(num);
      this.negative = 1;
      return this;
    }

    this.words[0] -= num;

    if (this.length === 1 && this.words[0] < 0) {
      this.words[0] = -this.words[0];
      this.negative = 1;
    } else {
      // Carry
      for (var i = 0; i < this.length && this.words[i] < 0; i++) {
        this.words[i] += 0x4000000;
        this.words[i + 1] -= 1;
      }
    }

    return this.strip();
  };

  BN.prototype.addn = function addn (num) {
    return this.clone().iaddn(num);
  };

  BN.prototype.subn = function subn (num) {
    return this.clone().isubn(num);
  };

  BN.prototype.iabs = function iabs () {
    this.negative = 0;

    return this;
  };

  BN.prototype.abs = function abs () {
    return this.clone().iabs();
  };

  BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {
    var len = num.length + shift;
    var i;

    this._expand(len);

    var w;
    var carry = 0;
    for (i = 0; i < num.length; i++) {
      w = (this.words[i + shift] | 0) + carry;
      var right = (num.words[i] | 0) * mul;
      w -= right & 0x3ffffff;
      carry = (w >> 26) - ((right / 0x4000000) | 0);
      this.words[i + shift] = w & 0x3ffffff;
    }
    for (; i < this.length - shift; i++) {
      w = (this.words[i + shift] | 0) + carry;
      carry = w >> 26;
      this.words[i + shift] = w & 0x3ffffff;
    }

    if (carry === 0) return this.strip();

    // Subtraction overflow
    assert(carry === -1);
    carry = 0;
    for (i = 0; i < this.length; i++) {
      w = -(this.words[i] | 0) + carry;
      carry = w >> 26;
      this.words[i] = w & 0x3ffffff;
    }
    this.negative = 1;

    return this.strip();
  };

  BN.prototype._wordDiv = function _wordDiv (num, mode) {
    var shift = this.length - num.length;

    var a = this.clone();
    var b = num;

    // Normalize
    var bhi = b.words[b.length - 1] | 0;
    var bhiBits = this._countBits(bhi);
    shift = 26 - bhiBits;
    if (shift !== 0) {
      b = b.ushln(shift);
      a.iushln(shift);
      bhi = b.words[b.length - 1] | 0;
    }

    // Initialize quotient
    var m = a.length - b.length;
    var q;

    if (mode !== 'mod') {
      q = new BN(null);
      q.length = m + 1;
      q.words = new Array(q.length);
      for (var i = 0; i < q.length; i++) {
        q.words[i] = 0;
      }
    }

    var diff = a.clone()._ishlnsubmul(b, 1, m);
    if (diff.negative === 0) {
      a = diff;
      if (q) {
        q.words[m] = 1;
      }
    }

    for (var j = m - 1; j >= 0; j--) {
      var qj = (a.words[b.length + j] | 0) * 0x4000000 +
        (a.words[b.length + j - 1] | 0);

      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
      // (0x7ffffff)
      qj = Math.min((qj / bhi) | 0, 0x3ffffff);

      a._ishlnsubmul(b, qj, j);
      while (a.negative !== 0) {
        qj--;
        a.negative = 0;
        a._ishlnsubmul(b, 1, j);
        if (!a.isZero()) {
          a.negative ^= 1;
        }
      }
      if (q) {
        q.words[j] = qj;
      }
    }
    if (q) {
      q.strip();
    }
    a.strip();

    // Denormalize
    if (mode !== 'div' && shift !== 0) {
      a.iushrn(shift);
    }

    return {
      div: q || null,
      mod: a
    };
  };

  // NOTE: 1) `mode` can be set to `mod` to request mod only,
  //       to `div` to request div only, or be absent to
  //       request both div & mod
  //       2) `positive` is true if unsigned mod is requested
  BN.prototype.divmod = function divmod (num, mode, positive) {
    assert(!num.isZero());

    if (this.isZero()) {
      return {
        div: new BN(0),
        mod: new BN(0)
      };
    }

    var div, mod, res;
    if (this.negative !== 0 && num.negative === 0) {
      res = this.neg().divmod(num, mode);

      if (mode !== 'mod') {
        div = res.div.neg();
      }

      if (mode !== 'div') {
        mod = res.mod.neg();
        if (positive && mod.negative !== 0) {
          mod.iadd(num);
        }
      }

      return {
        div: div,
        mod: mod
      };
    }

    if (this.negative === 0 && num.negative !== 0) {
      res = this.divmod(num.neg(), mode);

      if (mode !== 'mod') {
        div = res.div.neg();
      }

      return {
        div: div,
        mod: res.mod
      };
    }

    if ((this.negative & num.negative) !== 0) {
      res = this.neg().divmod(num.neg(), mode);

      if (mode !== 'div') {
        mod = res.mod.neg();
        if (positive && mod.negative !== 0) {
          mod.isub(num);
        }
      }

      return {
        div: res.div,
        mod: mod
      };
    }

    // Both numbers are positive at this point

    // Strip both numbers to approximate shift value
    if (num.length > this.length || this.cmp(num) < 0) {
      return {
        div: new BN(0),
        mod: this
      };
    }

    // Very short reduction
    if (num.length === 1) {
      if (mode === 'div') {
        return {
          div: this.divn(num.words[0]),
          mod: null
        };
      }

      if (mode === 'mod') {
        return {
          div: null,
          mod: new BN(this.modn(num.words[0]))
        };
      }

      return {
        div: this.divn(num.words[0]),
        mod: new BN(this.modn(num.words[0]))
      };
    }

    return this._wordDiv(num, mode);
  };

  // Find `this` / `num`
  BN.prototype.div = function div (num) {
    return this.divmod(num, 'div', false).div;
  };

  // Find `this` % `num`
  BN.prototype.mod = function mod (num) {
    return this.divmod(num, 'mod', false).mod;
  };

  BN.prototype.umod = function umod (num) {
    return this.divmod(num, 'mod', true).mod;
  };

  // Find Round(`this` / `num`)
  BN.prototype.divRound = function divRound (num) {
    var dm = this.divmod(num);

    // Fast case - exact division
    if (dm.mod.isZero()) return dm.div;

    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;

    var half = num.ushrn(1);
    var r2 = num.andln(1);
    var cmp = mod.cmp(half);

    // Round down
    if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;

    // Round up
    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
  };

  BN.prototype.modn = function modn (num) {
    assert(num <= 0x3ffffff);
    var p = (1 << 26) % num;

    var acc = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      acc = (p * acc + (this.words[i] | 0)) % num;
    }

    return acc;
  };

  // In-place division by number
  BN.prototype.idivn = function idivn (num) {
    assert(num <= 0x3ffffff);

    var carry = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      var w = (this.words[i] | 0) + carry * 0x4000000;
      this.words[i] = (w / num) | 0;
      carry = w % num;
    }

    return this.strip();
  };

  BN.prototype.divn = function divn (num) {
    return this.clone().idivn(num);
  };

  BN.prototype.egcd = function egcd (p) {
    assert(p.negative === 0);
    assert(!p.isZero());

    var x = this;
    var y = p.clone();

    if (x.negative !== 0) {
      x = x.umod(p);
    } else {
      x = x.clone();
    }

    // A * x + B * y = x
    var A = new BN(1);
    var B = new BN(0);

    // C * x + D * y = y
    var C = new BN(0);
    var D = new BN(1);

    var g = 0;

    while (x.isEven() && y.isEven()) {
      x.iushrn(1);
      y.iushrn(1);
      ++g;
    }

    var yp = y.clone();
    var xp = x.clone();

    while (!x.isZero()) {
      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
      if (i > 0) {
        x.iushrn(i);
        while (i-- > 0) {
          if (A.isOdd() || B.isOdd()) {
            A.iadd(yp);
            B.isub(xp);
          }

          A.iushrn(1);
          B.iushrn(1);
        }
      }

      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
      if (j > 0) {
        y.iushrn(j);
        while (j-- > 0) {
          if (C.isOdd() || D.isOdd()) {
            C.iadd(yp);
            D.isub(xp);
          }

          C.iushrn(1);
          D.iushrn(1);
        }
      }

      if (x.cmp(y) >= 0) {
        x.isub(y);
        A.isub(C);
        B.isub(D);
      } else {
        y.isub(x);
        C.isub(A);
        D.isub(B);
      }
    }

    return {
      a: C,
      b: D,
      gcd: y.iushln(g)
    };
  };

  // This is reduced incarnation of the binary EEA
  // above, designated to invert members of the
  // _prime_ fields F(p) at a maximal speed
  BN.prototype._invmp = function _invmp (p) {
    assert(p.negative === 0);
    assert(!p.isZero());

    var a = this;
    var b = p.clone();

    if (a.negative !== 0) {
      a = a.umod(p);
    } else {
      a = a.clone();
    }

    var x1 = new BN(1);
    var x2 = new BN(0);

    var delta = b.clone();

    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
      if (i > 0) {
        a.iushrn(i);
        while (i-- > 0) {
          if (x1.isOdd()) {
            x1.iadd(delta);
          }

          x1.iushrn(1);
        }
      }

      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
      if (j > 0) {
        b.iushrn(j);
        while (j-- > 0) {
          if (x2.isOdd()) {
            x2.iadd(delta);
          }

          x2.iushrn(1);
        }
      }

      if (a.cmp(b) >= 0) {
        a.isub(b);
        x1.isub(x2);
      } else {
        b.isub(a);
        x2.isub(x1);
      }
    }

    var res;
    if (a.cmpn(1) === 0) {
      res = x1;
    } else {
      res = x2;
    }

    if (res.cmpn(0) < 0) {
      res.iadd(p);
    }

    return res;
  };

  BN.prototype.gcd = function gcd (num) {
    if (this.isZero()) return num.abs();
    if (num.isZero()) return this.abs();

    var a = this.clone();
    var b = num.clone();
    a.negative = 0;
    b.negative = 0;

    // Remove common factor of two
    for (var shift = 0; a.isEven() && b.isEven(); shift++) {
      a.iushrn(1);
      b.iushrn(1);
    }

    do {
      while (a.isEven()) {
        a.iushrn(1);
      }
      while (b.isEven()) {
        b.iushrn(1);
      }

      var r = a.cmp(b);
      if (r < 0) {
        // Swap `a` and `b` to make `a` always bigger than `b`
        var t = a;
        a = b;
        b = t;
      } else if (r === 0 || b.cmpn(1) === 0) {
        break;
      }

      a.isub(b);
    } while (true);

    return b.iushln(shift);
  };

  // Invert number in the field F(num)
  BN.prototype.invm = function invm (num) {
    return this.egcd(num).a.umod(num);
  };

  BN.prototype.isEven = function isEven () {
    return (this.words[0] & 1) === 0;
  };

  BN.prototype.isOdd = function isOdd () {
    return (this.words[0] & 1) === 1;
  };

  // And first word and num
  BN.prototype.andln = function andln (num) {
    return this.words[0] & num;
  };

  // Increment at the bit position in-line
  BN.prototype.bincn = function bincn (bit) {
    assert(typeof bit === 'number');
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r;

    // Fast case: bit is much higher than all existing words
    if (this.length <= s) {
      this._expand(s + 1);
      this.words[s] |= q;
      return this;
    }

    // Add bit and propagate, if needed
    var carry = q;
    for (var i = s; carry !== 0 && i < this.length; i++) {
      var w = this.words[i] | 0;
      w += carry;
      carry = w >>> 26;
      w &= 0x3ffffff;
      this.words[i] = w;
    }
    if (carry !== 0) {
      this.words[i] = carry;
      this.length++;
    }
    return this;
  };

  BN.prototype.isZero = function isZero () {
    return this.length === 1 && this.words[0] === 0;
  };

  BN.prototype.cmpn = function cmpn (num) {
    var negative = num < 0;

    if (this.negative !== 0 && !negative) return -1;
    if (this.negative === 0 && negative) return 1;

    this.strip();

    var res;
    if (this.length > 1) {
      res = 1;
    } else {
      if (negative) {
        num = -num;
      }

      assert(num <= 0x3ffffff, 'Number is too big');

      var w = this.words[0] | 0;
      res = w === num ? 0 : w < num ? -1 : 1;
    }
    if (this.negative !== 0) return -res | 0;
    return res;
  };

  // Compare two numbers and return:
  // 1 - if `this` > `num`
  // 0 - if `this` == `num`
  // -1 - if `this` < `num`
  BN.prototype.cmp = function cmp (num) {
    if (this.negative !== 0 && num.negative === 0) return -1;
    if (this.negative === 0 && num.negative !== 0) return 1;

    var res = this.ucmp(num);
    if (this.negative !== 0) return -res | 0;
    return res;
  };

  // Unsigned comparison
  BN.prototype.ucmp = function ucmp (num) {
    // At this point both numbers have the same sign
    if (this.length > num.length) return 1;
    if (this.length < num.length) return -1;

    var res = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      var a = this.words[i] | 0;
      var b = num.words[i] | 0;

      if (a === b) continue;
      if (a < b) {
        res = -1;
      } else if (a > b) {
        res = 1;
      }
      break;
    }
    return res;
  };

  BN.prototype.gtn = function gtn (num) {
    return this.cmpn(num) === 1;
  };

  BN.prototype.gt = function gt (num) {
    return this.cmp(num) === 1;
  };

  BN.prototype.gten = function gten (num) {
    return this.cmpn(num) >= 0;
  };

  BN.prototype.gte = function gte (num) {
    return this.cmp(num) >= 0;
  };

  BN.prototype.ltn = function ltn (num) {
    return this.cmpn(num) === -1;
  };

  BN.prototype.lt = function lt (num) {
    return this.cmp(num) === -1;
  };

  BN.prototype.lten = function lten (num) {
    return this.cmpn(num) <= 0;
  };

  BN.prototype.lte = function lte (num) {
    return this.cmp(num) <= 0;
  };

  BN.prototype.eqn = function eqn (num) {
    return this.cmpn(num) === 0;
  };

  BN.prototype.eq = function eq (num) {
    return this.cmp(num) === 0;
  };

  //
  // A reduce context, could be using montgomery or something better, depending
  // on the `m` itself.
  //
  BN.red = function red (num) {
    return new Red(num);
  };

  BN.prototype.toRed = function toRed (ctx) {
    assert(!this.red, 'Already a number in reduction context');
    assert(this.negative === 0, 'red works only with positives');
    return ctx.convertTo(this)._forceRed(ctx);
  };

  BN.prototype.fromRed = function fromRed () {
    assert(this.red, 'fromRed works only with numbers in reduction context');
    return this.red.convertFrom(this);
  };

  BN.prototype._forceRed = function _forceRed (ctx) {
    this.red = ctx;
    return this;
  };

  BN.prototype.forceRed = function forceRed (ctx) {
    assert(!this.red, 'Already a number in reduction context');
    return this._forceRed(ctx);
  };

  BN.prototype.redAdd = function redAdd (num) {
    assert(this.red, 'redAdd works only with red numbers');
    return this.red.add(this, num);
  };

  BN.prototype.redIAdd = function redIAdd (num) {
    assert(this.red, 'redIAdd works only with red numbers');
    return this.red.iadd(this, num);
  };

  BN.prototype.redSub = function redSub (num) {
    assert(this.red, 'redSub works only with red numbers');
    return this.red.sub(this, num);
  };

  BN.prototype.redISub = function redISub (num) {
    assert(this.red, 'redISub works only with red numbers');
    return this.red.isub(this, num);
  };

  BN.prototype.redShl = function redShl (num) {
    assert(this.red, 'redShl works only with red numbers');
    return this.red.shl(this, num);
  };

  BN.prototype.redMul = function redMul (num) {
    assert(this.red, 'redMul works only with red numbers');
    this.red._verify2(this, num);
    return this.red.mul(this, num);
  };

  BN.prototype.redIMul = function redIMul (num) {
    assert(this.red, 'redMul works only with red numbers');
    this.red._verify2(this, num);
    return this.red.imul(this, num);
  };

  BN.prototype.redSqr = function redSqr () {
    assert(this.red, 'redSqr works only with red numbers');
    this.red._verify1(this);
    return this.red.sqr(this);
  };

  BN.prototype.redISqr = function redISqr () {
    assert(this.red, 'redISqr works only with red numbers');
    this.red._verify1(this);
    return this.red.isqr(this);
  };

  // Square root over p
  BN.prototype.redSqrt = function redSqrt () {
    assert(this.red, 'redSqrt works only with red numbers');
    this.red._verify1(this);
    return this.red.sqrt(this);
  };

  BN.prototype.redInvm = function redInvm () {
    assert(this.red, 'redInvm works only with red numbers');
    this.red._verify1(this);
    return this.red.invm(this);
  };

  // Return negative clone of `this` % `red modulo`
  BN.prototype.redNeg = function redNeg () {
    assert(this.red, 'redNeg works only with red numbers');
    this.red._verify1(this);
    return this.red.neg(this);
  };

  BN.prototype.redPow = function redPow (num) {
    assert(this.red && !num.red, 'redPow(normalNum)');
    this.red._verify1(this);
    return this.red.pow(this, num);
  };

  // Prime numbers with efficient reduction
  var primes = {
    k256: null,
    p224: null,
    p192: null,
    p25519: null
  };

  // Pseudo-Mersenne prime
  function MPrime (name, p) {
    // P = 2 ^ N - K
    this.name = name;
    this.p = new BN(p, 16);
    this.n = this.p.bitLength();
    this.k = new BN(1).iushln(this.n).isub(this.p);

    this.tmp = this._tmp();
  }

  MPrime.prototype._tmp = function _tmp () {
    var tmp = new BN(null);
    tmp.words = new Array(Math.ceil(this.n / 13));
    return tmp;
  };

  MPrime.prototype.ireduce = function ireduce (num) {
    // Assumes that `num` is less than `P^2`
    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
    var r = num;
    var rlen;

    do {
      this.split(r, this.tmp);
      r = this.imulK(r);
      r = r.iadd(this.tmp);
      rlen = r.bitLength();
    } while (rlen > this.n);

    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
    if (cmp === 0) {
      r.words[0] = 0;
      r.length = 1;
    } else if (cmp > 0) {
      r.isub(this.p);
    } else {
      if (r.strip !== undefined) {
        // r is BN v4 instance
        r.strip();
      } else {
        // r is BN v5 instance
        r._strip();
      }
    }

    return r;
  };

  MPrime.prototype.split = function split (input, out) {
    input.iushrn(this.n, 0, out);
  };

  MPrime.prototype.imulK = function imulK (num) {
    return num.imul(this.k);
  };

  function K256 () {
    MPrime.call(
      this,
      'k256',
      'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
  }
  inherits(K256, MPrime);

  K256.prototype.split = function split (input, output) {
    // 256 = 9 * 26 + 22
    var mask = 0x3fffff;

    var outLen = Math.min(input.length, 9);
    for (var i = 0; i < outLen; i++) {
      output.words[i] = input.words[i];
    }
    output.length = outLen;

    if (input.length <= 9) {
      input.words[0] = 0;
      input.length = 1;
      return;
    }

    // Shift by 9 limbs
    var prev = input.words[9];
    output.words[output.length++] = prev & mask;

    for (i = 10; i < input.length; i++) {
      var next = input.words[i] | 0;
      input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
      prev = next;
    }
    prev >>>= 22;
    input.words[i - 10] = prev;
    if (prev === 0 && input.length > 10) {
      input.length -= 10;
    } else {
      input.length -= 9;
    }
  };

  K256.prototype.imulK = function imulK (num) {
    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
    num.words[num.length] = 0;
    num.words[num.length + 1] = 0;
    num.length += 2;

    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
    var lo = 0;
    for (var i = 0; i < num.length; i++) {
      var w = num.words[i] | 0;
      lo += w * 0x3d1;
      num.words[i] = lo & 0x3ffffff;
      lo = w * 0x40 + ((lo / 0x4000000) | 0);
    }

    // Fast length reduction
    if (num.words[num.length - 1] === 0) {
      num.length--;
      if (num.words[num.length - 1] === 0) {
        num.length--;
      }
    }
    return num;
  };

  function P224 () {
    MPrime.call(
      this,
      'p224',
      'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
  }
  inherits(P224, MPrime);

  function P192 () {
    MPrime.call(
      this,
      'p192',
      'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
  }
  inherits(P192, MPrime);

  function P25519 () {
    // 2 ^ 255 - 19
    MPrime.call(
      this,
      '25519',
      '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
  }
  inherits(P25519, MPrime);

  P25519.prototype.imulK = function imulK (num) {
    // K = 0x13
    var carry = 0;
    for (var i = 0; i < num.length; i++) {
      var hi = (num.words[i] | 0) * 0x13 + carry;
      var lo = hi & 0x3ffffff;
      hi >>>= 26;

      num.words[i] = lo;
      carry = hi;
    }
    if (carry !== 0) {
      num.words[num.length++] = carry;
    }
    return num;
  };

  // Exported mostly for testing purposes, use plain name instead
  BN._prime = function prime (name) {
    // Cached version of prime
    if (primes[name]) return primes[name];

    var prime;
    if (name === 'k256') {
      prime = new K256();
    } else if (name === 'p224') {
      prime = new P224();
    } else if (name === 'p192') {
      prime = new P192();
    } else if (name === 'p25519') {
      prime = new P25519();
    } else {
      throw new Error('Unknown prime ' + name);
    }
    primes[name] = prime;

    return prime;
  };

  //
  // Base reduction engine
  //
  function Red (m) {
    if (typeof m === 'string') {
      var prime = BN._prime(m);
      this.m = prime.p;
      this.prime = prime;
    } else {
      assert(m.gtn(1), 'modulus must be greater than 1');
      this.m = m;
      this.prime = null;
    }
  }

  Red.prototype._verify1 = function _verify1 (a) {
    assert(a.negative === 0, 'red works only with positives');
    assert(a.red, 'red works only with red numbers');
  };

  Red.prototype._verify2 = function _verify2 (a, b) {
    assert((a.negative | b.negative) === 0, 'red works only with positives');
    assert(a.red && a.red === b.red,
      'red works only with red numbers');
  };

  Red.prototype.imod = function imod (a) {
    if (this.prime) return this.prime.ireduce(a)._forceRed(this);
    return a.umod(this.m)._forceRed(this);
  };

  Red.prototype.neg = function neg (a) {
    if (a.isZero()) {
      return a.clone();
    }

    return this.m.sub(a)._forceRed(this);
  };

  Red.prototype.add = function add (a, b) {
    this._verify2(a, b);

    var res = a.add(b);
    if (res.cmp(this.m) >= 0) {
      res.isub(this.m);
    }
    return res._forceRed(this);
  };

  Red.prototype.iadd = function iadd (a, b) {
    this._verify2(a, b);

    var res = a.iadd(b);
    if (res.cmp(this.m) >= 0) {
      res.isub(this.m);
    }
    return res;
  };

  Red.prototype.sub = function sub (a, b) {
    this._verify2(a, b);

    var res = a.sub(b);
    if (res.cmpn(0) < 0) {
      res.iadd(this.m);
    }
    return res._forceRed(this);
  };

  Red.prototype.isub = function isub (a, b) {
    this._verify2(a, b);

    var res = a.isub(b);
    if (res.cmpn(0) < 0) {
      res.iadd(this.m);
    }
    return res;
  };

  Red.prototype.shl = function shl (a, num) {
    this._verify1(a);
    return this.imod(a.ushln(num));
  };

  Red.prototype.imul = function imul (a, b) {
    this._verify2(a, b);
    return this.imod(a.imul(b));
  };

  Red.prototype.mul = function mul (a, b) {
    this._verify2(a, b);
    return this.imod(a.mul(b));
  };

  Red.prototype.isqr = function isqr (a) {
    return this.imul(a, a.clone());
  };

  Red.prototype.sqr = function sqr (a) {
    return this.mul(a, a);
  };

  Red.prototype.sqrt = function sqrt (a) {
    if (a.isZero()) return a.clone();

    var mod3 = this.m.andln(3);
    assert(mod3 % 2 === 1);

    // Fast case
    if (mod3 === 3) {
      var pow = this.m.add(new BN(1)).iushrn(2);
      return this.pow(a, pow);
    }

    // Tonelli-Shanks algorithm (Totally unoptimized and slow)
    //
    // Find Q and S, that Q * 2 ^ S = (P - 1)
    var q = this.m.subn(1);
    var s = 0;
    while (!q.isZero() && q.andln(1) === 0) {
      s++;
      q.iushrn(1);
    }
    assert(!q.isZero());

    var one = new BN(1).toRed(this);
    var nOne = one.redNeg();

    // Find quadratic non-residue
    // NOTE: Max is such because of generalized Riemann hypothesis.
    var lpow = this.m.subn(1).iushrn(1);
    var z = this.m.bitLength();
    z = new BN(2 * z * z).toRed(this);

    while (this.pow(z, lpow).cmp(nOne) !== 0) {
      z.redIAdd(nOne);
    }

    var c = this.pow(z, q);
    var r = this.pow(a, q.addn(1).iushrn(1));
    var t = this.pow(a, q);
    var m = s;
    while (t.cmp(one) !== 0) {
      var tmp = t;
      for (var i = 0; tmp.cmp(one) !== 0; i++) {
        tmp = tmp.redSqr();
      }
      assert(i < m);
      var b = this.pow(c, new BN(1).iushln(m - i - 1));

      r = r.redMul(b);
      c = b.redSqr();
      t = t.redMul(c);
      m = i;
    }

    return r;
  };

  Red.prototype.invm = function invm (a) {
    var inv = a._invmp(this.m);
    if (inv.negative !== 0) {
      inv.negative = 0;
      return this.imod(inv).redNeg();
    } else {
      return this.imod(inv);
    }
  };

  Red.prototype.pow = function pow (a, num) {
    if (num.isZero()) return new BN(1).toRed(this);
    if (num.cmpn(1) === 0) return a.clone();

    var windowSize = 4;
    var wnd = new Array(1 << windowSize);
    wnd[0] = new BN(1).toRed(this);
    wnd[1] = a;
    for (var i = 2; i < wnd.length; i++) {
      wnd[i] = this.mul(wnd[i - 1], a);
    }

    var res = wnd[0];
    var current = 0;
    var currentLen = 0;
    var start = num.bitLength() % 26;
    if (start === 0) {
      start = 26;
    }

    for (i = num.length - 1; i >= 0; i--) {
      var word = num.words[i];
      for (var j = start - 1; j >= 0; j--) {
        var bit = (word >> j) & 1;
        if (res !== wnd[0]) {
          res = this.sqr(res);
        }

        if (bit === 0 && current === 0) {
          currentLen = 0;
          continue;
        }

        current <<= 1;
        current |= bit;
        currentLen++;
        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;

        res = this.mul(res, wnd[current]);
        currentLen = 0;
        current = 0;
      }
      start = 26;
    }

    return res;
  };

  Red.prototype.convertTo = function convertTo (num) {
    var r = num.umod(this.m);

    return r === num ? r.clone() : r;
  };

  Red.prototype.convertFrom = function convertFrom (num) {
    var res = num.clone();
    res.red = null;
    return res;
  };

  //
  // Montgomery method engine
  //

  BN.mont = function mont (num) {
    return new Mont(num);
  };

  function Mont (m) {
    Red.call(this, m);

    this.shift = this.m.bitLength();
    if (this.shift % 26 !== 0) {
      this.shift += 26 - (this.shift % 26);
    }

    this.r = new BN(1).iushln(this.shift);
    this.r2 = this.imod(this.r.sqr());
    this.rinv = this.r._invmp(this.m);

    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
    this.minv = this.minv.umod(this.r);
    this.minv = this.r.sub(this.minv);
  }
  inherits(Mont, Red);

  Mont.prototype.convertTo = function convertTo (num) {
    return this.imod(num.ushln(this.shift));
  };

  Mont.prototype.convertFrom = function convertFrom (num) {
    var r = this.imod(num.mul(this.rinv));
    r.red = null;
    return r;
  };

  Mont.prototype.imul = function imul (a, b) {
    if (a.isZero() || b.isZero()) {
      a.words[0] = 0;
      a.length = 1;
      return a;
    }

    var t = a.imul(b);
    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    var u = t.isub(c).iushrn(this.shift);
    var res = u;

    if (u.cmp(this.m) >= 0) {
      res = u.isub(this.m);
    } else if (u.cmpn(0) < 0) {
      res = u.iadd(this.m);
    }

    return res._forceRed(this);
  };

  Mont.prototype.mul = function mul (a, b) {
    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);

    var t = a.mul(b);
    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    var u = t.isub(c).iushrn(this.shift);
    var res = u;
    if (u.cmp(this.m) >= 0) {
      res = u.isub(this.m);
    } else if (u.cmpn(0) < 0) {
      res = u.iadd(this.m);
    }

    return res._forceRed(this);
  };

  Mont.prototype.invm = function invm (a) {
    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
    var res = this.imod(a._invmp(this.m).mul(this.r2));
    return res._forceRed(this);
  };
})(typeof module === 'undefined' || module, this);

},{"buffer":3}],63:[function(require,module,exports){
var r;

module.exports = function rand(len) {
  if (!r)
    r = new Rand(null);

  return r.generate(len);
};

function Rand(rand) {
  this.rand = rand;
}
module.exports.Rand = Rand;

Rand.prototype.generate = function generate(len) {
  return this._rand(len);
};

// Emulate crypto API using randy
Rand.prototype._rand = function _rand(n) {
  if (this.rand.getBytes)
    return this.rand.getBytes(n);

  var res = new Uint8Array(n);
  for (var i = 0; i < res.length; i++)
    res[i] = this.rand.getByte();
  return res;
};

if (typeof self === 'object') {
  if (self.crypto && self.crypto.getRandomValues) {
    // Modern browsers
    Rand.prototype._rand = function _rand(n) {
      var arr = new Uint8Array(n);
      self.crypto.getRandomValues(arr);
      return arr;
    };
  } else if (self.msCrypto && self.msCrypto.getRandomValues) {
    // IE
    Rand.prototype._rand = function _rand(n) {
      var arr = new Uint8Array(n);
      self.msCrypto.getRandomValues(arr);
      return arr;
    };

  // Safari's WebWorkers do not have `crypto`
  } else if (typeof window === 'object') {
    // Old junk
    Rand.prototype._rand = function() {
      throw new Error('Not implemented yet');
    };
  }
} else {
  // Node.js or Web worker with no crypto support
  try {
    var crypto = require('crypto');
    if (typeof crypto.randomBytes !== 'function')
      throw new Error('Not supported');

    Rand.prototype._rand = function _rand(n) {
      return crypto.randomBytes(n);
    };
  } catch (e) {
  }
}

},{"crypto":3}],64:[function(require,module,exports){
var basex = require('base-x')
var ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'

module.exports = basex(ALPHABET)

},{"base-x":29}],65:[function(require,module,exports){
'use strict'

var base58 = require('bs58')
var Buffer = require('safe-buffer').Buffer

module.exports = function (checksumFn) {
  // Encode a buffer as a base58-check encoded string
  function encode (payload) {
    var checksum = checksumFn(payload)

    return base58.encode(Buffer.concat([
      payload,
      checksum
    ], payload.length + 4))
  }

  function decodeRaw (buffer) {
    var payload = buffer.slice(0, -4)
    var checksum = buffer.slice(-4)
    var newChecksum = checksumFn(payload)

    if (checksum[0] ^ newChecksum[0] |
        checksum[1] ^ newChecksum[1] |
        checksum[2] ^ newChecksum[2] |
        checksum[3] ^ newChecksum[3]) return

    return payload
  }

  // Decode a base58-check encoded string to a buffer, no result if checksum is wrong
  function decodeUnsafe (string) {
    var buffer = base58.decodeUnsafe(string)
    if (!buffer) return

    return decodeRaw(buffer)
  }

  function decode (string) {
    var buffer = base58.decode(string)
    var payload = decodeRaw(buffer, checksumFn)
    if (!payload) throw new Error('Invalid checksum')
    return payload
  }

  return {
    encode: encode,
    decode: decode,
    decodeUnsafe: decodeUnsafe
  }
}

},{"bs58":64,"safe-buffer":126}],66:[function(require,module,exports){
'use strict'

var createHash = require('create-hash')
var bs58checkBase = require('./base')

// SHA256(SHA256(buffer))
function sha256x2 (buffer) {
  var tmp = createHash('sha256').update(buffer).digest()
  return createHash('sha256').update(tmp).digest()
}

module.exports = bs58checkBase(sha256x2)

},{"./base":65,"create-hash":68}],67:[function(require,module,exports){
var Buffer = require('safe-buffer').Buffer
var Transform = require('stream').Transform
var StringDecoder = require('string_decoder').StringDecoder
var inherits = require('inherits')

function CipherBase (hashMode) {
  Transform.call(this)
  this.hashMode = typeof hashMode === 'string'
  if (this.hashMode) {
    this[hashMode] = this._finalOrDigest
  } else {
    this.final = this._finalOrDigest
  }
  if (this._final) {
    this.__final = this._final
    this._final = null
  }
  this._decoder = null
  this._encoding = null
}
inherits(CipherBase, Transform)

CipherBase.prototype.update = function (data, inputEnc, outputEnc) {
  if (typeof data === 'string') {
    data = Buffer.from(data, inputEnc)
  }

  var outData = this._update(data)
  if (this.hashMode) return this

  if (outputEnc) {
    outData = this._toString(outData, outputEnc)
  }

  return outData
}

CipherBase.prototype.setAutoPadding = function () {}
CipherBase.prototype.getAuthTag = function () {
  throw new Error('trying to get auth tag in unsupported state')
}

CipherBase.prototype.setAuthTag = function () {
  throw new Error('trying to set auth tag in unsupported state')
}

CipherBase.prototype.setAAD = function () {
  throw new Error('trying to set aad in unsupported state')
}

CipherBase.prototype._transform = function (data, _, next) {
  var err
  try {
    if (this.hashMode) {
      this._update(data)
    } else {
      this.push(this._update(data))
    }
  } catch (e) {
    err = e
  } finally {
    next(err)
  }
}
CipherBase.prototype._flush = function (done) {
  var err
  try {
    this.push(this.__final())
  } catch (e) {
    err = e
  }

  done(err)
}
CipherBase.prototype._finalOrDigest = function (outputEnc) {
  var outData = this.__final() || Buffer.alloc(0)
  if (outputEnc) {
    outData = this._toString(outData, outputEnc, true)
  }
  return outData
}

CipherBase.prototype._toString = function (value, enc, fin) {
  if (!this._decoder) {
    this._decoder = new StringDecoder(enc)
    this._encoding = enc
  }

  if (this._encoding !== enc) throw new Error('can\'t switch encodings')

  var out = this._decoder.write(value)
  if (fin) {
    out += this._decoder.end()
  }

  return out
}

module.exports = CipherBase

},{"inherits":102,"safe-buffer":126,"stream":12,"string_decoder":27}],68:[function(require,module,exports){
'use strict'
var inherits = require('inherits')
var MD5 = require('md5.js')
var RIPEMD160 = require('ripemd160')
var sha = require('sha.js')
var Base = require('cipher-base')

function Hash (hash) {
  Base.call(this, 'digest')

  this._hash = hash
}

inherits(Hash, Base)

Hash.prototype._update = function (data) {
  this._hash.update(data)
}

Hash.prototype._final = function () {
  return this._hash.digest()
}

module.exports = function createHash (alg) {
  alg = alg.toLowerCase()
  if (alg === 'md5') return new MD5()
  if (alg === 'rmd160' || alg === 'ripemd160') return new RIPEMD160()

  return new Hash(sha(alg))
}

},{"cipher-base":67,"inherits":102,"md5.js":104,"ripemd160":125,"sha.js":130}],69:[function(require,module,exports){
var MD5 = require('md5.js')

module.exports = function (buffer) {
  return new MD5().update(buffer).digest()
}

},{"md5.js":104}],70:[function(require,module,exports){
'use strict'
var inherits = require('inherits')
var Legacy = require('./legacy')
var Base = require('cipher-base')
var Buffer = require('safe-buffer').Buffer
var md5 = require('create-hash/md5')
var RIPEMD160 = require('ripemd160')

var sha = require('sha.js')

var ZEROS = Buffer.alloc(128)

function Hmac (alg, key) {
  Base.call(this, 'digest')
  if (typeof key === 'string') {
    key = Buffer.from(key)
  }

  var blocksize = (alg === 'sha512' || alg === 'sha384') ? 128 : 64

  this._alg = alg
  this._key = key
  if (key.length > blocksize) {
    var hash = alg === 'rmd160' ? new RIPEMD160() : sha(alg)
    key = hash.update(key).digest()
  } else if (key.length < blocksize) {
    key = Buffer.concat([key, ZEROS], blocksize)
  }

  var ipad = this._ipad = Buffer.allocUnsafe(blocksize)
  var opad = this._opad = Buffer.allocUnsafe(blocksize)

  for (var i = 0; i < blocksize; i++) {
    ipad[i] = key[i] ^ 0x36
    opad[i] = key[i] ^ 0x5C
  }
  this._hash = alg === 'rmd160' ? new RIPEMD160() : sha(alg)
  this._hash.update(ipad)
}

inherits(Hmac, Base)

Hmac.prototype._update = function (data) {
  this._hash.update(data)
}

Hmac.prototype._final = function () {
  var h = this._hash.digest()
  var hash = this._alg === 'rmd160' ? new RIPEMD160() : sha(this._alg)
  return hash.update(this._opad).update(h).digest()
}

module.exports = function createHmac (alg, key) {
  alg = alg.toLowerCase()
  if (alg === 'rmd160' || alg === 'ripemd160') {
    return new Hmac('rmd160', key)
  }
  if (alg === 'md5') {
    return new Legacy(md5, key)
  }
  return new Hmac(alg, key)
}

},{"./legacy":71,"cipher-base":67,"create-hash/md5":69,"inherits":102,"ripemd160":125,"safe-buffer":126,"sha.js":130}],71:[function(require,module,exports){
'use strict'
var inherits = require('inherits')
var Buffer = require('safe-buffer').Buffer

var Base = require('cipher-base')

var ZEROS = Buffer.alloc(128)
var blocksize = 64

function Hmac (alg, key) {
  Base.call(this, 'digest')
  if (typeof key === 'string') {
    key = Buffer.from(key)
  }

  this._alg = alg
  this._key = key

  if (key.length > blocksize) {
    key = alg(key)
  } else if (key.length < blocksize) {
    key = Buffer.concat([key, ZEROS], blocksize)
  }

  var ipad = this._ipad = Buffer.allocUnsafe(blocksize)
  var opad = this._opad = Buffer.allocUnsafe(blocksize)

  for (var i = 0; i < blocksize; i++) {
    ipad[i] = key[i] ^ 0x36
    opad[i] = key[i] ^ 0x5C
  }

  this._hash = [ipad]
}

inherits(Hmac, Base)

Hmac.prototype._update = function (data) {
  this._hash.push(data)
}

Hmac.prototype._final = function () {
  var h = this._alg(Buffer.concat(this._hash))
  return this._alg(Buffer.concat([this._opad, h]))
}
module.exports = Hmac

},{"cipher-base":67,"inherits":102,"safe-buffer":126}],72:[function(require,module,exports){
'use strict';

var elliptic = exports;

elliptic.version = require('../package.json').version;
elliptic.utils = require('./elliptic/utils');
elliptic.rand = require('brorand');
elliptic.curve = require('./elliptic/curve');
elliptic.curves = require('./elliptic/curves');

// Protocols
elliptic.ec = require('./elliptic/ec');
elliptic.eddsa = require('./elliptic/eddsa');

},{"../package.json":87,"./elliptic/curve":75,"./elliptic/curves":78,"./elliptic/ec":79,"./elliptic/eddsa":82,"./elliptic/utils":86,"brorand":63}],73:[function(require,module,exports){
'use strict';

var BN = require('bn.js');
var utils = require('../utils');
var getNAF = utils.getNAF;
var getJSF = utils.getJSF;
var assert = utils.assert;

function BaseCurve(type, conf) {
  this.type = type;
  this.p = new BN(conf.p, 16);

  // Use Montgomery, when there is no fast reduction for the prime
  this.red = conf.prime ? BN.red(conf.prime) : BN.mont(this.p);

  // Useful for many curves
  this.zero = new BN(0).toRed(this.red);
  this.one = new BN(1).toRed(this.red);
  this.two = new BN(2).toRed(this.red);

  // Curve configuration, optional
  this.n = conf.n && new BN(conf.n, 16);
  this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);

  // Temporary arrays
  this._wnafT1 = new Array(4);
  this._wnafT2 = new Array(4);
  this._wnafT3 = new Array(4);
  this._wnafT4 = new Array(4);

  this._bitLength = this.n ? this.n.bitLength() : 0;

  // Generalized Greg Maxwell's trick
  var adjustCount = this.n && this.p.div(this.n);
  if (!adjustCount || adjustCount.cmpn(100) > 0) {
    this.redN = null;
  } else {
    this._maxwellTrick = true;
    this.redN = this.n.toRed(this.red);
  }
}
module.exports = BaseCurve;

BaseCurve.prototype.point = function point() {
  throw new Error('Not implemented');
};

BaseCurve.prototype.validate = function validate() {
  throw new Error('Not implemented');
};

BaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {
  assert(p.precomputed);
  var doubles = p._getDoubles();

  var naf = getNAF(k, 1, this._bitLength);
  var I = (1 << (doubles.step + 1)) - (doubles.step % 2 === 0 ? 2 : 1);
  I /= 3;

  // Translate into more windowed form
  var repr = [];
  var j;
  var nafW;
  for (j = 0; j < naf.length; j += doubles.step) {
    nafW = 0;
    for (var l = j + doubles.step - 1; l >= j; l--)
      nafW = (nafW << 1) + naf[l];
    repr.push(nafW);
  }

  var a = this.jpoint(null, null, null);
  var b = this.jpoint(null, null, null);
  for (var i = I; i > 0; i--) {
    for (j = 0; j < repr.length; j++) {
      nafW = repr[j];
      if (nafW === i)
        b = b.mixedAdd(doubles.points[j]);
      else if (nafW === -i)
        b = b.mixedAdd(doubles.points[j].neg());
    }
    a = a.add(b);
  }
  return a.toP();
};

BaseCurve.prototype._wnafMul = function _wnafMul(p, k) {
  var w = 4;

  // Precompute window
  var nafPoints = p._getNAFPoints(w);
  w = nafPoints.wnd;
  var wnd = nafPoints.points;

  // Get NAF form
  var naf = getNAF(k, w, this._bitLength);

  // Add `this`*(N+1) for every w-NAF index
  var acc = this.jpoint(null, null, null);
  for (var i = naf.length - 1; i >= 0; i--) {
    // Count zeroes
    for (var l = 0; i >= 0 && naf[i] === 0; i--)
      l++;
    if (i >= 0)
      l++;
    acc = acc.dblp(l);

    if (i < 0)
      break;
    var z = naf[i];
    assert(z !== 0);
    if (p.type === 'affine') {
      // J +- P
      if (z > 0)
        acc = acc.mixedAdd(wnd[(z - 1) >> 1]);
      else
        acc = acc.mixedAdd(wnd[(-z - 1) >> 1].neg());
    } else {
      // J +- J
      if (z > 0)
        acc = acc.add(wnd[(z - 1) >> 1]);
      else
        acc = acc.add(wnd[(-z - 1) >> 1].neg());
    }
  }
  return p.type === 'affine' ? acc.toP() : acc;
};

BaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW,
  points,
  coeffs,
  len,
  jacobianResult) {
  var wndWidth = this._wnafT1;
  var wnd = this._wnafT2;
  var naf = this._wnafT3;

  // Fill all arrays
  var max = 0;
  var i;
  var j;
  var p;
  for (i = 0; i < len; i++) {
    p = points[i];
    var nafPoints = p._getNAFPoints(defW);
    wndWidth[i] = nafPoints.wnd;
    wnd[i] = nafPoints.points;
  }

  // Comb small window NAFs
  for (i = len - 1; i >= 1; i -= 2) {
    var a = i - 1;
    var b = i;
    if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {
      naf[a] = getNAF(coeffs[a], wndWidth[a], this._bitLength);
      naf[b] = getNAF(coeffs[b], wndWidth[b], this._bitLength);
      max = Math.max(naf[a].length, max);
      max = Math.max(naf[b].length, max);
      continue;
    }

    var comb = [
      points[a], /* 1 */
      null, /* 3 */
      null, /* 5 */
      points[b], /* 7 */
    ];

    // Try to avoid Projective points, if possible
    if (points[a].y.cmp(points[b].y) === 0) {
      comb[1] = points[a].add(points[b]);
      comb[2] = points[a].toJ().mixedAdd(points[b].neg());
    } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {
      comb[1] = points[a].toJ().mixedAdd(points[b]);
      comb[2] = points[a].add(points[b].neg());
    } else {
      comb[1] = points[a].toJ().mixedAdd(points[b]);
      comb[2] = points[a].toJ().mixedAdd(points[b].neg());
    }

    var index = [
      -3, /* -1 -1 */
      -1, /* -1 0 */
      -5, /* -1 1 */
      -7, /* 0 -1 */
      0, /* 0 0 */
      7, /* 0 1 */
      5, /* 1 -1 */
      1, /* 1 0 */
      3,  /* 1 1 */
    ];

    var jsf = getJSF(coeffs[a], coeffs[b]);
    max = Math.max(jsf[0].length, max);
    naf[a] = new Array(max);
    naf[b] = new Array(max);
    for (j = 0; j < max; j++) {
      var ja = jsf[0][j] | 0;
      var jb = jsf[1][j] | 0;

      naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];
      naf[b][j] = 0;
      wnd[a] = comb;
    }
  }

  var acc = this.jpoint(null, null, null);
  var tmp = this._wnafT4;
  for (i = max; i >= 0; i--) {
    var k = 0;

    while (i >= 0) {
      var zero = true;
      for (j = 0; j < len; j++) {
        tmp[j] = naf[j][i] | 0;
        if (tmp[j] !== 0)
          zero = false;
      }
      if (!zero)
        break;
      k++;
      i--;
    }
    if (i >= 0)
      k++;
    acc = acc.dblp(k);
    if (i < 0)
      break;

    for (j = 0; j < len; j++) {
      var z = tmp[j];
      p;
      if (z === 0)
        continue;
      else if (z > 0)
        p = wnd[j][(z - 1) >> 1];
      else if (z < 0)
        p = wnd[j][(-z - 1) >> 1].neg();

      if (p.type === 'affine')
        acc = acc.mixedAdd(p);
      else
        acc = acc.add(p);
    }
  }
  // Zeroify references
  for (i = 0; i < len; i++)
    wnd[i] = null;

  if (jacobianResult)
    return acc;
  else
    return acc.toP();
};

function BasePoint(curve, type) {
  this.curve = curve;
  this.type = type;
  this.precomputed = null;
}
BaseCurve.BasePoint = BasePoint;

BasePoint.prototype.eq = function eq(/*other*/) {
  throw new Error('Not implemented');
};

BasePoint.prototype.validate = function validate() {
  return this.curve.validate(this);
};

BaseCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
  bytes = utils.toArray(bytes, enc);

  var len = this.p.byteLength();

  // uncompressed, hybrid-odd, hybrid-even
  if ((bytes[0] === 0x04 || bytes[0] === 0x06 || bytes[0] === 0x07) &&
      bytes.length - 1 === 2 * len) {
    if (bytes[0] === 0x06)
      assert(bytes[bytes.length - 1] % 2 === 0);
    else if (bytes[0] === 0x07)
      assert(bytes[bytes.length - 1] % 2 === 1);

    var res =  this.point(bytes.slice(1, 1 + len),
      bytes.slice(1 + len, 1 + 2 * len));

    return res;
  } else if ((bytes[0] === 0x02 || bytes[0] === 0x03) &&
              bytes.length - 1 === len) {
    return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 0x03);
  }
  throw new Error('Unknown point format');
};

BasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {
  return this.encode(enc, true);
};

BasePoint.prototype._encode = function _encode(compact) {
  var len = this.curve.p.byteLength();
  var x = this.getX().toArray('be', len);

  if (compact)
    return [ this.getY().isEven() ? 0x02 : 0x03 ].concat(x);

  return [ 0x04 ].concat(x, this.getY().toArray('be', len));
};

BasePoint.prototype.encode = function encode(enc, compact) {
  return utils.encode(this._encode(compact), enc);
};

BasePoint.prototype.precompute = function precompute(power) {
  if (this.precomputed)
    return this;

  var precomputed = {
    doubles: null,
    naf: null,
    beta: null,
  };
  precomputed.naf = this._getNAFPoints(8);
  precomputed.doubles = this._getDoubles(4, power);
  precomputed.beta = this._getBeta();
  this.precomputed = precomputed;

  return this;
};

BasePoint.prototype._hasDoubles = function _hasDoubles(k) {
  if (!this.precomputed)
    return false;

  var doubles = this.precomputed.doubles;
  if (!doubles)
    return false;

  return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);
};

BasePoint.prototype._getDoubles = function _getDoubles(step, power) {
  if (this.precomputed && this.precomputed.doubles)
    return this.precomputed.doubles;

  var doubles = [ this ];
  var acc = this;
  for (var i = 0; i < power; i += step) {
    for (var j = 0; j < step; j++)
      acc = acc.dbl();
    doubles.push(acc);
  }
  return {
    step: step,
    points: doubles,
  };
};

BasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {
  if (this.precomputed && this.precomputed.naf)
    return this.precomputed.naf;

  var res = [ this ];
  var max = (1 << wnd) - 1;
  var dbl = max === 1 ? null : this.dbl();
  for (var i = 1; i < max; i++)
    res[i] = res[i - 1].add(dbl);
  return {
    wnd: wnd,
    points: res,
  };
};

BasePoint.prototype._getBeta = function _getBeta() {
  return null;
};

BasePoint.prototype.dblp = function dblp(k) {
  var r = this;
  for (var i = 0; i < k; i++)
    r = r.dbl();
  return r;
};

},{"../utils":86,"bn.js":62}],74:[function(require,module,exports){
'use strict';

var utils = require('../utils');
var BN = require('bn.js');
var inherits = require('inherits');
var Base = require('./base');

var assert = utils.assert;

function EdwardsCurve(conf) {
  // NOTE: Important as we are creating point in Base.call()
  this.twisted = (conf.a | 0) !== 1;
  this.mOneA = this.twisted && (conf.a | 0) === -1;
  this.extended = this.mOneA;

  Base.call(this, 'edwards', conf);

  this.a = new BN(conf.a, 16).umod(this.red.m);
  this.a = this.a.toRed(this.red);
  this.c = new BN(conf.c, 16).toRed(this.red);
  this.c2 = this.c.redSqr();
  this.d = new BN(conf.d, 16).toRed(this.red);
  this.dd = this.d.redAdd(this.d);

  assert(!this.twisted || this.c.fromRed().cmpn(1) === 0);
  this.oneC = (conf.c | 0) === 1;
}
inherits(EdwardsCurve, Base);
module.exports = EdwardsCurve;

EdwardsCurve.prototype._mulA = function _mulA(num) {
  if (this.mOneA)
    return num.redNeg();
  else
    return this.a.redMul(num);
};

EdwardsCurve.prototype._mulC = function _mulC(num) {
  if (this.oneC)
    return num;
  else
    return this.c.redMul(num);
};

// Just for compatibility with Short curve
EdwardsCurve.prototype.jpoint = function jpoint(x, y, z, t) {
  return this.point(x, y, z, t);
};

EdwardsCurve.prototype.pointFromX = function pointFromX(x, odd) {
  x = new BN(x, 16);
  if (!x.red)
    x = x.toRed(this.red);

  var x2 = x.redSqr();
  var rhs = this.c2.redSub(this.a.redMul(x2));
  var lhs = this.one.redSub(this.c2.redMul(this.d).redMul(x2));

  var y2 = rhs.redMul(lhs.redInvm());
  var y = y2.redSqrt();
  if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
    throw new Error('invalid point');

  var isOdd = y.fromRed().isOdd();
  if (odd && !isOdd || !odd && isOdd)
    y = y.redNeg();

  return this.point(x, y);
};

EdwardsCurve.prototype.pointFromY = function pointFromY(y, odd) {
  y = new BN(y, 16);
  if (!y.red)
    y = y.toRed(this.red);

  // x^2 = (y^2 - c^2) / (c^2 d y^2 - a)
  var y2 = y.redSqr();
  var lhs = y2.redSub(this.c2);
  var rhs = y2.redMul(this.d).redMul(this.c2).redSub(this.a);
  var x2 = lhs.redMul(rhs.redInvm());

  if (x2.cmp(this.zero) === 0) {
    if (odd)
      throw new Error('invalid point');
    else
      return this.point(this.zero, y);
  }

  var x = x2.redSqrt();
  if (x.redSqr().redSub(x2).cmp(this.zero) !== 0)
    throw new Error('invalid point');

  if (x.fromRed().isOdd() !== odd)
    x = x.redNeg();

  return this.point(x, y);
};

EdwardsCurve.prototype.validate = function validate(point) {
  if (point.isInfinity())
    return true;

  // Curve: A * X^2 + Y^2 = C^2 * (1 + D * X^2 * Y^2)
  point.normalize();

  var x2 = point.x.redSqr();
  var y2 = point.y.redSqr();
  var lhs = x2.redMul(this.a).redAdd(y2);
  var rhs = this.c2.redMul(this.one.redAdd(this.d.redMul(x2).redMul(y2)));

  return lhs.cmp(rhs) === 0;
};

function Point(curve, x, y, z, t) {
  Base.BasePoint.call(this, curve, 'projective');
  if (x === null && y === null && z === null) {
    this.x = this.curve.zero;
    this.y = this.curve.one;
    this.z = this.curve.one;
    this.t = this.curve.zero;
    this.zOne = true;
  } else {
    this.x = new BN(x, 16);
    this.y = new BN(y, 16);
    this.z = z ? new BN(z, 16) : this.curve.one;
    this.t = t && new BN(t, 16);
    if (!this.x.red)
      this.x = this.x.toRed(this.curve.red);
    if (!this.y.red)
      this.y = this.y.toRed(this.curve.red);
    if (!this.z.red)
      this.z = this.z.toRed(this.curve.red);
    if (this.t && !this.t.red)
      this.t = this.t.toRed(this.curve.red);
    this.zOne = this.z === this.curve.one;

    // Use extended coordinates
    if (this.curve.extended && !this.t) {
      this.t = this.x.redMul(this.y);
      if (!this.zOne)
        this.t = this.t.redMul(this.z.redInvm());
    }
  }
}
inherits(Point, Base.BasePoint);

EdwardsCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
  return Point.fromJSON(this, obj);
};

EdwardsCurve.prototype.point = function point(x, y, z, t) {
  return new Point(this, x, y, z, t);
};

Point.fromJSON = function fromJSON(curve, obj) {
  return new Point(curve, obj[0], obj[1], obj[2]);
};

Point.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC Point Infinity>';
  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
      ' y: ' + this.y.fromRed().toString(16, 2) +
      ' z: ' + this.z.fromRed().toString(16, 2) + '>';
};

Point.prototype.isInfinity = function isInfinity() {
  // XXX This code assumes that zero is always zero in red
  return this.x.cmpn(0) === 0 &&
    (this.y.cmp(this.z) === 0 ||
    (this.zOne && this.y.cmp(this.curve.c) === 0));
};

Point.prototype._extDbl = function _extDbl() {
  // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
  //     #doubling-dbl-2008-hwcd
  // 4M + 4S

  // A = X1^2
  var a = this.x.redSqr();
  // B = Y1^2
  var b = this.y.redSqr();
  // C = 2 * Z1^2
  var c = this.z.redSqr();
  c = c.redIAdd(c);
  // D = a * A
  var d = this.curve._mulA(a);
  // E = (X1 + Y1)^2 - A - B
  var e = this.x.redAdd(this.y).redSqr().redISub(a).redISub(b);
  // G = D + B
  var g = d.redAdd(b);
  // F = G - C
  var f = g.redSub(c);
  // H = D - B
  var h = d.redSub(b);
  // X3 = E * F
  var nx = e.redMul(f);
  // Y3 = G * H
  var ny = g.redMul(h);
  // T3 = E * H
  var nt = e.redMul(h);
  // Z3 = F * G
  var nz = f.redMul(g);
  return this.curve.point(nx, ny, nz, nt);
};

Point.prototype._projDbl = function _projDbl() {
  // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
  //     #doubling-dbl-2008-bbjlp
  //     #doubling-dbl-2007-bl
  // and others
  // Generally 3M + 4S or 2M + 4S

  // B = (X1 + Y1)^2
  var b = this.x.redAdd(this.y).redSqr();
  // C = X1^2
  var c = this.x.redSqr();
  // D = Y1^2
  var d = this.y.redSqr();

  var nx;
  var ny;
  var nz;
  var e;
  var h;
  var j;
  if (this.curve.twisted) {
    // E = a * C
    e = this.curve._mulA(c);
    // F = E + D
    var f = e.redAdd(d);
    if (this.zOne) {
      // X3 = (B - C - D) * (F - 2)
      nx = b.redSub(c).redSub(d).redMul(f.redSub(this.curve.two));
      // Y3 = F * (E - D)
      ny = f.redMul(e.redSub(d));
      // Z3 = F^2 - 2 * F
      nz = f.redSqr().redSub(f).redSub(f);
    } else {
      // H = Z1^2
      h = this.z.redSqr();
      // J = F - 2 * H
      j = f.redSub(h).redISub(h);
      // X3 = (B-C-D)*J
      nx = b.redSub(c).redISub(d).redMul(j);
      // Y3 = F * (E - D)
      ny = f.redMul(e.redSub(d));
      // Z3 = F * J
      nz = f.redMul(j);
    }
  } else {
    // E = C + D
    e = c.redAdd(d);
    // H = (c * Z1)^2
    h = this.curve._mulC(this.z).redSqr();
    // J = E - 2 * H
    j = e.redSub(h).redSub(h);
    // X3 = c * (B - E) * J
    nx = this.curve._mulC(b.redISub(e)).redMul(j);
    // Y3 = c * E * (C - D)
    ny = this.curve._mulC(e).redMul(c.redISub(d));
    // Z3 = E * J
    nz = e.redMul(j);
  }
  return this.curve.point(nx, ny, nz);
};

Point.prototype.dbl = function dbl() {
  if (this.isInfinity())
    return this;

  // Double in extended coordinates
  if (this.curve.extended)
    return this._extDbl();
  else
    return this._projDbl();
};

Point.prototype._extAdd = function _extAdd(p) {
  // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
  //     #addition-add-2008-hwcd-3
  // 8M

  // A = (Y1 - X1) * (Y2 - X2)
  var a = this.y.redSub(this.x).redMul(p.y.redSub(p.x));
  // B = (Y1 + X1) * (Y2 + X2)
  var b = this.y.redAdd(this.x).redMul(p.y.redAdd(p.x));
  // C = T1 * k * T2
  var c = this.t.redMul(this.curve.dd).redMul(p.t);
  // D = Z1 * 2 * Z2
  var d = this.z.redMul(p.z.redAdd(p.z));
  // E = B - A
  var e = b.redSub(a);
  // F = D - C
  var f = d.redSub(c);
  // G = D + C
  var g = d.redAdd(c);
  // H = B + A
  var h = b.redAdd(a);
  // X3 = E * F
  var nx = e.redMul(f);
  // Y3 = G * H
  var ny = g.redMul(h);
  // T3 = E * H
  var nt = e.redMul(h);
  // Z3 = F * G
  var nz = f.redMul(g);
  return this.curve.point(nx, ny, nz, nt);
};

Point.prototype._projAdd = function _projAdd(p) {
  // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
  //     #addition-add-2008-bbjlp
  //     #addition-add-2007-bl
  // 10M + 1S

  // A = Z1 * Z2
  var a = this.z.redMul(p.z);
  // B = A^2
  var b = a.redSqr();
  // C = X1 * X2
  var c = this.x.redMul(p.x);
  // D = Y1 * Y2
  var d = this.y.redMul(p.y);
  // E = d * C * D
  var e = this.curve.d.redMul(c).redMul(d);
  // F = B - E
  var f = b.redSub(e);
  // G = B + E
  var g = b.redAdd(e);
  // X3 = A * F * ((X1 + Y1) * (X2 + Y2) - C - D)
  var tmp = this.x.redAdd(this.y).redMul(p.x.redAdd(p.y)).redISub(c).redISub(d);
  var nx = a.redMul(f).redMul(tmp);
  var ny;
  var nz;
  if (this.curve.twisted) {
    // Y3 = A * G * (D - a * C)
    ny = a.redMul(g).redMul(d.redSub(this.curve._mulA(c)));
    // Z3 = F * G
    nz = f.redMul(g);
  } else {
    // Y3 = A * G * (D - C)
    ny = a.redMul(g).redMul(d.redSub(c));
    // Z3 = c * F * G
    nz = this.curve._mulC(f).redMul(g);
  }
  return this.curve.point(nx, ny, nz);
};

Point.prototype.add = function add(p) {
  if (this.isInfinity())
    return p;
  if (p.isInfinity())
    return this;

  if (this.curve.extended)
    return this._extAdd(p);
  else
    return this._projAdd(p);
};

Point.prototype.mul = function mul(k) {
  if (this._hasDoubles(k))
    return this.curve._fixedNafMul(this, k);
  else
    return this.curve._wnafMul(this, k);
};

Point.prototype.mulAdd = function mulAdd(k1, p, k2) {
  return this.curve._wnafMulAdd(1, [ this, p ], [ k1, k2 ], 2, false);
};

Point.prototype.jmulAdd = function jmulAdd(k1, p, k2) {
  return this.curve._wnafMulAdd(1, [ this, p ], [ k1, k2 ], 2, true);
};

Point.prototype.normalize = function normalize() {
  if (this.zOne)
    return this;

  // Normalize coordinates
  var zi = this.z.redInvm();
  this.x = this.x.redMul(zi);
  this.y = this.y.redMul(zi);
  if (this.t)
    this.t = this.t.redMul(zi);
  this.z = this.curve.one;
  this.zOne = true;
  return this;
};

Point.prototype.neg = function neg() {
  return this.curve.point(this.x.redNeg(),
    this.y,
    this.z,
    this.t && this.t.redNeg());
};

Point.prototype.getX = function getX() {
  this.normalize();
  return this.x.fromRed();
};

Point.prototype.getY = function getY() {
  this.normalize();
  return this.y.fromRed();
};

Point.prototype.eq = function eq(other) {
  return this === other ||
         this.getX().cmp(other.getX()) === 0 &&
         this.getY().cmp(other.getY()) === 0;
};

Point.prototype.eqXToP = function eqXToP(x) {
  var rx = x.toRed(this.curve.red).redMul(this.z);
  if (this.x.cmp(rx) === 0)
    return true;

  var xc = x.clone();
  var t = this.curve.redN.redMul(this.z);
  for (;;) {
    xc.iadd(this.curve.n);
    if (xc.cmp(this.curve.p) >= 0)
      return false;

    rx.redIAdd(t);
    if (this.x.cmp(rx) === 0)
      return true;
  }
};

// Compatibility with BaseCurve
Point.prototype.toP = Point.prototype.normalize;
Point.prototype.mixedAdd = Point.prototype.add;

},{"../utils":86,"./base":73,"bn.js":62,"inherits":102}],75:[function(require,module,exports){
'use strict';

var curve = exports;

curve.base = require('./base');
curve.short = require('./short');
curve.mont = require('./mont');
curve.edwards = require('./edwards');

},{"./base":73,"./edwards":74,"./mont":76,"./short":77}],76:[function(require,module,exports){
'use strict';

var BN = require('bn.js');
var inherits = require('inherits');
var Base = require('./base');

var utils = require('../utils');

function MontCurve(conf) {
  Base.call(this, 'mont', conf);

  this.a = new BN(conf.a, 16).toRed(this.red);
  this.b = new BN(conf.b, 16).toRed(this.red);
  this.i4 = new BN(4).toRed(this.red).redInvm();
  this.two = new BN(2).toRed(this.red);
  this.a24 = this.i4.redMul(this.a.redAdd(this.two));
}
inherits(MontCurve, Base);
module.exports = MontCurve;

MontCurve.prototype.validate = function validate(point) {
  var x = point.normalize().x;
  var x2 = x.redSqr();
  var rhs = x2.redMul(x).redAdd(x2.redMul(this.a)).redAdd(x);
  var y = rhs.redSqrt();

  return y.redSqr().cmp(rhs) === 0;
};

function Point(curve, x, z) {
  Base.BasePoint.call(this, curve, 'projective');
  if (x === null && z === null) {
    this.x = this.curve.one;
    this.z = this.curve.zero;
  } else {
    this.x = new BN(x, 16);
    this.z = new BN(z, 16);
    if (!this.x.red)
      this.x = this.x.toRed(this.curve.red);
    if (!this.z.red)
      this.z = this.z.toRed(this.curve.red);
  }
}
inherits(Point, Base.BasePoint);

MontCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
  return this.point(utils.toArray(bytes, enc), 1);
};

MontCurve.prototype.point = function point(x, z) {
  return new Point(this, x, z);
};

MontCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
  return Point.fromJSON(this, obj);
};

Point.prototype.precompute = function precompute() {
  // No-op
};

Point.prototype._encode = function _encode() {
  return this.getX().toArray('be', this.curve.p.byteLength());
};

Point.fromJSON = function fromJSON(curve, obj) {
  return new Point(curve, obj[0], obj[1] || curve.one);
};

Point.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC Point Infinity>';
  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
      ' z: ' + this.z.fromRed().toString(16, 2) + '>';
};

Point.prototype.isInfinity = function isInfinity() {
  // XXX This code assumes that zero is always zero in red
  return this.z.cmpn(0) === 0;
};

Point.prototype.dbl = function dbl() {
  // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#doubling-dbl-1987-m-3
  // 2M + 2S + 4A

  // A = X1 + Z1
  var a = this.x.redAdd(this.z);
  // AA = A^2
  var aa = a.redSqr();
  // B = X1 - Z1
  var b = this.x.redSub(this.z);
  // BB = B^2
  var bb = b.redSqr();
  // C = AA - BB
  var c = aa.redSub(bb);
  // X3 = AA * BB
  var nx = aa.redMul(bb);
  // Z3 = C * (BB + A24 * C)
  var nz = c.redMul(bb.redAdd(this.curve.a24.redMul(c)));
  return this.curve.point(nx, nz);
};

Point.prototype.add = function add() {
  throw new Error('Not supported on Montgomery curve');
};

Point.prototype.diffAdd = function diffAdd(p, diff) {
  // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#diffadd-dadd-1987-m-3
  // 4M + 2S + 6A

  // A = X2 + Z2
  var a = this.x.redAdd(this.z);
  // B = X2 - Z2
  var b = this.x.redSub(this.z);
  // C = X3 + Z3
  var c = p.x.redAdd(p.z);
  // D = X3 - Z3
  var d = p.x.redSub(p.z);
  // DA = D * A
  var da = d.redMul(a);
  // CB = C * B
  var cb = c.redMul(b);
  // X5 = Z1 * (DA + CB)^2
  var nx = diff.z.redMul(da.redAdd(cb).redSqr());
  // Z5 = X1 * (DA - CB)^2
  var nz = diff.x.redMul(da.redISub(cb).redSqr());
  return this.curve.point(nx, nz);
};

Point.prototype.mul = function mul(k) {
  var t = k.clone();
  var a = this; // (N / 2) * Q + Q
  var b = this.curve.point(null, null); // (N / 2) * Q
  var c = this; // Q

  for (var bits = []; t.cmpn(0) !== 0; t.iushrn(1))
    bits.push(t.andln(1));

  for (var i = bits.length - 1; i >= 0; i--) {
    if (bits[i] === 0) {
      // N * Q + Q = ((N / 2) * Q + Q)) + (N / 2) * Q
      a = a.diffAdd(b, c);
      // N * Q = 2 * ((N / 2) * Q + Q))
      b = b.dbl();
    } else {
      // N * Q = ((N / 2) * Q + Q) + ((N / 2) * Q)
      b = a.diffAdd(b, c);
      // N * Q + Q = 2 * ((N / 2) * Q + Q)
      a = a.dbl();
    }
  }
  return b;
};

Point.prototype.mulAdd = function mulAdd() {
  throw new Error('Not supported on Montgomery curve');
};

Point.prototype.jumlAdd = function jumlAdd() {
  throw new Error('Not supported on Montgomery curve');
};

Point.prototype.eq = function eq(other) {
  return this.getX().cmp(other.getX()) === 0;
};

Point.prototype.normalize = function normalize() {
  this.x = this.x.redMul(this.z.redInvm());
  this.z = this.curve.one;
  return this;
};

Point.prototype.getX = function getX() {
  // Normalize coordinates
  this.normalize();

  return this.x.fromRed();
};

},{"../utils":86,"./base":73,"bn.js":62,"inherits":102}],77:[function(require,module,exports){
'use strict';

var utils = require('../utils');
var BN = require('bn.js');
var inherits = require('inherits');
var Base = require('./base');

var assert = utils.assert;

function ShortCurve(conf) {
  Base.call(this, 'short', conf);

  this.a = new BN(conf.a, 16).toRed(this.red);
  this.b = new BN(conf.b, 16).toRed(this.red);
  this.tinv = this.two.redInvm();

  this.zeroA = this.a.fromRed().cmpn(0) === 0;
  this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;

  // If the curve is endomorphic, precalculate beta and lambda
  this.endo = this._getEndomorphism(conf);
  this._endoWnafT1 = new Array(4);
  this._endoWnafT2 = new Array(4);
}
inherits(ShortCurve, Base);
module.exports = ShortCurve;

ShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {
  // No efficient endomorphism
  if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1)
    return;

  // Compute beta and lambda, that lambda * P = (beta * Px; Py)
  var beta;
  var lambda;
  if (conf.beta) {
    beta = new BN(conf.beta, 16).toRed(this.red);
  } else {
    var betas = this._getEndoRoots(this.p);
    // Choose the smallest beta
    beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];
    beta = beta.toRed(this.red);
  }
  if (conf.lambda) {
    lambda = new BN(conf.lambda, 16);
  } else {
    // Choose the lambda that is matching selected beta
    var lambdas = this._getEndoRoots(this.n);
    if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {
      lambda = lambdas[0];
    } else {
      lambda = lambdas[1];
      assert(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);
    }
  }

  // Get basis vectors, used for balanced length-two representation
  var basis;
  if (conf.basis) {
    basis = conf.basis.map(function(vec) {
      return {
        a: new BN(vec.a, 16),
        b: new BN(vec.b, 16),
      };
    });
  } else {
    basis = this._getEndoBasis(lambda);
  }

  return {
    beta: beta,
    lambda: lambda,
    basis: basis,
  };
};

ShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {
  // Find roots of for x^2 + x + 1 in F
  // Root = (-1 +- Sqrt(-3)) / 2
  //
  var red = num === this.p ? this.red : BN.mont(num);
  var tinv = new BN(2).toRed(red).redInvm();
  var ntinv = tinv.redNeg();

  var s = new BN(3).toRed(red).redNeg().redSqrt().redMul(tinv);

  var l1 = ntinv.redAdd(s).fromRed();
  var l2 = ntinv.redSub(s).fromRed();
  return [ l1, l2 ];
};

ShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {
  // aprxSqrt >= sqrt(this.n)
  var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2));

  // 3.74
  // Run EGCD, until r(L + 1) < aprxSqrt
  var u = lambda;
  var v = this.n.clone();
  var x1 = new BN(1);
  var y1 = new BN(0);
  var x2 = new BN(0);
  var y2 = new BN(1);

  // NOTE: all vectors are roots of: a + b * lambda = 0 (mod n)
  var a0;
  var b0;
  // First vector
  var a1;
  var b1;
  // Second vector
  var a2;
  var b2;

  var prevR;
  var i = 0;
  var r;
  var x;
  while (u.cmpn(0) !== 0) {
    var q = v.div(u);
    r = v.sub(q.mul(u));
    x = x2.sub(q.mul(x1));
    var y = y2.sub(q.mul(y1));

    if (!a1 && r.cmp(aprxSqrt) < 0) {
      a0 = prevR.neg();
      b0 = x1;
      a1 = r.neg();
      b1 = x;
    } else if (a1 && ++i === 2) {
      break;
    }
    prevR = r;

    v = u;
    u = r;
    x2 = x1;
    x1 = x;
    y2 = y1;
    y1 = y;
  }
  a2 = r.neg();
  b2 = x;

  var len1 = a1.sqr().add(b1.sqr());
  var len2 = a2.sqr().add(b2.sqr());
  if (len2.cmp(len1) >= 0) {
    a2 = a0;
    b2 = b0;
  }

  // Normalize signs
  if (a1.negative) {
    a1 = a1.neg();
    b1 = b1.neg();
  }
  if (a2.negative) {
    a2 = a2.neg();
    b2 = b2.neg();
  }

  return [
    { a: a1, b: b1 },
    { a: a2, b: b2 },
  ];
};

ShortCurve.prototype._endoSplit = function _endoSplit(k) {
  var basis = this.endo.basis;
  var v1 = basis[0];
  var v2 = basis[1];

  var c1 = v2.b.mul(k).divRound(this.n);
  var c2 = v1.b.neg().mul(k).divRound(this.n);

  var p1 = c1.mul(v1.a);
  var p2 = c2.mul(v2.a);
  var q1 = c1.mul(v1.b);
  var q2 = c2.mul(v2.b);

  // Calculate answer
  var k1 = k.sub(p1).sub(p2);
  var k2 = q1.add(q2).neg();
  return { k1: k1, k2: k2 };
};

ShortCurve.prototype.pointFromX = function pointFromX(x, odd) {
  x = new BN(x, 16);
  if (!x.red)
    x = x.toRed(this.red);

  var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);
  var y = y2.redSqrt();
  if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
    throw new Error('invalid point');

  // XXX Is there any way to tell if the number is odd without converting it
  // to non-red form?
  var isOdd = y.fromRed().isOdd();
  if (odd && !isOdd || !odd && isOdd)
    y = y.redNeg();

  return this.point(x, y);
};

ShortCurve.prototype.validate = function validate(point) {
  if (point.inf)
    return true;

  var x = point.x;
  var y = point.y;

  var ax = this.a.redMul(x);
  var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);
  return y.redSqr().redISub(rhs).cmpn(0) === 0;
};

ShortCurve.prototype._endoWnafMulAdd =
    function _endoWnafMulAdd(points, coeffs, jacobianResult) {
      var npoints = this._endoWnafT1;
      var ncoeffs = this._endoWnafT2;
      for (var i = 0; i < points.length; i++) {
        var split = this._endoSplit(coeffs[i]);
        var p = points[i];
        var beta = p._getBeta();

        if (split.k1.negative) {
          split.k1.ineg();
          p = p.neg(true);
        }
        if (split.k2.negative) {
          split.k2.ineg();
          beta = beta.neg(true);
        }

        npoints[i * 2] = p;
        npoints[i * 2 + 1] = beta;
        ncoeffs[i * 2] = split.k1;
        ncoeffs[i * 2 + 1] = split.k2;
      }
      var res = this._wnafMulAdd(1, npoints, ncoeffs, i * 2, jacobianResult);

      // Clean-up references to points and coefficients
      for (var j = 0; j < i * 2; j++) {
        npoints[j] = null;
        ncoeffs[j] = null;
      }
      return res;
    };

function Point(curve, x, y, isRed) {
  Base.BasePoint.call(this, curve, 'affine');
  if (x === null && y === null) {
    this.x = null;
    this.y = null;
    this.inf = true;
  } else {
    this.x = new BN(x, 16);
    this.y = new BN(y, 16);
    // Force redgomery representation when loading from JSON
    if (isRed) {
      this.x.forceRed(this.curve.red);
      this.y.forceRed(this.curve.red);
    }
    if (!this.x.red)
      this.x = this.x.toRed(this.curve.red);
    if (!this.y.red)
      this.y = this.y.toRed(this.curve.red);
    this.inf = false;
  }
}
inherits(Point, Base.BasePoint);

ShortCurve.prototype.point = function point(x, y, isRed) {
  return new Point(this, x, y, isRed);
};

ShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {
  return Point.fromJSON(this, obj, red);
};

Point.prototype._getBeta = function _getBeta() {
  if (!this.curve.endo)
    return;

  var pre = this.precomputed;
  if (pre && pre.beta)
    return pre.beta;

  var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
  if (pre) {
    var curve = this.curve;
    var endoMul = function(p) {
      return curve.point(p.x.redMul(curve.endo.beta), p.y);
    };
    pre.beta = beta;
    beta.precomputed = {
      beta: null,
      naf: pre.naf && {
        wnd: pre.naf.wnd,
        points: pre.naf.points.map(endoMul),
      },
      doubles: pre.doubles && {
        step: pre.doubles.step,
        points: pre.doubles.points.map(endoMul),
      },
    };
  }
  return beta;
};

Point.prototype.toJSON = function toJSON() {
  if (!this.precomputed)
    return [ this.x, this.y ];

  return [ this.x, this.y, this.precomputed && {
    doubles: this.precomputed.doubles && {
      step: this.precomputed.doubles.step,
      points: this.precomputed.doubles.points.slice(1),
    },
    naf: this.precomputed.naf && {
      wnd: this.precomputed.naf.wnd,
      points: this.precomputed.naf.points.slice(1),
    },
  } ];
};

Point.fromJSON = function fromJSON(curve, obj, red) {
  if (typeof obj === 'string')
    obj = JSON.parse(obj);
  var res = curve.point(obj[0], obj[1], red);
  if (!obj[2])
    return res;

  function obj2point(obj) {
    return curve.point(obj[0], obj[1], red);
  }

  var pre = obj[2];
  res.precomputed = {
    beta: null,
    doubles: pre.doubles && {
      step: pre.doubles.step,
      points: [ res ].concat(pre.doubles.points.map(obj2point)),
    },
    naf: pre.naf && {
      wnd: pre.naf.wnd,
      points: [ res ].concat(pre.naf.points.map(obj2point)),
    },
  };
  return res;
};

Point.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC Point Infinity>';
  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
      ' y: ' + this.y.fromRed().toString(16, 2) + '>';
};

Point.prototype.isInfinity = function isInfinity() {
  return this.inf;
};

Point.prototype.add = function add(p) {
  // O + P = P
  if (this.inf)
    return p;

  // P + O = P
  if (p.inf)
    return this;

  // P + P = 2P
  if (this.eq(p))
    return this.dbl();

  // P + (-P) = O
  if (this.neg().eq(p))
    return this.curve.point(null, null);

  // P + Q = O
  if (this.x.cmp(p.x) === 0)
    return this.curve.point(null, null);

  var c = this.y.redSub(p.y);
  if (c.cmpn(0) !== 0)
    c = c.redMul(this.x.redSub(p.x).redInvm());
  var nx = c.redSqr().redISub(this.x).redISub(p.x);
  var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
  return this.curve.point(nx, ny);
};

Point.prototype.dbl = function dbl() {
  if (this.inf)
    return this;

  // 2P = O
  var ys1 = this.y.redAdd(this.y);
  if (ys1.cmpn(0) === 0)
    return this.curve.point(null, null);

  var a = this.curve.a;

  var x2 = this.x.redSqr();
  var dyinv = ys1.redInvm();
  var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);

  var nx = c.redSqr().redISub(this.x.redAdd(this.x));
  var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
  return this.curve.point(nx, ny);
};

Point.prototype.getX = function getX() {
  return this.x.fromRed();
};

Point.prototype.getY = function getY() {
  return this.y.fromRed();
};

Point.prototype.mul = function mul(k) {
  k = new BN(k, 16);
  if (this.isInfinity())
    return this;
  else if (this._hasDoubles(k))
    return this.curve._fixedNafMul(this, k);
  else if (this.curve.endo)
    return this.curve._endoWnafMulAdd([ this ], [ k ]);
  else
    return this.curve._wnafMul(this, k);
};

Point.prototype.mulAdd = function mulAdd(k1, p2, k2) {
  var points = [ this, p2 ];
  var coeffs = [ k1, k2 ];
  if (this.curve.endo)
    return this.curve._endoWnafMulAdd(points, coeffs);
  else
    return this.curve._wnafMulAdd(1, points, coeffs, 2);
};

Point.prototype.jmulAdd = function jmulAdd(k1, p2, k2) {
  var points = [ this, p2 ];
  var coeffs = [ k1, k2 ];
  if (this.curve.endo)
    return this.curve._endoWnafMulAdd(points, coeffs, true);
  else
    return this.curve._wnafMulAdd(1, points, coeffs, 2, true);
};

Point.prototype.eq = function eq(p) {
  return this === p ||
         this.inf === p.inf &&
             (this.inf || this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0);
};

Point.prototype.neg = function neg(_precompute) {
  if (this.inf)
    return this;

  var res = this.curve.point(this.x, this.y.redNeg());
  if (_precompute && this.precomputed) {
    var pre = this.precomputed;
    var negate = function(p) {
      return p.neg();
    };
    res.precomputed = {
      naf: pre.naf && {
        wnd: pre.naf.wnd,
        points: pre.naf.points.map(negate),
      },
      doubles: pre.doubles && {
        step: pre.doubles.step,
        points: pre.doubles.points.map(negate),
      },
    };
  }
  return res;
};

Point.prototype.toJ = function toJ() {
  if (this.inf)
    return this.curve.jpoint(null, null, null);

  var res = this.curve.jpoint(this.x, this.y, this.curve.one);
  return res;
};

function JPoint(curve, x, y, z) {
  Base.BasePoint.call(this, curve, 'jacobian');
  if (x === null && y === null && z === null) {
    this.x = this.curve.one;
    this.y = this.curve.one;
    this.z = new BN(0);
  } else {
    this.x = new BN(x, 16);
    this.y = new BN(y, 16);
    this.z = new BN(z, 16);
  }
  if (!this.x.red)
    this.x = this.x.toRed(this.curve.red);
  if (!this.y.red)
    this.y = this.y.toRed(this.curve.red);
  if (!this.z.red)
    this.z = this.z.toRed(this.curve.red);

  this.zOne = this.z === this.curve.one;
}
inherits(JPoint, Base.BasePoint);

ShortCurve.prototype.jpoint = function jpoint(x, y, z) {
  return new JPoint(this, x, y, z);
};

JPoint.prototype.toP = function toP() {
  if (this.isInfinity())
    return this.curve.point(null, null);

  var zinv = this.z.redInvm();
  var zinv2 = zinv.redSqr();
  var ax = this.x.redMul(zinv2);
  var ay = this.y.redMul(zinv2).redMul(zinv);

  return this.curve.point(ax, ay);
};

JPoint.prototype.neg = function neg() {
  return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
};

JPoint.prototype.add = function add(p) {
  // O + P = P
  if (this.isInfinity())
    return p;

  // P + O = P
  if (p.isInfinity())
    return this;

  // 12M + 4S + 7A
  var pz2 = p.z.redSqr();
  var z2 = this.z.redSqr();
  var u1 = this.x.redMul(pz2);
  var u2 = p.x.redMul(z2);
  var s1 = this.y.redMul(pz2.redMul(p.z));
  var s2 = p.y.redMul(z2.redMul(this.z));

  var h = u1.redSub(u2);
  var r = s1.redSub(s2);
  if (h.cmpn(0) === 0) {
    if (r.cmpn(0) !== 0)
      return this.curve.jpoint(null, null, null);
    else
      return this.dbl();
  }

  var h2 = h.redSqr();
  var h3 = h2.redMul(h);
  var v = u1.redMul(h2);

  var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
  var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
  var nz = this.z.redMul(p.z).redMul(h);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.mixedAdd = function mixedAdd(p) {
  // O + P = P
  if (this.isInfinity())
    return p.toJ();

  // P + O = P
  if (p.isInfinity())
    return this;

  // 8M + 3S + 7A
  var z2 = this.z.redSqr();
  var u1 = this.x;
  var u2 = p.x.redMul(z2);
  var s1 = this.y;
  var s2 = p.y.redMul(z2).redMul(this.z);

  var h = u1.redSub(u2);
  var r = s1.redSub(s2);
  if (h.cmpn(0) === 0) {
    if (r.cmpn(0) !== 0)
      return this.curve.jpoint(null, null, null);
    else
      return this.dbl();
  }

  var h2 = h.redSqr();
  var h3 = h2.redMul(h);
  var v = u1.redMul(h2);

  var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
  var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
  var nz = this.z.redMul(h);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.dblp = function dblp(pow) {
  if (pow === 0)
    return this;
  if (this.isInfinity())
    return this;
  if (!pow)
    return this.dbl();

  var i;
  if (this.curve.zeroA || this.curve.threeA) {
    var r = this;
    for (i = 0; i < pow; i++)
      r = r.dbl();
    return r;
  }

  // 1M + 2S + 1A + N * (4S + 5M + 8A)
  // N = 1 => 6M + 6S + 9A
  var a = this.curve.a;
  var tinv = this.curve.tinv;

  var jx = this.x;
  var jy = this.y;
  var jz = this.z;
  var jz4 = jz.redSqr().redSqr();

  // Reuse results
  var jyd = jy.redAdd(jy);
  for (i = 0; i < pow; i++) {
    var jx2 = jx.redSqr();
    var jyd2 = jyd.redSqr();
    var jyd4 = jyd2.redSqr();
    var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

    var t1 = jx.redMul(jyd2);
    var nx = c.redSqr().redISub(t1.redAdd(t1));
    var t2 = t1.redISub(nx);
    var dny = c.redMul(t2);
    dny = dny.redIAdd(dny).redISub(jyd4);
    var nz = jyd.redMul(jz);
    if (i + 1 < pow)
      jz4 = jz4.redMul(jyd4);

    jx = nx;
    jz = nz;
    jyd = dny;
  }

  return this.curve.jpoint(jx, jyd.redMul(tinv), jz);
};

JPoint.prototype.dbl = function dbl() {
  if (this.isInfinity())
    return this;

  if (this.curve.zeroA)
    return this._zeroDbl();
  else if (this.curve.threeA)
    return this._threeDbl();
  else
    return this._dbl();
};

JPoint.prototype._zeroDbl = function _zeroDbl() {
  var nx;
  var ny;
  var nz;
  // Z = 1
  if (this.zOne) {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
    //     #doubling-mdbl-2007-bl
    // 1M + 5S + 14A

    // XX = X1^2
    var xx = this.x.redSqr();
    // YY = Y1^2
    var yy = this.y.redSqr();
    // YYYY = YY^2
    var yyyy = yy.redSqr();
    // S = 2 * ((X1 + YY)^2 - XX - YYYY)
    var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
    s = s.redIAdd(s);
    // M = 3 * XX + a; a = 0
    var m = xx.redAdd(xx).redIAdd(xx);
    // T = M ^ 2 - 2*S
    var t = m.redSqr().redISub(s).redISub(s);

    // 8 * YYYY
    var yyyy8 = yyyy.redIAdd(yyyy);
    yyyy8 = yyyy8.redIAdd(yyyy8);
    yyyy8 = yyyy8.redIAdd(yyyy8);

    // X3 = T
    nx = t;
    // Y3 = M * (S - T) - 8 * YYYY
    ny = m.redMul(s.redISub(t)).redISub(yyyy8);
    // Z3 = 2*Y1
    nz = this.y.redAdd(this.y);
  } else {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
    //     #doubling-dbl-2009-l
    // 2M + 5S + 13A

    // A = X1^2
    var a = this.x.redSqr();
    // B = Y1^2
    var b = this.y.redSqr();
    // C = B^2
    var c = b.redSqr();
    // D = 2 * ((X1 + B)^2 - A - C)
    var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);
    d = d.redIAdd(d);
    // E = 3 * A
    var e = a.redAdd(a).redIAdd(a);
    // F = E^2
    var f = e.redSqr();

    // 8 * C
    var c8 = c.redIAdd(c);
    c8 = c8.redIAdd(c8);
    c8 = c8.redIAdd(c8);

    // X3 = F - 2 * D
    nx = f.redISub(d).redISub(d);
    // Y3 = E * (D - X3) - 8 * C
    ny = e.redMul(d.redISub(nx)).redISub(c8);
    // Z3 = 2 * Y1 * Z1
    nz = this.y.redMul(this.z);
    nz = nz.redIAdd(nz);
  }

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype._threeDbl = function _threeDbl() {
  var nx;
  var ny;
  var nz;
  // Z = 1
  if (this.zOne) {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html
    //     #doubling-mdbl-2007-bl
    // 1M + 5S + 15A

    // XX = X1^2
    var xx = this.x.redSqr();
    // YY = Y1^2
    var yy = this.y.redSqr();
    // YYYY = YY^2
    var yyyy = yy.redSqr();
    // S = 2 * ((X1 + YY)^2 - XX - YYYY)
    var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
    s = s.redIAdd(s);
    // M = 3 * XX + a
    var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);
    // T = M^2 - 2 * S
    var t = m.redSqr().redISub(s).redISub(s);
    // X3 = T
    nx = t;
    // Y3 = M * (S - T) - 8 * YYYY
    var yyyy8 = yyyy.redIAdd(yyyy);
    yyyy8 = yyyy8.redIAdd(yyyy8);
    yyyy8 = yyyy8.redIAdd(yyyy8);
    ny = m.redMul(s.redISub(t)).redISub(yyyy8);
    // Z3 = 2 * Y1
    nz = this.y.redAdd(this.y);
  } else {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html#doubling-dbl-2001-b
    // 3M + 5S

    // delta = Z1^2
    var delta = this.z.redSqr();
    // gamma = Y1^2
    var gamma = this.y.redSqr();
    // beta = X1 * gamma
    var beta = this.x.redMul(gamma);
    // alpha = 3 * (X1 - delta) * (X1 + delta)
    var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));
    alpha = alpha.redAdd(alpha).redIAdd(alpha);
    // X3 = alpha^2 - 8 * beta
    var beta4 = beta.redIAdd(beta);
    beta4 = beta4.redIAdd(beta4);
    var beta8 = beta4.redAdd(beta4);
    nx = alpha.redSqr().redISub(beta8);
    // Z3 = (Y1 + Z1)^2 - gamma - delta
    nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);
    // Y3 = alpha * (4 * beta - X3) - 8 * gamma^2
    var ggamma8 = gamma.redSqr();
    ggamma8 = ggamma8.redIAdd(ggamma8);
    ggamma8 = ggamma8.redIAdd(ggamma8);
    ggamma8 = ggamma8.redIAdd(ggamma8);
    ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);
  }

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype._dbl = function _dbl() {
  var a = this.curve.a;

  // 4M + 6S + 10A
  var jx = this.x;
  var jy = this.y;
  var jz = this.z;
  var jz4 = jz.redSqr().redSqr();

  var jx2 = jx.redSqr();
  var jy2 = jy.redSqr();

  var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

  var jxd4 = jx.redAdd(jx);
  jxd4 = jxd4.redIAdd(jxd4);
  var t1 = jxd4.redMul(jy2);
  var nx = c.redSqr().redISub(t1.redAdd(t1));
  var t2 = t1.redISub(nx);

  var jyd8 = jy2.redSqr();
  jyd8 = jyd8.redIAdd(jyd8);
  jyd8 = jyd8.redIAdd(jyd8);
  jyd8 = jyd8.redIAdd(jyd8);
  var ny = c.redMul(t2).redISub(jyd8);
  var nz = jy.redAdd(jy).redMul(jz);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.trpl = function trpl() {
  if (!this.curve.zeroA)
    return this.dbl().add(this);

  // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#tripling-tpl-2007-bl
  // 5M + 10S + ...

  // XX = X1^2
  var xx = this.x.redSqr();
  // YY = Y1^2
  var yy = this.y.redSqr();
  // ZZ = Z1^2
  var zz = this.z.redSqr();
  // YYYY = YY^2
  var yyyy = yy.redSqr();
  // M = 3 * XX + a * ZZ2; a = 0
  var m = xx.redAdd(xx).redIAdd(xx);
  // MM = M^2
  var mm = m.redSqr();
  // E = 6 * ((X1 + YY)^2 - XX - YYYY) - MM
  var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
  e = e.redIAdd(e);
  e = e.redAdd(e).redIAdd(e);
  e = e.redISub(mm);
  // EE = E^2
  var ee = e.redSqr();
  // T = 16*YYYY
  var t = yyyy.redIAdd(yyyy);
  t = t.redIAdd(t);
  t = t.redIAdd(t);
  t = t.redIAdd(t);
  // U = (M + E)^2 - MM - EE - T
  var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t);
  // X3 = 4 * (X1 * EE - 4 * YY * U)
  var yyu4 = yy.redMul(u);
  yyu4 = yyu4.redIAdd(yyu4);
  yyu4 = yyu4.redIAdd(yyu4);
  var nx = this.x.redMul(ee).redISub(yyu4);
  nx = nx.redIAdd(nx);
  nx = nx.redIAdd(nx);
  // Y3 = 8 * Y1 * (U * (T - U) - E * EE)
  var ny = this.y.redMul(u.redMul(t.redISub(u)).redISub(e.redMul(ee)));
  ny = ny.redIAdd(ny);
  ny = ny.redIAdd(ny);
  ny = ny.redIAdd(ny);
  // Z3 = (Z1 + E)^2 - ZZ - EE
  var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.mul = function mul(k, kbase) {
  k = new BN(k, kbase);

  return this.curve._wnafMul(this, k);
};

JPoint.prototype.eq = function eq(p) {
  if (p.type === 'affine')
    return this.eq(p.toJ());

  if (this === p)
    return true;

  // x1 * z2^2 == x2 * z1^2
  var z2 = this.z.redSqr();
  var pz2 = p.z.redSqr();
  if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0)
    return false;

  // y1 * z2^3 == y2 * z1^3
  var z3 = z2.redMul(this.z);
  var pz3 = pz2.redMul(p.z);
  return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;
};

JPoint.prototype.eqXToP = function eqXToP(x) {
  var zs = this.z.redSqr();
  var rx = x.toRed(this.curve.red).redMul(zs);
  if (this.x.cmp(rx) === 0)
    return true;

  var xc = x.clone();
  var t = this.curve.redN.redMul(zs);
  for (;;) {
    xc.iadd(this.curve.n);
    if (xc.cmp(this.curve.p) >= 0)
      return false;

    rx.redIAdd(t);
    if (this.x.cmp(rx) === 0)
      return true;
  }
};

JPoint.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC JPoint Infinity>';
  return '<EC JPoint x: ' + this.x.toString(16, 2) +
      ' y: ' + this.y.toString(16, 2) +
      ' z: ' + this.z.toString(16, 2) + '>';
};

JPoint.prototype.isInfinity = function isInfinity() {
  // XXX This code assumes that zero is always zero in red
  return this.z.cmpn(0) === 0;
};

},{"../utils":86,"./base":73,"bn.js":62,"inherits":102}],78:[function(require,module,exports){
'use strict';

var curves = exports;

var hash = require('hash.js');
var curve = require('./curve');
var utils = require('./utils');

var assert = utils.assert;

function PresetCurve(options) {
  if (options.type === 'short')
    this.curve = new curve.short(options);
  else if (options.type === 'edwards')
    this.curve = new curve.edwards(options);
  else
    this.curve = new curve.mont(options);
  this.g = this.curve.g;
  this.n = this.curve.n;
  this.hash = options.hash;

  assert(this.g.validate(), 'Invalid curve');
  assert(this.g.mul(this.n).isInfinity(), 'Invalid curve, G*N != O');
}
curves.PresetCurve = PresetCurve;

function defineCurve(name, options) {
  Object.defineProperty(curves, name, {
    configurable: true,
    enumerable: true,
    get: function() {
      var curve = new PresetCurve(options);
      Object.defineProperty(curves, name, {
        configurable: true,
        enumerable: true,
        value: curve,
      });
      return curve;
    },
  });
}

defineCurve('p192', {
  type: 'short',
  prime: 'p192',
  p: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff',
  a: 'ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc',
  b: '64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1',
  n: 'ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831',
  hash: hash.sha256,
  gRed: false,
  g: [
    '188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012',
    '07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811',
  ],
});

defineCurve('p224', {
  type: 'short',
  prime: 'p224',
  p: 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001',
  a: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe',
  b: 'b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4',
  n: 'ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d',
  hash: hash.sha256,
  gRed: false,
  g: [
    'b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21',
    'bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34',
  ],
});

defineCurve('p256', {
  type: 'short',
  prime: null,
  p: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff',
  a: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc',
  b: '5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b',
  n: 'ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551',
  hash: hash.sha256,
  gRed: false,
  g: [
    '6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296',
    '4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5',
  ],
});

defineCurve('p384', {
  type: 'short',
  prime: null,
  p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'fffffffe ffffffff 00000000 00000000 ffffffff',
  a: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'fffffffe ffffffff 00000000 00000000 fffffffc',
  b: 'b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f ' +
     '5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef',
  n: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 ' +
     'f4372ddf 581a0db2 48b0a77a ecec196a ccc52973',
  hash: hash.sha384,
  gRed: false,
  g: [
    'aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 ' +
    '5502f25d bf55296c 3a545e38 72760ab7',
    '3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 ' +
    '0a60b1ce 1d7e819d 7a431d7c 90ea0e5f',
  ],
});

defineCurve('p521', {
  type: 'short',
  prime: null,
  p: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff ffffffff ffffffff ffffffff',
  a: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff ffffffff ffffffff fffffffc',
  b: '00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b ' +
     '99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd ' +
     '3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00',
  n: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 ' +
     'f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409',
  hash: hash.sha512,
  gRed: false,
  g: [
    '000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 ' +
    '053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 ' +
    'a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66',
    '00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 ' +
    '579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 ' +
    '3fad0761 353c7086 a272c240 88be9476 9fd16650',
  ],
});

defineCurve('curve25519', {
  type: 'mont',
  prime: 'p25519',
  p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
  a: '76d06',
  b: '1',
  n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
  hash: hash.sha256,
  gRed: false,
  g: [
    '9',
  ],
});

defineCurve('ed25519', {
  type: 'edwards',
  prime: 'p25519',
  p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
  a: '-1',
  c: '1',
  // -121665 * (121666^(-1)) (mod P)
  d: '52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3',
  n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
  hash: hash.sha256,
  gRed: false,
  g: [
    '216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a',

    // 4/5
    '6666666666666666666666666666666666666666666666666666666666666658',
  ],
});

var pre;
try {
  pre = require('./precomputed/secp256k1');
} catch (e) {
  pre = undefined;
}

defineCurve('secp256k1', {
  type: 'short',
  prime: 'k256',
  p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f',
  a: '0',
  b: '7',
  n: 'ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141',
  h: '1',
  hash: hash.sha256,

  // Precomputed endomorphism
  beta: '7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee',
  lambda: '5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72',
  basis: [
    {
      a: '3086d221a7d46bcde86c90e49284eb15',
      b: '-e4437ed6010e88286f547fa90abfe4c3',
    },
    {
      a: '114ca50f7a8e2f3f657c1108d9d44cfd8',
      b: '3086d221a7d46bcde86c90e49284eb15',
    },
  ],

  gRed: false,
  g: [
    '79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798',
    '483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8',
    pre,
  ],
});

},{"./curve":75,"./precomputed/secp256k1":85,"./utils":86,"hash.js":89}],79:[function(require,module,exports){
'use strict';

var BN = require('bn.js');
var HmacDRBG = require('hmac-drbg');
var utils = require('../utils');
var curves = require('../curves');
var rand = require('brorand');
var assert = utils.assert;

var KeyPair = require('./key');
var Signature = require('./signature');

function EC(options) {
  if (!(this instanceof EC))
    return new EC(options);

  // Shortcut `elliptic.ec(curve-name)`
  if (typeof options === 'string') {
    assert(Object.prototype.hasOwnProperty.call(curves, options),
      'Unknown curve ' + options);

    options = curves[options];
  }

  // Shortcut for `elliptic.ec(elliptic.curves.curveName)`
  if (options instanceof curves.PresetCurve)
    options = { curve: options };

  this.curve = options.curve.curve;
  this.n = this.curve.n;
  this.nh = this.n.ushrn(1);
  this.g = this.curve.g;

  // Point on curve
  this.g = options.curve.g;
  this.g.precompute(options.curve.n.bitLength() + 1);

  // Hash for function for DRBG
  this.hash = options.hash || options.curve.hash;
}
module.exports = EC;

EC.prototype.keyPair = function keyPair(options) {
  return new KeyPair(this, options);
};

EC.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {
  return KeyPair.fromPrivate(this, priv, enc);
};

EC.prototype.keyFromPublic = function keyFromPublic(pub, enc) {
  return KeyPair.fromPublic(this, pub, enc);
};

EC.prototype.genKeyPair = function genKeyPair(options) {
  if (!options)
    options = {};

  // Instantiate Hmac_DRBG
  var drbg = new HmacDRBG({
    hash: this.hash,
    pers: options.pers,
    persEnc: options.persEnc || 'utf8',
    entropy: options.entropy || rand(this.hash.hmacStrength),
    entropyEnc: options.entropy && options.entropyEnc || 'utf8',
    nonce: this.n.toArray(),
  });

  var bytes = this.n.byteLength();
  var ns2 = this.n.sub(new BN(2));
  for (;;) {
    var priv = new BN(drbg.generate(bytes));
    if (priv.cmp(ns2) > 0)
      continue;

    priv.iaddn(1);
    return this.keyFromPrivate(priv);
  }
};

EC.prototype._truncateToN = function _truncateToN(msg, truncOnly) {
  var delta = msg.byteLength() * 8 - this.n.bitLength();
  if (delta > 0)
    msg = msg.ushrn(delta);
  if (!truncOnly && msg.cmp(this.n) >= 0)
    return msg.sub(this.n);
  else
    return msg;
};

EC.prototype.sign = function sign(msg, key, enc, options) {
  if (typeof enc === 'object') {
    options = enc;
    enc = null;
  }
  if (!options)
    options = {};

  key = this.keyFromPrivate(key, enc);
  msg = this._truncateToN(new BN(msg, 16));

  // Zero-extend key to provide enough entropy
  var bytes = this.n.byteLength();
  var bkey = key.getPrivate().toArray('be', bytes);

  // Zero-extend nonce to have the same byte size as N
  var nonce = msg.toArray('be', bytes);

  // Instantiate Hmac_DRBG
  var drbg = new HmacDRBG({
    hash: this.hash,
    entropy: bkey,
    nonce: nonce,
    pers: options.pers,
    persEnc: options.persEnc || 'utf8',
  });

  // Number of bytes to generate
  var ns1 = this.n.sub(new BN(1));

  for (var iter = 0; ; iter++) {
    var k = options.k ?
      options.k(iter) :
      new BN(drbg.generate(this.n.byteLength()));
    k = this._truncateToN(k, true);
    if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0)
      continue;

    var kp = this.g.mul(k);
    if (kp.isInfinity())
      continue;

    var kpX = kp.getX();
    var r = kpX.umod(this.n);
    if (r.cmpn(0) === 0)
      continue;

    var s = k.invm(this.n).mul(r.mul(key.getPrivate()).iadd(msg));
    s = s.umod(this.n);
    if (s.cmpn(0) === 0)
      continue;

    var recoveryParam = (kp.getY().isOdd() ? 1 : 0) |
                        (kpX.cmp(r) !== 0 ? 2 : 0);

    // Use complement of `s`, if it is > `n / 2`
    if (options.canonical && s.cmp(this.nh) > 0) {
      s = this.n.sub(s);
      recoveryParam ^= 1;
    }

    return new Signature({ r: r, s: s, recoveryParam: recoveryParam });
  }
};

EC.prototype.verify = function verify(msg, signature, key, enc) {
  msg = this._truncateToN(new BN(msg, 16));
  key = this.keyFromPublic(key, enc);
  signature = new Signature(signature, 'hex');

  // Perform primitive values validation
  var r = signature.r;
  var s = signature.s;
  if (r.cmpn(1) < 0 || r.cmp(this.n) >= 0)
    return false;
  if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0)
    return false;

  // Validate signature
  var sinv = s.invm(this.n);
  var u1 = sinv.mul(msg).umod(this.n);
  var u2 = sinv.mul(r).umod(this.n);
  var p;

  if (!this.curve._maxwellTrick) {
    p = this.g.mulAdd(u1, key.getPublic(), u2);
    if (p.isInfinity())
      return false;

    return p.getX().umod(this.n).cmp(r) === 0;
  }

  // NOTE: Greg Maxwell's trick, inspired by:
  // https://git.io/vad3K

  p = this.g.jmulAdd(u1, key.getPublic(), u2);
  if (p.isInfinity())
    return false;

  // Compare `p.x` of Jacobian point with `r`,
  // this will do `p.x == r * p.z^2` instead of multiplying `p.x` by the
  // inverse of `p.z^2`
  return p.eqXToP(r);
};

EC.prototype.recoverPubKey = function(msg, signature, j, enc) {
  assert((3 & j) === j, 'The recovery param is more than two bits');
  signature = new Signature(signature, enc);

  var n = this.n;
  var e = new BN(msg);
  var r = signature.r;
  var s = signature.s;

  // A set LSB signifies that the y-coordinate is odd
  var isYOdd = j & 1;
  var isSecondKey = j >> 1;
  if (r.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey)
    throw new Error('Unable to find sencond key candinate');

  // 1.1. Let x = r + jn.
  if (isSecondKey)
    r = this.curve.pointFromX(r.add(this.curve.n), isYOdd);
  else
    r = this.curve.pointFromX(r, isYOdd);

  var rInv = signature.r.invm(n);
  var s1 = n.sub(e).mul(rInv).umod(n);
  var s2 = s.mul(rInv).umod(n);

  // 1.6.1 Compute Q = r^-1 (sR -  eG)
  //               Q = r^-1 (sR + -eG)
  return this.g.mulAdd(s1, r, s2);
};

EC.prototype.getKeyRecoveryParam = function(e, signature, Q, enc) {
  signature = new Signature(signature, enc);
  if (signature.recoveryParam !== null)
    return signature.recoveryParam;

  for (var i = 0; i < 4; i++) {
    var Qprime;
    try {
      Qprime = this.recoverPubKey(e, signature, i);
    } catch (e) {
      continue;
    }

    if (Qprime.eq(Q))
      return i;
  }
  throw new Error('Unable to find valid recovery factor');
};

},{"../curves":78,"../utils":86,"./key":80,"./signature":81,"bn.js":62,"brorand":63,"hmac-drbg":101}],80:[function(require,module,exports){
'use strict';

var BN = require('bn.js');
var utils = require('../utils');
var assert = utils.assert;

function KeyPair(ec, options) {
  this.ec = ec;
  this.priv = null;
  this.pub = null;

  // KeyPair(ec, { priv: ..., pub: ... })
  if (options.priv)
    this._importPrivate(options.priv, options.privEnc);
  if (options.pub)
    this._importPublic(options.pub, options.pubEnc);
}
module.exports = KeyPair;

KeyPair.fromPublic = function fromPublic(ec, pub, enc) {
  if (pub instanceof KeyPair)
    return pub;

  return new KeyPair(ec, {
    pub: pub,
    pubEnc: enc,
  });
};

KeyPair.fromPrivate = function fromPrivate(ec, priv, enc) {
  if (priv instanceof KeyPair)
    return priv;

  return new KeyPair(ec, {
    priv: priv,
    privEnc: enc,
  });
};

KeyPair.prototype.validate = function validate() {
  var pub = this.getPublic();

  if (pub.isInfinity())
    return { result: false, reason: 'Invalid public key' };
  if (!pub.validate())
    return { result: false, reason: 'Public key is not a point' };
  if (!pub.mul(this.ec.curve.n).isInfinity())
    return { result: false, reason: 'Public key * N != O' };

  return { result: true, reason: null };
};

KeyPair.prototype.getPublic = function getPublic(compact, enc) {
  // compact is optional argument
  if (typeof compact === 'string') {
    enc = compact;
    compact = null;
  }

  if (!this.pub)
    this.pub = this.ec.g.mul(this.priv);

  if (!enc)
    return this.pub;

  return this.pub.encode(enc, compact);
};

KeyPair.prototype.getPrivate = function getPrivate(enc) {
  if (enc === 'hex')
    return this.priv.toString(16, 2);
  else
    return this.priv;
};

KeyPair.prototype._importPrivate = function _importPrivate(key, enc) {
  this.priv = new BN(key, enc || 16);

  // Ensure that the priv won't be bigger than n, otherwise we may fail
  // in fixed multiplication method
  this.priv = this.priv.umod(this.ec.curve.n);
};

KeyPair.prototype._importPublic = function _importPublic(key, enc) {
  if (key.x || key.y) {
    // Montgomery points only have an `x` coordinate.
    // Weierstrass/Edwards points on the other hand have both `x` and
    // `y` coordinates.
    if (this.ec.curve.type === 'mont') {
      assert(key.x, 'Need x coordinate');
    } else if (this.ec.curve.type === 'short' ||
               this.ec.curve.type === 'edwards') {
      assert(key.x && key.y, 'Need both x and y coordinate');
    }
    this.pub = this.ec.curve.point(key.x, key.y);
    return;
  }
  this.pub = this.ec.curve.decodePoint(key, enc);
};

// ECDH
KeyPair.prototype.derive = function derive(pub) {
  if(!pub.validate()) {
    assert(pub.validate(), 'public point not validated');
  }
  return pub.mul(this.priv).getX();
};

// ECDSA
KeyPair.prototype.sign = function sign(msg, enc, options) {
  return this.ec.sign(msg, this, enc, options);
};

KeyPair.prototype.verify = function verify(msg, signature) {
  return this.ec.verify(msg, signature, this);
};

KeyPair.prototype.inspect = function inspect() {
  return '<Key priv: ' + (this.priv && this.priv.toString(16, 2)) +
         ' pub: ' + (this.pub && this.pub.inspect()) + ' >';
};

},{"../utils":86,"bn.js":62}],81:[function(require,module,exports){
'use strict';

var BN = require('bn.js');

var utils = require('../utils');
var assert = utils.assert;

function Signature(options, enc) {
  if (options instanceof Signature)
    return options;

  if (this._importDER(options, enc))
    return;

  assert(options.r && options.s, 'Signature without r or s');
  this.r = new BN(options.r, 16);
  this.s = new BN(options.s, 16);
  if (options.recoveryParam === undefined)
    this.recoveryParam = null;
  else
    this.recoveryParam = options.recoveryParam;
}
module.exports = Signature;

function Position() {
  this.place = 0;
}

function getLength(buf, p) {
  var initial = buf[p.place++];
  if (!(initial & 0x80)) {
    return initial;
  }
  var octetLen = initial & 0xf;

  // Indefinite length or overflow
  if (octetLen === 0 || octetLen > 4) {
    return false;
  }

  var val = 0;
  for (var i = 0, off = p.place; i < octetLen; i++, off++) {
    val <<= 8;
    val |= buf[off];
    val >>>= 0;
  }

  // Leading zeroes
  if (val <= 0x7f) {
    return false;
  }

  p.place = off;
  return val;
}

function rmPadding(buf) {
  var i = 0;
  var len = buf.length - 1;
  while (!buf[i] && !(buf[i + 1] & 0x80) && i < len) {
    i++;
  }
  if (i === 0) {
    return buf;
  }
  return buf.slice(i);
}

Signature.prototype._importDER = function _importDER(data, enc) {
  data = utils.toArray(data, enc);
  var p = new Position();
  if (data[p.place++] !== 0x30) {
    return false;
  }
  var len = getLength(data, p);
  if (len === false) {
    return false;
  }
  if ((len + p.place) !== data.length) {
    return false;
  }
  if (data[p.place++] !== 0x02) {
    return false;
  }
  var rlen = getLength(data, p);
  if (rlen === false) {
    return false;
  }
  var r = data.slice(p.place, rlen + p.place);
  p.place += rlen;
  if (data[p.place++] !== 0x02) {
    return false;
  }
  var slen = getLength(data, p);
  if (slen === false) {
    return false;
  }
  if (data.length !== slen + p.place) {
    return false;
  }
  var s = data.slice(p.place, slen + p.place);
  if (r[0] === 0) {
    if (r[1] & 0x80) {
      r = r.slice(1);
    } else {
      // Leading zeroes
      return false;
    }
  }
  if (s[0] === 0) {
    if (s[1] & 0x80) {
      s = s.slice(1);
    } else {
      // Leading zeroes
      return false;
    }
  }

  this.r = new BN(r);
  this.s = new BN(s);
  this.recoveryParam = null;

  return true;
};

function constructLength(arr, len) {
  if (len < 0x80) {
    arr.push(len);
    return;
  }
  var octets = 1 + (Math.log(len) / Math.LN2 >>> 3);
  arr.push(octets | 0x80);
  while (--octets) {
    arr.push((len >>> (octets << 3)) & 0xff);
  }
  arr.push(len);
}

Signature.prototype.toDER = function toDER(enc) {
  var r = this.r.toArray();
  var s = this.s.toArray();

  // Pad values
  if (r[0] & 0x80)
    r = [ 0 ].concat(r);
  // Pad values
  if (s[0] & 0x80)
    s = [ 0 ].concat(s);

  r = rmPadding(r);
  s = rmPadding(s);

  while (!s[0] && !(s[1] & 0x80)) {
    s = s.slice(1);
  }
  var arr = [ 0x02 ];
  constructLength(arr, r.length);
  arr = arr.concat(r);
  arr.push(0x02);
  constructLength(arr, s.length);
  var backHalf = arr.concat(s);
  var res = [ 0x30 ];
  constructLength(res, backHalf.length);
  res = res.concat(backHalf);
  return utils.encode(res, enc);
};

},{"../utils":86,"bn.js":62}],82:[function(require,module,exports){
'use strict';

var hash = require('hash.js');
var curves = require('../curves');
var utils = require('../utils');
var assert = utils.assert;
var parseBytes = utils.parseBytes;
var KeyPair = require('./key');
var Signature = require('./signature');

function EDDSA(curve) {
  assert(curve === 'ed25519', 'only tested with ed25519 so far');

  if (!(this instanceof EDDSA))
    return new EDDSA(curve);

  curve = curves[curve].curve;
  this.curve = curve;
  this.g = curve.g;
  this.g.precompute(curve.n.bitLength() + 1);

  this.pointClass = curve.point().constructor;
  this.encodingLength = Math.ceil(curve.n.bitLength() / 8);
  this.hash = hash.sha512;
}

module.exports = EDDSA;

/**
* @param {Array|String} message - message bytes
* @param {Array|String|KeyPair} secret - secret bytes or a keypair
* @returns {Signature} - signature
*/
EDDSA.prototype.sign = function sign(message, secret) {
  message = parseBytes(message);
  var key = this.keyFromSecret(secret);
  var r = this.hashInt(key.messagePrefix(), message);
  var R = this.g.mul(r);
  var Rencoded = this.encodePoint(R);
  var s_ = this.hashInt(Rencoded, key.pubBytes(), message)
    .mul(key.priv());
  var S = r.add(s_).umod(this.curve.n);
  return this.makeSignature({ R: R, S: S, Rencoded: Rencoded });
};

/**
* @param {Array} message - message bytes
* @param {Array|String|Signature} sig - sig bytes
* @param {Array|String|Point|KeyPair} pub - public key
* @returns {Boolean} - true if public key matches sig of message
*/
EDDSA.prototype.verify = function verify(message, sig, pub) {
  message = parseBytes(message);
  sig = this.makeSignature(sig);
  var key = this.keyFromPublic(pub);
  var h = this.hashInt(sig.Rencoded(), key.pubBytes(), message);
  var SG = this.g.mul(sig.S());
  var RplusAh = sig.R().add(key.pub().mul(h));
  return RplusAh.eq(SG);
};

EDDSA.prototype.hashInt = function hashInt() {
  var hash = this.hash();
  for (var i = 0; i < arguments.length; i++)
    hash.update(arguments[i]);
  return utils.intFromLE(hash.digest()).umod(this.curve.n);
};

EDDSA.prototype.keyFromPublic = function keyFromPublic(pub) {
  return KeyPair.fromPublic(this, pub);
};

EDDSA.prototype.keyFromSecret = function keyFromSecret(secret) {
  return KeyPair.fromSecret(this, secret);
};

EDDSA.prototype.makeSignature = function makeSignature(sig) {
  if (sig instanceof Signature)
    return sig;
  return new Signature(this, sig);
};

/**
* * https://tools.ietf.org/html/draft-josefsson-eddsa-ed25519-03#section-5.2
*
* EDDSA defines methods for encoding and decoding points and integers. These are
* helper convenience methods, that pass along to utility functions implied
* parameters.
*
*/
EDDSA.prototype.encodePoint = function encodePoint(point) {
  var enc = point.getY().toArray('le', this.encodingLength);
  enc[this.encodingLength - 1] |= point.getX().isOdd() ? 0x80 : 0;
  return enc;
};

EDDSA.prototype.decodePoint = function decodePoint(bytes) {
  bytes = utils.parseBytes(bytes);

  var lastIx = bytes.length - 1;
  var normed = bytes.slice(0, lastIx).concat(bytes[lastIx] & ~0x80);
  var xIsOdd = (bytes[lastIx] & 0x80) !== 0;

  var y = utils.intFromLE(normed);
  return this.curve.pointFromY(y, xIsOdd);
};

EDDSA.prototype.encodeInt = function encodeInt(num) {
  return num.toArray('le', this.encodingLength);
};

EDDSA.prototype.decodeInt = function decodeInt(bytes) {
  return utils.intFromLE(bytes);
};

EDDSA.prototype.isPoint = function isPoint(val) {
  return val instanceof this.pointClass;
};

},{"../curves":78,"../utils":86,"./key":83,"./signature":84,"hash.js":89}],83:[function(require,module,exports){
'use strict';

var utils = require('../utils');
var assert = utils.assert;
var parseBytes = utils.parseBytes;
var cachedProperty = utils.cachedProperty;

/**
* @param {EDDSA} eddsa - instance
* @param {Object} params - public/private key parameters
*
* @param {Array<Byte>} [params.secret] - secret seed bytes
* @param {Point} [params.pub] - public key point (aka `A` in eddsa terms)
* @param {Array<Byte>} [params.pub] - public key point encoded as bytes
*
*/
function KeyPair(eddsa, params) {
  this.eddsa = eddsa;
  this._secret = parseBytes(params.secret);
  if (eddsa.isPoint(params.pub))
    this._pub = params.pub;
  else
    this._pubBytes = parseBytes(params.pub);
}

KeyPair.fromPublic = function fromPublic(eddsa, pub) {
  if (pub instanceof KeyPair)
    return pub;
  return new KeyPair(eddsa, { pub: pub });
};

KeyPair.fromSecret = function fromSecret(eddsa, secret) {
  if (secret instanceof KeyPair)
    return secret;
  return new KeyPair(eddsa, { secret: secret });
};

KeyPair.prototype.secret = function secret() {
  return this._secret;
};

cachedProperty(KeyPair, 'pubBytes', function pubBytes() {
  return this.eddsa.encodePoint(this.pub());
});

cachedProperty(KeyPair, 'pub', function pub() {
  if (this._pubBytes)
    return this.eddsa.decodePoint(this._pubBytes);
  return this.eddsa.g.mul(this.priv());
});

cachedProperty(KeyPair, 'privBytes', function privBytes() {
  var eddsa = this.eddsa;
  var hash = this.hash();
  var lastIx = eddsa.encodingLength - 1;

  var a = hash.slice(0, eddsa.encodingLength);
  a[0] &= 248;
  a[lastIx] &= 127;
  a[lastIx] |= 64;

  return a;
});

cachedProperty(KeyPair, 'priv', function priv() {
  return this.eddsa.decodeInt(this.privBytes());
});

cachedProperty(KeyPair, 'hash', function hash() {
  return this.eddsa.hash().update(this.secret()).digest();
});

cachedProperty(KeyPair, 'messagePrefix', function messagePrefix() {
  return this.hash().slice(this.eddsa.encodingLength);
});

KeyPair.prototype.sign = function sign(message) {
  assert(this._secret, 'KeyPair can only verify');
  return this.eddsa.sign(message, this);
};

KeyPair.prototype.verify = function verify(message, sig) {
  return this.eddsa.verify(message, sig, this);
};

KeyPair.prototype.getSecret = function getSecret(enc) {
  assert(this._secret, 'KeyPair is public only');
  return utils.encode(this.secret(), enc);
};

KeyPair.prototype.getPublic = function getPublic(enc) {
  return utils.encode(this.pubBytes(), enc);
};

module.exports = KeyPair;

},{"../utils":86}],84:[function(require,module,exports){
'use strict';

var BN = require('bn.js');
var utils = require('../utils');
var assert = utils.assert;
var cachedProperty = utils.cachedProperty;
var parseBytes = utils.parseBytes;

/**
* @param {EDDSA} eddsa - eddsa instance
* @param {Array<Bytes>|Object} sig -
* @param {Array<Bytes>|Point} [sig.R] - R point as Point or bytes
* @param {Array<Bytes>|bn} [sig.S] - S scalar as bn or bytes
* @param {Array<Bytes>} [sig.Rencoded] - R point encoded
* @param {Array<Bytes>} [sig.Sencoded] - S scalar encoded
*/
function Signature(eddsa, sig) {
  this.eddsa = eddsa;

  if (typeof sig !== 'object')
    sig = parseBytes(sig);

  if (Array.isArray(sig)) {
    sig = {
      R: sig.slice(0, eddsa.encodingLength),
      S: sig.slice(eddsa.encodingLength),
    };
  }

  assert(sig.R && sig.S, 'Signature without R or S');

  if (eddsa.isPoint(sig.R))
    this._R = sig.R;
  if (sig.S instanceof BN)
    this._S = sig.S;

  this._Rencoded = Array.isArray(sig.R) ? sig.R : sig.Rencoded;
  this._Sencoded = Array.isArray(sig.S) ? sig.S : sig.Sencoded;
}

cachedProperty(Signature, 'S', function S() {
  return this.eddsa.decodeInt(this.Sencoded());
});

cachedProperty(Signature, 'R', function R() {
  return this.eddsa.decodePoint(this.Rencoded());
});

cachedProperty(Signature, 'Rencoded', function Rencoded() {
  return this.eddsa.encodePoint(this.R());
});

cachedProperty(Signature, 'Sencoded', function Sencoded() {
  return this.eddsa.encodeInt(this.S());
});

Signature.prototype.toBytes = function toBytes() {
  return this.Rencoded().concat(this.Sencoded());
};

Signature.prototype.toHex = function toHex() {
  return utils.encode(this.toBytes(), 'hex').toUpperCase();
};

module.exports = Signature;

},{"../utils":86,"bn.js":62}],85:[function(require,module,exports){
module.exports = {
  doubles: {
    step: 4,
    points: [
      [
        'e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a',
        'f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821',
      ],
      [
        '8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508',
        '11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf',
      ],
      [
        '175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739',
        'd3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695',
      ],
      [
        '363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640',
        '4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9',
      ],
      [
        '8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c',
        '4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36',
      ],
      [
        '723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda',
        '96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f',
      ],
      [
        'eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa',
        '5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999',
      ],
      [
        '100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0',
        'cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09',
      ],
      [
        'e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d',
        '9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d',
      ],
      [
        'feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d',
        'e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088',
      ],
      [
        'da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1',
        '9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d',
      ],
      [
        '53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0',
        '5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8',
      ],
      [
        '8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047',
        '10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a',
      ],
      [
        '385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862',
        '283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453',
      ],
      [
        '6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7',
        '7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160',
      ],
      [
        '3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd',
        '56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0',
      ],
      [
        '85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83',
        '7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6',
      ],
      [
        '948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a',
        '53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589',
      ],
      [
        '6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8',
        'bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17',
      ],
      [
        'e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d',
        '4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda',
      ],
      [
        'e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725',
        '7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd',
      ],
      [
        '213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754',
        '4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2',
      ],
      [
        '4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c',
        '17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6',
      ],
      [
        'fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6',
        '6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f',
      ],
      [
        '76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39',
        'c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01',
      ],
      [
        'c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891',
        '893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3',
      ],
      [
        'd895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b',
        'febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f',
      ],
      [
        'b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03',
        '2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7',
      ],
      [
        'e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d',
        'eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78',
      ],
      [
        'a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070',
        '7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1',
      ],
      [
        '90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4',
        'e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150',
      ],
      [
        '8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da',
        '662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82',
      ],
      [
        'e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11',
        '1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc',
      ],
      [
        '8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e',
        'efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b',
      ],
      [
        'e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41',
        '2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51',
      ],
      [
        'b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef',
        '67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45',
      ],
      [
        'd68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8',
        'db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120',
      ],
      [
        '324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d',
        '648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84',
      ],
      [
        '4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96',
        '35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d',
      ],
      [
        '9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd',
        'ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d',
      ],
      [
        '6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5',
        '9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8',
      ],
      [
        'a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266',
        '40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8',
      ],
      [
        '7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71',
        '34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac',
      ],
      [
        '928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac',
        'c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f',
      ],
      [
        '85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751',
        '1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962',
      ],
      [
        'ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e',
        '493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907',
      ],
      [
        '827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241',
        'c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec',
      ],
      [
        'eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3',
        'be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d',
      ],
      [
        'e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f',
        '4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414',
      ],
      [
        '1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19',
        'aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd',
      ],
      [
        '146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be',
        'b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0',
      ],
      [
        'fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9',
        '6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811',
      ],
      [
        'da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2',
        '8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1',
      ],
      [
        'a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13',
        '7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c',
      ],
      [
        '174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c',
        'ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73',
      ],
      [
        '959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba',
        '2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd',
      ],
      [
        'd2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151',
        'e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405',
      ],
      [
        '64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073',
        'd99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589',
      ],
      [
        '8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458',
        '38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e',
      ],
      [
        '13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b',
        '69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27',
      ],
      [
        'bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366',
        'd3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1',
      ],
      [
        '8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa',
        '40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482',
      ],
      [
        '8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0',
        '620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945',
      ],
      [
        'dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787',
        '7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573',
      ],
      [
        'f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e',
        'ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82',
      ],
    ],
  },
  naf: {
    wnd: 7,
    points: [
      [
        'f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9',
        '388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672',
      ],
      [
        '2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4',
        'd8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6',
      ],
      [
        '5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc',
        '6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da',
      ],
      [
        'acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe',
        'cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37',
      ],
      [
        '774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb',
        'd984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b',
      ],
      [
        'f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8',
        'ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81',
      ],
      [
        'd7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e',
        '581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58',
      ],
      [
        'defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34',
        '4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77',
      ],
      [
        '2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c',
        '85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a',
      ],
      [
        '352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5',
        '321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c',
      ],
      [
        '2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f',
        '2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67',
      ],
      [
        '9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714',
        '73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402',
      ],
      [
        'daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729',
        'a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55',
      ],
      [
        'c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db',
        '2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482',
      ],
      [
        '6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4',
        'e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82',
      ],
      [
        '1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5',
        'b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396',
      ],
      [
        '605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479',
        '2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49',
      ],
      [
        '62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d',
        '80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf',
      ],
      [
        '80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f',
        '1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a',
      ],
      [
        '7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb',
        'd0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7',
      ],
      [
        'd528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9',
        'eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933',
      ],
      [
        '49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963',
        '758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a',
      ],
      [
        '77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74',
        '958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6',
      ],
      [
        'f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530',
        'e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37',
      ],
      [
        '463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b',
        '5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e',
      ],
      [
        'f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247',
        'cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6',
      ],
      [
        'caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1',
        'cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476',
      ],
      [
        '2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120',
        '4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40',
      ],
      [
        '7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435',
        '91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61',
      ],
      [
        '754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18',
        '673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683',
      ],
      [
        'e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8',
        '59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5',
      ],
      [
        '186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb',
        '3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b',
      ],
      [
        'df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f',
        '55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417',
      ],
      [
        '5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143',
        'efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868',
      ],
      [
        '290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba',
        'e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a',
      ],
      [
        'af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45',
        'f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6',
      ],
      [
        '766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a',
        '744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996',
      ],
      [
        '59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e',
        'c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e',
      ],
      [
        'f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8',
        'e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d',
      ],
      [
        '7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c',
        '30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2',
      ],
      [
        '948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519',
        'e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e',
      ],
      [
        '7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab',
        '100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437',
      ],
      [
        '3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca',
        'ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311',
      ],
      [
        'd3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf',
        '8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4',
      ],
      [
        '1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610',
        '68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575',
      ],
      [
        '733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4',
        'f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d',
      ],
      [
        '15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c',
        'd56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d',
      ],
      [
        'a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940',
        'edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629',
      ],
      [
        'e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980',
        'a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06',
      ],
      [
        '311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3',
        '66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374',
      ],
      [
        '34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf',
        '9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee',
      ],
      [
        'f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63',
        '4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1',
      ],
      [
        'd7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448',
        'fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b',
      ],
      [
        '32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf',
        '5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661',
      ],
      [
        '7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5',
        '8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6',
      ],
      [
        'ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6',
        '8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e',
      ],
      [
        '16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5',
        '5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d',
      ],
      [
        'eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99',
        'f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc',
      ],
      [
        '78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51',
        'f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4',
      ],
      [
        '494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5',
        '42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c',
      ],
      [
        'a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5',
        '204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b',
      ],
      [
        'c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997',
        '4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913',
      ],
      [
        '841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881',
        '73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154',
      ],
      [
        '5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5',
        '39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865',
      ],
      [
        '36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66',
        'd2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc',
      ],
      [
        '336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726',
        'ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224',
      ],
      [
        '8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede',
        '6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e',
      ],
      [
        '1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94',
        '60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6',
      ],
      [
        '85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31',
        '3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511',
      ],
      [
        '29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51',
        'b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b',
      ],
      [
        'a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252',
        'ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2',
      ],
      [
        '4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5',
        'cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c',
      ],
      [
        'd24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b',
        '6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3',
      ],
      [
        'ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4',
        '322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d',
      ],
      [
        'af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f',
        '6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700',
      ],
      [
        'e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889',
        '2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4',
      ],
      [
        '591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246',
        'b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196',
      ],
      [
        '11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984',
        '998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4',
      ],
      [
        '3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a',
        'b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257',
      ],
      [
        'cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030',
        'bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13',
      ],
      [
        'c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197',
        '6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096',
      ],
      [
        'c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593',
        'c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38',
      ],
      [
        'a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef',
        '21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f',
      ],
      [
        '347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38',
        '60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448',
      ],
      [
        'da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a',
        '49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a',
      ],
      [
        'c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111',
        '5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4',
      ],
      [
        '4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502',
        '7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437',
      ],
      [
        '3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea',
        'be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7',
      ],
      [
        'cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26',
        '8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d',
      ],
      [
        'b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986',
        '39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a',
      ],
      [
        'd4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e',
        '62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54',
      ],
      [
        '48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4',
        '25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77',
      ],
      [
        'dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda',
        'ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517',
      ],
      [
        '6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859',
        'cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10',
      ],
      [
        'e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f',
        'f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125',
      ],
      [
        'eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c',
        '6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e',
      ],
      [
        '13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942',
        'fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1',
      ],
      [
        'ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a',
        '1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2',
      ],
      [
        'b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80',
        '5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423',
      ],
      [
        'ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d',
        '438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8',
      ],
      [
        '8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1',
        'cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758',
      ],
      [
        '52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63',
        'c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375',
      ],
      [
        'e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352',
        '6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d',
      ],
      [
        '7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193',
        'ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec',
      ],
      [
        '5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00',
        '9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0',
      ],
      [
        '32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58',
        'ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c',
      ],
      [
        'e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7',
        'd3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4',
      ],
      [
        '8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8',
        'c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f',
      ],
      [
        '4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e',
        '67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649',
      ],
      [
        '3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d',
        'cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826',
      ],
      [
        '674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b',
        '299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5',
      ],
      [
        'd32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f',
        'f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87',
      ],
      [
        '30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6',
        '462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b',
      ],
      [
        'be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297',
        '62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc',
      ],
      [
        '93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a',
        '7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c',
      ],
      [
        'b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c',
        'ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f',
      ],
      [
        'd5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52',
        '4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a',
      ],
      [
        'd3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb',
        'bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46',
      ],
      [
        '463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065',
        'bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f',
      ],
      [
        '7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917',
        '603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03',
      ],
      [
        '74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9',
        'cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08',
      ],
      [
        '30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3',
        '553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8',
      ],
      [
        '9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57',
        '712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373',
      ],
      [
        '176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66',
        'ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3',
      ],
      [
        '75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8',
        '9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8',
      ],
      [
        '809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721',
        '9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1',
      ],
      [
        '1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180',
        '4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9',
      ],
    ],
  },
};

},{}],86:[function(require,module,exports){
'use strict';

var utils = exports;
var BN = require('bn.js');
var minAssert = require('minimalistic-assert');
var minUtils = require('minimalistic-crypto-utils');

utils.assert = minAssert;
utils.toArray = minUtils.toArray;
utils.zero2 = minUtils.zero2;
utils.toHex = minUtils.toHex;
utils.encode = minUtils.encode;

// Represent num in a w-NAF form
function getNAF(num, w, bits) {
  var naf = new Array(Math.max(num.bitLength(), bits) + 1);
  naf.fill(0);

  var ws = 1 << (w + 1);
  var k = num.clone();

  for (var i = 0; i < naf.length; i++) {
    var z;
    var mod = k.andln(ws - 1);
    if (k.isOdd()) {
      if (mod > (ws >> 1) - 1)
        z = (ws >> 1) - mod;
      else
        z = mod;
      k.isubn(z);
    } else {
      z = 0;
    }

    naf[i] = z;
    k.iushrn(1);
  }

  return naf;
}
utils.getNAF = getNAF;

// Represent k1, k2 in a Joint Sparse Form
function getJSF(k1, k2) {
  var jsf = [
    [],
    [],
  ];

  k1 = k1.clone();
  k2 = k2.clone();
  var d1 = 0;
  var d2 = 0;
  var m8;
  while (k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0) {
    // First phase
    var m14 = (k1.andln(3) + d1) & 3;
    var m24 = (k2.andln(3) + d2) & 3;
    if (m14 === 3)
      m14 = -1;
    if (m24 === 3)
      m24 = -1;
    var u1;
    if ((m14 & 1) === 0) {
      u1 = 0;
    } else {
      m8 = (k1.andln(7) + d1) & 7;
      if ((m8 === 3 || m8 === 5) && m24 === 2)
        u1 = -m14;
      else
        u1 = m14;
    }
    jsf[0].push(u1);

    var u2;
    if ((m24 & 1) === 0) {
      u2 = 0;
    } else {
      m8 = (k2.andln(7) + d2) & 7;
      if ((m8 === 3 || m8 === 5) && m14 === 2)
        u2 = -m24;
      else
        u2 = m24;
    }
    jsf[1].push(u2);

    // Second phase
    if (2 * d1 === u1 + 1)
      d1 = 1 - d1;
    if (2 * d2 === u2 + 1)
      d2 = 1 - d2;
    k1.iushrn(1);
    k2.iushrn(1);
  }

  return jsf;
}
utils.getJSF = getJSF;

function cachedProperty(obj, name, computer) {
  var key = '_' + name;
  obj.prototype[name] = function cachedProperty() {
    return this[key] !== undefined ? this[key] :
      this[key] = computer.call(this);
  };
}
utils.cachedProperty = cachedProperty;

function parseBytes(bytes) {
  return typeof bytes === 'string' ? utils.toArray(bytes, 'hex') :
    bytes;
}
utils.parseBytes = parseBytes;

function intFromLE(bytes) {
  return new BN(bytes, 'hex', 'le');
}
utils.intFromLE = intFromLE;


},{"bn.js":62,"minimalistic-assert":106,"minimalistic-crypto-utils":107}],87:[function(require,module,exports){
module.exports={
  "_from": "elliptic@^6.4.0",
  "_id": "elliptic@6.5.4",
  "_inBundle": false,
  "_integrity": "sha512-iLhC6ULemrljPZb+QutR5TQGB+pdW6KGD5RSegS+8sorOZT+rdQFbsQFJgvN3eRqNALqJer4oQ16YvJHlU8hzQ==",
  "_location": "/elliptic",
  "_phantomChildren": {},
  "_requested": {
    "type": "range",
    "registry": true,
    "raw": "elliptic@^6.4.0",
    "name": "elliptic",
    "escapedName": "elliptic",
    "rawSpec": "^6.4.0",
    "saveSpec": null,
    "fetchSpec": "^6.4.0"
  },
  "_requiredBy": [
    "/tiny-secp256k1"
  ],
  "_resolved": "https://registry.npmjs.org/elliptic/-/elliptic-6.5.4.tgz",
  "_shasum": "da37cebd31e79a1367e941b592ed1fbebd58abbb",
  "_spec": "elliptic@^6.4.0",
  "_where": "/home/tiero/projects/vulpem/liquidjs-lib/node_modules/tiny-secp256k1",
  "author": {
    "name": "Fedor Indutny",
    "email": "fedor@indutny.com"
  },
  "bugs": {
    "url": "https://github.com/indutny/elliptic/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "bn.js": "^4.11.9",
    "brorand": "^1.1.0",
    "hash.js": "^1.0.0",
    "hmac-drbg": "^1.0.1",
    "inherits": "^2.0.4",
    "minimalistic-assert": "^1.0.1",
    "minimalistic-crypto-utils": "^1.0.1"
  },
  "deprecated": false,
  "description": "EC cryptography",
  "devDependencies": {
    "brfs": "^2.0.2",
    "coveralls": "^3.1.0",
    "eslint": "^7.6.0",
    "grunt": "^1.2.1",
    "grunt-browserify": "^5.3.0",
    "grunt-cli": "^1.3.2",
    "grunt-contrib-connect": "^3.0.0",
    "grunt-contrib-copy": "^1.0.0",
    "grunt-contrib-uglify": "^5.0.0",
    "grunt-mocha-istanbul": "^5.0.2",
    "grunt-saucelabs": "^9.0.1",
    "istanbul": "^0.4.5",
    "mocha": "^8.0.1"
  },
  "files": [
    "lib"
  ],
  "homepage": "https://github.com/indutny/elliptic",
  "keywords": [
    "EC",
    "Elliptic",
    "curve",
    "Cryptography"
  ],
  "license": "MIT",
  "main": "lib/elliptic.js",
  "name": "elliptic",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/indutny/elliptic.git"
  },
  "scripts": {
    "lint": "eslint lib test",
    "lint:fix": "npm run lint -- --fix",
    "test": "npm run lint && npm run unit",
    "unit": "istanbul test _mocha --reporter=spec test/index.js",
    "version": "grunt dist && git add dist/"
  },
  "version": "6.5.4"
}

},{}],88:[function(require,module,exports){
'use strict'
var Buffer = require('safe-buffer').Buffer
var Transform = require('readable-stream').Transform
var inherits = require('inherits')

function throwIfNotStringOrBuffer (val, prefix) {
  if (!Buffer.isBuffer(val) && typeof val !== 'string') {
    throw new TypeError(prefix + ' must be a string or a buffer')
  }
}

function HashBase (blockSize) {
  Transform.call(this)

  this._block = Buffer.allocUnsafe(blockSize)
  this._blockSize = blockSize
  this._blockOffset = 0
  this._length = [0, 0, 0, 0]

  this._finalized = false
}

inherits(HashBase, Transform)

HashBase.prototype._transform = function (chunk, encoding, callback) {
  var error = null
  try {
    this.update(chunk, encoding)
  } catch (err) {
    error = err
  }

  callback(error)
}

HashBase.prototype._flush = function (callback) {
  var error = null
  try {
    this.push(this.digest())
  } catch (err) {
    error = err
  }

  callback(error)
}

HashBase.prototype.update = function (data, encoding) {
  throwIfNotStringOrBuffer(data, 'Data')
  if (this._finalized) throw new Error('Digest already called')
  if (!Buffer.isBuffer(data)) data = Buffer.from(data, encoding)

  // consume data
  var block = this._block
  var offset = 0
  while (this._blockOffset + data.length - offset >= this._blockSize) {
    for (var i = this._blockOffset; i < this._blockSize;) block[i++] = data[offset++]
    this._update()
    this._blockOffset = 0
  }
  while (offset < data.length) block[this._blockOffset++] = data[offset++]

  // update length
  for (var j = 0, carry = data.length * 8; carry > 0; ++j) {
    this._length[j] += carry
    carry = (this._length[j] / 0x0100000000) | 0
    if (carry > 0) this._length[j] -= 0x0100000000 * carry
  }

  return this
}

HashBase.prototype._update = function () {
  throw new Error('_update is not implemented')
}

HashBase.prototype.digest = function (encoding) {
  if (this._finalized) throw new Error('Digest already called')
  this._finalized = true

  var digest = this._digest()
  if (encoding !== undefined) digest = digest.toString(encoding)

  // reset state
  this._block.fill(0)
  this._blockOffset = 0
  for (var i = 0; i < 4; ++i) this._length[i] = 0

  return digest
}

HashBase.prototype._digest = function () {
  throw new Error('_digest is not implemented')
}

module.exports = HashBase

},{"inherits":102,"readable-stream":124,"safe-buffer":126}],89:[function(require,module,exports){
var hash = exports;

hash.utils = require('./hash/utils');
hash.common = require('./hash/common');
hash.sha = require('./hash/sha');
hash.ripemd = require('./hash/ripemd');
hash.hmac = require('./hash/hmac');

// Proxy hash functions to the main object
hash.sha1 = hash.sha.sha1;
hash.sha256 = hash.sha.sha256;
hash.sha224 = hash.sha.sha224;
hash.sha384 = hash.sha.sha384;
hash.sha512 = hash.sha.sha512;
hash.ripemd160 = hash.ripemd.ripemd160;

},{"./hash/common":90,"./hash/hmac":91,"./hash/ripemd":92,"./hash/sha":93,"./hash/utils":100}],90:[function(require,module,exports){
'use strict';

var utils = require('./utils');
var assert = require('minimalistic-assert');

function BlockHash() {
  this.pending = null;
  this.pendingTotal = 0;
  this.blockSize = this.constructor.blockSize;
  this.outSize = this.constructor.outSize;
  this.hmacStrength = this.constructor.hmacStrength;
  this.padLength = this.constructor.padLength / 8;
  this.endian = 'big';

  this._delta8 = this.blockSize / 8;
  this._delta32 = this.blockSize / 32;
}
exports.BlockHash = BlockHash;

BlockHash.prototype.update = function update(msg, enc) {
  // Convert message to array, pad it, and join into 32bit blocks
  msg = utils.toArray(msg, enc);
  if (!this.pending)
    this.pending = msg;
  else
    this.pending = this.pending.concat(msg);
  this.pendingTotal += msg.length;

  // Enough data, try updating
  if (this.pending.length >= this._delta8) {
    msg = this.pending;

    // Process pending data in blocks
    var r = msg.length % this._delta8;
    this.pending = msg.slice(msg.length - r, msg.length);
    if (this.pending.length === 0)
      this.pending = null;

    msg = utils.join32(msg, 0, msg.length - r, this.endian);
    for (var i = 0; i < msg.length; i += this._delta32)
      this._update(msg, i, i + this._delta32);
  }

  return this;
};

BlockHash.prototype.digest = function digest(enc) {
  this.update(this._pad());
  assert(this.pending === null);

  return this._digest(enc);
};

BlockHash.prototype._pad = function pad() {
  var len = this.pendingTotal;
  var bytes = this._delta8;
  var k = bytes - ((len + this.padLength) % bytes);
  var res = new Array(k + this.padLength);
  res[0] = 0x80;
  for (var i = 1; i < k; i++)
    res[i] = 0;

  // Append length
  len <<= 3;
  if (this.endian === 'big') {
    for (var t = 8; t < this.padLength; t++)
      res[i++] = 0;

    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = (len >>> 24) & 0xff;
    res[i++] = (len >>> 16) & 0xff;
    res[i++] = (len >>> 8) & 0xff;
    res[i++] = len & 0xff;
  } else {
    res[i++] = len & 0xff;
    res[i++] = (len >>> 8) & 0xff;
    res[i++] = (len >>> 16) & 0xff;
    res[i++] = (len >>> 24) & 0xff;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;

    for (t = 8; t < this.padLength; t++)
      res[i++] = 0;
  }

  return res;
};

},{"./utils":100,"minimalistic-assert":106}],91:[function(require,module,exports){
'use strict';

var utils = require('./utils');
var assert = require('minimalistic-assert');

function Hmac(hash, key, enc) {
  if (!(this instanceof Hmac))
    return new Hmac(hash, key, enc);
  this.Hash = hash;
  this.blockSize = hash.blockSize / 8;
  this.outSize = hash.outSize / 8;
  this.inner = null;
  this.outer = null;

  this._init(utils.toArray(key, enc));
}
module.exports = Hmac;

Hmac.prototype._init = function init(key) {
  // Shorten key, if needed
  if (key.length > this.blockSize)
    key = new this.Hash().update(key).digest();
  assert(key.length <= this.blockSize);

  // Add padding to key
  for (var i = key.length; i < this.blockSize; i++)
    key.push(0);

  for (i = 0; i < key.length; i++)
    key[i] ^= 0x36;
  this.inner = new this.Hash().update(key);

  // 0x36 ^ 0x5c = 0x6a
  for (i = 0; i < key.length; i++)
    key[i] ^= 0x6a;
  this.outer = new this.Hash().update(key);
};

Hmac.prototype.update = function update(msg, enc) {
  this.inner.update(msg, enc);
  return this;
};

Hmac.prototype.digest = function digest(enc) {
  this.outer.update(this.inner.digest());
  return this.outer.digest(enc);
};

},{"./utils":100,"minimalistic-assert":106}],92:[function(require,module,exports){
'use strict';

var utils = require('./utils');
var common = require('./common');

var rotl32 = utils.rotl32;
var sum32 = utils.sum32;
var sum32_3 = utils.sum32_3;
var sum32_4 = utils.sum32_4;
var BlockHash = common.BlockHash;

function RIPEMD160() {
  if (!(this instanceof RIPEMD160))
    return new RIPEMD160();

  BlockHash.call(this);

  this.h = [ 0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0 ];
  this.endian = 'little';
}
utils.inherits(RIPEMD160, BlockHash);
exports.ripemd160 = RIPEMD160;

RIPEMD160.blockSize = 512;
RIPEMD160.outSize = 160;
RIPEMD160.hmacStrength = 192;
RIPEMD160.padLength = 64;

RIPEMD160.prototype._update = function update(msg, start) {
  var A = this.h[0];
  var B = this.h[1];
  var C = this.h[2];
  var D = this.h[3];
  var E = this.h[4];
  var Ah = A;
  var Bh = B;
  var Ch = C;
  var Dh = D;
  var Eh = E;
  for (var j = 0; j < 80; j++) {
    var T = sum32(
      rotl32(
        sum32_4(A, f(j, B, C, D), msg[r[j] + start], K(j)),
        s[j]),
      E);
    A = E;
    E = D;
    D = rotl32(C, 10);
    C = B;
    B = T;
    T = sum32(
      rotl32(
        sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)),
        sh[j]),
      Eh);
    Ah = Eh;
    Eh = Dh;
    Dh = rotl32(Ch, 10);
    Ch = Bh;
    Bh = T;
  }
  T = sum32_3(this.h[1], C, Dh);
  this.h[1] = sum32_3(this.h[2], D, Eh);
  this.h[2] = sum32_3(this.h[3], E, Ah);
  this.h[3] = sum32_3(this.h[4], A, Bh);
  this.h[4] = sum32_3(this.h[0], B, Ch);
  this.h[0] = T;
};

RIPEMD160.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'little');
  else
    return utils.split32(this.h, 'little');
};

function f(j, x, y, z) {
  if (j <= 15)
    return x ^ y ^ z;
  else if (j <= 31)
    return (x & y) | ((~x) & z);
  else if (j <= 47)
    return (x | (~y)) ^ z;
  else if (j <= 63)
    return (x & z) | (y & (~z));
  else
    return x ^ (y | (~z));
}

function K(j) {
  if (j <= 15)
    return 0x00000000;
  else if (j <= 31)
    return 0x5a827999;
  else if (j <= 47)
    return 0x6ed9eba1;
  else if (j <= 63)
    return 0x8f1bbcdc;
  else
    return 0xa953fd4e;
}

function Kh(j) {
  if (j <= 15)
    return 0x50a28be6;
  else if (j <= 31)
    return 0x5c4dd124;
  else if (j <= 47)
    return 0x6d703ef3;
  else if (j <= 63)
    return 0x7a6d76e9;
  else
    return 0x00000000;
}

var r = [
  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
  7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,
  3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,
  1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,
  4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13
];

var rh = [
  5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,
  6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,
  15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,
  8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,
  12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11
];

var s = [
  11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,
  7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,
  11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,
  11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,
  9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6
];

var sh = [
  8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,
  9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,
  9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,
  15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,
  8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11
];

},{"./common":90,"./utils":100}],93:[function(require,module,exports){
'use strict';

exports.sha1 = require('./sha/1');
exports.sha224 = require('./sha/224');
exports.sha256 = require('./sha/256');
exports.sha384 = require('./sha/384');
exports.sha512 = require('./sha/512');

},{"./sha/1":94,"./sha/224":95,"./sha/256":96,"./sha/384":97,"./sha/512":98}],94:[function(require,module,exports){
'use strict';

var utils = require('../utils');
var common = require('../common');
var shaCommon = require('./common');

var rotl32 = utils.rotl32;
var sum32 = utils.sum32;
var sum32_5 = utils.sum32_5;
var ft_1 = shaCommon.ft_1;
var BlockHash = common.BlockHash;

var sha1_K = [
  0x5A827999, 0x6ED9EBA1,
  0x8F1BBCDC, 0xCA62C1D6
];

function SHA1() {
  if (!(this instanceof SHA1))
    return new SHA1();

  BlockHash.call(this);
  this.h = [
    0x67452301, 0xefcdab89, 0x98badcfe,
    0x10325476, 0xc3d2e1f0 ];
  this.W = new Array(80);
}

utils.inherits(SHA1, BlockHash);
module.exports = SHA1;

SHA1.blockSize = 512;
SHA1.outSize = 160;
SHA1.hmacStrength = 80;
SHA1.padLength = 64;

SHA1.prototype._update = function _update(msg, start) {
  var W = this.W;

  for (var i = 0; i < 16; i++)
    W[i] = msg[start + i];

  for(; i < W.length; i++)
    W[i] = rotl32(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);

  var a = this.h[0];
  var b = this.h[1];
  var c = this.h[2];
  var d = this.h[3];
  var e = this.h[4];

  for (i = 0; i < W.length; i++) {
    var s = ~~(i / 20);
    var t = sum32_5(rotl32(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);
    e = d;
    d = c;
    c = rotl32(b, 30);
    b = a;
    a = t;
  }

  this.h[0] = sum32(this.h[0], a);
  this.h[1] = sum32(this.h[1], b);
  this.h[2] = sum32(this.h[2], c);
  this.h[3] = sum32(this.h[3], d);
  this.h[4] = sum32(this.h[4], e);
};

SHA1.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'big');
  else
    return utils.split32(this.h, 'big');
};

},{"../common":90,"../utils":100,"./common":99}],95:[function(require,module,exports){
'use strict';

var utils = require('../utils');
var SHA256 = require('./256');

function SHA224() {
  if (!(this instanceof SHA224))
    return new SHA224();

  SHA256.call(this);
  this.h = [
    0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,
    0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4 ];
}
utils.inherits(SHA224, SHA256);
module.exports = SHA224;

SHA224.blockSize = 512;
SHA224.outSize = 224;
SHA224.hmacStrength = 192;
SHA224.padLength = 64;

SHA224.prototype._digest = function digest(enc) {
  // Just truncate output
  if (enc === 'hex')
    return utils.toHex32(this.h.slice(0, 7), 'big');
  else
    return utils.split32(this.h.slice(0, 7), 'big');
};


},{"../utils":100,"./256":96}],96:[function(require,module,exports){
'use strict';

var utils = require('../utils');
var common = require('../common');
var shaCommon = require('./common');
var assert = require('minimalistic-assert');

var sum32 = utils.sum32;
var sum32_4 = utils.sum32_4;
var sum32_5 = utils.sum32_5;
var ch32 = shaCommon.ch32;
var maj32 = shaCommon.maj32;
var s0_256 = shaCommon.s0_256;
var s1_256 = shaCommon.s1_256;
var g0_256 = shaCommon.g0_256;
var g1_256 = shaCommon.g1_256;

var BlockHash = common.BlockHash;

var sha256_K = [
  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,
  0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,
  0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,
  0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,
  0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,
  0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,
  0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,
  0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
  0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
];

function SHA256() {
  if (!(this instanceof SHA256))
    return new SHA256();

  BlockHash.call(this);
  this.h = [
    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,
    0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19
  ];
  this.k = sha256_K;
  this.W = new Array(64);
}
utils.inherits(SHA256, BlockHash);
module.exports = SHA256;

SHA256.blockSize = 512;
SHA256.outSize = 256;
SHA256.hmacStrength = 192;
SHA256.padLength = 64;

SHA256.prototype._update = function _update(msg, start) {
  var W = this.W;

  for (var i = 0; i < 16; i++)
    W[i] = msg[start + i];
  for (; i < W.length; i++)
    W[i] = sum32_4(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);

  var a = this.h[0];
  var b = this.h[1];
  var c = this.h[2];
  var d = this.h[3];
  var e = this.h[4];
  var f = this.h[5];
  var g = this.h[6];
  var h = this.h[7];

  assert(this.k.length === W.length);
  for (i = 0; i < W.length; i++) {
    var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);
    var T2 = sum32(s0_256(a), maj32(a, b, c));
    h = g;
    g = f;
    f = e;
    e = sum32(d, T1);
    d = c;
    c = b;
    b = a;
    a = sum32(T1, T2);
  }

  this.h[0] = sum32(this.h[0], a);
  this.h[1] = sum32(this.h[1], b);
  this.h[2] = sum32(this.h[2], c);
  this.h[3] = sum32(this.h[3], d);
  this.h[4] = sum32(this.h[4], e);
  this.h[5] = sum32(this.h[5], f);
  this.h[6] = sum32(this.h[6], g);
  this.h[7] = sum32(this.h[7], h);
};

SHA256.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'big');
  else
    return utils.split32(this.h, 'big');
};

},{"../common":90,"../utils":100,"./common":99,"minimalistic-assert":106}],97:[function(require,module,exports){
'use strict';

var utils = require('../utils');

var SHA512 = require('./512');

function SHA384() {
  if (!(this instanceof SHA384))
    return new SHA384();

  SHA512.call(this);
  this.h = [
    0xcbbb9d5d, 0xc1059ed8,
    0x629a292a, 0x367cd507,
    0x9159015a, 0x3070dd17,
    0x152fecd8, 0xf70e5939,
    0x67332667, 0xffc00b31,
    0x8eb44a87, 0x68581511,
    0xdb0c2e0d, 0x64f98fa7,
    0x47b5481d, 0xbefa4fa4 ];
}
utils.inherits(SHA384, SHA512);
module.exports = SHA384;

SHA384.blockSize = 1024;
SHA384.outSize = 384;
SHA384.hmacStrength = 192;
SHA384.padLength = 128;

SHA384.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h.slice(0, 12), 'big');
  else
    return utils.split32(this.h.slice(0, 12), 'big');
};

},{"../utils":100,"./512":98}],98:[function(require,module,exports){
'use strict';

var utils = require('../utils');
var common = require('../common');
var assert = require('minimalistic-assert');

var rotr64_hi = utils.rotr64_hi;
var rotr64_lo = utils.rotr64_lo;
var shr64_hi = utils.shr64_hi;
var shr64_lo = utils.shr64_lo;
var sum64 = utils.sum64;
var sum64_hi = utils.sum64_hi;
var sum64_lo = utils.sum64_lo;
var sum64_4_hi = utils.sum64_4_hi;
var sum64_4_lo = utils.sum64_4_lo;
var sum64_5_hi = utils.sum64_5_hi;
var sum64_5_lo = utils.sum64_5_lo;

var BlockHash = common.BlockHash;

var sha512_K = [
  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
];

function SHA512() {
  if (!(this instanceof SHA512))
    return new SHA512();

  BlockHash.call(this);
  this.h = [
    0x6a09e667, 0xf3bcc908,
    0xbb67ae85, 0x84caa73b,
    0x3c6ef372, 0xfe94f82b,
    0xa54ff53a, 0x5f1d36f1,
    0x510e527f, 0xade682d1,
    0x9b05688c, 0x2b3e6c1f,
    0x1f83d9ab, 0xfb41bd6b,
    0x5be0cd19, 0x137e2179 ];
  this.k = sha512_K;
  this.W = new Array(160);
}
utils.inherits(SHA512, BlockHash);
module.exports = SHA512;

SHA512.blockSize = 1024;
SHA512.outSize = 512;
SHA512.hmacStrength = 192;
SHA512.padLength = 128;

SHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {
  var W = this.W;

  // 32 x 32bit words
  for (var i = 0; i < 32; i++)
    W[i] = msg[start + i];
  for (; i < W.length; i += 2) {
    var c0_hi = g1_512_hi(W[i - 4], W[i - 3]);  // i - 2
    var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);
    var c1_hi = W[i - 14];  // i - 7
    var c1_lo = W[i - 13];
    var c2_hi = g0_512_hi(W[i - 30], W[i - 29]);  // i - 15
    var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);
    var c3_hi = W[i - 32];  // i - 16
    var c3_lo = W[i - 31];

    W[i] = sum64_4_hi(
      c0_hi, c0_lo,
      c1_hi, c1_lo,
      c2_hi, c2_lo,
      c3_hi, c3_lo);
    W[i + 1] = sum64_4_lo(
      c0_hi, c0_lo,
      c1_hi, c1_lo,
      c2_hi, c2_lo,
      c3_hi, c3_lo);
  }
};

SHA512.prototype._update = function _update(msg, start) {
  this._prepareBlock(msg, start);

  var W = this.W;

  var ah = this.h[0];
  var al = this.h[1];
  var bh = this.h[2];
  var bl = this.h[3];
  var ch = this.h[4];
  var cl = this.h[5];
  var dh = this.h[6];
  var dl = this.h[7];
  var eh = this.h[8];
  var el = this.h[9];
  var fh = this.h[10];
  var fl = this.h[11];
  var gh = this.h[12];
  var gl = this.h[13];
  var hh = this.h[14];
  var hl = this.h[15];

  assert(this.k.length === W.length);
  for (var i = 0; i < W.length; i += 2) {
    var c0_hi = hh;
    var c0_lo = hl;
    var c1_hi = s1_512_hi(eh, el);
    var c1_lo = s1_512_lo(eh, el);
    var c2_hi = ch64_hi(eh, el, fh, fl, gh, gl);
    var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);
    var c3_hi = this.k[i];
    var c3_lo = this.k[i + 1];
    var c4_hi = W[i];
    var c4_lo = W[i + 1];

    var T1_hi = sum64_5_hi(
      c0_hi, c0_lo,
      c1_hi, c1_lo,
      c2_hi, c2_lo,
      c3_hi, c3_lo,
      c4_hi, c4_lo);
    var T1_lo = sum64_5_lo(
      c0_hi, c0_lo,
      c1_hi, c1_lo,
      c2_hi, c2_lo,
      c3_hi, c3_lo,
      c4_hi, c4_lo);

    c0_hi = s0_512_hi(ah, al);
    c0_lo = s0_512_lo(ah, al);
    c1_hi = maj64_hi(ah, al, bh, bl, ch, cl);
    c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);

    var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);
    var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);

    hh = gh;
    hl = gl;

    gh = fh;
    gl = fl;

    fh = eh;
    fl = el;

    eh = sum64_hi(dh, dl, T1_hi, T1_lo);
    el = sum64_lo(dl, dl, T1_hi, T1_lo);

    dh = ch;
    dl = cl;

    ch = bh;
    cl = bl;

    bh = ah;
    bl = al;

    ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);
    al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);
  }

  sum64(this.h, 0, ah, al);
  sum64(this.h, 2, bh, bl);
  sum64(this.h, 4, ch, cl);
  sum64(this.h, 6, dh, dl);
  sum64(this.h, 8, eh, el);
  sum64(this.h, 10, fh, fl);
  sum64(this.h, 12, gh, gl);
  sum64(this.h, 14, hh, hl);
};

SHA512.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'big');
  else
    return utils.split32(this.h, 'big');
};

function ch64_hi(xh, xl, yh, yl, zh) {
  var r = (xh & yh) ^ ((~xh) & zh);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function ch64_lo(xh, xl, yh, yl, zh, zl) {
  var r = (xl & yl) ^ ((~xl) & zl);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function maj64_hi(xh, xl, yh, yl, zh) {
  var r = (xh & yh) ^ (xh & zh) ^ (yh & zh);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function maj64_lo(xh, xl, yh, yl, zh, zl) {
  var r = (xl & yl) ^ (xl & zl) ^ (yl & zl);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s0_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 28);
  var c1_hi = rotr64_hi(xl, xh, 2);  // 34
  var c2_hi = rotr64_hi(xl, xh, 7);  // 39

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s0_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 28);
  var c1_lo = rotr64_lo(xl, xh, 2);  // 34
  var c2_lo = rotr64_lo(xl, xh, 7);  // 39

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s1_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 14);
  var c1_hi = rotr64_hi(xh, xl, 18);
  var c2_hi = rotr64_hi(xl, xh, 9);  // 41

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s1_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 14);
  var c1_lo = rotr64_lo(xh, xl, 18);
  var c2_lo = rotr64_lo(xl, xh, 9);  // 41

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g0_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 1);
  var c1_hi = rotr64_hi(xh, xl, 8);
  var c2_hi = shr64_hi(xh, xl, 7);

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g0_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 1);
  var c1_lo = rotr64_lo(xh, xl, 8);
  var c2_lo = shr64_lo(xh, xl, 7);

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g1_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 19);
  var c1_hi = rotr64_hi(xl, xh, 29);  // 61
  var c2_hi = shr64_hi(xh, xl, 6);

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g1_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 19);
  var c1_lo = rotr64_lo(xl, xh, 29);  // 61
  var c2_lo = shr64_lo(xh, xl, 6);

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}

},{"../common":90,"../utils":100,"minimalistic-assert":106}],99:[function(require,module,exports){
'use strict';

var utils = require('../utils');
var rotr32 = utils.rotr32;

function ft_1(s, x, y, z) {
  if (s === 0)
    return ch32(x, y, z);
  if (s === 1 || s === 3)
    return p32(x, y, z);
  if (s === 2)
    return maj32(x, y, z);
}
exports.ft_1 = ft_1;

function ch32(x, y, z) {
  return (x & y) ^ ((~x) & z);
}
exports.ch32 = ch32;

function maj32(x, y, z) {
  return (x & y) ^ (x & z) ^ (y & z);
}
exports.maj32 = maj32;

function p32(x, y, z) {
  return x ^ y ^ z;
}
exports.p32 = p32;

function s0_256(x) {
  return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);
}
exports.s0_256 = s0_256;

function s1_256(x) {
  return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);
}
exports.s1_256 = s1_256;

function g0_256(x) {
  return rotr32(x, 7) ^ rotr32(x, 18) ^ (x >>> 3);
}
exports.g0_256 = g0_256;

function g1_256(x) {
  return rotr32(x, 17) ^ rotr32(x, 19) ^ (x >>> 10);
}
exports.g1_256 = g1_256;

},{"../utils":100}],100:[function(require,module,exports){
'use strict';

var assert = require('minimalistic-assert');
var inherits = require('inherits');

exports.inherits = inherits;

function isSurrogatePair(msg, i) {
  if ((msg.charCodeAt(i) & 0xFC00) !== 0xD800) {
    return false;
  }
  if (i < 0 || i + 1 >= msg.length) {
    return false;
  }
  return (msg.charCodeAt(i + 1) & 0xFC00) === 0xDC00;
}

function toArray(msg, enc) {
  if (Array.isArray(msg))
    return msg.slice();
  if (!msg)
    return [];
  var res = [];
  if (typeof msg === 'string') {
    if (!enc) {
      // Inspired by stringToUtf8ByteArray() in closure-library by Google
      // https://github.com/google/closure-library/blob/8598d87242af59aac233270742c8984e2b2bdbe0/closure/goog/crypt/crypt.js#L117-L143
      // Apache License 2.0
      // https://github.com/google/closure-library/blob/master/LICENSE
      var p = 0;
      for (var i = 0; i < msg.length; i++) {
        var c = msg.charCodeAt(i);
        if (c < 128) {
          res[p++] = c;
        } else if (c < 2048) {
          res[p++] = (c >> 6) | 192;
          res[p++] = (c & 63) | 128;
        } else if (isSurrogatePair(msg, i)) {
          c = 0x10000 + ((c & 0x03FF) << 10) + (msg.charCodeAt(++i) & 0x03FF);
          res[p++] = (c >> 18) | 240;
          res[p++] = ((c >> 12) & 63) | 128;
          res[p++] = ((c >> 6) & 63) | 128;
          res[p++] = (c & 63) | 128;
        } else {
          res[p++] = (c >> 12) | 224;
          res[p++] = ((c >> 6) & 63) | 128;
          res[p++] = (c & 63) | 128;
        }
      }
    } else if (enc === 'hex') {
      msg = msg.replace(/[^a-z0-9]+/ig, '');
      if (msg.length % 2 !== 0)
        msg = '0' + msg;
      for (i = 0; i < msg.length; i += 2)
        res.push(parseInt(msg[i] + msg[i + 1], 16));
    }
  } else {
    for (i = 0; i < msg.length; i++)
      res[i] = msg[i] | 0;
  }
  return res;
}
exports.toArray = toArray;

function toHex(msg) {
  var res = '';
  for (var i = 0; i < msg.length; i++)
    res += zero2(msg[i].toString(16));
  return res;
}
exports.toHex = toHex;

function htonl(w) {
  var res = (w >>> 24) |
            ((w >>> 8) & 0xff00) |
            ((w << 8) & 0xff0000) |
            ((w & 0xff) << 24);
  return res >>> 0;
}
exports.htonl = htonl;

function toHex32(msg, endian) {
  var res = '';
  for (var i = 0; i < msg.length; i++) {
    var w = msg[i];
    if (endian === 'little')
      w = htonl(w);
    res += zero8(w.toString(16));
  }
  return res;
}
exports.toHex32 = toHex32;

function zero2(word) {
  if (word.length === 1)
    return '0' + word;
  else
    return word;
}
exports.zero2 = zero2;

function zero8(word) {
  if (word.length === 7)
    return '0' + word;
  else if (word.length === 6)
    return '00' + word;
  else if (word.length === 5)
    return '000' + word;
  else if (word.length === 4)
    return '0000' + word;
  else if (word.length === 3)
    return '00000' + word;
  else if (word.length === 2)
    return '000000' + word;
  else if (word.length === 1)
    return '0000000' + word;
  else
    return word;
}
exports.zero8 = zero8;

function join32(msg, start, end, endian) {
  var len = end - start;
  assert(len % 4 === 0);
  var res = new Array(len / 4);
  for (var i = 0, k = start; i < res.length; i++, k += 4) {
    var w;
    if (endian === 'big')
      w = (msg[k] << 24) | (msg[k + 1] << 16) | (msg[k + 2] << 8) | msg[k + 3];
    else
      w = (msg[k + 3] << 24) | (msg[k + 2] << 16) | (msg[k + 1] << 8) | msg[k];
    res[i] = w >>> 0;
  }
  return res;
}
exports.join32 = join32;

function split32(msg, endian) {
  var res = new Array(msg.length * 4);
  for (var i = 0, k = 0; i < msg.length; i++, k += 4) {
    var m = msg[i];
    if (endian === 'big') {
      res[k] = m >>> 24;
      res[k + 1] = (m >>> 16) & 0xff;
      res[k + 2] = (m >>> 8) & 0xff;
      res[k + 3] = m & 0xff;
    } else {
      res[k + 3] = m >>> 24;
      res[k + 2] = (m >>> 16) & 0xff;
      res[k + 1] = (m >>> 8) & 0xff;
      res[k] = m & 0xff;
    }
  }
  return res;
}
exports.split32 = split32;

function rotr32(w, b) {
  return (w >>> b) | (w << (32 - b));
}
exports.rotr32 = rotr32;

function rotl32(w, b) {
  return (w << b) | (w >>> (32 - b));
}
exports.rotl32 = rotl32;

function sum32(a, b) {
  return (a + b) >>> 0;
}
exports.sum32 = sum32;

function sum32_3(a, b, c) {
  return (a + b + c) >>> 0;
}
exports.sum32_3 = sum32_3;

function sum32_4(a, b, c, d) {
  return (a + b + c + d) >>> 0;
}
exports.sum32_4 = sum32_4;

function sum32_5(a, b, c, d, e) {
  return (a + b + c + d + e) >>> 0;
}
exports.sum32_5 = sum32_5;

function sum64(buf, pos, ah, al) {
  var bh = buf[pos];
  var bl = buf[pos + 1];

  var lo = (al + bl) >>> 0;
  var hi = (lo < al ? 1 : 0) + ah + bh;
  buf[pos] = hi >>> 0;
  buf[pos + 1] = lo;
}
exports.sum64 = sum64;

function sum64_hi(ah, al, bh, bl) {
  var lo = (al + bl) >>> 0;
  var hi = (lo < al ? 1 : 0) + ah + bh;
  return hi >>> 0;
}
exports.sum64_hi = sum64_hi;

function sum64_lo(ah, al, bh, bl) {
  var lo = al + bl;
  return lo >>> 0;
}
exports.sum64_lo = sum64_lo;

function sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {
  var carry = 0;
  var lo = al;
  lo = (lo + bl) >>> 0;
  carry += lo < al ? 1 : 0;
  lo = (lo + cl) >>> 0;
  carry += lo < cl ? 1 : 0;
  lo = (lo + dl) >>> 0;
  carry += lo < dl ? 1 : 0;

  var hi = ah + bh + ch + dh + carry;
  return hi >>> 0;
}
exports.sum64_4_hi = sum64_4_hi;

function sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {
  var lo = al + bl + cl + dl;
  return lo >>> 0;
}
exports.sum64_4_lo = sum64_4_lo;

function sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
  var carry = 0;
  var lo = al;
  lo = (lo + bl) >>> 0;
  carry += lo < al ? 1 : 0;
  lo = (lo + cl) >>> 0;
  carry += lo < cl ? 1 : 0;
  lo = (lo + dl) >>> 0;
  carry += lo < dl ? 1 : 0;
  lo = (lo + el) >>> 0;
  carry += lo < el ? 1 : 0;

  var hi = ah + bh + ch + dh + eh + carry;
  return hi >>> 0;
}
exports.sum64_5_hi = sum64_5_hi;

function sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
  var lo = al + bl + cl + dl + el;

  return lo >>> 0;
}
exports.sum64_5_lo = sum64_5_lo;

function rotr64_hi(ah, al, num) {
  var r = (al << (32 - num)) | (ah >>> num);
  return r >>> 0;
}
exports.rotr64_hi = rotr64_hi;

function rotr64_lo(ah, al, num) {
  var r = (ah << (32 - num)) | (al >>> num);
  return r >>> 0;
}
exports.rotr64_lo = rotr64_lo;

function shr64_hi(ah, al, num) {
  return ah >>> num;
}
exports.shr64_hi = shr64_hi;

function shr64_lo(ah, al, num) {
  var r = (ah << (32 - num)) | (al >>> num);
  return r >>> 0;
}
exports.shr64_lo = shr64_lo;

},{"inherits":102,"minimalistic-assert":106}],101:[function(require,module,exports){
'use strict';

var hash = require('hash.js');
var utils = require('minimalistic-crypto-utils');
var assert = require('minimalistic-assert');

function HmacDRBG(options) {
  if (!(this instanceof HmacDRBG))
    return new HmacDRBG(options);
  this.hash = options.hash;
  this.predResist = !!options.predResist;

  this.outLen = this.hash.outSize;
  this.minEntropy = options.minEntropy || this.hash.hmacStrength;

  this._reseed = null;
  this.reseedInterval = null;
  this.K = null;
  this.V = null;

  var entropy = utils.toArray(options.entropy, options.entropyEnc || 'hex');
  var nonce = utils.toArray(options.nonce, options.nonceEnc || 'hex');
  var pers = utils.toArray(options.pers, options.persEnc || 'hex');
  assert(entropy.length >= (this.minEntropy / 8),
         'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');
  this._init(entropy, nonce, pers);
}
module.exports = HmacDRBG;

HmacDRBG.prototype._init = function init(entropy, nonce, pers) {
  var seed = entropy.concat(nonce).concat(pers);

  this.K = new Array(this.outLen / 8);
  this.V = new Array(this.outLen / 8);
  for (var i = 0; i < this.V.length; i++) {
    this.K[i] = 0x00;
    this.V[i] = 0x01;
  }

  this._update(seed);
  this._reseed = 1;
  this.reseedInterval = 0x1000000000000;  // 2^48
};

HmacDRBG.prototype._hmac = function hmac() {
  return new hash.hmac(this.hash, this.K);
};

HmacDRBG.prototype._update = function update(seed) {
  var kmac = this._hmac()
                 .update(this.V)
                 .update([ 0x00 ]);
  if (seed)
    kmac = kmac.update(seed);
  this.K = kmac.digest();
  this.V = this._hmac().update(this.V).digest();
  if (!seed)
    return;

  this.K = this._hmac()
               .update(this.V)
               .update([ 0x01 ])
               .update(seed)
               .digest();
  this.V = this._hmac().update(this.V).digest();
};

HmacDRBG.prototype.reseed = function reseed(entropy, entropyEnc, add, addEnc) {
  // Optional entropy enc
  if (typeof entropyEnc !== 'string') {
    addEnc = add;
    add = entropyEnc;
    entropyEnc = null;
  }

  entropy = utils.toArray(entropy, entropyEnc);
  add = utils.toArray(add, addEnc);

  assert(entropy.length >= (this.minEntropy / 8),
         'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');

  this._update(entropy.concat(add || []));
  this._reseed = 1;
};

HmacDRBG.prototype.generate = function generate(len, enc, add, addEnc) {
  if (this._reseed > this.reseedInterval)
    throw new Error('Reseed is required');

  // Optional encoding
  if (typeof enc !== 'string') {
    addEnc = add;
    add = enc;
    enc = null;
  }

  // Optional additional data
  if (add) {
    add = utils.toArray(add, addEnc || 'hex');
    this._update(add);
  }

  var temp = [];
  while (temp.length < len) {
    this.V = this._hmac().update(this.V).digest();
    temp = temp.concat(this.V);
  }

  var res = temp.slice(0, len);
  this._update(add);
  this._reseed++;
  return utils.encode(res, enc);
};

},{"hash.js":89,"minimalistic-assert":106,"minimalistic-crypto-utils":107}],102:[function(require,module,exports){
arguments[4][7][0].apply(exports,arguments)
},{"dup":7}],103:[function(require,module,exports){
module.exports = Long;

/**
 * wasm optimizations, to do native i64 multiplication and divide
 */
var wasm = null;

try {
  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([
    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11
  ])), {}).exports;
} catch (e) {
  // no wasm support :(
}

/**
 * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.
 *  See the from* functions below for more convenient ways of constructing Longs.
 * @exports Long
 * @class A Long class for representing a 64 bit two's-complement integer value.
 * @param {number} low The low (signed) 32 bits of the long
 * @param {number} high The high (signed) 32 bits of the long
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @constructor
 */
function Long(low, high, unsigned) {

    /**
     * The low 32 bits as a signed value.
     * @type {number}
     */
    this.low = low | 0;

    /**
     * The high 32 bits as a signed value.
     * @type {number}
     */
    this.high = high | 0;

    /**
     * Whether unsigned or not.
     * @type {boolean}
     */
    this.unsigned = !!unsigned;
}

// The internal representation of a long is the two given signed, 32-bit values.
// We use 32-bit pieces because these are the size of integers on which
// Javascript performs bit-operations.  For operations like addition and
// multiplication, we split each number into 16 bit pieces, which can easily be
// multiplied within Javascript's floating-point representation without overflow
// or change in sign.
//
// In the algorithms below, we frequently reduce the negative case to the
// positive case by negating the input(s) and then post-processing the result.
// Note that we must ALWAYS check specially whether those values are MIN_VALUE
// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as
// a positive number, it overflows back into a negative).  Not handling this
// case would often result in infinite recursion.
//
// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*
// methods on which they depend.

/**
 * An indicator used to reliably determine if an object is a Long or not.
 * @type {boolean}
 * @const
 * @private
 */
Long.prototype.__isLong__;

Object.defineProperty(Long.prototype, "__isLong__", { value: true });

/**
 * @function
 * @param {*} obj Object
 * @returns {boolean}
 * @inner
 */
function isLong(obj) {
    return (obj && obj["__isLong__"]) === true;
}

/**
 * Tests if the specified object is a Long.
 * @function
 * @param {*} obj Object
 * @returns {boolean}
 */
Long.isLong = isLong;

/**
 * A cache of the Long representations of small integer values.
 * @type {!Object}
 * @inner
 */
var INT_CACHE = {};

/**
 * A cache of the Long representations of small unsigned integer values.
 * @type {!Object}
 * @inner
 */
var UINT_CACHE = {};

/**
 * @param {number} value
 * @param {boolean=} unsigned
 * @returns {!Long}
 * @inner
 */
function fromInt(value, unsigned) {
    var obj, cachedObj, cache;
    if (unsigned) {
        value >>>= 0;
        if (cache = (0 <= value && value < 256)) {
            cachedObj = UINT_CACHE[value];
            if (cachedObj)
                return cachedObj;
        }
        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);
        if (cache)
            UINT_CACHE[value] = obj;
        return obj;
    } else {
        value |= 0;
        if (cache = (-128 <= value && value < 128)) {
            cachedObj = INT_CACHE[value];
            if (cachedObj)
                return cachedObj;
        }
        obj = fromBits(value, value < 0 ? -1 : 0, false);
        if (cache)
            INT_CACHE[value] = obj;
        return obj;
    }
}

/**
 * Returns a Long representing the given 32 bit integer value.
 * @function
 * @param {number} value The 32 bit integer in question
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @returns {!Long} The corresponding Long value
 */
Long.fromInt = fromInt;

/**
 * @param {number} value
 * @param {boolean=} unsigned
 * @returns {!Long}
 * @inner
 */
function fromNumber(value, unsigned) {
    if (isNaN(value))
        return unsigned ? UZERO : ZERO;
    if (unsigned) {
        if (value < 0)
            return UZERO;
        if (value >= TWO_PWR_64_DBL)
            return MAX_UNSIGNED_VALUE;
    } else {
        if (value <= -TWO_PWR_63_DBL)
            return MIN_VALUE;
        if (value + 1 >= TWO_PWR_63_DBL)
            return MAX_VALUE;
    }
    if (value < 0)
        return fromNumber(-value, unsigned).neg();
    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);
}

/**
 * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.
 * @function
 * @param {number} value The number in question
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @returns {!Long} The corresponding Long value
 */
Long.fromNumber = fromNumber;

/**
 * @param {number} lowBits
 * @param {number} highBits
 * @param {boolean=} unsigned
 * @returns {!Long}
 * @inner
 */
function fromBits(lowBits, highBits, unsigned) {
    return new Long(lowBits, highBits, unsigned);
}

/**
 * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is
 *  assumed to use 32 bits.
 * @function
 * @param {number} lowBits The low 32 bits
 * @param {number} highBits The high 32 bits
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @returns {!Long} The corresponding Long value
 */
Long.fromBits = fromBits;

/**
 * @function
 * @param {number} base
 * @param {number} exponent
 * @returns {number}
 * @inner
 */
var pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)

/**
 * @param {string} str
 * @param {(boolean|number)=} unsigned
 * @param {number=} radix
 * @returns {!Long}
 * @inner
 */
function fromString(str, unsigned, radix) {
    if (str.length === 0)
        throw Error('empty string');
    if (str === "NaN" || str === "Infinity" || str === "+Infinity" || str === "-Infinity")
        return ZERO;
    if (typeof unsigned === 'number') {
        // For goog.math.long compatibility
        radix = unsigned,
        unsigned = false;
    } else {
        unsigned = !! unsigned;
    }
    radix = radix || 10;
    if (radix < 2 || 36 < radix)
        throw RangeError('radix');

    var p;
    if ((p = str.indexOf('-')) > 0)
        throw Error('interior hyphen');
    else if (p === 0) {
        return fromString(str.substring(1), unsigned, radix).neg();
    }

    // Do several (8) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = fromNumber(pow_dbl(radix, 8));

    var result = ZERO;
    for (var i = 0; i < str.length; i += 8) {
        var size = Math.min(8, str.length - i),
            value = parseInt(str.substring(i, i + size), radix);
        if (size < 8) {
            var power = fromNumber(pow_dbl(radix, size));
            result = result.mul(power).add(fromNumber(value));
        } else {
            result = result.mul(radixToPower);
            result = result.add(fromNumber(value));
        }
    }
    result.unsigned = unsigned;
    return result;
}

/**
 * Returns a Long representation of the given string, written using the specified radix.
 * @function
 * @param {string} str The textual representation of the Long
 * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed
 * @param {number=} radix The radix in which the text is written (2-36), defaults to 10
 * @returns {!Long} The corresponding Long value
 */
Long.fromString = fromString;

/**
 * @function
 * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val
 * @param {boolean=} unsigned
 * @returns {!Long}
 * @inner
 */
function fromValue(val, unsigned) {
    if (typeof val === 'number')
        return fromNumber(val, unsigned);
    if (typeof val === 'string')
        return fromString(val, unsigned);
    // Throws for non-objects, converts non-instanceof Long:
    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);
}

/**
 * Converts the specified value to a Long using the appropriate from* function for its type.
 * @function
 * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @returns {!Long}
 */
Long.fromValue = fromValue;

// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be
// no runtime penalty for these.

/**
 * @type {number}
 * @const
 * @inner
 */
var TWO_PWR_16_DBL = 1 << 16;

/**
 * @type {number}
 * @const
 * @inner
 */
var TWO_PWR_24_DBL = 1 << 24;

/**
 * @type {number}
 * @const
 * @inner
 */
var TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;

/**
 * @type {number}
 * @const
 * @inner
 */
var TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;

/**
 * @type {number}
 * @const
 * @inner
 */
var TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;

/**
 * @type {!Long}
 * @const
 * @inner
 */
var TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);

/**
 * @type {!Long}
 * @inner
 */
var ZERO = fromInt(0);

/**
 * Signed zero.
 * @type {!Long}
 */
Long.ZERO = ZERO;

/**
 * @type {!Long}
 * @inner
 */
var UZERO = fromInt(0, true);

/**
 * Unsigned zero.
 * @type {!Long}
 */
Long.UZERO = UZERO;

/**
 * @type {!Long}
 * @inner
 */
var ONE = fromInt(1);

/**
 * Signed one.
 * @type {!Long}
 */
Long.ONE = ONE;

/**
 * @type {!Long}
 * @inner
 */
var UONE = fromInt(1, true);

/**
 * Unsigned one.
 * @type {!Long}
 */
Long.UONE = UONE;

/**
 * @type {!Long}
 * @inner
 */
var NEG_ONE = fromInt(-1);

/**
 * Signed negative one.
 * @type {!Long}
 */
Long.NEG_ONE = NEG_ONE;

/**
 * @type {!Long}
 * @inner
 */
var MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);

/**
 * Maximum signed value.
 * @type {!Long}
 */
Long.MAX_VALUE = MAX_VALUE;

/**
 * @type {!Long}
 * @inner
 */
var MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);

/**
 * Maximum unsigned value.
 * @type {!Long}
 */
Long.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;

/**
 * @type {!Long}
 * @inner
 */
var MIN_VALUE = fromBits(0, 0x80000000|0, false);

/**
 * Minimum signed value.
 * @type {!Long}
 */
Long.MIN_VALUE = MIN_VALUE;

/**
 * @alias Long.prototype
 * @inner
 */
var LongPrototype = Long.prototype;

/**
 * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.
 * @returns {number}
 */
LongPrototype.toInt = function toInt() {
    return this.unsigned ? this.low >>> 0 : this.low;
};

/**
 * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).
 * @returns {number}
 */
LongPrototype.toNumber = function toNumber() {
    if (this.unsigned)
        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);
    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);
};

/**
 * Converts the Long to a string written in the specified radix.
 * @param {number=} radix Radix (2-36), defaults to 10
 * @returns {string}
 * @override
 * @throws {RangeError} If `radix` is out of range
 */
LongPrototype.toString = function toString(radix) {
    radix = radix || 10;
    if (radix < 2 || 36 < radix)
        throw RangeError('radix');
    if (this.isZero())
        return '0';
    if (this.isNegative()) { // Unsigned Longs are never negative
        if (this.eq(MIN_VALUE)) {
            // We need to change the Long value before it can be negated, so we remove
            // the bottom-most digit in this base and then recurse to do the rest.
            var radixLong = fromNumber(radix),
                div = this.div(radixLong),
                rem1 = div.mul(radixLong).sub(this);
            return div.toString(radix) + rem1.toInt().toString(radix);
        } else
            return '-' + this.neg().toString(radix);
    }

    // Do several (6) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),
        rem = this;
    var result = '';
    while (true) {
        var remDiv = rem.div(radixToPower),
            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,
            digits = intval.toString(radix);
        rem = remDiv;
        if (rem.isZero())
            return digits + result;
        else {
            while (digits.length < 6)
                digits = '0' + digits;
            result = '' + digits + result;
        }
    }
};

/**
 * Gets the high 32 bits as a signed integer.
 * @returns {number} Signed high bits
 */
LongPrototype.getHighBits = function getHighBits() {
    return this.high;
};

/**
 * Gets the high 32 bits as an unsigned integer.
 * @returns {number} Unsigned high bits
 */
LongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {
    return this.high >>> 0;
};

/**
 * Gets the low 32 bits as a signed integer.
 * @returns {number} Signed low bits
 */
LongPrototype.getLowBits = function getLowBits() {
    return this.low;
};

/**
 * Gets the low 32 bits as an unsigned integer.
 * @returns {number} Unsigned low bits
 */
LongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {
    return this.low >>> 0;
};

/**
 * Gets the number of bits needed to represent the absolute value of this Long.
 * @returns {number}
 */
LongPrototype.getNumBitsAbs = function getNumBitsAbs() {
    if (this.isNegative()) // Unsigned Longs are never negative
        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();
    var val = this.high != 0 ? this.high : this.low;
    for (var bit = 31; bit > 0; bit--)
        if ((val & (1 << bit)) != 0)
            break;
    return this.high != 0 ? bit + 33 : bit + 1;
};

/**
 * Tests if this Long's value equals zero.
 * @returns {boolean}
 */
LongPrototype.isZero = function isZero() {
    return this.high === 0 && this.low === 0;
};

/**
 * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.
 * @returns {boolean}
 */
LongPrototype.eqz = LongPrototype.isZero;

/**
 * Tests if this Long's value is negative.
 * @returns {boolean}
 */
LongPrototype.isNegative = function isNegative() {
    return !this.unsigned && this.high < 0;
};

/**
 * Tests if this Long's value is positive.
 * @returns {boolean}
 */
LongPrototype.isPositive = function isPositive() {
    return this.unsigned || this.high >= 0;
};

/**
 * Tests if this Long's value is odd.
 * @returns {boolean}
 */
LongPrototype.isOdd = function isOdd() {
    return (this.low & 1) === 1;
};

/**
 * Tests if this Long's value is even.
 * @returns {boolean}
 */
LongPrototype.isEven = function isEven() {
    return (this.low & 1) === 0;
};

/**
 * Tests if this Long's value equals the specified's.
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.equals = function equals(other) {
    if (!isLong(other))
        other = fromValue(other);
    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)
        return false;
    return this.high === other.high && this.low === other.low;
};

/**
 * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.eq = LongPrototype.equals;

/**
 * Tests if this Long's value differs from the specified's.
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.notEquals = function notEquals(other) {
    return !this.eq(/* validates */ other);
};

/**
 * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.neq = LongPrototype.notEquals;

/**
 * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.ne = LongPrototype.notEquals;

/**
 * Tests if this Long's value is less than the specified's.
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.lessThan = function lessThan(other) {
    return this.comp(/* validates */ other) < 0;
};

/**
 * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.lt = LongPrototype.lessThan;

/**
 * Tests if this Long's value is less than or equal the specified's.
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {
    return this.comp(/* validates */ other) <= 0;
};

/**
 * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.lte = LongPrototype.lessThanOrEqual;

/**
 * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.le = LongPrototype.lessThanOrEqual;

/**
 * Tests if this Long's value is greater than the specified's.
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.greaterThan = function greaterThan(other) {
    return this.comp(/* validates */ other) > 0;
};

/**
 * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.gt = LongPrototype.greaterThan;

/**
 * Tests if this Long's value is greater than or equal the specified's.
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {
    return this.comp(/* validates */ other) >= 0;
};

/**
 * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.gte = LongPrototype.greaterThanOrEqual;

/**
 * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.ge = LongPrototype.greaterThanOrEqual;

/**
 * Compares this Long's value with the specified's.
 * @param {!Long|number|string} other Other value
 * @returns {number} 0 if they are the same, 1 if the this is greater and -1
 *  if the given one is greater
 */
LongPrototype.compare = function compare(other) {
    if (!isLong(other))
        other = fromValue(other);
    if (this.eq(other))
        return 0;
    var thisNeg = this.isNegative(),
        otherNeg = other.isNegative();
    if (thisNeg && !otherNeg)
        return -1;
    if (!thisNeg && otherNeg)
        return 1;
    // At this point the sign bits are the same
    if (!this.unsigned)
        return this.sub(other).isNegative() ? -1 : 1;
    // Both are positive if at least one is unsigned
    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;
};

/**
 * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {number} 0 if they are the same, 1 if the this is greater and -1
 *  if the given one is greater
 */
LongPrototype.comp = LongPrototype.compare;

/**
 * Negates this Long's value.
 * @returns {!Long} Negated Long
 */
LongPrototype.negate = function negate() {
    if (!this.unsigned && this.eq(MIN_VALUE))
        return MIN_VALUE;
    return this.not().add(ONE);
};

/**
 * Negates this Long's value. This is an alias of {@link Long#negate}.
 * @function
 * @returns {!Long} Negated Long
 */
LongPrototype.neg = LongPrototype.negate;

/**
 * Returns the sum of this and the specified Long.
 * @param {!Long|number|string} addend Addend
 * @returns {!Long} Sum
 */
LongPrototype.add = function add(addend) {
    if (!isLong(addend))
        addend = fromValue(addend);

    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.

    var a48 = this.high >>> 16;
    var a32 = this.high & 0xFFFF;
    var a16 = this.low >>> 16;
    var a00 = this.low & 0xFFFF;

    var b48 = addend.high >>> 16;
    var b32 = addend.high & 0xFFFF;
    var b16 = addend.low >>> 16;
    var b00 = addend.low & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 + b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 + b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 + b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 + b48;
    c48 &= 0xFFFF;
    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);
};

/**
 * Returns the difference of this and the specified Long.
 * @param {!Long|number|string} subtrahend Subtrahend
 * @returns {!Long} Difference
 */
LongPrototype.subtract = function subtract(subtrahend) {
    if (!isLong(subtrahend))
        subtrahend = fromValue(subtrahend);
    return this.add(subtrahend.neg());
};

/**
 * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.
 * @function
 * @param {!Long|number|string} subtrahend Subtrahend
 * @returns {!Long} Difference
 */
LongPrototype.sub = LongPrototype.subtract;

/**
 * Returns the product of this and the specified Long.
 * @param {!Long|number|string} multiplier Multiplier
 * @returns {!Long} Product
 */
LongPrototype.multiply = function multiply(multiplier) {
    if (this.isZero())
        return ZERO;
    if (!isLong(multiplier))
        multiplier = fromValue(multiplier);

    // use wasm support if present
    if (wasm) {
        var low = wasm.mul(this.low,
                           this.high,
                           multiplier.low,
                           multiplier.high);
        return fromBits(low, wasm.get_high(), this.unsigned);
    }

    if (multiplier.isZero())
        return ZERO;
    if (this.eq(MIN_VALUE))
        return multiplier.isOdd() ? MIN_VALUE : ZERO;
    if (multiplier.eq(MIN_VALUE))
        return this.isOdd() ? MIN_VALUE : ZERO;

    if (this.isNegative()) {
        if (multiplier.isNegative())
            return this.neg().mul(multiplier.neg());
        else
            return this.neg().mul(multiplier).neg();
    } else if (multiplier.isNegative())
        return this.mul(multiplier.neg()).neg();

    // If both longs are small, use float multiplication
    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))
        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);

    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.
    // We can skip products that would overflow.

    var a48 = this.high >>> 16;
    var a32 = this.high & 0xFFFF;
    var a16 = this.low >>> 16;
    var a00 = this.low & 0xFFFF;

    var b48 = multiplier.high >>> 16;
    var b32 = multiplier.high & 0xFFFF;
    var b16 = multiplier.low >>> 16;
    var b00 = multiplier.low & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 * b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 * b00;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c16 += a00 * b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 * b00;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a16 * b16;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a00 * b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
    c48 &= 0xFFFF;
    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);
};

/**
 * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.
 * @function
 * @param {!Long|number|string} multiplier Multiplier
 * @returns {!Long} Product
 */
LongPrototype.mul = LongPrototype.multiply;

/**
 * Returns this Long divided by the specified. The result is signed if this Long is signed or
 *  unsigned if this Long is unsigned.
 * @param {!Long|number|string} divisor Divisor
 * @returns {!Long} Quotient
 */
LongPrototype.divide = function divide(divisor) {
    if (!isLong(divisor))
        divisor = fromValue(divisor);
    if (divisor.isZero())
        throw Error('division by zero');

    // use wasm support if present
    if (wasm) {
        // guard against signed division overflow: the largest
        // negative number / -1 would be 1 larger than the largest
        // positive number, due to two's complement.
        if (!this.unsigned &&
            this.high === -0x80000000 &&
            divisor.low === -1 && divisor.high === -1) {
            // be consistent with non-wasm code path
            return this;
        }
        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(
            this.low,
            this.high,
            divisor.low,
            divisor.high
        );
        return fromBits(low, wasm.get_high(), this.unsigned);
    }

    if (this.isZero())
        return this.unsigned ? UZERO : ZERO;
    var approx, rem, res;
    if (!this.unsigned) {
        // This section is only relevant for signed longs and is derived from the
        // closure library as a whole.
        if (this.eq(MIN_VALUE)) {
            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))
                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE
            else if (divisor.eq(MIN_VALUE))
                return ONE;
            else {
                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.
                var halfThis = this.shr(1);
                approx = halfThis.div(divisor).shl(1);
                if (approx.eq(ZERO)) {
                    return divisor.isNegative() ? ONE : NEG_ONE;
                } else {
                    rem = this.sub(divisor.mul(approx));
                    res = approx.add(rem.div(divisor));
                    return res;
                }
            }
        } else if (divisor.eq(MIN_VALUE))
            return this.unsigned ? UZERO : ZERO;
        if (this.isNegative()) {
            if (divisor.isNegative())
                return this.neg().div(divisor.neg());
            return this.neg().div(divisor).neg();
        } else if (divisor.isNegative())
            return this.div(divisor.neg()).neg();
        res = ZERO;
    } else {
        // The algorithm below has not been made for unsigned longs. It's therefore
        // required to take special care of the MSB prior to running it.
        if (!divisor.unsigned)
            divisor = divisor.toUnsigned();
        if (divisor.gt(this))
            return UZERO;
        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true
            return UONE;
        res = UZERO;
    }

    // Repeat the following until the remainder is less than other:  find a
    // floating-point that approximates remainder / other *from below*, add this
    // into the result, and subtract it from the remainder.  It is critical that
    // the approximate value is less than or equal to the real value so that the
    // remainder never becomes negative.
    rem = this;
    while (rem.gte(divisor)) {
        // Approximate the result of division. This may be a little greater or
        // smaller than the actual value.
        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));

        // We will tweak the approximate result by changing it in the 48-th digit or
        // the smallest non-fractional digit, whichever is larger.
        var log2 = Math.ceil(Math.log(approx) / Math.LN2),
            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),

        // Decrease the approximation until it is smaller than the remainder.  Note
        // that if it is too large, the product overflows and is negative.
            approxRes = fromNumber(approx),
            approxRem = approxRes.mul(divisor);
        while (approxRem.isNegative() || approxRem.gt(rem)) {
            approx -= delta;
            approxRes = fromNumber(approx, this.unsigned);
            approxRem = approxRes.mul(divisor);
        }

        // We know the answer can't be zero... and actually, zero would cause
        // infinite recursion since we would make no progress.
        if (approxRes.isZero())
            approxRes = ONE;

        res = res.add(approxRes);
        rem = rem.sub(approxRem);
    }
    return res;
};

/**
 * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.
 * @function
 * @param {!Long|number|string} divisor Divisor
 * @returns {!Long} Quotient
 */
LongPrototype.div = LongPrototype.divide;

/**
 * Returns this Long modulo the specified.
 * @param {!Long|number|string} divisor Divisor
 * @returns {!Long} Remainder
 */
LongPrototype.modulo = function modulo(divisor) {
    if (!isLong(divisor))
        divisor = fromValue(divisor);

    // use wasm support if present
    if (wasm) {
        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(
            this.low,
            this.high,
            divisor.low,
            divisor.high
        );
        return fromBits(low, wasm.get_high(), this.unsigned);
    }

    return this.sub(this.div(divisor).mul(divisor));
};

/**
 * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.
 * @function
 * @param {!Long|number|string} divisor Divisor
 * @returns {!Long} Remainder
 */
LongPrototype.mod = LongPrototype.modulo;

/**
 * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.
 * @function
 * @param {!Long|number|string} divisor Divisor
 * @returns {!Long} Remainder
 */
LongPrototype.rem = LongPrototype.modulo;

/**
 * Returns the bitwise NOT of this Long.
 * @returns {!Long}
 */
LongPrototype.not = function not() {
    return fromBits(~this.low, ~this.high, this.unsigned);
};

/**
 * Returns the bitwise AND of this Long and the specified.
 * @param {!Long|number|string} other Other Long
 * @returns {!Long}
 */
LongPrototype.and = function and(other) {
    if (!isLong(other))
        other = fromValue(other);
    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);
};

/**
 * Returns the bitwise OR of this Long and the specified.
 * @param {!Long|number|string} other Other Long
 * @returns {!Long}
 */
LongPrototype.or = function or(other) {
    if (!isLong(other))
        other = fromValue(other);
    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);
};

/**
 * Returns the bitwise XOR of this Long and the given one.
 * @param {!Long|number|string} other Other Long
 * @returns {!Long}
 */
LongPrototype.xor = function xor(other) {
    if (!isLong(other))
        other = fromValue(other);
    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);
};

/**
 * Returns this Long with bits shifted to the left by the given amount.
 * @param {number|!Long} numBits Number of bits
 * @returns {!Long} Shifted Long
 */
LongPrototype.shiftLeft = function shiftLeft(numBits) {
    if (isLong(numBits))
        numBits = numBits.toInt();
    if ((numBits &= 63) === 0)
        return this;
    else if (numBits < 32)
        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);
    else
        return fromBits(0, this.low << (numBits - 32), this.unsigned);
};

/**
 * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.
 * @function
 * @param {number|!Long} numBits Number of bits
 * @returns {!Long} Shifted Long
 */
LongPrototype.shl = LongPrototype.shiftLeft;

/**
 * Returns this Long with bits arithmetically shifted to the right by the given amount.
 * @param {number|!Long} numBits Number of bits
 * @returns {!Long} Shifted Long
 */
LongPrototype.shiftRight = function shiftRight(numBits) {
    if (isLong(numBits))
        numBits = numBits.toInt();
    if ((numBits &= 63) === 0)
        return this;
    else if (numBits < 32)
        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);
    else
        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);
};

/**
 * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.
 * @function
 * @param {number|!Long} numBits Number of bits
 * @returns {!Long} Shifted Long
 */
LongPrototype.shr = LongPrototype.shiftRight;

/**
 * Returns this Long with bits logically shifted to the right by the given amount.
 * @param {number|!Long} numBits Number of bits
 * @returns {!Long} Shifted Long
 */
LongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {
    if (isLong(numBits))
        numBits = numBits.toInt();
    numBits &= 63;
    if (numBits === 0)
        return this;
    else {
        var high = this.high;
        if (numBits < 32) {
            var low = this.low;
            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);
        } else if (numBits === 32)
            return fromBits(high, 0, this.unsigned);
        else
            return fromBits(high >>> (numBits - 32), 0, this.unsigned);
    }
};

/**
 * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.
 * @function
 * @param {number|!Long} numBits Number of bits
 * @returns {!Long} Shifted Long
 */
LongPrototype.shru = LongPrototype.shiftRightUnsigned;

/**
 * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.
 * @function
 * @param {number|!Long} numBits Number of bits
 * @returns {!Long} Shifted Long
 */
LongPrototype.shr_u = LongPrototype.shiftRightUnsigned;

/**
 * Converts this Long to signed.
 * @returns {!Long} Signed long
 */
LongPrototype.toSigned = function toSigned() {
    if (!this.unsigned)
        return this;
    return fromBits(this.low, this.high, false);
};

/**
 * Converts this Long to unsigned.
 * @returns {!Long} Unsigned long
 */
LongPrototype.toUnsigned = function toUnsigned() {
    if (this.unsigned)
        return this;
    return fromBits(this.low, this.high, true);
};

/**
 * Converts this Long to its byte representation.
 * @param {boolean=} le Whether little or big endian, defaults to big endian
 * @returns {!Array.<number>} Byte representation
 */
LongPrototype.toBytes = function toBytes(le) {
    return le ? this.toBytesLE() : this.toBytesBE();
};

/**
 * Converts this Long to its little endian byte representation.
 * @returns {!Array.<number>} Little endian byte representation
 */
LongPrototype.toBytesLE = function toBytesLE() {
    var hi = this.high,
        lo = this.low;
    return [
        lo        & 0xff,
        lo >>>  8 & 0xff,
        lo >>> 16 & 0xff,
        lo >>> 24       ,
        hi        & 0xff,
        hi >>>  8 & 0xff,
        hi >>> 16 & 0xff,
        hi >>> 24
    ];
};

/**
 * Converts this Long to its big endian byte representation.
 * @returns {!Array.<number>} Big endian byte representation
 */
LongPrototype.toBytesBE = function toBytesBE() {
    var hi = this.high,
        lo = this.low;
    return [
        hi >>> 24       ,
        hi >>> 16 & 0xff,
        hi >>>  8 & 0xff,
        hi        & 0xff,
        lo >>> 24       ,
        lo >>> 16 & 0xff,
        lo >>>  8 & 0xff,
        lo        & 0xff
    ];
};

/**
 * Creates a Long from its byte representation.
 * @param {!Array.<number>} bytes Byte representation
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @param {boolean=} le Whether little or big endian, defaults to big endian
 * @returns {Long} The corresponding Long value
 */
Long.fromBytes = function fromBytes(bytes, unsigned, le) {
    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);
};

/**
 * Creates a Long from its little endian byte representation.
 * @param {!Array.<number>} bytes Little endian byte representation
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @returns {Long} The corresponding Long value
 */
Long.fromBytesLE = function fromBytesLE(bytes, unsigned) {
    return new Long(
        bytes[0]       |
        bytes[1] <<  8 |
        bytes[2] << 16 |
        bytes[3] << 24,
        bytes[4]       |
        bytes[5] <<  8 |
        bytes[6] << 16 |
        bytes[7] << 24,
        unsigned
    );
};

/**
 * Creates a Long from its big endian byte representation.
 * @param {!Array.<number>} bytes Big endian byte representation
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @returns {Long} The corresponding Long value
 */
Long.fromBytesBE = function fromBytesBE(bytes, unsigned) {
    return new Long(
        bytes[4] << 24 |
        bytes[5] << 16 |
        bytes[6] <<  8 |
        bytes[7],
        bytes[0] << 24 |
        bytes[1] << 16 |
        bytes[2] <<  8 |
        bytes[3],
        unsigned
    );
};

},{}],104:[function(require,module,exports){
'use strict'
var inherits = require('inherits')
var HashBase = require('hash-base')
var Buffer = require('safe-buffer').Buffer

var ARRAY16 = new Array(16)

function MD5 () {
  HashBase.call(this, 64)

  // state
  this._a = 0x67452301
  this._b = 0xefcdab89
  this._c = 0x98badcfe
  this._d = 0x10325476
}

inherits(MD5, HashBase)

MD5.prototype._update = function () {
  var M = ARRAY16
  for (var i = 0; i < 16; ++i) M[i] = this._block.readInt32LE(i * 4)

  var a = this._a
  var b = this._b
  var c = this._c
  var d = this._d

  a = fnF(a, b, c, d, M[0], 0xd76aa478, 7)
  d = fnF(d, a, b, c, M[1], 0xe8c7b756, 12)
  c = fnF(c, d, a, b, M[2], 0x242070db, 17)
  b = fnF(b, c, d, a, M[3], 0xc1bdceee, 22)
  a = fnF(a, b, c, d, M[4], 0xf57c0faf, 7)
  d = fnF(d, a, b, c, M[5], 0x4787c62a, 12)
  c = fnF(c, d, a, b, M[6], 0xa8304613, 17)
  b = fnF(b, c, d, a, M[7], 0xfd469501, 22)
  a = fnF(a, b, c, d, M[8], 0x698098d8, 7)
  d = fnF(d, a, b, c, M[9], 0x8b44f7af, 12)
  c = fnF(c, d, a, b, M[10], 0xffff5bb1, 17)
  b = fnF(b, c, d, a, M[11], 0x895cd7be, 22)
  a = fnF(a, b, c, d, M[12], 0x6b901122, 7)
  d = fnF(d, a, b, c, M[13], 0xfd987193, 12)
  c = fnF(c, d, a, b, M[14], 0xa679438e, 17)
  b = fnF(b, c, d, a, M[15], 0x49b40821, 22)

  a = fnG(a, b, c, d, M[1], 0xf61e2562, 5)
  d = fnG(d, a, b, c, M[6], 0xc040b340, 9)
  c = fnG(c, d, a, b, M[11], 0x265e5a51, 14)
  b = fnG(b, c, d, a, M[0], 0xe9b6c7aa, 20)
  a = fnG(a, b, c, d, M[5], 0xd62f105d, 5)
  d = fnG(d, a, b, c, M[10], 0x02441453, 9)
  c = fnG(c, d, a, b, M[15], 0xd8a1e681, 14)
  b = fnG(b, c, d, a, M[4], 0xe7d3fbc8, 20)
  a = fnG(a, b, c, d, M[9], 0x21e1cde6, 5)
  d = fnG(d, a, b, c, M[14], 0xc33707d6, 9)
  c = fnG(c, d, a, b, M[3], 0xf4d50d87, 14)
  b = fnG(b, c, d, a, M[8], 0x455a14ed, 20)
  a = fnG(a, b, c, d, M[13], 0xa9e3e905, 5)
  d = fnG(d, a, b, c, M[2], 0xfcefa3f8, 9)
  c = fnG(c, d, a, b, M[7], 0x676f02d9, 14)
  b = fnG(b, c, d, a, M[12], 0x8d2a4c8a, 20)

  a = fnH(a, b, c, d, M[5], 0xfffa3942, 4)
  d = fnH(d, a, b, c, M[8], 0x8771f681, 11)
  c = fnH(c, d, a, b, M[11], 0x6d9d6122, 16)
  b = fnH(b, c, d, a, M[14], 0xfde5380c, 23)
  a = fnH(a, b, c, d, M[1], 0xa4beea44, 4)
  d = fnH(d, a, b, c, M[4], 0x4bdecfa9, 11)
  c = fnH(c, d, a, b, M[7], 0xf6bb4b60, 16)
  b = fnH(b, c, d, a, M[10], 0xbebfbc70, 23)
  a = fnH(a, b, c, d, M[13], 0x289b7ec6, 4)
  d = fnH(d, a, b, c, M[0], 0xeaa127fa, 11)
  c = fnH(c, d, a, b, M[3], 0xd4ef3085, 16)
  b = fnH(b, c, d, a, M[6], 0x04881d05, 23)
  a = fnH(a, b, c, d, M[9], 0xd9d4d039, 4)
  d = fnH(d, a, b, c, M[12], 0xe6db99e5, 11)
  c = fnH(c, d, a, b, M[15], 0x1fa27cf8, 16)
  b = fnH(b, c, d, a, M[2], 0xc4ac5665, 23)

  a = fnI(a, b, c, d, M[0], 0xf4292244, 6)
  d = fnI(d, a, b, c, M[7], 0x432aff97, 10)
  c = fnI(c, d, a, b, M[14], 0xab9423a7, 15)
  b = fnI(b, c, d, a, M[5], 0xfc93a039, 21)
  a = fnI(a, b, c, d, M[12], 0x655b59c3, 6)
  d = fnI(d, a, b, c, M[3], 0x8f0ccc92, 10)
  c = fnI(c, d, a, b, M[10], 0xffeff47d, 15)
  b = fnI(b, c, d, a, M[1], 0x85845dd1, 21)
  a = fnI(a, b, c, d, M[8], 0x6fa87e4f, 6)
  d = fnI(d, a, b, c, M[15], 0xfe2ce6e0, 10)
  c = fnI(c, d, a, b, M[6], 0xa3014314, 15)
  b = fnI(b, c, d, a, M[13], 0x4e0811a1, 21)
  a = fnI(a, b, c, d, M[4], 0xf7537e82, 6)
  d = fnI(d, a, b, c, M[11], 0xbd3af235, 10)
  c = fnI(c, d, a, b, M[2], 0x2ad7d2bb, 15)
  b = fnI(b, c, d, a, M[9], 0xeb86d391, 21)

  this._a = (this._a + a) | 0
  this._b = (this._b + b) | 0
  this._c = (this._c + c) | 0
  this._d = (this._d + d) | 0
}

MD5.prototype._digest = function () {
  // create padding and handle blocks
  this._block[this._blockOffset++] = 0x80
  if (this._blockOffset > 56) {
    this._block.fill(0, this._blockOffset, 64)
    this._update()
    this._blockOffset = 0
  }

  this._block.fill(0, this._blockOffset, 56)
  this._block.writeUInt32LE(this._length[0], 56)
  this._block.writeUInt32LE(this._length[1], 60)
  this._update()

  // produce result
  var buffer = Buffer.allocUnsafe(16)
  buffer.writeInt32LE(this._a, 0)
  buffer.writeInt32LE(this._b, 4)
  buffer.writeInt32LE(this._c, 8)
  buffer.writeInt32LE(this._d, 12)
  return buffer
}

function rotl (x, n) {
  return (x << n) | (x >>> (32 - n))
}

function fnF (a, b, c, d, m, k, s) {
  return (rotl((a + ((b & c) | ((~b) & d)) + m + k) | 0, s) + b) | 0
}

function fnG (a, b, c, d, m, k, s) {
  return (rotl((a + ((b & d) | (c & (~d))) + m + k) | 0, s) + b) | 0
}

function fnH (a, b, c, d, m, k, s) {
  return (rotl((a + (b ^ c ^ d) + m + k) | 0, s) + b) | 0
}

function fnI (a, b, c, d, m, k, s) {
  return (rotl((a + ((c ^ (b | (~d)))) + m + k) | 0, s) + b) | 0
}

module.exports = MD5

},{"hash-base":88,"inherits":102,"safe-buffer":126}],105:[function(require,module,exports){
(function (Buffer){(function (){
// constant-space merkle root calculation algorithm
module.exports = function fastRoot (values, digestFn) {
  if (!Array.isArray(values)) throw TypeError('Expected values Array')
  if (typeof digestFn !== 'function') throw TypeError('Expected digest Function')

  var length = values.length
  var results = values.concat()

  while (length > 1) {
    var j = 0

    for (var i = 0; i < length; i += 2, ++j) {
      var left = results[i]
      var right = i + 1 === length ? left : results[i + 1]
      var data = Buffer.concat([left, right])

      results[j] = digestFn(data)
    }

    length = j
  }

  return results[0]
}

}).call(this)}).call(this,require("buffer").Buffer)
},{"buffer":4}],106:[function(require,module,exports){
module.exports = assert;

function assert(val, msg) {
  if (!val)
    throw new Error(msg || 'Assertion failed');
}

assert.equal = function assertEqual(l, r, msg) {
  if (l != r)
    throw new Error(msg || ('Assertion failed: ' + l + ' != ' + r));
};

},{}],107:[function(require,module,exports){
'use strict';

var utils = exports;

function toArray(msg, enc) {
  if (Array.isArray(msg))
    return msg.slice();
  if (!msg)
    return [];
  var res = [];
  if (typeof msg !== 'string') {
    for (var i = 0; i < msg.length; i++)
      res[i] = msg[i] | 0;
    return res;
  }
  if (enc === 'hex') {
    msg = msg.replace(/[^a-z0-9]+/ig, '');
    if (msg.length % 2 !== 0)
      msg = '0' + msg;
    for (var i = 0; i < msg.length; i += 2)
      res.push(parseInt(msg[i] + msg[i + 1], 16));
  } else {
    for (var i = 0; i < msg.length; i++) {
      var c = msg.charCodeAt(i);
      var hi = c >> 8;
      var lo = c & 0xff;
      if (hi)
        res.push(hi, lo);
      else
        res.push(lo);
    }
  }
  return res;
}
utils.toArray = toArray;

function zero2(word) {
  if (word.length === 1)
    return '0' + word;
  else
    return word;
}
utils.zero2 = zero2;

function toHex(msg) {
  var res = '';
  for (var i = 0; i < msg.length; i++)
    res += zero2(msg[i].toString(16));
  return res;
}
utils.toHex = toHex;

utils.encode = function encode(arr, enc) {
  if (enc === 'hex')
    return toHex(arr);
  else
    return arr;
};

},{}],108:[function(require,module,exports){
var OPS = require('bitcoin-ops')

function encodingLength (i) {
  return i < OPS.OP_PUSHDATA1 ? 1
  : i <= 0xff ? 2
  : i <= 0xffff ? 3
  : 5
}

function encode (buffer, number, offset) {
  var size = encodingLength(number)

  // ~6 bit
  if (size === 1) {
    buffer.writeUInt8(number, offset)

  // 8 bit
  } else if (size === 2) {
    buffer.writeUInt8(OPS.OP_PUSHDATA1, offset)
    buffer.writeUInt8(number, offset + 1)

  // 16 bit
  } else if (size === 3) {
    buffer.writeUInt8(OPS.OP_PUSHDATA2, offset)
    buffer.writeUInt16LE(number, offset + 1)

  // 32 bit
  } else {
    buffer.writeUInt8(OPS.OP_PUSHDATA4, offset)
    buffer.writeUInt32LE(number, offset + 1)
  }

  return size
}

function decode (buffer, offset) {
  var opcode = buffer.readUInt8(offset)
  var number, size

  // ~6 bit
  if (opcode < OPS.OP_PUSHDATA1) {
    number = opcode
    size = 1

  // 8 bit
  } else if (opcode === OPS.OP_PUSHDATA1) {
    if (offset + 2 > buffer.length) return null
    number = buffer.readUInt8(offset + 1)
    size = 2

  // 16 bit
  } else if (opcode === OPS.OP_PUSHDATA2) {
    if (offset + 3 > buffer.length) return null
    number = buffer.readUInt16LE(offset + 1)
    size = 3

  // 32 bit
  } else {
    if (offset + 5 > buffer.length) return null
    if (opcode !== OPS.OP_PUSHDATA4) throw new Error('Unexpected opcode')

    number = buffer.readUInt32LE(offset + 1)
    size = 5
  }

  return {
    opcode: opcode,
    number: number,
    size: size
  }
}

module.exports = {
  encodingLength: encodingLength,
  encode: encode,
  decode: decode
}

},{"bitcoin-ops":58}],109:[function(require,module,exports){
(function (process,global){(function (){
'use strict'

// limit of Crypto.getRandomValues()
// https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues
var MAX_BYTES = 65536

// Node supports requesting up to this number of bytes
// https://github.com/nodejs/node/blob/master/lib/internal/crypto/random.js#L48
var MAX_UINT32 = 4294967295

function oldBrowser () {
  throw new Error('Secure random number generation is not supported by this browser.\nUse Chrome, Firefox or Internet Explorer 11')
}

var Buffer = require('safe-buffer').Buffer
var crypto = global.crypto || global.msCrypto

if (crypto && crypto.getRandomValues) {
  module.exports = randomBytes
} else {
  module.exports = oldBrowser
}

function randomBytes (size, cb) {
  // phantomjs needs to throw
  if (size > MAX_UINT32) throw new RangeError('requested too many random bytes')

  var bytes = Buffer.allocUnsafe(size)

  if (size > 0) {  // getRandomValues fails on IE if size == 0
    if (size > MAX_BYTES) { // this is the max bytes crypto.getRandomValues
      // can do at once see https://developer.mozilla.org/en-US/docs/Web/API/window.crypto.getRandomValues
      for (var generated = 0; generated < size; generated += MAX_BYTES) {
        // buffer.slice automatically checks if the end is past the end of
        // the buffer so we don't have to here
        crypto.getRandomValues(bytes.slice(generated, generated + MAX_BYTES))
      }
    } else {
      crypto.getRandomValues(bytes)
    }
  }

  if (typeof cb === 'function') {
    return process.nextTick(function () {
      cb(null, bytes)
    })
  }

  return bytes
}

}).call(this)}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"_process":10,"safe-buffer":126}],110:[function(require,module,exports){
arguments[4][13][0].apply(exports,arguments)
},{"dup":13}],111:[function(require,module,exports){
arguments[4][14][0].apply(exports,arguments)
},{"./_stream_readable":113,"./_stream_writable":115,"_process":10,"dup":14,"inherits":102}],112:[function(require,module,exports){
arguments[4][15][0].apply(exports,arguments)
},{"./_stream_transform":114,"dup":15,"inherits":102}],113:[function(require,module,exports){
arguments[4][16][0].apply(exports,arguments)
},{"../errors":110,"./_stream_duplex":111,"./internal/streams/async_iterator":116,"./internal/streams/buffer_list":117,"./internal/streams/destroy":118,"./internal/streams/from":120,"./internal/streams/state":122,"./internal/streams/stream":123,"_process":10,"buffer":4,"dup":16,"events":5,"inherits":102,"string_decoder/":137,"util":3}],114:[function(require,module,exports){
arguments[4][17][0].apply(exports,arguments)
},{"../errors":110,"./_stream_duplex":111,"dup":17,"inherits":102}],115:[function(require,module,exports){
arguments[4][18][0].apply(exports,arguments)
},{"../errors":110,"./_stream_duplex":111,"./internal/streams/destroy":118,"./internal/streams/state":122,"./internal/streams/stream":123,"_process":10,"buffer":4,"dup":18,"inherits":102,"util-deprecate":144}],116:[function(require,module,exports){
arguments[4][19][0].apply(exports,arguments)
},{"./end-of-stream":119,"_process":10,"dup":19}],117:[function(require,module,exports){
arguments[4][20][0].apply(exports,arguments)
},{"buffer":4,"dup":20,"util":3}],118:[function(require,module,exports){
arguments[4][21][0].apply(exports,arguments)
},{"_process":10,"dup":21}],119:[function(require,module,exports){
arguments[4][22][0].apply(exports,arguments)
},{"../../../errors":110,"dup":22}],120:[function(require,module,exports){
arguments[4][23][0].apply(exports,arguments)
},{"dup":23}],121:[function(require,module,exports){
arguments[4][24][0].apply(exports,arguments)
},{"../../../errors":110,"./end-of-stream":119,"dup":24}],122:[function(require,module,exports){
arguments[4][25][0].apply(exports,arguments)
},{"../../../errors":110,"dup":25}],123:[function(require,module,exports){
arguments[4][26][0].apply(exports,arguments)
},{"dup":26,"events":5}],124:[function(require,module,exports){
exports = module.exports = require('./lib/_stream_readable.js');
exports.Stream = exports;
exports.Readable = exports;
exports.Writable = require('./lib/_stream_writable.js');
exports.Duplex = require('./lib/_stream_duplex.js');
exports.Transform = require('./lib/_stream_transform.js');
exports.PassThrough = require('./lib/_stream_passthrough.js');
exports.finished = require('./lib/internal/streams/end-of-stream.js');
exports.pipeline = require('./lib/internal/streams/pipeline.js');

},{"./lib/_stream_duplex.js":111,"./lib/_stream_passthrough.js":112,"./lib/_stream_readable.js":113,"./lib/_stream_transform.js":114,"./lib/_stream_writable.js":115,"./lib/internal/streams/end-of-stream.js":119,"./lib/internal/streams/pipeline.js":121}],125:[function(require,module,exports){
'use strict'
var Buffer = require('buffer').Buffer
var inherits = require('inherits')
var HashBase = require('hash-base')

var ARRAY16 = new Array(16)

var zl = [
  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
  7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,
  3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,
  1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,
  4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13
]

var zr = [
  5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,
  6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,
  15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,
  8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,
  12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11
]

var sl = [
  11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,
  7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,
  11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,
  11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,
  9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6
]

var sr = [
  8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,
  9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,
  9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,
  15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,
  8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11
]

var hl = [0x00000000, 0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xa953fd4e]
var hr = [0x50a28be6, 0x5c4dd124, 0x6d703ef3, 0x7a6d76e9, 0x00000000]

function RIPEMD160 () {
  HashBase.call(this, 64)

  // state
  this._a = 0x67452301
  this._b = 0xefcdab89
  this._c = 0x98badcfe
  this._d = 0x10325476
  this._e = 0xc3d2e1f0
}

inherits(RIPEMD160, HashBase)

RIPEMD160.prototype._update = function () {
  var words = ARRAY16
  for (var j = 0; j < 16; ++j) words[j] = this._block.readInt32LE(j * 4)

  var al = this._a | 0
  var bl = this._b | 0
  var cl = this._c | 0
  var dl = this._d | 0
  var el = this._e | 0

  var ar = this._a | 0
  var br = this._b | 0
  var cr = this._c | 0
  var dr = this._d | 0
  var er = this._e | 0

  // computation
  for (var i = 0; i < 80; i += 1) {
    var tl
    var tr
    if (i < 16) {
      tl = fn1(al, bl, cl, dl, el, words[zl[i]], hl[0], sl[i])
      tr = fn5(ar, br, cr, dr, er, words[zr[i]], hr[0], sr[i])
    } else if (i < 32) {
      tl = fn2(al, bl, cl, dl, el, words[zl[i]], hl[1], sl[i])
      tr = fn4(ar, br, cr, dr, er, words[zr[i]], hr[1], sr[i])
    } else if (i < 48) {
      tl = fn3(al, bl, cl, dl, el, words[zl[i]], hl[2], sl[i])
      tr = fn3(ar, br, cr, dr, er, words[zr[i]], hr[2], sr[i])
    } else if (i < 64) {
      tl = fn4(al, bl, cl, dl, el, words[zl[i]], hl[3], sl[i])
      tr = fn2(ar, br, cr, dr, er, words[zr[i]], hr[3], sr[i])
    } else { // if (i<80) {
      tl = fn5(al, bl, cl, dl, el, words[zl[i]], hl[4], sl[i])
      tr = fn1(ar, br, cr, dr, er, words[zr[i]], hr[4], sr[i])
    }

    al = el
    el = dl
    dl = rotl(cl, 10)
    cl = bl
    bl = tl

    ar = er
    er = dr
    dr = rotl(cr, 10)
    cr = br
    br = tr
  }

  // update state
  var t = (this._b + cl + dr) | 0
  this._b = (this._c + dl + er) | 0
  this._c = (this._d + el + ar) | 0
  this._d = (this._e + al + br) | 0
  this._e = (this._a + bl + cr) | 0
  this._a = t
}

RIPEMD160.prototype._digest = function () {
  // create padding and handle blocks
  this._block[this._blockOffset++] = 0x80
  if (this._blockOffset > 56) {
    this._block.fill(0, this._blockOffset, 64)
    this._update()
    this._blockOffset = 0
  }

  this._block.fill(0, this._blockOffset, 56)
  this._block.writeUInt32LE(this._length[0], 56)
  this._block.writeUInt32LE(this._length[1], 60)
  this._update()

  // produce result
  var buffer = Buffer.alloc ? Buffer.alloc(20) : new Buffer(20)
  buffer.writeInt32LE(this._a, 0)
  buffer.writeInt32LE(this._b, 4)
  buffer.writeInt32LE(this._c, 8)
  buffer.writeInt32LE(this._d, 12)
  buffer.writeInt32LE(this._e, 16)
  return buffer
}

function rotl (x, n) {
  return (x << n) | (x >>> (32 - n))
}

function fn1 (a, b, c, d, e, m, k, s) {
  return (rotl((a + (b ^ c ^ d) + m + k) | 0, s) + e) | 0
}

function fn2 (a, b, c, d, e, m, k, s) {
  return (rotl((a + ((b & c) | ((~b) & d)) + m + k) | 0, s) + e) | 0
}

function fn3 (a, b, c, d, e, m, k, s) {
  return (rotl((a + ((b | (~c)) ^ d) + m + k) | 0, s) + e) | 0
}

function fn4 (a, b, c, d, e, m, k, s) {
  return (rotl((a + ((b & d) | (c & (~d))) + m + k) | 0, s) + e) | 0
}

function fn5 (a, b, c, d, e, m, k, s) {
  return (rotl((a + (b ^ (c | (~d))) + m + k) | 0, s) + e) | 0
}

module.exports = RIPEMD160

},{"buffer":4,"hash-base":88,"inherits":102}],126:[function(require,module,exports){
arguments[4][11][0].apply(exports,arguments)
},{"buffer":4,"dup":11}],127:[function(require,module,exports){
(function (process,Buffer,__dirname){(function (){

var Module = (function() {
  var _scriptDir = typeof document !== 'undefined' && document.currentScript ? document.currentScript.src : undefined;
  return (
function(Module) {
  Module = Module || {};

var Module=typeof Module!=="undefined"?Module:{};var moduleOverrides={};var key;for(key in Module){if(Module.hasOwnProperty(key)){moduleOverrides[key]=Module[key]}}Module["arguments"]=[];Module["thisProgram"]="./this.program";Module["quit"]=(function(status,toThrow){throw toThrow});Module["preRun"]=[];Module["postRun"]=[];var ENVIRONMENT_IS_WEB=false;var ENVIRONMENT_IS_WORKER=false;var ENVIRONMENT_IS_NODE=false;var ENVIRONMENT_IS_SHELL=false;ENVIRONMENT_IS_WEB=typeof window==="object";ENVIRONMENT_IS_WORKER=typeof importScripts==="function";ENVIRONMENT_IS_NODE=typeof process==="object"&&typeof require==="function"&&!ENVIRONMENT_IS_WEB&&!ENVIRONMENT_IS_WORKER;ENVIRONMENT_IS_SHELL=!ENVIRONMENT_IS_WEB&&!ENVIRONMENT_IS_NODE&&!ENVIRONMENT_IS_WORKER;var scriptDirectory="";function locateFile(path){if(Module["locateFile"]){return Module["locateFile"](path,scriptDirectory)}else{return scriptDirectory+path}}if(ENVIRONMENT_IS_NODE){scriptDirectory=__dirname+"/";var nodeFS;var nodePath;Module["read"]=function shell_read(filename,binary){var ret;ret=tryParseAsDataURI(filename);if(!ret){if(!nodeFS)nodeFS=require("fs");if(!nodePath)nodePath=require("path");filename=nodePath["normalize"](filename);ret=nodeFS["readFileSync"](filename)}return binary?ret:ret.toString()};Module["readBinary"]=function readBinary(filename){var ret=Module["read"](filename,true);if(!ret.buffer){ret=new Uint8Array(ret)}assert(ret.buffer);return ret};if(process["argv"].length>1){Module["thisProgram"]=process["argv"][1].replace(/\\/g,"/")}Module["arguments"]=process["argv"].slice(2);process["on"]("uncaughtException",(function(ex){if(!(ex instanceof ExitStatus)){throw ex}}));process["on"]("unhandledRejection",(function(reason,p){process["exit"](1)}));Module["quit"]=(function(status){process["exit"](status)});Module["inspect"]=(function(){return"[Emscripten Module object]"})}else if(ENVIRONMENT_IS_SHELL){if(typeof read!="undefined"){Module["read"]=function shell_read(f){var data=tryParseAsDataURI(f);if(data){return intArrayToString(data)}return read(f)}}Module["readBinary"]=function readBinary(f){var data;data=tryParseAsDataURI(f);if(data){return data}if(typeof readbuffer==="function"){return new Uint8Array(readbuffer(f))}data=read(f,"binary");assert(typeof data==="object");return data};if(typeof scriptArgs!="undefined"){Module["arguments"]=scriptArgs}else if(typeof arguments!="undefined"){Module["arguments"]=arguments}if(typeof quit==="function"){Module["quit"]=(function(status){quit(status)})}}else if(ENVIRONMENT_IS_WEB||ENVIRONMENT_IS_WORKER){if(ENVIRONMENT_IS_WEB){if(document.currentScript){scriptDirectory=document.currentScript.src}}else{scriptDirectory=self.location.href}if(_scriptDir){scriptDirectory=_scriptDir}if(scriptDirectory.indexOf("blob:")!==0){scriptDirectory=scriptDirectory.split("/").slice(0,-1).join("/")+"/"}else{scriptDirectory=""}Module["read"]=function shell_read(url){try{var xhr=new XMLHttpRequest;xhr.open("GET",url,false);xhr.send(null);return xhr.responseText}catch(err){var data=tryParseAsDataURI(url);if(data){return intArrayToString(data)}throw err}};if(ENVIRONMENT_IS_WORKER){Module["readBinary"]=function readBinary(url){try{var xhr=new XMLHttpRequest;xhr.open("GET",url,false);xhr.responseType="arraybuffer";xhr.send(null);return new Uint8Array(xhr.response)}catch(err){var data=tryParseAsDataURI(url);if(data){return data}throw err}}}Module["readAsync"]=function readAsync(url,onload,onerror){var xhr=new XMLHttpRequest;xhr.open("GET",url,true);xhr.responseType="arraybuffer";xhr.onload=function xhr_onload(){if(xhr.status==200||xhr.status==0&&xhr.response){onload(xhr.response);return}var data=tryParseAsDataURI(url);if(data){onload(data.buffer);return}onerror()};xhr.onerror=onerror;xhr.send(null)};Module["setWindowTitle"]=(function(title){document.title=title})}else{}var out=Module["print"]||(typeof console!=="undefined"?console.log.bind(console):typeof print!=="undefined"?print:null);var err=Module["printErr"]||(typeof printErr!=="undefined"?printErr:typeof console!=="undefined"&&console.warn.bind(console)||out);for(key in moduleOverrides){if(moduleOverrides.hasOwnProperty(key)){Module[key]=moduleOverrides[key]}}moduleOverrides=undefined;var STACK_ALIGN=16;function staticAlloc(size){var ret=STATICTOP;STATICTOP=STATICTOP+size+15&-16;return ret}function alignMemory(size,factor){if(!factor)factor=STACK_ALIGN;var ret=size=Math.ceil(size/factor)*factor;return ret}var asm2wasmImports={"f64-rem":(function(x,y){return x%y}),"debugger":(function(){debugger})};var functionPointers=new Array(0);var GLOBAL_BASE=1024;var ABORT=0;var EXITSTATUS=0;function assert(condition,text){if(!condition){abort("Assertion failed: "+text)}}function getCFunc(ident){var func=Module["_"+ident];assert(func,"Cannot call unknown function "+ident+", make sure it is exported");return func}var JSfuncs={"stackSave":(function(){stackSave()}),"stackRestore":(function(){stackRestore()}),"arrayToC":(function(arr){var ret=stackAlloc(arr.length);writeArrayToMemory(arr,ret);return ret}),"stringToC":(function(str){var ret=0;if(str!==null&&str!==undefined&&str!==0){var len=(str.length<<2)+1;ret=stackAlloc(len);stringToUTF8(str,ret,len)}return ret})};var toC={"string":JSfuncs["stringToC"],"array":JSfuncs["arrayToC"]};function ccall(ident,returnType,argTypes,args,opts){function convertReturnValue(ret){if(returnType==="string")return Pointer_stringify(ret);if(returnType==="boolean")return Boolean(ret);return ret}var func=getCFunc(ident);var cArgs=[];var stack=0;if(args){for(var i=0;i<args.length;i++){var converter=toC[argTypes[i]];if(converter){if(stack===0)stack=stackSave();cArgs[i]=converter(args[i])}else{cArgs[i]=args[i]}}}var ret=func.apply(null,cArgs);ret=convertReturnValue(ret);if(stack!==0)stackRestore(stack);return ret}function setValue(ptr,value,type,noSafe){type=type||"i8";if(type.charAt(type.length-1)==="*")type="i32";switch(type){case"i1":HEAP8[ptr>>0]=value;break;case"i8":HEAP8[ptr>>0]=value;break;case"i16":HEAP16[ptr>>1]=value;break;case"i32":HEAP32[ptr>>2]=value;break;case"i64":tempI64=[value>>>0,(tempDouble=value,+Math_abs(tempDouble)>=1?tempDouble>0?(Math_min(+Math_floor(tempDouble/4294967296),4294967295)|0)>>>0:~~+Math_ceil((tempDouble- +(~~tempDouble>>>0))/4294967296)>>>0:0)],HEAP32[ptr>>2]=tempI64[0],HEAP32[ptr+4>>2]=tempI64[1];break;case"float":HEAPF32[ptr>>2]=value;break;case"double":HEAPF64[ptr>>3]=value;break;default:abort("invalid type for setValue: "+type)}}function getValue(ptr,type,noSafe){type=type||"i8";if(type.charAt(type.length-1)==="*")type="i32";switch(type){case"i1":return HEAP8[ptr>>0];case"i8":return HEAP8[ptr>>0];case"i16":return HEAP16[ptr>>1];case"i32":return HEAP32[ptr>>2];case"i64":return HEAP32[ptr>>2];case"float":return HEAPF32[ptr>>2];case"double":return HEAPF64[ptr>>3];default:abort("invalid type for getValue: "+type)}return null}function Pointer_stringify(ptr,length){if(length===0||!ptr)return"";var hasUtf=0;var t;var i=0;while(1){t=HEAPU8[ptr+i>>0];hasUtf|=t;if(t==0&&!length)break;i++;if(length&&i==length)break}if(!length)length=i;var ret="";if(hasUtf<128){var MAX_CHUNK=1024;var curr;while(length>0){curr=String.fromCharCode.apply(String,HEAPU8.subarray(ptr,ptr+Math.min(length,MAX_CHUNK)));ret=ret?ret+curr:curr;ptr+=MAX_CHUNK;length-=MAX_CHUNK}return ret}return UTF8ToString(ptr)}var UTF8Decoder=typeof TextDecoder!=="undefined"?new TextDecoder("utf8"):undefined;function UTF8ArrayToString(u8Array,idx){var endPtr=idx;while(u8Array[endPtr])++endPtr;if(endPtr-idx>16&&u8Array.subarray&&UTF8Decoder){return UTF8Decoder.decode(u8Array.subarray(idx,endPtr))}else{var u0,u1,u2,u3,u4,u5;var str="";while(1){u0=u8Array[idx++];if(!u0)return str;if(!(u0&128)){str+=String.fromCharCode(u0);continue}u1=u8Array[idx++]&63;if((u0&224)==192){str+=String.fromCharCode((u0&31)<<6|u1);continue}u2=u8Array[idx++]&63;if((u0&240)==224){u0=(u0&15)<<12|u1<<6|u2}else{u3=u8Array[idx++]&63;if((u0&248)==240){u0=(u0&7)<<18|u1<<12|u2<<6|u3}else{u4=u8Array[idx++]&63;if((u0&252)==248){u0=(u0&3)<<24|u1<<18|u2<<12|u3<<6|u4}else{u5=u8Array[idx++]&63;u0=(u0&1)<<30|u1<<24|u2<<18|u3<<12|u4<<6|u5}}}if(u0<65536){str+=String.fromCharCode(u0)}else{var ch=u0-65536;str+=String.fromCharCode(55296|ch>>10,56320|ch&1023)}}}}function UTF8ToString(ptr){return UTF8ArrayToString(HEAPU8,ptr)}function stringToUTF8Array(str,outU8Array,outIdx,maxBytesToWrite){if(!(maxBytesToWrite>0))return 0;var startIdx=outIdx;var endIdx=outIdx+maxBytesToWrite-1;for(var i=0;i<str.length;++i){var u=str.charCodeAt(i);if(u>=55296&&u<=57343){var u1=str.charCodeAt(++i);u=65536+((u&1023)<<10)|u1&1023}if(u<=127){if(outIdx>=endIdx)break;outU8Array[outIdx++]=u}else if(u<=2047){if(outIdx+1>=endIdx)break;outU8Array[outIdx++]=192|u>>6;outU8Array[outIdx++]=128|u&63}else if(u<=65535){if(outIdx+2>=endIdx)break;outU8Array[outIdx++]=224|u>>12;outU8Array[outIdx++]=128|u>>6&63;outU8Array[outIdx++]=128|u&63}else if(u<=2097151){if(outIdx+3>=endIdx)break;outU8Array[outIdx++]=240|u>>18;outU8Array[outIdx++]=128|u>>12&63;outU8Array[outIdx++]=128|u>>6&63;outU8Array[outIdx++]=128|u&63}else if(u<=67108863){if(outIdx+4>=endIdx)break;outU8Array[outIdx++]=248|u>>24;outU8Array[outIdx++]=128|u>>18&63;outU8Array[outIdx++]=128|u>>12&63;outU8Array[outIdx++]=128|u>>6&63;outU8Array[outIdx++]=128|u&63}else{if(outIdx+5>=endIdx)break;outU8Array[outIdx++]=252|u>>30;outU8Array[outIdx++]=128|u>>24&63;outU8Array[outIdx++]=128|u>>18&63;outU8Array[outIdx++]=128|u>>12&63;outU8Array[outIdx++]=128|u>>6&63;outU8Array[outIdx++]=128|u&63}}outU8Array[outIdx]=0;return outIdx-startIdx}function stringToUTF8(str,outPtr,maxBytesToWrite){return stringToUTF8Array(str,HEAPU8,outPtr,maxBytesToWrite)}var UTF16Decoder=typeof TextDecoder!=="undefined"?new TextDecoder("utf-16le"):undefined;var WASM_PAGE_SIZE=65536;var ASMJS_PAGE_SIZE=16777216;function alignUp(x,multiple){if(x%multiple>0){x+=multiple-x%multiple}return x}var buffer,HEAP8,HEAPU8,HEAP16,HEAPU16,HEAP32,HEAPU32,HEAPF32,HEAPF64;function updateGlobalBuffer(buf){Module["buffer"]=buffer=buf}function updateGlobalBufferViews(){Module["HEAP8"]=HEAP8=new Int8Array(buffer);Module["HEAP16"]=HEAP16=new Int16Array(buffer);Module["HEAP32"]=HEAP32=new Int32Array(buffer);Module["HEAPU8"]=HEAPU8=new Uint8Array(buffer);Module["HEAPU16"]=HEAPU16=new Uint16Array(buffer);Module["HEAPU32"]=HEAPU32=new Uint32Array(buffer);Module["HEAPF32"]=HEAPF32=new Float32Array(buffer);Module["HEAPF64"]=HEAPF64=new Float64Array(buffer)}var STATIC_BASE,STATICTOP,staticSealed;var STACK_BASE,STACKTOP,STACK_MAX;var DYNAMIC_BASE,DYNAMICTOP_PTR;STATIC_BASE=STATICTOP=STACK_BASE=STACKTOP=STACK_MAX=DYNAMIC_BASE=DYNAMICTOP_PTR=0;staticSealed=false;function abortOnCannotGrowMemory(){abort("Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value "+TOTAL_MEMORY+", (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime, or (3) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ")}function enlargeMemory(){abortOnCannotGrowMemory()}var TOTAL_STACK=Module["TOTAL_STACK"]||5242880;var TOTAL_MEMORY=Module["TOTAL_MEMORY"]||16777216;if(TOTAL_MEMORY<TOTAL_STACK)err("TOTAL_MEMORY should be larger than TOTAL_STACK, was "+TOTAL_MEMORY+"! (TOTAL_STACK="+TOTAL_STACK+")");if(Module["buffer"]){buffer=Module["buffer"]}else{if(typeof WebAssembly==="object"&&typeof WebAssembly.Memory==="function"){Module["wasmMemory"]=new WebAssembly.Memory({"initial":TOTAL_MEMORY/WASM_PAGE_SIZE,"maximum":TOTAL_MEMORY/WASM_PAGE_SIZE});buffer=Module["wasmMemory"].buffer}else{buffer=new ArrayBuffer(TOTAL_MEMORY)}Module["buffer"]=buffer}updateGlobalBufferViews();function getTotalMemory(){return TOTAL_MEMORY}function callRuntimeCallbacks(callbacks){while(callbacks.length>0){var callback=callbacks.shift();if(typeof callback=="function"){callback();continue}var func=callback.func;if(typeof func==="number"){if(callback.arg===undefined){Module["dynCall_v"](func)}else{Module["dynCall_vi"](func,callback.arg)}}else{func(callback.arg===undefined?null:callback.arg)}}}var __ATPRERUN__=[];var __ATINIT__=[];var __ATMAIN__=[];var __ATPOSTRUN__=[];var runtimeInitialized=false;function preRun(){if(Module["preRun"]){if(typeof Module["preRun"]=="function")Module["preRun"]=[Module["preRun"]];while(Module["preRun"].length){addOnPreRun(Module["preRun"].shift())}}callRuntimeCallbacks(__ATPRERUN__)}function ensureInitRuntime(){if(runtimeInitialized)return;runtimeInitialized=true;callRuntimeCallbacks(__ATINIT__)}function preMain(){callRuntimeCallbacks(__ATMAIN__)}function postRun(){if(Module["postRun"]){if(typeof Module["postRun"]=="function")Module["postRun"]=[Module["postRun"]];while(Module["postRun"].length){addOnPostRun(Module["postRun"].shift())}}callRuntimeCallbacks(__ATPOSTRUN__)}function addOnPreRun(cb){__ATPRERUN__.unshift(cb)}function addOnPostRun(cb){__ATPOSTRUN__.unshift(cb)}function writeArrayToMemory(array,buffer){HEAP8.set(array,buffer)}var Math_abs=Math.abs;var Math_ceil=Math.ceil;var Math_floor=Math.floor;var Math_min=Math.min;var runDependencies=0;var runDependencyWatcher=null;var dependenciesFulfilled=null;function addRunDependency(id){runDependencies++;if(Module["monitorRunDependencies"]){Module["monitorRunDependencies"](runDependencies)}}function removeRunDependency(id){runDependencies--;if(Module["monitorRunDependencies"]){Module["monitorRunDependencies"](runDependencies)}if(runDependencies==0){if(runDependencyWatcher!==null){clearInterval(runDependencyWatcher);runDependencyWatcher=null}if(dependenciesFulfilled){var callback=dependenciesFulfilled;dependenciesFulfilled=null;callback()}}}Module["preloadedImages"]={};Module["preloadedAudios"]={};var dataURIPrefix="data:application/octet-stream;base64,";function isDataURI(filename){return String.prototype.startsWith?filename.startsWith(dataURIPrefix):filename.indexOf(dataURIPrefix)===0}function integrateWasmJS(){var wasmTextFile="";var wasmBinaryFile="data:application/octet-stream;base64,";var asmjsCodeFile="";if(!isDataURI(wasmTextFile)){wasmTextFile=locateFile(wasmTextFile)}if(!isDataURI(wasmBinaryFile)){wasmBinaryFile=locateFile(wasmBinaryFile)}if(!isDataURI(asmjsCodeFile)){asmjsCodeFile=locateFile(asmjsCodeFile)}var wasmPageSize=64*1024;var info={"global":null,"env":null,"asm2wasm":asm2wasmImports,"parent":Module};var exports=null;function mergeMemory(newBuffer){var oldBuffer=Module["buffer"];if(newBuffer.byteLength<oldBuffer.byteLength){err("the new buffer in mergeMemory is smaller than the previous one. in native wasm, we should grow memory here")}var oldView=new Int8Array(oldBuffer);var newView=new Int8Array(newBuffer);newView.set(oldView);updateGlobalBuffer(newBuffer);updateGlobalBufferViews()}function fixImports(imports){return imports}function getBinary(){try{if(Module["wasmBinary"]){return new Uint8Array(Module["wasmBinary"])}var binary=tryParseAsDataURI(wasmBinaryFile);if(binary){return binary}if(Module["readBinary"]){return Module["readBinary"](wasmBinaryFile)}else{throw"both async and sync fetching of the wasm failed"}}catch(err){abort(err)}}function getBinaryPromise(){if(!Module["wasmBinary"]&&(ENVIRONMENT_IS_WEB||ENVIRONMENT_IS_WORKER)&&typeof fetch==="function"){return fetch(wasmBinaryFile,{credentials:"same-origin"}).then((function(response){if(!response["ok"]){throw"failed to load wasm binary file at '"+wasmBinaryFile+"'"}return response["arrayBuffer"]()})).catch((function(){return getBinary()}))}return new Promise((function(resolve,reject){resolve(getBinary())}))}function doNativeWasm(global,env,providedBuffer){if(typeof WebAssembly!=="object"){err("no native wasm support detected");return false}if(!(Module["wasmMemory"]instanceof WebAssembly.Memory)){err("no native wasm Memory in use");return false}env["memory"]=Module["wasmMemory"];info["global"]={"NaN":NaN,"Infinity":Infinity};info["global.Math"]=Math;info["env"]=env;function receiveInstance(instance,module){exports=instance.exports;if(exports.memory)mergeMemory(exports.memory);Module["asm"]=exports;Module["usingWasm"]=true;removeRunDependency("wasm-instantiate")}addRunDependency("wasm-instantiate");if(Module["instantiateWasm"]){try{return Module["instantiateWasm"](info,receiveInstance)}catch(e){err("Module.instantiateWasm callback failed with error: "+e);return false}}function receiveInstantiatedSource(output){receiveInstance(output["instance"],output["module"])}function instantiateArrayBuffer(receiver){getBinaryPromise().then((function(binary){return WebAssembly.instantiate(binary,info)})).then(receiver).catch((function(reason){err("failed to asynchronously prepare wasm: "+reason);abort(reason)}))}if(!Module["wasmBinary"]&&typeof WebAssembly.instantiateStreaming==="function"&&!isDataURI(wasmBinaryFile)&&typeof fetch==="function"){WebAssembly.instantiateStreaming(fetch(wasmBinaryFile,{credentials:"same-origin"}),info).then(receiveInstantiatedSource).catch((function(reason){err("wasm streaming compile failed: "+reason);err("falling back to ArrayBuffer instantiation");instantiateArrayBuffer(receiveInstantiatedSource)}))}else{instantiateArrayBuffer(receiveInstantiatedSource)}return{}}Module["asmPreload"]=Module["asm"];var asmjsReallocBuffer=Module["reallocBuffer"];var wasmReallocBuffer=(function(size){var PAGE_MULTIPLE=Module["usingWasm"]?WASM_PAGE_SIZE:ASMJS_PAGE_SIZE;size=alignUp(size,PAGE_MULTIPLE);var old=Module["buffer"];var oldSize=old.byteLength;if(Module["usingWasm"]){try{var result=Module["wasmMemory"].grow((size-oldSize)/wasmPageSize);if(result!==(-1|0)){return Module["buffer"]=Module["wasmMemory"].buffer}else{return null}}catch(e){return null}}});Module["reallocBuffer"]=(function(size){if(finalMethod==="asmjs"){return asmjsReallocBuffer(size)}else{return wasmReallocBuffer(size)}});var finalMethod="";Module["asm"]=(function(global,env,providedBuffer){env=fixImports(env);if(!env["table"]){var TABLE_SIZE=Module["wasmTableSize"];if(TABLE_SIZE===undefined)TABLE_SIZE=1024;var MAX_TABLE_SIZE=Module["wasmMaxTableSize"];if(typeof WebAssembly==="object"&&typeof WebAssembly.Table==="function"){if(MAX_TABLE_SIZE!==undefined){env["table"]=new WebAssembly.Table({"initial":TABLE_SIZE,"maximum":MAX_TABLE_SIZE,"element":"anyfunc"})}else{env["table"]=new WebAssembly.Table({"initial":TABLE_SIZE,element:"anyfunc"})}}else{env["table"]=new Array(TABLE_SIZE)}Module["wasmTable"]=env["table"]}if(!env["memoryBase"]){env["memoryBase"]=Module["STATIC_BASE"]}if(!env["tableBase"]){env["tableBase"]=0}var exports;exports=doNativeWasm(global,env,providedBuffer);assert(exports,"no binaryen method succeeded.");return exports})}integrateWasmJS();STATIC_BASE=GLOBAL_BASE;STATICTOP=STATIC_BASE+72e3;__ATINIT__.push();var STATIC_BUMP=72e3;Module["STATIC_BASE"]=STATIC_BASE;Module["STATIC_BUMP"]=STATIC_BUMP;STATICTOP+=16;var SYSCALLS={varargs:0,get:(function(varargs){SYSCALLS.varargs+=4;var ret=HEAP32[SYSCALLS.varargs-4>>2];return ret}),getStr:(function(){var ret=Pointer_stringify(SYSCALLS.get());return ret}),get64:(function(){var low=SYSCALLS.get(),high=SYSCALLS.get();if(low>=0)assert(high===0);else assert(high===-1);return low}),getZero:(function(){assert(SYSCALLS.get()===0)})};function ___syscall140(which,varargs){SYSCALLS.varargs=varargs;try{var stream=SYSCALLS.getStreamFromFD(),offset_high=SYSCALLS.get(),offset_low=SYSCALLS.get(),result=SYSCALLS.get(),whence=SYSCALLS.get();var offset=offset_low;FS.llseek(stream,offset,whence);HEAP32[result>>2]=stream.position;if(stream.getdents&&offset===0&&whence===0)stream.getdents=null;return 0}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}function ___syscall146(which,varargs){SYSCALLS.varargs=varargs;try{var stream=SYSCALLS.get(),iov=SYSCALLS.get(),iovcnt=SYSCALLS.get();var ret=0;if(!___syscall146.buffers){___syscall146.buffers=[null,[],[]];___syscall146.printChar=(function(stream,curr){var buffer=___syscall146.buffers[stream];assert(buffer);if(curr===0||curr===10){(stream===1?out:err)(UTF8ArrayToString(buffer,0));buffer.length=0}else{buffer.push(curr)}})}for(var i=0;i<iovcnt;i++){var ptr=HEAP32[iov+i*8>>2];var len=HEAP32[iov+(i*8+4)>>2];for(var j=0;j<len;j++){___syscall146.printChar(stream,HEAPU8[ptr+j])}ret+=len}return ret}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}function ___syscall6(which,varargs){SYSCALLS.varargs=varargs;try{var stream=SYSCALLS.getStreamFromFD();FS.close(stream);return 0}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}function _abort(){Module["abort"]()}function _llvm_stackrestore(p){var self=_llvm_stacksave;var ret=self.LLVM_SAVEDSTACKS[p];self.LLVM_SAVEDSTACKS.splice(p,1);stackRestore(ret)}function _llvm_stacksave(){var self=_llvm_stacksave;if(!self.LLVM_SAVEDSTACKS){self.LLVM_SAVEDSTACKS=[]}self.LLVM_SAVEDSTACKS.push(stackSave());return self.LLVM_SAVEDSTACKS.length-1}function _emscripten_memcpy_big(dest,src,num){HEAPU8.set(HEAPU8.subarray(src,src+num),dest);return dest}function ___setErrNo(value){if(Module["___errno_location"])HEAP32[Module["___errno_location"]()>>2]=value;return value}DYNAMICTOP_PTR=staticAlloc(4);STACK_BASE=STACKTOP=alignMemory(STATICTOP);STACK_MAX=STACK_BASE+TOTAL_STACK;DYNAMIC_BASE=alignMemory(STACK_MAX);HEAP32[DYNAMICTOP_PTR>>2]=DYNAMIC_BASE;staticSealed=true;var ASSERTIONS=false;function intArrayToString(array){var ret=[];for(var i=0;i<array.length;i++){var chr=array[i];if(chr>255){if(ASSERTIONS){assert(false,"Character code "+chr+" ("+String.fromCharCode(chr)+")  at offset "+i+" not in 0x00-0xFF.")}chr&=255}ret.push(String.fromCharCode(chr))}return ret.join("")}var decodeBase64=typeof atob==="function"?atob:(function(input){var keyStr="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";var output="";var chr1,chr2,chr3;var enc1,enc2,enc3,enc4;var i=0;input=input.replace(/[^A-Za-z0-9\+\/\=]/g,"");do{enc1=keyStr.indexOf(input.charAt(i++));enc2=keyStr.indexOf(input.charAt(i++));enc3=keyStr.indexOf(input.charAt(i++));enc4=keyStr.indexOf(input.charAt(i++));chr1=enc1<<2|enc2>>4;chr2=(enc2&15)<<4|enc3>>2;chr3=(enc3&3)<<6|enc4;output=output+String.fromCharCode(chr1);if(enc3!==64){output=output+String.fromCharCode(chr2)}if(enc4!==64){output=output+String.fromCharCode(chr3)}}while(i<input.length);return output});function intArrayFromBase64(s){if(typeof ENVIRONMENT_IS_NODE==="boolean"&&ENVIRONMENT_IS_NODE){var buf;try{buf=Buffer.from(s,"base64")}catch(_){buf=new Buffer(s,"base64")}return new Uint8Array(buf.buffer,buf.byteOffset,buf.byteLength)}try{var decoded=decodeBase64(s);var bytes=new Uint8Array(decoded.length);for(var i=0;i<decoded.length;++i){bytes[i]=decoded.charCodeAt(i)}return bytes}catch(_){throw new Error("Converting base64 string to bytes failed.")}}function tryParseAsDataURI(filename){if(!isDataURI(filename)){return}return intArrayFromBase64(filename.slice(dataURIPrefix.length))}Module["wasmTableSize"]=12;Module["wasmMaxTableSize"]=12;Module.asmGlobalArg={};Module.asmLibraryArg={"abort":abort,"enlargeMemory":enlargeMemory,"getTotalMemory":getTotalMemory,"abortOnCannotGrowMemory":abortOnCannotGrowMemory,"___setErrNo":___setErrNo,"___syscall140":___syscall140,"___syscall146":___syscall146,"___syscall6":___syscall6,"_abort":_abort,"_emscripten_memcpy_big":_emscripten_memcpy_big,"_llvm_stackrestore":_llvm_stackrestore,"_llvm_stacksave":_llvm_stacksave,"DYNAMICTOP_PTR":DYNAMICTOP_PTR,"STACKTOP":STACKTOP};var asm=Module["asm"](Module.asmGlobalArg,Module.asmLibraryArg,buffer);Module["asm"]=asm;var _ecdh=Module["_ecdh"]=(function(){return Module["asm"]["_ecdh"].apply(null,arguments)});var _free=Module["_free"]=(function(){return Module["asm"]["_free"].apply(null,arguments)});var _generator_generate_blinded=Module["_generator_generate_blinded"]=(function(){return Module["asm"]["_generator_generate_blinded"].apply(null,arguments)});var _generator_parse=Module["_generator_parse"]=(function(){return Module["asm"]["_generator_parse"].apply(null,arguments)});var _generator_serialize=Module["_generator_serialize"]=(function(){return Module["asm"]["_generator_serialize"].apply(null,arguments)});var _malloc=Module["_malloc"]=(function(){return Module["asm"]["_malloc"].apply(null,arguments)});var _pedersen_blind_generator_blind_sum=Module["_pedersen_blind_generator_blind_sum"]=(function(){return Module["asm"]["_pedersen_blind_generator_blind_sum"].apply(null,arguments)});var _pedersen_blind_sum=Module["_pedersen_blind_sum"]=(function(){return Module["asm"]["_pedersen_blind_sum"].apply(null,arguments)});var _pedersen_commit=Module["_pedersen_commit"]=(function(){return Module["asm"]["_pedersen_commit"].apply(null,arguments)});var _pedersen_commitment_parse=Module["_pedersen_commitment_parse"]=(function(){return Module["asm"]["_pedersen_commitment_parse"].apply(null,arguments)});var _pedersen_commitment_serialize=Module["_pedersen_commitment_serialize"]=(function(){return Module["asm"]["_pedersen_commitment_serialize"].apply(null,arguments)});var _pedersen_verify_tally=Module["_pedersen_verify_tally"]=(function(){return Module["asm"]["_pedersen_verify_tally"].apply(null,arguments)});var _rangeproof_info=Module["_rangeproof_info"]=(function(){return Module["asm"]["_rangeproof_info"].apply(null,arguments)});var _rangeproof_rewind=Module["_rangeproof_rewind"]=(function(){return Module["asm"]["_rangeproof_rewind"].apply(null,arguments)});var _rangeproof_sign=Module["_rangeproof_sign"]=(function(){return Module["asm"]["_rangeproof_sign"].apply(null,arguments)});var _rangeproof_verify=Module["_rangeproof_verify"]=(function(){return Module["asm"]["_rangeproof_verify"].apply(null,arguments)});var _surjectionproof_generate=Module["_surjectionproof_generate"]=(function(){return Module["asm"]["_surjectionproof_generate"].apply(null,arguments)});var _surjectionproof_initialize=Module["_surjectionproof_initialize"]=(function(){return Module["asm"]["_surjectionproof_initialize"].apply(null,arguments)});var _surjectionproof_parse=Module["_surjectionproof_parse"]=(function(){return Module["asm"]["_surjectionproof_parse"].apply(null,arguments)});var _surjectionproof_serialize=Module["_surjectionproof_serialize"]=(function(){return Module["asm"]["_surjectionproof_serialize"].apply(null,arguments)});var _surjectionproof_verify=Module["_surjectionproof_verify"]=(function(){return Module["asm"]["_surjectionproof_verify"].apply(null,arguments)});var stackAlloc=Module["stackAlloc"]=(function(){return Module["asm"]["stackAlloc"].apply(null,arguments)});var stackRestore=Module["stackRestore"]=(function(){return Module["asm"]["stackRestore"].apply(null,arguments)});var stackSave=Module["stackSave"]=(function(){return Module["asm"]["stackSave"].apply(null,arguments)});Module["asm"]=asm;Module["ccall"]=ccall;Module["setValue"]=setValue;Module["getValue"]=getValue;Module["then"]=(function(func){if(Module["calledRun"]){func(Module)}else{var old=Module["onRuntimeInitialized"];Module["onRuntimeInitialized"]=(function(){if(old)old();func(Module)})}return Module});function ExitStatus(status){this.name="ExitStatus";this.message="Program terminated with exit("+status+")";this.status=status}ExitStatus.prototype=new Error;ExitStatus.prototype.constructor=ExitStatus;dependenciesFulfilled=function runCaller(){if(!Module["calledRun"])run();if(!Module["calledRun"])dependenciesFulfilled=runCaller};function run(args){args=args||Module["arguments"];if(runDependencies>0){return}preRun();if(runDependencies>0)return;if(Module["calledRun"])return;function doRun(){if(Module["calledRun"])return;Module["calledRun"]=true;if(ABORT)return;ensureInitRuntime();preMain();if(Module["onRuntimeInitialized"])Module["onRuntimeInitialized"]();postRun()}if(Module["setStatus"]){Module["setStatus"]("Running...");setTimeout((function(){setTimeout((function(){Module["setStatus"]("")}),1);doRun()}),1)}else{doRun()}}Module["run"]=run;function abort(what){if(Module["onAbort"]){Module["onAbort"](what)}if(what!==undefined){out(what);err(what);what=JSON.stringify(what)}else{what=""}ABORT=true;EXITSTATUS=1;throw"abort("+what+"). Build with -s ASSERTIONS=1 for more info."}Module["abort"]=abort;if(Module["preInit"]){if(typeof Module["preInit"]=="function")Module["preInit"]=[Module["preInit"]];while(Module["preInit"].length>0){Module["preInit"].pop()()}}Module["noExitRuntime"]=true;run()





  return Module;
}
);
})();
if (typeof exports === 'object' && typeof module === 'object')
    module.exports = Module;
  else if (typeof define === 'function' && define['amd'])
    define([], function() { return Module; });
  else if (typeof exports === 'object')
    exports["Module"] = Module;
  
}).call(this)}).call(this,require('_process'),require("buffer").Buffer,"/node_modules/secp256k1-zkp/dist")
},{"_process":10,"buffer":4,"fs":1,"path":9}],128:[function(require,module,exports){
(function (Buffer){(function (){
const lib = require('../dist/secp256k1-zkp.js');
const Long = require('long');

module.exports = () => {
  return new Promise((resolve) => {
    lib().then((Module) => {
      let free = [];

      function malloc(size) {
        const ptr = Module._malloc(size);
        free.push(ptr);
        return ptr;
      }

      function freeMalloc() {
        for (const ptr of free) {
          Module._free(ptr);
        }
        free = [];
      }

      /**
       *  @summary Calculates a ECDH point.
       *  @return {Array} 32-bytes ecdh point.
       *  @throws {Error} Decode error.
       *  @arg {Array} pubkey - 33-byte pubkey.
       *  @arg {Array} scalar - 32-byte scalar.
       *  @exports
       */
      function ecdh(pubkey, scalar) {
        const output = malloc(32);
        const ret = Module.ccall(
          'ecdh',
          'number',
          ['number', 'number', 'number'],
          [output, charStar(pubkey), charStar(scalar)]
        );

        if (ret === 1) {
          const out = new Uint8Array(
            Module.HEAPU8.subarray(output, output + 32)
          );
          freeMalloc();
          return Buffer.from(out);
        } else {
          freeMalloc();
          throw new Error('secp256k1_ecdh', ret);
        }
      }

      /**
       *  @summary Generates a blinding generator with a blinding factor.
       *  @return {Array} 64-byte generator successfully computed.
       *  @throws {Error} Decode error.
       *  @arg {Array} key - 32-byte array key.
       *  @arg {Array} blind - 32-byte array blinding factor.
       *  @exports
       */
      function generateBlinded(key, blind) {
        if (!key || !Buffer.isBuffer(key) || key.length !== 32)
          throw new TypeError('key must be a Buffer of 32 bytes');
        if (!blind || !Buffer.isBuffer(blind) || blind.length !== 32)
          throw new TypeError('blind must be a Buffer of 32 bytes');

        const output = malloc(64);

        const ret = Module.ccall(
          'generator_generate_blinded',
          'number',
          ['number', 'number', 'number'],
          [output, charStar(key), charStar(blind)]
        );
        if (ret === 1) {
          const out = new Uint8Array(
            Module.HEAPU8.subarray(output, output + 64)
          );
          freeMalloc();
          return Buffer.from(out);
        } else {
          freeMalloc();
          throw new Error('secp256k1_generator_generate_blinded', ret);
        }
      }

      /**
       *  @summary Parses a serialized generator.
       *  @return {Array} 64-bytes generator.
       *  @throws {Error} Decode error.
       *  @arg {Array} input - 33-byte serialized generator.
       *  @exports
       */
      function parse(input) {
        if (!input || !Buffer.isBuffer(input) || input.length !== 33)
          throw new TypeError('input must be a Buffer of 32 bytes');

        const gen = malloc(64);

        const ret = Module.ccall(
          'generator_parse',
          'number',
          ['number', 'number'],
          [gen, charStar(input)]
        );
        if (ret === 1) {
          const out = new Uint8Array(Module.HEAPU8.subarray(gen, gen + 64));
          freeMalloc();
          return Buffer.from(out);
        } else {
          freeMalloc();
          throw new Error('secp256k1_generator_parse', ret);
        }
      }

      /**
       *  @summary Serializes a generator.
       *  @return {Array} 33-bytes serialized generator.
       *  @throws {Error} Decode error.
       *  @arg {Array} generator - 64-byte generator.
       *  @exports
       */
      function serialize(generator) {
        if (
          !generator ||
          !Buffer.isBuffer(generator) ||
          generator.length !== 64
        )
          throw new TypeError('generator must be a Buffer of 32 bytes');

        const output = malloc(33);
        const ret = Module.ccall(
          'generator_serialize',
          'number',
          ['number', 'number'],
          [output, charStar(generator)]
        );
        if (ret === 1) {
          const out = new Uint8Array(
            Module.HEAPU8.subarray(output, output + 33)
          );
          freeMalloc();
          return Buffer.from(out);
        } else {
          freeMalloc();
          throw new Error('secp256k1_generator_parse', ret);
        }
      }

      /**
       *  @summary Generates a pedersen commitment.
       *  @return {Array} 33-bytes commitment successfully created.
       *  @throws {Error} - Decode error.
       *  @arg {Array} blindFactor - 32-byte blinding factor.
       *  @arg {string} value - unsigned 64-bit integer value to commit to as string.
       *  @arg {Array} generator - 64-byte generator.
       *  @exports
       */
      function commit(blindFactor, value, generator) {
        if (
          !blindFactor ||
          !Buffer.isBuffer(blindFactor) ||
          blindFactor.length !== 32
        )
          throw new TypeError('blindFactor must be a Buffer of 32 bytes');
        if (
          !generator ||
          !Buffer.isBuffer(generator) ||
          generator.length !== 64
        )
          throw new TypeError('generator must be a Buffer of 64 bytes');

        const commitment = malloc(64);
        const valueLong = Long.fromString(value, true);

        const ret = Module.ccall(
          'pedersen_commit',
          'number',
          ['number', 'number', 'number', 'number'],
          [
            commitment,
            charStar(blindFactor),
            valueLong.low,
            valueLong.high,
            charStar(generator),
          ]
        );
        if (ret === 1) {
          const out = new Uint8Array(
            Module.HEAPU8.subarray(commitment, commitment + 64)
          );
          freeMalloc();
          return Buffer.from(out);
        } else {
          freeMalloc();
          throw new Error('secp256k1_pedersen_commit', ret);
        }
      }

      /**
       *  @summary Serializes a pedersen commitment.
       *  @return {Array} 33-bytes serialized pedersen commitment.
       *  @throws {Error} - Decode error.
       *  @arg {Array} commitment - 64-byte pedersen commitment (cannot be NULL).
       *  @exports
       */
      function commitSerialize(commitment) {
        if (
          !commitment ||
          !Buffer.isBuffer(commitment) ||
          commitment.length !== 64
        )
          throw new TypeError('commitment must be a Buffer of 64 bytes');

        const out = malloc(33);

        const ret = Module.ccall(
          'pedersen_commitment_serialize',
          'number',
          ['number', 'number'],
          [out, charStar(commitment)]
        );
        if (ret === 1) {
          const cmt = new Uint8Array(Module.HEAPU8.subarray(out, out + 33));
          freeMalloc();
          return Buffer.from(cmt);
        } else {
          freeMalloc();
          throw new Error('secp256k1_pedersen_commitment_serialize', ret);
        }
      }

      /**
       *  @summary Parses a pedersen commitment.
       *  @return {Array} 64-bytes pedersen commitment.
       *  @throws {Error} - Decode error.
       *  @arg {Array} input - 33-byte commitment to parse (cannot be NULL).
       *  @exports
       */
      function commitParse(input) {
        if (!input || !Buffer.isBuffer(input) || input.length !== 33)
          throw new TypeError('input must be a Buffer of 33 bytes');

        const commitment = malloc(64);
        const ret = Module.ccall(
          'pedersen_commitment_parse',
          'number',
          ['number', 'number'],
          [commitment, charStar(input)]
        );
        if (ret === 1) {
          const cmt = new Uint8Array(
            Module.HEAPU8.subarray(commitment, commitment + 64)
          );
          freeMalloc();
          return Buffer.from(cmt);
        } else {
          freeMalloc();
          throw new Error('secp256k1_pedersen_commitment_parse', ret);
        }
      }

      /**
       *  @summary Sets the final blinding factor correctly when the generators themselves have blinding factors.
       *  @return {Array} 32-bytes final blinding factor.
       *  @throws {Error} - Decode error.
       *  @arg {Array} values - array of asset values as string.
       *  @arg {number} nInputs - How many of the initial array elements represent commitments that will be negated in the final sum.
       *  @arg {Array} blindGenerators - array of asset blinding factors.
       *  @arg {Array} blindFactors - array of commitment blinding factors.
       *  @exports
       */
      function blindGeneratorBlindSum(
        values,
        nInputs,
        blindGenerators,
        blindFactors
      ) {
        if (
          !blindGenerators ||
          !Array.isArray(blindGenerators) ||
          !blindGenerators.length
        )
          throw new TypeError(
            'blindGenerators must be a non empty array of Buffers'
          );
        if (!blindFactors || !Array.isArray(blindFactors))
          throw new TypeError('blindFactors must be an array of Buffers');

        const longValues = values.map((v) => Long.fromString(v, true));
        const blindOut = malloc(32);
        const ret = Module.ccall(
          'pedersen_blind_generator_blind_sum',
          'number',
          ['number', 'number', 'number', 'number', 'number', 'number'],
          [
            longIntStarArray(longValues),
            charStarArray(blindGenerators),
            charStarArray(blindFactors),
            blindGenerators.length,
            nInputs,
            blindOut,
          ]
        );
        if (ret === 1) {
          const output = new Uint8Array(
            Module.HEAPU8.subarray(blindOut, blindOut + 32)
          );
          freeMalloc();
          return Buffer.from(output);
        } else {
          freeMalloc();
          throw new Error('secp256k1_pedersen_blind_generator_blind_sum', ret);
        }
      }

      /**
       *  @summary Computes the sum of multiple positive and negative blinding factors.
       *  @return {Array} 32-bytes sum successfully computed.
       *  @throws {Error} Decode error.
       *  @arg {Array} blinds - 32-byte character arrays for blinding factors.
       *  @arg {number} [nneg = 0] - how many of the initial factors should be treated with a negative sign.
       *  @exports
       */
      function blindSum(blinds, nneg = 0) {
        if (!blinds || !Array.isArray(blinds) || !blinds.length)
          throw new TypeError('blinds must be a non empty array of Buffers');

        const sum = malloc(32);
        const ret = Module.ccall(
          'pedersen_blind_sum',
          'number',
          ['number', 'number', 'number', 'number'],
          [sum, charStarArray(blinds), blinds.length, blinds.length - nneg]
        );
        if (ret === 1) {
          const s = new Uint8Array(Module.HEAPU8.subarray(sum, sum + 32));
          freeMalloc();
          return Buffer.from(s);
        } else {
          freeMalloc();
          throw new Error('secp256k1_pedersen_blind_sum', ret);
        }
      }

      /**
       * @summary Verifies pedersen commitments - negativeCommits - excess === 0
       * @return {boolean} commitments successfully sum to zero.
       * @throws {Error} Commitments do not sum to zero or other error.
       * @arg {Array} commits: pointer to pointers to 33-byte character arrays for the commitments.
       * @arg {Array} ncommits: pointer to pointers to 33-byte character arrays for negative commitments.
       * @exports
       */
      function verifySum(commits, negativeCommits) {
        if (
          !commits ||
          !Array.isArray(commits) ||
          !commits.every((c) => c.length === 33)
        )
          throw new TypeError(
            'commits must be a non empty array of Buffers of 33 bytes'
          );
        if (
          !negativeCommits ||
          !Array.isArray(negativeCommits) ||
          !negativeCommits.every((c) => c.length === 33)
        )
          throw new TypeError(
            'negativeCommits must be a non empty array of Buffers of 33 bytes'
          );
        const ret = Module.ccall(
          'pedersen_verify_tally',
          'number',
          ['number', 'number', 'number', 'number'],
          [
            charStarArray(commits),
            commits.length,
            charStarArray(negativeCommits),
            negativeCommits.length,
          ]
        );
        freeMalloc();
        return ret === 1;
      }

      /**
       *  @summary Authors a proof that a committed value is within a range.
       *  @return {Array} Proof successfully created.
       *  @throws {Error} Decode failed.
       *  @arg {Array} commitment: 33-byte array with the commitment being proved.
       *  @arg {Array} blind: 32-byte blinding factor used by commit.
       *  @arg {Array} nonce: 32-byte secret nonce used to initialize the proof (value can be reverse-engineered out of the proof if this secret is known.).
       *  @arg {string} value: unblinded value.
       *  @arg {Array} generator: 64-byte secret generator for the proof.
       *  @arg {string} minValue: constructs a proof where the verifer can tell the minimum value is at least the specified amount.
       *  @arg {number} base10Exp: Base-10 exponent. Digits below above will be made public, but the proof will be made smaller. Allowed range is -1 to 18.
       *      (-1 is a special case that makes the value public. 0 is the most private.).
       *  @arg {number} minBits: Number of bits of the value to keep private. (0 = auto/minimal, - 64).
       *  @arg {Array} message: optional message.
       *  @arg {Array} extraCommit: optional extra commit.
       *  @exports
       */
      function sign(
        commitment,
        blind,
        nonce,
        value,
        generator,
        minValue = '0',
        base10Exp = 0,
        minBits = 0,
        message = [],
        extraCommit = []
      ) {
        if (!commitment || !Buffer.isBuffer(commitment) || !commitment.length)
          throw new TypeError('commit must be a non empty Buffer');
        if (!blind || !Buffer.isBuffer(blind) || blind.length !== 32)
          throw new TypeError('blind must be a Buffer of 32 bytes');
        if (!nonce || !Buffer.isBuffer(nonce) || !nonce.length)
          throw new TypeError('nonce must be a non empty Buffer');
        if (
          !generator ||
          !Buffer.isBuffer(generator) ||
          generator.length !== 64
        )
          throw new TypeError('generator must be a Buffer of 64 bytes');
        if (!message || !Buffer.isBuffer(message))
          throw new TypeError('message must be a Buffer');
        if (!extraCommit || !Buffer.isBuffer(extraCommit))
          throw new TypeError('extraCommit must be a Buffer');

        const proof = malloc(5134);
        const plen = malloc(8);
        Module.setValue(plen, 5134, 'i64');
        const minValueLong = Long.fromString(minValue, true);
        const valueLong = Long.fromString(value, true);

        const ret = Module.ccall(
          'rangeproof_sign',
          'number',
          [
            'number',
            'number',
            'number',
            'number',
            'number',
            'number',
            'number',
            'number',
            'number',
            'number',
            'number',
            'number',
            'number',
            'number',
          ],
          [
            proof,
            plen,
            minValueLong.low,
            minValueLong.high,
            charStar(commitment),
            charStar(blind),
            charStar(nonce),
            base10Exp,
            minBits,
            valueLong.low,
            valueLong.high,
            charStar(message),
            message.length,
            charStar(extraCommit),
            extraCommit.length,
            charStar(generator),
          ]
        );
        if (ret === 1) {
          const p = new Uint8Array(
            Module.HEAPU8.subarray(proof, proof + Module.getValue(plen, 'i64'))
          );
          freeMalloc();
          return Buffer.from(p);
        } else {
          freeMalloc();
          throw new Error('secp256k1_rangeproof_sign', ret);
        }
      }

      /**
       *  @typedef {ProofInfo}
       *  @property {number} exp - Exponent used in the proof (-1 means the value isn't private).
       *  @property {string} mantissa - Number of bits covered by the proof.
       *  @property {string} minValue - minimum value that commit could have.
       *  @property {string} maxValue - maximum value that commit could have.
       */
      /**
       *  @summary Returns value info from a range-proof.
       *  @return {ProofInfo} Information successfully extracted.
       *  @throws {Error} Decode failed.
       *  @arg {Array} proof - range-proof.
       *  @exports
       */
      function info(proof) {
        if (!proof || !Buffer.isBuffer(proof) || !proof.length)
          throw new TypeError('proof must be a non empty Buffer');

        const exp = charStar(4);
        const mantissa = charStar(4);
        const min = charStar(8);
        const max = charStar(8);
        const ret = Module.ccall(
          'rangeproof_info',
          'number',
          ['number', 'number', 'number', 'number', 'number', 'number'],
          [exp, mantissa, min, max, charStar(proof), proof.length]
        );

        if (ret === 1) {
          const res = {
            exp: Module.getValue(exp, 'i32'),
            mantissa: Module.getValue(mantissa, 'i32'),
            minValue: Uint64Long(min).toString(),
            maxValue: Uint64Long(max).toString(),
          };
          freeMalloc();
          return res;
        } else {
          freeMalloc();
          throw new Error('secp256k1_rangeproof_info decode failed', ret);
        }
      }

      /**
       *  @summary Verifies a range-proof.
       *  @return {boolean} Proof successfully verified.
       *  @arg {Array} commitment - 33-byte commitment.
       *  @arg {Array} proof - range proof to verify.
       *  @arg {Array} generator - 64-byte generator used for the proof.
       *  @arg {Array} extraCommit - extra data used for the proof.
       */
      function verify(commitment, proof, generator, extraCommit = []) {
        if (!commit || !Buffer.isBuffer(commitment) || commitment.length !== 33)
          throw new TypeError('commit must be a Buffer of 33 bytes');
        if (!proof || !Buffer.isBuffer(proof) || !proof.length)
          throw new TypeError('proof must be a non empty Buffer');
        if (
          !generator ||
          !Buffer.isBuffer(generator) ||
          generator.length !== 64
        )
          throw new TypeError('generator must be a Buffer of 64 bytes');
        if (!extraCommit || !Buffer.isBuffer(extraCommit))
          throw new TypeError('extraCommit must be a Buffer');

        const min = charStar(8);
        const max = charStar(8);
        const ret = Module.ccall(
          'rangeproof_verify',
          'number',
          [
            'number',
            'number',
            'number',
            'number',
            'number',
            'number',
            'number',
            'number',
          ],
          [
            min,
            max,
            charStar(commitment),
            charStar(proof),
            proof.length,
            charStar(extraCommit),
            extraCommit.length,
            charStar(generator),
          ]
        );
        freeMalloc();
        return ret === 1;
      }

      /**
       *  @typedef {ProofRewind}
       *  @property {Array} blind - 32-byte blinding factor used by commit.
       *  @property {string} value - unblinded value.
       *  @property {string} minValue - minimum value that commit could have.
       *  @property {string} maxValue - maximum value that commit could have.
       *  @property {Array} message - 32-byte unblinded message.
       */
      /**
       *  @summary Extracts information from a range-proof.
       *  @return {ProofRewind} Information successfully extracted.
       *  @throws {Error} Decode failed.
       *  @arg {Array} commitment - 33-byte array with the commitment being proved.
       *  @arg {Array} proof - range-proof.
       *  @arg {Array} nonce - 32-byte secret nonce used to initialize the proof.
       *  @arg {Array} generator - 64-byte generator for the proof.
       *  @arg {Array} extraCommit - extra data for range-proof.
       */
      function rewind(commitment, proof, nonce, generator, extraCommit = []) {
        if (!commitment || !Buffer.isBuffer(commitment) || !commitment.length)
          throw new TypeError('commit must be a non empty Buffer');
        if (!proof || !Buffer.isBuffer(proof) || !proof.length)
          throw new TypeError('proof must be a non empty Buffer');
        if (!nonce || !Buffer.isBuffer(nonce) || !nonce.length)
          throw new TypeError('nonce must be a non empty Buffer');
        if (
          !generator ||
          !Buffer.isBuffer(generator) ||
          generator.length !== 64
        )
          throw new TypeError('generator must be a Buffer of 64 bytes');
        if (!extraCommit || !Buffer.isBuffer(extraCommit))
          throw new TypeError('extraCommit must be a Buffer');
        const blind = malloc(32);
        const value = malloc(8);
        const message = malloc(64);
        const messageLength = malloc(8);
        const minValue = malloc(8);
        const maxValue = malloc(8);
        Module.setValue(messageLength, 64, 'i64');

        const ret = Module.ccall(
          'rangeproof_rewind',
          'number',
          [
            'number',
            'number',
            'number',
            'number',
            'number',
            'number',
            'number',
            'number',
            'number',
            'number',
            'number',
            'number',
            'number',
          ],
          [
            blind,
            value,
            message,
            messageLength,
            charStar(nonce),
            minValue,
            maxValue,
            charStar(commitment),
            charStar(proof),
            proof.length,
            charStar(extraCommit),
            extraCommit.length,
            charStar(generator),
          ]
        );

        if (ret === 1) {
          const bf = new Uint8Array(Module.HEAPU8.subarray(blind, blind + 32));
          const msg = new Uint8Array(
            Module.HEAPU8.subarray(
              message,
              message + Module.getValue(messageLength, 'i64')
            )
          );
          const out = {
            value: Uint64Long(value).toString(),
            minValue: Uint64Long(minValue).toString(),
            maxValue: Uint64Long(maxValue).toString(),
            blindFactor: Buffer.from(bf),
            message: Buffer.from(msg),
          };
          freeMalloc();
          return out;
        } else {
          freeMalloc();
          throw new Error('secp256k1_rangeproof_rewind', ret);
        }
      }

      /**
       *  @typedef {SurjectionProof}
       *  @property {number} nInputs - number of input tags used to generate the proof.
       *  @property {Array} usedInputs - 32-byte inputs bitmap.
       *  @property {Array} data - 8224-byte proof data.
       */
      /**
       *  @summary Serializes a surjection proof.
       *  @return {Array} Serialized surjection proof without leading zeros.
       *  @throws {Error} Decode failed.
       *  @arg {SurjectionProof} proof - proof to serialize.
       */
      function proofSerialize(proof) {
        if (
          !proof ||
          proof.nInputs === undefined ||
          proof.nInputs === null ||
          !proof.usedInputs ||
          !Buffer.isBuffer(proof.usedInputs) ||
          proof.usedInputs.length != 32 ||
          !proof.data ||
          !Buffer.isBuffer(proof.data)
        )
          throw new TypeError(
            'proof must be an object with nInputs of type number and data,' +
              'usedInputs of type Buffer'
          );
        const output = malloc(8258);
        const outputLength = malloc(8);
        Module.setValue(outputLength, 8258, 'i64');
        const ret = Module.ccall(
          'surjectionproof_serialize',
          'number',
          ['number', 'number', 'number', 'number', 'number'],
          [
            output,
            outputLength,
            intStar(proof.nInputs),
            charStar(proof.usedInputs),
            charStar(proof.data),
          ]
        );
        if (ret === 1) {
          const out = new Uint8Array(
            Module.HEAPU8.subarray(
              output,
              output + Module.getValue(outputLength, 'i64')
            )
          );
          freeMalloc();
          return Buffer.from(out);
        } else {
          freeMalloc();
          throw new Error('secp256k1_surjectionproof_serialize', ret);
        }
      }

      /**
       *  @summary Returns an initialized surjection proof.
       *  @return {SurjectionProof} Proof successfully computed.
       *  @throws {Error} Decode failed.
       *  @arg {Array} inputTags - Array of 32-byte input tags.
       *  @arg {number} inputTagsToUse - The number of inputs to include in the surjection proof.
       *  @arg {Array} outputTag - 32-byte output tag.
       *  @arg {number} maxIterations - Max number of attemoots to compute the proof.
       *  @arg {Array} seed - 32-byte random seed.
       */
      function proofInitialize(
        inputTags,
        inputTagsToUse,
        outputTag,
        maxIterations,
        seed
      ) {
        if (
          !inputTags ||
          !Array.isArray(inputTags) ||
          !inputTags.length ||
          !inputTags.every((t) => t.length === 32)
        )
          throw new TypeError(
            'inputTags must be a non empty array of Buffers of 32 bytes'
          );
        if (
          !outputTag ||
          !Buffer.isBuffer(outputTag) ||
          outputTag.length !== 32
        )
          throw new TypeError('outputTag must be a Buffer of 32 bytes');
        if (!seed || !Buffer.isBuffer(seed) || seed.length !== 32)
          throw new TypeError('seed must be a Buffer of 32 bytes');

        const nInputs = malloc(4);
        const usedInputs = malloc(32);
        const data = malloc(8224);
        const inputIndex = malloc(4);
        const ret = Module.ccall(
          'surjectionproof_initialize',
          'number',
          [
            'number',
            'number',
            'number',
            'number',
            'number',
            'number',
            'number',
            'number',
            'number',
            'number',
          ],
          [
            nInputs,
            usedInputs,
            data,
            inputIndex,
            charStarArray(inputTags),
            inputTags.length,
            inputTagsToUse,
            charStar(outputTag),
            maxIterations,
            charStar(seed),
          ]
        );
        if (ret > 0) {
          const usedIns = new Uint8Array(
            Module.HEAPU8.subarray(usedInputs, usedInputs + 32)
          );
          const d = new Uint8Array(Module.HEAPU8.subarray(data, data + 8224));
          const out = {
            proof: {
              nInputs: Module.getValue(nInputs, 'i32'),
              usedInputs: Buffer.from(usedIns),
              data: Buffer.from(d),
            },
            inputIndex: Module.getValue(inputIndex, 'i32'),
          };
          freeMalloc();
          return out;
        } else {
          freeMalloc();
          throw new Error('secp256k1_surjectionproof_initialize', ret);
        }
      }

      /**
       *  @summary Generates a surjection proof.
       *  @return {SurjectionProof} Proof successfully computed.
       *  @throws {Error} Decode failed.
       *  @arg {SurjectionProof} proof - Initialized surjection proof.
       *  @arg {Array} inputTags - Array of 64-byte ephemeral input tags.
       *  @arg {Array} outputTag - 64-byte ephemeral output tag.
       *  @arg {number} inputIndex - Proof input index.
       *  @arg {Array} inputBlindingKey - 32-byte blinding key for the input tags.
       *  @arg {Array} outputBlindingKey - 32-byte blinding key for the output tag.
       */
      function proofGenerate(
        proof,
        inputTags,
        outputTag,
        inputIndex,
        inputBlindingKey,
        outputBlindingKey
      ) {
        if (
          !proof ||
          proof.nInputs === undefined ||
          proof.nInputs === null ||
          !proof.usedInputs ||
          !Buffer.isBuffer(proof.usedInputs) ||
          proof.usedInputs.length != 32 ||
          !proof.data ||
          !Buffer.isBuffer(proof.data)
        )
          throw new TypeError(
            'proof must be an object with nInputs of type number and data,' +
              'usedInputs of type Buffer'
          );
        if (
          !inputTags ||
          !Array.isArray(inputTags) ||
          !inputTags.length ||
          !inputTags.every((t) => t.length === 64)
        )
          throw new TypeError(
            'inputTags must be a non empty array of Buffers of 64 bytes'
          );
        if (
          !outputTag ||
          !Buffer.isBuffer(outputTag) ||
          outputTag.length !== 64
        )
          throw new TypeError('ouputTag must be a Buffer of 64 bytes');
        if (
          !inputBlindingKey ||
          !Buffer.isBuffer(inputBlindingKey) ||
          inputBlindingKey.length !== 32
        )
          throw new TypeError('inputBlindingKey must be a Buffer of 32 bytes');
        if (
          !outputBlindingKey ||
          !Buffer.isBuffer(outputBlindingKey) ||
          outputBlindingKey.length !== 32
        )
          throw new TypeError('outputBlindingKey must be a Buffer of 32 bytes');
        if (inputIndex < 0 || inputIndex > inputTags.length)
          throw new TypeError(
            'inputIndex must be a number into range [0, ' +
              inputTags.length +
              ']'
          );
        const nInputs = intStar(proof.nInputs);
        const usedInputs = charStar(proof.usedInputs);
        const data = charStar(proof.data);
        const ret = Module.ccall(
          'surjectionproof_generate',
          'number',
          [
            'number',
            'number',
            'number',
            'number',
            'number',
            'number',
            'number',
            'number',
            'number',
          ],
          [
            nInputs,
            usedInputs,
            data,
            charStarArray(inputTags),
            inputTags.length,
            charStar(outputTag),
            inputIndex,
            charStar(inputBlindingKey),
            charStar(outputBlindingKey),
          ]
        );
        if (ret === 1) {
          const usedIns = new Uint8Array(
            Module.HEAPU8.subarray(usedInputs, usedInputs + 32)
          );
          const d = new Uint8Array(Module.HEAPU8.subarray(data, data + 8224));
          const p = {
            nInputs: inputTags.length,
            usedInputs: Buffer.from(usedIns),
            data: Buffer.from(d),
          };
          freeMalloc();
          return p;
        } else {
          freeMalloc();
          throw new Error('secp256k1_surjectionproof_generate', ret);
        }
      }

      /**
       *  @summary Verifies a surjection proof.
       *  @return {boolean} Proof successfully verified.
       *  @throws {Error} Decode failed.
       *  @arg {SurjectionProof} proof - proof to verify.
       *  @arg {Array} inputTags - Array of 64-byte ephemeral input tags.
       *  @arg {Array} outputTags - 64-byte ephemeral output tags.
       */
      function proofVerify(proof, inputTags, outputTag) {
        if (
          !inputTags ||
          !Array.isArray(inputTags) ||
          !inputTags.length ||
          !inputTags.every((t) => t.length === 64)
        )
          throw new TypeError(
            'inputTags must be a non empty array of Buffers of 64 bytes'
          );
        if (
          !outputTag ||
          !Buffer.isBuffer(outputTag) ||
          outputTag.length !== 64
        )
          throw new TypeError('ouputTag must be a Buffer of 64 bytes');
        const ret = Module.ccall(
          'surjectionproof_verify',
          'number',
          ['number', 'number', 'number', 'number', 'number', 'number'],
          [
            intStar(proof.nInputs),
            charStar(proof.usedInputs),
            charStar(proof.data),
            charStarArray(inputTags),
            inputTags.length,
            charStar(outputTag),
          ]
        );
        freeMalloc();
        return ret === 1;
      }

      function Uint64Long(ptr) {
        return new Long(
          Module.getValue(ptr, 'i32'),
          Module.getValue(ptr + 4, 'i32'),
          true
        );
      }

      function intStar(num) {
        const ptr = malloc(4);
        Module.setValue(ptr, num, 'i32');
        return ptr;
      }

      function charStar(buf) {
        const ptr = malloc(buf.length);
        for (let i = 0; i < buf.length; i++) {
          Module.setValue(ptr + i, buf[i], 'i8');
        }
        return ptr;
      }

      function charStarArray(array) {
        const arrayPtrs = malloc(4 * array.length);
        for (let i = 0; i < array.length; i++) {
          const ptr = charStar(array[i]);
          Module.setValue(arrayPtrs + i * 4, ptr, 'i32');
        }
        return arrayPtrs;
      }

      function longIntStarArray(array) {
        const ptr = malloc(8 * array.length);
        for (let i = 0; i < array.length; i++) {
          Module.setValue(ptr + i * 8, array[i].low, 'i32');
          Module.setValue(ptr + i * 8 + 4, array[i].high, 'i32');
        }
        return ptr;
      }

      resolve({
        ecdh,
        pedersen: {
          commit,
          commitSerialize,
          commitParse,
          blindGeneratorBlindSum,
          blindSum,
          verifySum,
        },
        generator: {
          generateBlinded,
          parse,
          serialize,
        },
        rangeproof: {
          sign,
          info,
          verify,
          rewind,
        },
        surjectionproof: {
          serialize: proofSerialize,
          initialize: proofInitialize,
          generate: proofGenerate,
          verify: proofVerify,
        },
      });
    });
  });
};

}).call(this)}).call(this,require("buffer").Buffer)
},{"../dist/secp256k1-zkp.js":127,"buffer":4,"long":103}],129:[function(require,module,exports){
var Buffer = require('safe-buffer').Buffer

// prototype class for hash functions
function Hash (blockSize, finalSize) {
  this._block = Buffer.alloc(blockSize)
  this._finalSize = finalSize
  this._blockSize = blockSize
  this._len = 0
}

Hash.prototype.update = function (data, enc) {
  if (typeof data === 'string') {
    enc = enc || 'utf8'
    data = Buffer.from(data, enc)
  }

  var block = this._block
  var blockSize = this._blockSize
  var length = data.length
  var accum = this._len

  for (var offset = 0; offset < length;) {
    var assigned = accum % blockSize
    var remainder = Math.min(length - offset, blockSize - assigned)

    for (var i = 0; i < remainder; i++) {
      block[assigned + i] = data[offset + i]
    }

    accum += remainder
    offset += remainder

    if ((accum % blockSize) === 0) {
      this._update(block)
    }
  }

  this._len += length
  return this
}

Hash.prototype.digest = function (enc) {
  var rem = this._len % this._blockSize

  this._block[rem] = 0x80

  // zero (rem + 1) trailing bits, where (rem + 1) is the smallest
  // non-negative solution to the equation (length + 1 + (rem + 1)) === finalSize mod blockSize
  this._block.fill(0, rem + 1)

  if (rem >= this._finalSize) {
    this._update(this._block)
    this._block.fill(0)
  }

  var bits = this._len * 8

  // uint32
  if (bits <= 0xffffffff) {
    this._block.writeUInt32BE(bits, this._blockSize - 4)

  // uint64
  } else {
    var lowBits = (bits & 0xffffffff) >>> 0
    var highBits = (bits - lowBits) / 0x100000000

    this._block.writeUInt32BE(highBits, this._blockSize - 8)
    this._block.writeUInt32BE(lowBits, this._blockSize - 4)
  }

  this._update(this._block)
  var hash = this._hash()

  return enc ? hash.toString(enc) : hash
}

Hash.prototype._update = function () {
  throw new Error('_update must be implemented by subclass')
}

module.exports = Hash

},{"safe-buffer":126}],130:[function(require,module,exports){
var exports = module.exports = function SHA (algorithm) {
  algorithm = algorithm.toLowerCase()

  var Algorithm = exports[algorithm]
  if (!Algorithm) throw new Error(algorithm + ' is not supported (we accept pull requests)')

  return new Algorithm()
}

exports.sha = require('./sha')
exports.sha1 = require('./sha1')
exports.sha224 = require('./sha224')
exports.sha256 = require('./sha256')
exports.sha384 = require('./sha384')
exports.sha512 = require('./sha512')

},{"./sha":131,"./sha1":132,"./sha224":133,"./sha256":134,"./sha384":135,"./sha512":136}],131:[function(require,module,exports){
/*
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-0, as defined
 * in FIPS PUB 180-1
 * This source code is derived from sha1.js of the same repository.
 * The difference between SHA-0 and SHA-1 is just a bitwise rotate left
 * operation was added.
 */

var inherits = require('inherits')
var Hash = require('./hash')
var Buffer = require('safe-buffer').Buffer

var K = [
  0x5a827999, 0x6ed9eba1, 0x8f1bbcdc | 0, 0xca62c1d6 | 0
]

var W = new Array(80)

function Sha () {
  this.init()
  this._w = W

  Hash.call(this, 64, 56)
}

inherits(Sha, Hash)

Sha.prototype.init = function () {
  this._a = 0x67452301
  this._b = 0xefcdab89
  this._c = 0x98badcfe
  this._d = 0x10325476
  this._e = 0xc3d2e1f0

  return this
}

function rotl5 (num) {
  return (num << 5) | (num >>> 27)
}

function rotl30 (num) {
  return (num << 30) | (num >>> 2)
}

function ft (s, b, c, d) {
  if (s === 0) return (b & c) | ((~b) & d)
  if (s === 2) return (b & c) | (b & d) | (c & d)
  return b ^ c ^ d
}

Sha.prototype._update = function (M) {
  var W = this._w

  var a = this._a | 0
  var b = this._b | 0
  var c = this._c | 0
  var d = this._d | 0
  var e = this._e | 0

  for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4)
  for (; i < 80; ++i) W[i] = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16]

  for (var j = 0; j < 80; ++j) {
    var s = ~~(j / 20)
    var t = (rotl5(a) + ft(s, b, c, d) + e + W[j] + K[s]) | 0

    e = d
    d = c
    c = rotl30(b)
    b = a
    a = t
  }

  this._a = (a + this._a) | 0
  this._b = (b + this._b) | 0
  this._c = (c + this._c) | 0
  this._d = (d + this._d) | 0
  this._e = (e + this._e) | 0
}

Sha.prototype._hash = function () {
  var H = Buffer.allocUnsafe(20)

  H.writeInt32BE(this._a | 0, 0)
  H.writeInt32BE(this._b | 0, 4)
  H.writeInt32BE(this._c | 0, 8)
  H.writeInt32BE(this._d | 0, 12)
  H.writeInt32BE(this._e | 0, 16)

  return H
}

module.exports = Sha

},{"./hash":129,"inherits":102,"safe-buffer":126}],132:[function(require,module,exports){
/*
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined
 * in FIPS PUB 180-1
 * Version 2.1a Copyright Paul Johnston 2000 - 2002.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 * Distributed under the BSD License
 * See http://pajhome.org.uk/crypt/md5 for details.
 */

var inherits = require('inherits')
var Hash = require('./hash')
var Buffer = require('safe-buffer').Buffer

var K = [
  0x5a827999, 0x6ed9eba1, 0x8f1bbcdc | 0, 0xca62c1d6 | 0
]

var W = new Array(80)

function Sha1 () {
  this.init()
  this._w = W

  Hash.call(this, 64, 56)
}

inherits(Sha1, Hash)

Sha1.prototype.init = function () {
  this._a = 0x67452301
  this._b = 0xefcdab89
  this._c = 0x98badcfe
  this._d = 0x10325476
  this._e = 0xc3d2e1f0

  return this
}

function rotl1 (num) {
  return (num << 1) | (num >>> 31)
}

function rotl5 (num) {
  return (num << 5) | (num >>> 27)
}

function rotl30 (num) {
  return (num << 30) | (num >>> 2)
}

function ft (s, b, c, d) {
  if (s === 0) return (b & c) | ((~b) & d)
  if (s === 2) return (b & c) | (b & d) | (c & d)
  return b ^ c ^ d
}

Sha1.prototype._update = function (M) {
  var W = this._w

  var a = this._a | 0
  var b = this._b | 0
  var c = this._c | 0
  var d = this._d | 0
  var e = this._e | 0

  for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4)
  for (; i < 80; ++i) W[i] = rotl1(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16])

  for (var j = 0; j < 80; ++j) {
    var s = ~~(j / 20)
    var t = (rotl5(a) + ft(s, b, c, d) + e + W[j] + K[s]) | 0

    e = d
    d = c
    c = rotl30(b)
    b = a
    a = t
  }

  this._a = (a + this._a) | 0
  this._b = (b + this._b) | 0
  this._c = (c + this._c) | 0
  this._d = (d + this._d) | 0
  this._e = (e + this._e) | 0
}

Sha1.prototype._hash = function () {
  var H = Buffer.allocUnsafe(20)

  H.writeInt32BE(this._a | 0, 0)
  H.writeInt32BE(this._b | 0, 4)
  H.writeInt32BE(this._c | 0, 8)
  H.writeInt32BE(this._d | 0, 12)
  H.writeInt32BE(this._e | 0, 16)

  return H
}

module.exports = Sha1

},{"./hash":129,"inherits":102,"safe-buffer":126}],133:[function(require,module,exports){
/**
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
 * in FIPS 180-2
 * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 *
 */

var inherits = require('inherits')
var Sha256 = require('./sha256')
var Hash = require('./hash')
var Buffer = require('safe-buffer').Buffer

var W = new Array(64)

function Sha224 () {
  this.init()

  this._w = W // new Array(64)

  Hash.call(this, 64, 56)
}

inherits(Sha224, Sha256)

Sha224.prototype.init = function () {
  this._a = 0xc1059ed8
  this._b = 0x367cd507
  this._c = 0x3070dd17
  this._d = 0xf70e5939
  this._e = 0xffc00b31
  this._f = 0x68581511
  this._g = 0x64f98fa7
  this._h = 0xbefa4fa4

  return this
}

Sha224.prototype._hash = function () {
  var H = Buffer.allocUnsafe(28)

  H.writeInt32BE(this._a, 0)
  H.writeInt32BE(this._b, 4)
  H.writeInt32BE(this._c, 8)
  H.writeInt32BE(this._d, 12)
  H.writeInt32BE(this._e, 16)
  H.writeInt32BE(this._f, 20)
  H.writeInt32BE(this._g, 24)

  return H
}

module.exports = Sha224

},{"./hash":129,"./sha256":134,"inherits":102,"safe-buffer":126}],134:[function(require,module,exports){
/**
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
 * in FIPS 180-2
 * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 *
 */

var inherits = require('inherits')
var Hash = require('./hash')
var Buffer = require('safe-buffer').Buffer

var K = [
  0x428A2F98, 0x71374491, 0xB5C0FBCF, 0xE9B5DBA5,
  0x3956C25B, 0x59F111F1, 0x923F82A4, 0xAB1C5ED5,
  0xD807AA98, 0x12835B01, 0x243185BE, 0x550C7DC3,
  0x72BE5D74, 0x80DEB1FE, 0x9BDC06A7, 0xC19BF174,
  0xE49B69C1, 0xEFBE4786, 0x0FC19DC6, 0x240CA1CC,
  0x2DE92C6F, 0x4A7484AA, 0x5CB0A9DC, 0x76F988DA,
  0x983E5152, 0xA831C66D, 0xB00327C8, 0xBF597FC7,
  0xC6E00BF3, 0xD5A79147, 0x06CA6351, 0x14292967,
  0x27B70A85, 0x2E1B2138, 0x4D2C6DFC, 0x53380D13,
  0x650A7354, 0x766A0ABB, 0x81C2C92E, 0x92722C85,
  0xA2BFE8A1, 0xA81A664B, 0xC24B8B70, 0xC76C51A3,
  0xD192E819, 0xD6990624, 0xF40E3585, 0x106AA070,
  0x19A4C116, 0x1E376C08, 0x2748774C, 0x34B0BCB5,
  0x391C0CB3, 0x4ED8AA4A, 0x5B9CCA4F, 0x682E6FF3,
  0x748F82EE, 0x78A5636F, 0x84C87814, 0x8CC70208,
  0x90BEFFFA, 0xA4506CEB, 0xBEF9A3F7, 0xC67178F2
]

var W = new Array(64)

function Sha256 () {
  this.init()

  this._w = W // new Array(64)

  Hash.call(this, 64, 56)
}

inherits(Sha256, Hash)

Sha256.prototype.init = function () {
  this._a = 0x6a09e667
  this._b = 0xbb67ae85
  this._c = 0x3c6ef372
  this._d = 0xa54ff53a
  this._e = 0x510e527f
  this._f = 0x9b05688c
  this._g = 0x1f83d9ab
  this._h = 0x5be0cd19

  return this
}

function ch (x, y, z) {
  return z ^ (x & (y ^ z))
}

function maj (x, y, z) {
  return (x & y) | (z & (x | y))
}

function sigma0 (x) {
  return (x >>> 2 | x << 30) ^ (x >>> 13 | x << 19) ^ (x >>> 22 | x << 10)
}

function sigma1 (x) {
  return (x >>> 6 | x << 26) ^ (x >>> 11 | x << 21) ^ (x >>> 25 | x << 7)
}

function gamma0 (x) {
  return (x >>> 7 | x << 25) ^ (x >>> 18 | x << 14) ^ (x >>> 3)
}

function gamma1 (x) {
  return (x >>> 17 | x << 15) ^ (x >>> 19 | x << 13) ^ (x >>> 10)
}

Sha256.prototype._update = function (M) {
  var W = this._w

  var a = this._a | 0
  var b = this._b | 0
  var c = this._c | 0
  var d = this._d | 0
  var e = this._e | 0
  var f = this._f | 0
  var g = this._g | 0
  var h = this._h | 0

  for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4)
  for (; i < 64; ++i) W[i] = (gamma1(W[i - 2]) + W[i - 7] + gamma0(W[i - 15]) + W[i - 16]) | 0

  for (var j = 0; j < 64; ++j) {
    var T1 = (h + sigma1(e) + ch(e, f, g) + K[j] + W[j]) | 0
    var T2 = (sigma0(a) + maj(a, b, c)) | 0

    h = g
    g = f
    f = e
    e = (d + T1) | 0
    d = c
    c = b
    b = a
    a = (T1 + T2) | 0
  }

  this._a = (a + this._a) | 0
  this._b = (b + this._b) | 0
  this._c = (c + this._c) | 0
  this._d = (d + this._d) | 0
  this._e = (e + this._e) | 0
  this._f = (f + this._f) | 0
  this._g = (g + this._g) | 0
  this._h = (h + this._h) | 0
}

Sha256.prototype._hash = function () {
  var H = Buffer.allocUnsafe(32)

  H.writeInt32BE(this._a, 0)
  H.writeInt32BE(this._b, 4)
  H.writeInt32BE(this._c, 8)
  H.writeInt32BE(this._d, 12)
  H.writeInt32BE(this._e, 16)
  H.writeInt32BE(this._f, 20)
  H.writeInt32BE(this._g, 24)
  H.writeInt32BE(this._h, 28)

  return H
}

module.exports = Sha256

},{"./hash":129,"inherits":102,"safe-buffer":126}],135:[function(require,module,exports){
var inherits = require('inherits')
var SHA512 = require('./sha512')
var Hash = require('./hash')
var Buffer = require('safe-buffer').Buffer

var W = new Array(160)

function Sha384 () {
  this.init()
  this._w = W

  Hash.call(this, 128, 112)
}

inherits(Sha384, SHA512)

Sha384.prototype.init = function () {
  this._ah = 0xcbbb9d5d
  this._bh = 0x629a292a
  this._ch = 0x9159015a
  this._dh = 0x152fecd8
  this._eh = 0x67332667
  this._fh = 0x8eb44a87
  this._gh = 0xdb0c2e0d
  this._hh = 0x47b5481d

  this._al = 0xc1059ed8
  this._bl = 0x367cd507
  this._cl = 0x3070dd17
  this._dl = 0xf70e5939
  this._el = 0xffc00b31
  this._fl = 0x68581511
  this._gl = 0x64f98fa7
  this._hl = 0xbefa4fa4

  return this
}

Sha384.prototype._hash = function () {
  var H = Buffer.allocUnsafe(48)

  function writeInt64BE (h, l, offset) {
    H.writeInt32BE(h, offset)
    H.writeInt32BE(l, offset + 4)
  }

  writeInt64BE(this._ah, this._al, 0)
  writeInt64BE(this._bh, this._bl, 8)
  writeInt64BE(this._ch, this._cl, 16)
  writeInt64BE(this._dh, this._dl, 24)
  writeInt64BE(this._eh, this._el, 32)
  writeInt64BE(this._fh, this._fl, 40)

  return H
}

module.exports = Sha384

},{"./hash":129,"./sha512":136,"inherits":102,"safe-buffer":126}],136:[function(require,module,exports){
var inherits = require('inherits')
var Hash = require('./hash')
var Buffer = require('safe-buffer').Buffer

var K = [
  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
]

var W = new Array(160)

function Sha512 () {
  this.init()
  this._w = W

  Hash.call(this, 128, 112)
}

inherits(Sha512, Hash)

Sha512.prototype.init = function () {
  this._ah = 0x6a09e667
  this._bh = 0xbb67ae85
  this._ch = 0x3c6ef372
  this._dh = 0xa54ff53a
  this._eh = 0x510e527f
  this._fh = 0x9b05688c
  this._gh = 0x1f83d9ab
  this._hh = 0x5be0cd19

  this._al = 0xf3bcc908
  this._bl = 0x84caa73b
  this._cl = 0xfe94f82b
  this._dl = 0x5f1d36f1
  this._el = 0xade682d1
  this._fl = 0x2b3e6c1f
  this._gl = 0xfb41bd6b
  this._hl = 0x137e2179

  return this
}

function Ch (x, y, z) {
  return z ^ (x & (y ^ z))
}

function maj (x, y, z) {
  return (x & y) | (z & (x | y))
}

function sigma0 (x, xl) {
  return (x >>> 28 | xl << 4) ^ (xl >>> 2 | x << 30) ^ (xl >>> 7 | x << 25)
}

function sigma1 (x, xl) {
  return (x >>> 14 | xl << 18) ^ (x >>> 18 | xl << 14) ^ (xl >>> 9 | x << 23)
}

function Gamma0 (x, xl) {
  return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7)
}

function Gamma0l (x, xl) {
  return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7 | xl << 25)
}

function Gamma1 (x, xl) {
  return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6)
}

function Gamma1l (x, xl) {
  return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6 | xl << 26)
}

function getCarry (a, b) {
  return (a >>> 0) < (b >>> 0) ? 1 : 0
}

Sha512.prototype._update = function (M) {
  var W = this._w

  var ah = this._ah | 0
  var bh = this._bh | 0
  var ch = this._ch | 0
  var dh = this._dh | 0
  var eh = this._eh | 0
  var fh = this._fh | 0
  var gh = this._gh | 0
  var hh = this._hh | 0

  var al = this._al | 0
  var bl = this._bl | 0
  var cl = this._cl | 0
  var dl = this._dl | 0
  var el = this._el | 0
  var fl = this._fl | 0
  var gl = this._gl | 0
  var hl = this._hl | 0

  for (var i = 0; i < 32; i += 2) {
    W[i] = M.readInt32BE(i * 4)
    W[i + 1] = M.readInt32BE(i * 4 + 4)
  }
  for (; i < 160; i += 2) {
    var xh = W[i - 15 * 2]
    var xl = W[i - 15 * 2 + 1]
    var gamma0 = Gamma0(xh, xl)
    var gamma0l = Gamma0l(xl, xh)

    xh = W[i - 2 * 2]
    xl = W[i - 2 * 2 + 1]
    var gamma1 = Gamma1(xh, xl)
    var gamma1l = Gamma1l(xl, xh)

    // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]
    var Wi7h = W[i - 7 * 2]
    var Wi7l = W[i - 7 * 2 + 1]

    var Wi16h = W[i - 16 * 2]
    var Wi16l = W[i - 16 * 2 + 1]

    var Wil = (gamma0l + Wi7l) | 0
    var Wih = (gamma0 + Wi7h + getCarry(Wil, gamma0l)) | 0
    Wil = (Wil + gamma1l) | 0
    Wih = (Wih + gamma1 + getCarry(Wil, gamma1l)) | 0
    Wil = (Wil + Wi16l) | 0
    Wih = (Wih + Wi16h + getCarry(Wil, Wi16l)) | 0

    W[i] = Wih
    W[i + 1] = Wil
  }

  for (var j = 0; j < 160; j += 2) {
    Wih = W[j]
    Wil = W[j + 1]

    var majh = maj(ah, bh, ch)
    var majl = maj(al, bl, cl)

    var sigma0h = sigma0(ah, al)
    var sigma0l = sigma0(al, ah)
    var sigma1h = sigma1(eh, el)
    var sigma1l = sigma1(el, eh)

    // t1 = h + sigma1 + ch + K[j] + W[j]
    var Kih = K[j]
    var Kil = K[j + 1]

    var chh = Ch(eh, fh, gh)
    var chl = Ch(el, fl, gl)

    var t1l = (hl + sigma1l) | 0
    var t1h = (hh + sigma1h + getCarry(t1l, hl)) | 0
    t1l = (t1l + chl) | 0
    t1h = (t1h + chh + getCarry(t1l, chl)) | 0
    t1l = (t1l + Kil) | 0
    t1h = (t1h + Kih + getCarry(t1l, Kil)) | 0
    t1l = (t1l + Wil) | 0
    t1h = (t1h + Wih + getCarry(t1l, Wil)) | 0

    // t2 = sigma0 + maj
    var t2l = (sigma0l + majl) | 0
    var t2h = (sigma0h + majh + getCarry(t2l, sigma0l)) | 0

    hh = gh
    hl = gl
    gh = fh
    gl = fl
    fh = eh
    fl = el
    el = (dl + t1l) | 0
    eh = (dh + t1h + getCarry(el, dl)) | 0
    dh = ch
    dl = cl
    ch = bh
    cl = bl
    bh = ah
    bl = al
    al = (t1l + t2l) | 0
    ah = (t1h + t2h + getCarry(al, t1l)) | 0
  }

  this._al = (this._al + al) | 0
  this._bl = (this._bl + bl) | 0
  this._cl = (this._cl + cl) | 0
  this._dl = (this._dl + dl) | 0
  this._el = (this._el + el) | 0
  this._fl = (this._fl + fl) | 0
  this._gl = (this._gl + gl) | 0
  this._hl = (this._hl + hl) | 0

  this._ah = (this._ah + ah + getCarry(this._al, al)) | 0
  this._bh = (this._bh + bh + getCarry(this._bl, bl)) | 0
  this._ch = (this._ch + ch + getCarry(this._cl, cl)) | 0
  this._dh = (this._dh + dh + getCarry(this._dl, dl)) | 0
  this._eh = (this._eh + eh + getCarry(this._el, el)) | 0
  this._fh = (this._fh + fh + getCarry(this._fl, fl)) | 0
  this._gh = (this._gh + gh + getCarry(this._gl, gl)) | 0
  this._hh = (this._hh + hh + getCarry(this._hl, hl)) | 0
}

Sha512.prototype._hash = function () {
  var H = Buffer.allocUnsafe(64)

  function writeInt64BE (h, l, offset) {
    H.writeInt32BE(h, offset)
    H.writeInt32BE(l, offset + 4)
  }

  writeInt64BE(this._ah, this._al, 0)
  writeInt64BE(this._bh, this._bl, 8)
  writeInt64BE(this._ch, this._cl, 16)
  writeInt64BE(this._dh, this._dl, 24)
  writeInt64BE(this._eh, this._el, 32)
  writeInt64BE(this._fh, this._fl, 40)
  writeInt64BE(this._gh, this._gl, 48)
  writeInt64BE(this._hh, this._hl, 56)

  return H
}

module.exports = Sha512

},{"./hash":129,"inherits":102,"safe-buffer":126}],137:[function(require,module,exports){
arguments[4][27][0].apply(exports,arguments)
},{"dup":27,"safe-buffer":126}],138:[function(require,module,exports){
(function (Buffer){(function (){
const BN = require('bn.js')
const EC = require('elliptic').ec
const secp256k1 = new EC('secp256k1')
const deterministicGenerateK = require('./rfc6979')

const ZERO32 = Buffer.alloc(32, 0)
const EC_GROUP_ORDER = Buffer.from('fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141', 'hex')
const EC_P = Buffer.from('fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f', 'hex')

const n = secp256k1.curve.n
const nDiv2 = n.shrn(1)
const G = secp256k1.curve.g

const THROW_BAD_PRIVATE = 'Expected Private'
const THROW_BAD_POINT = 'Expected Point'
const THROW_BAD_TWEAK = 'Expected Tweak'
const THROW_BAD_HASH = 'Expected Hash'
const THROW_BAD_SIGNATURE = 'Expected Signature'
const THROW_BAD_EXTRA_DATA = 'Expected Extra Data (32 bytes)'

function isScalar (x) {
  return Buffer.isBuffer(x) && x.length === 32
}

function isOrderScalar (x) {
  if (!isScalar(x)) return false
  return x.compare(EC_GROUP_ORDER) < 0 // < G
}

function isPoint (p) {
  if (!Buffer.isBuffer(p)) return false
  if (p.length < 33) return false

  const t = p[0]
  const x = p.slice(1, 33)
  if (x.compare(ZERO32) === 0) return false
  if (x.compare(EC_P) >= 0) return false
  if ((t === 0x02 || t === 0x03) && p.length === 33) {
    try { decodeFrom(p) } catch (e) { return false } // TODO: temporary
    return true
  }

  const y = p.slice(33)
  if (y.compare(ZERO32) === 0) return false
  if (y.compare(EC_P) >= 0) return false
  if (t === 0x04 && p.length === 65) return true
  return false
}

function __isPointCompressed (p) {
  return p[0] !== 0x04
}

function isPointCompressed (p) {
  if (!isPoint(p)) return false
  return __isPointCompressed(p)
}

function isPrivate (x) {
  if (!isScalar(x)) return false
  return x.compare(ZERO32) > 0 && // > 0
    x.compare(EC_GROUP_ORDER) < 0 // < G
}

function isSignature (value) {
  const r = value.slice(0, 32)
  const s = value.slice(32, 64)
  return Buffer.isBuffer(value) && value.length === 64 &&
    r.compare(EC_GROUP_ORDER) < 0 &&
    s.compare(EC_GROUP_ORDER) < 0
}

function assumeCompression (value, pubkey) {
  if (value === undefined && pubkey !== undefined) return __isPointCompressed(pubkey)
  if (value === undefined) return true
  return value
}

function fromBuffer (d) { return new BN(d) }
function toBuffer (d) { return d.toArrayLike(Buffer, 'be', 32) }
function decodeFrom (P) { return secp256k1.curve.decodePoint(P) }
function getEncoded (P, compressed) { return Buffer.from(P._encode(compressed)) }

function pointAdd (pA, pB, __compressed) {
  if (!isPoint(pA)) throw new TypeError(THROW_BAD_POINT)
  if (!isPoint(pB)) throw new TypeError(THROW_BAD_POINT)

  const a = decodeFrom(pA)
  const b = decodeFrom(pB)
  const pp = a.add(b)
  if (pp.isInfinity()) return null

  const compressed = assumeCompression(__compressed, pA)
  return getEncoded(pp, compressed)
}

function pointAddScalar (p, tweak, __compressed) {
  if (!isPoint(p)) throw new TypeError(THROW_BAD_POINT)
  if (!isOrderScalar(tweak)) throw new TypeError(THROW_BAD_TWEAK)

  const compressed = assumeCompression(__compressed, p)
  const pp = decodeFrom(p)
  if (tweak.compare(ZERO32) === 0) return getEncoded(pp, compressed)

  const tt = fromBuffer(tweak)
  const qq = G.mul(tt)
  const uu = pp.add(qq)
  if (uu.isInfinity()) return null

  return getEncoded(uu, compressed)
}

function pointCompress (p, __compressed) {
  if (!isPoint(p)) throw new TypeError(THROW_BAD_POINT)

  const pp = decodeFrom(p)
  if (pp.isInfinity()) throw new TypeError(THROW_BAD_POINT)

  const compressed = assumeCompression(__compressed, p)

  return getEncoded(pp, compressed)
}

function pointFromScalar (d, __compressed) {
  if (!isPrivate(d)) throw new TypeError(THROW_BAD_PRIVATE)

  const dd = fromBuffer(d)
  const pp = G.mul(dd)
  if (pp.isInfinity()) return null

  const compressed = assumeCompression(__compressed)
  return getEncoded(pp, compressed)
}

function pointMultiply (p, tweak, __compressed) {
  if (!isPoint(p)) throw new TypeError(THROW_BAD_POINT)
  if (!isOrderScalar(tweak)) throw new TypeError(THROW_BAD_TWEAK)

  const compressed = assumeCompression(__compressed, p)
  const pp = decodeFrom(p)
  const tt = fromBuffer(tweak)
  const qq = pp.mul(tt)
  if (qq.isInfinity()) return null

  return getEncoded(qq, compressed)
}

function privateAdd (d, tweak) {
  if (!isPrivate(d)) throw new TypeError(THROW_BAD_PRIVATE)
  if (!isOrderScalar(tweak)) throw new TypeError(THROW_BAD_TWEAK)

  const dd = fromBuffer(d)
  const tt = fromBuffer(tweak)
  const dt = toBuffer(dd.add(tt).umod(n))
  if (!isPrivate(dt)) return null

  return dt
}

function privateSub (d, tweak) {
  if (!isPrivate(d)) throw new TypeError(THROW_BAD_PRIVATE)
  if (!isOrderScalar(tweak)) throw new TypeError(THROW_BAD_TWEAK)

  const dd = fromBuffer(d)
  const tt = fromBuffer(tweak)
  const dt = toBuffer(dd.sub(tt).umod(n))
  if (!isPrivate(dt)) return null

  return dt
}

function sign (hash, x) {
  return __sign(hash, x)
}

function signWithEntropy (hash, x, addData) {
  return __sign(hash, x, addData)
}

function __sign (hash, x, addData) {
  if (!isScalar(hash)) throw new TypeError(THROW_BAD_HASH)
  if (!isPrivate(x)) throw new TypeError(THROW_BAD_PRIVATE)
  if (addData !== undefined && !isScalar(addData)) throw new TypeError(THROW_BAD_EXTRA_DATA)

  const d = fromBuffer(x)
  const e = fromBuffer(hash)

  let r, s
  const checkSig = function (k) {
    const kI = fromBuffer(k)
    const Q = G.mul(kI)

    if (Q.isInfinity()) return false

    r = Q.x.umod(n)
    if (r.isZero() === 0) return false

    s = kI
      .invm(n)
      .mul(e.add(d.mul(r)))
      .umod(n)
    if (s.isZero() === 0) return false

    return true
  }

  deterministicGenerateK(hash, x, checkSig, isPrivate, addData)

  // enforce low S values, see bip62: 'low s values in signatures'
  if (s.cmp(nDiv2) > 0) {
    s = n.sub(s)
  }

  const buffer = Buffer.allocUnsafe(64)
  toBuffer(r).copy(buffer, 0)
  toBuffer(s).copy(buffer, 32)
  return buffer
}

function verify (hash, q, signature, strict) {
  if (!isScalar(hash)) throw new TypeError(THROW_BAD_HASH)
  if (!isPoint(q)) throw new TypeError(THROW_BAD_POINT)

  // 1.4.1 Enforce r and s are both integers in the interval [1, n − 1] (1, isSignature enforces '< n - 1')
  if (!isSignature(signature)) throw new TypeError(THROW_BAD_SIGNATURE)

  const Q = decodeFrom(q)
  const r = fromBuffer(signature.slice(0, 32))
  const s = fromBuffer(signature.slice(32, 64))

  if (strict && s.cmp(nDiv2) > 0) {
    return false
  }

  // 1.4.1 Enforce r and s are both integers in the interval [1, n − 1] (2, enforces '> 0')
  if (r.gtn(0) <= 0 /* || r.compareTo(n) >= 0 */) return false
  if (s.gtn(0) <= 0 /* || s.compareTo(n) >= 0 */) return false

  // 1.4.2 H = Hash(M), already done by the user
  // 1.4.3 e = H
  const e = fromBuffer(hash)

  // Compute s^-1
  const sInv = s.invm(n)

  // 1.4.4 Compute u1 = es^−1 mod n
  //               u2 = rs^−1 mod n
  const u1 = e.mul(sInv).umod(n)
  const u2 = r.mul(sInv).umod(n)

  // 1.4.5 Compute R = (xR, yR)
  //               R = u1G + u2Q
  const R = G.mulAdd(u1, Q, u2)

  // 1.4.5 (cont.) Enforce R is not at infinity
  if (R.isInfinity()) return false

  // 1.4.6 Convert the field element R.x to an integer
  const xR = R.x

  // 1.4.7 Set v = xR mod n
  const v = xR.umod(n)

  // 1.4.8 If v = r, output "valid", and if v != r, output "invalid"
  return v.eq(r)
}

module.exports = {
  isPoint,
  isPointCompressed,
  isPrivate,
  pointAdd,
  pointAddScalar,
  pointCompress,
  pointFromScalar,
  pointMultiply,
  privateAdd,
  privateSub,
  sign,
  signWithEntropy,
  verify
}

}).call(this)}).call(this,require("buffer").Buffer)
},{"./rfc6979":139,"bn.js":62,"buffer":4,"elliptic":72}],139:[function(require,module,exports){
(function (Buffer){(function (){
const createHmac = require('create-hmac')

const ONE1 = Buffer.alloc(1, 1)
const ZERO1 = Buffer.alloc(1, 0)

// https://tools.ietf.org/html/rfc6979#section-3.2
function deterministicGenerateK (hash, x, checkSig, isPrivate, extraEntropy) {
  // Step A, ignored as hash already provided
  // Step B
  // Step C
  let k = Buffer.alloc(32, 0)
  let v = Buffer.alloc(32, 1)

  // Step D
  k = createHmac('sha256', k)
    .update(v)
    .update(ZERO1)
    .update(x)
    .update(hash)
    .update(extraEntropy || '')
    .digest()

  // Step E
  v = createHmac('sha256', k).update(v).digest()

  // Step F
  k = createHmac('sha256', k)
    .update(v)
    .update(ONE1)
    .update(x)
    .update(hash)
    .update(extraEntropy || '')
    .digest()

  // Step G
  v = createHmac('sha256', k).update(v).digest()

  // Step H1/H2a, ignored as tlen === qlen (256 bit)
  // Step H2b
  v = createHmac('sha256', k).update(v).digest()

  let T = v

  // Step H3, repeat until T is within the interval [1, n - 1] and is suitable for ECDSA
  while (!isPrivate(T) || !checkSig(T)) {
    k = createHmac('sha256', k)
      .update(v)
      .update(ZERO1)
      .digest()

    v = createHmac('sha256', k).update(v).digest()

    // Step H1/H2a, again, ignored as tlen === qlen (256 bit)
    // Step H2b again
    v = createHmac('sha256', k).update(v).digest()
    T = v
  }

  return T
}

module.exports = deterministicGenerateK

}).call(this)}).call(this,require("buffer").Buffer)
},{"buffer":4,"create-hmac":70}],140:[function(require,module,exports){
var native = require('./native')

function getTypeName (fn) {
  return fn.name || fn.toString().match(/function (.*?)\s*\(/)[1]
}

function getValueTypeName (value) {
  return native.Nil(value) ? '' : getTypeName(value.constructor)
}

function getValue (value) {
  if (native.Function(value)) return ''
  if (native.String(value)) return JSON.stringify(value)
  if (value && native.Object(value)) return ''
  return value
}

function captureStackTrace (e, t) {
  if (Error.captureStackTrace) {
    Error.captureStackTrace(e, t)
  }
}

function tfJSON (type) {
  if (native.Function(type)) return type.toJSON ? type.toJSON() : getTypeName(type)
  if (native.Array(type)) return 'Array'
  if (type && native.Object(type)) return 'Object'

  return type !== undefined ? type : ''
}

function tfErrorString (type, value, valueTypeName) {
  var valueJson = getValue(value)

  return 'Expected ' + tfJSON(type) + ', got' +
    (valueTypeName !== '' ? ' ' + valueTypeName : '') +
    (valueJson !== '' ? ' ' + valueJson : '')
}

function TfTypeError (type, value, valueTypeName) {
  valueTypeName = valueTypeName || getValueTypeName(value)
  this.message = tfErrorString(type, value, valueTypeName)

  captureStackTrace(this, TfTypeError)
  this.__type = type
  this.__value = value
  this.__valueTypeName = valueTypeName
}

TfTypeError.prototype = Object.create(Error.prototype)
TfTypeError.prototype.constructor = TfTypeError

function tfPropertyErrorString (type, label, name, value, valueTypeName) {
  var description = '" of type '
  if (label === 'key') description = '" with key type '

  return tfErrorString('property "' + tfJSON(name) + description + tfJSON(type), value, valueTypeName)
}

function TfPropertyTypeError (type, property, label, value, valueTypeName) {
  if (type) {
    valueTypeName = valueTypeName || getValueTypeName(value)
    this.message = tfPropertyErrorString(type, label, property, value, valueTypeName)
  } else {
    this.message = 'Unexpected property "' + property + '"'
  }

  captureStackTrace(this, TfTypeError)
  this.__label = label
  this.__property = property
  this.__type = type
  this.__value = value
  this.__valueTypeName = valueTypeName
}

TfPropertyTypeError.prototype = Object.create(Error.prototype)
TfPropertyTypeError.prototype.constructor = TfTypeError

function tfCustomError (expected, actual) {
  return new TfTypeError(expected, {}, actual)
}

function tfSubError (e, property, label) {
  // sub child?
  if (e instanceof TfPropertyTypeError) {
    property = property + '.' + e.__property

    e = new TfPropertyTypeError(
      e.__type, property, e.__label, e.__value, e.__valueTypeName
    )

  // child?
  } else if (e instanceof TfTypeError) {
    e = new TfPropertyTypeError(
      e.__type, property, label, e.__value, e.__valueTypeName
    )
  }

  captureStackTrace(e)
  return e
}

module.exports = {
  TfTypeError: TfTypeError,
  TfPropertyTypeError: TfPropertyTypeError,
  tfCustomError: tfCustomError,
  tfSubError: tfSubError,
  tfJSON: tfJSON,
  getValueTypeName: getValueTypeName
}

},{"./native":143}],141:[function(require,module,exports){
(function (Buffer){(function (){
var NATIVE = require('./native')
var ERRORS = require('./errors')

function _Buffer (value) {
  return Buffer.isBuffer(value)
}

function Hex (value) {
  return typeof value === 'string' && /^([0-9a-f]{2})+$/i.test(value)
}

function _LengthN (type, length) {
  var name = type.toJSON()

  function Length (value) {
    if (!type(value)) return false
    if (value.length === length) return true

    throw ERRORS.tfCustomError(name + '(Length: ' + length + ')', name + '(Length: ' + value.length + ')')
  }
  Length.toJSON = function () { return name }

  return Length
}

var _ArrayN = _LengthN.bind(null, NATIVE.Array)
var _BufferN = _LengthN.bind(null, _Buffer)
var _HexN = _LengthN.bind(null, Hex)
var _StringN = _LengthN.bind(null, NATIVE.String)

function Range (a, b, f) {
  f = f || NATIVE.Number
  function _range (value, strict) {
    return f(value, strict) && (value > a) && (value < b)
  }
  _range.toJSON = function () {
    return `${f.toJSON()} between [${a}, ${b}]`
  }
  return _range
}

var INT53_MAX = Math.pow(2, 53) - 1

function Finite (value) {
  return typeof value === 'number' && isFinite(value)
}
function Int8 (value) { return ((value << 24) >> 24) === value }
function Int16 (value) { return ((value << 16) >> 16) === value }
function Int32 (value) { return (value | 0) === value }
function Int53 (value) {
  return typeof value === 'number' &&
    value >= -INT53_MAX &&
    value <= INT53_MAX &&
    Math.floor(value) === value
}
function UInt8 (value) { return (value & 0xff) === value }
function UInt16 (value) { return (value & 0xffff) === value }
function UInt32 (value) { return (value >>> 0) === value }
function UInt53 (value) {
  return typeof value === 'number' &&
    value >= 0 &&
    value <= INT53_MAX &&
    Math.floor(value) === value
}

var types = {
  ArrayN: _ArrayN,
  Buffer: _Buffer,
  BufferN: _BufferN,
  Finite: Finite,
  Hex: Hex,
  HexN: _HexN,
  Int8: Int8,
  Int16: Int16,
  Int32: Int32,
  Int53: Int53,
  Range: Range,
  StringN: _StringN,
  UInt8: UInt8,
  UInt16: UInt16,
  UInt32: UInt32,
  UInt53: UInt53
}

for (var typeName in types) {
  types[typeName].toJSON = function (t) {
    return t
  }.bind(null, typeName)
}

module.exports = types

}).call(this)}).call(this,{"isBuffer":require("../../../../../.nvm/versions/node/v14.15.4/lib/node_modules/browserify/node_modules/is-buffer/index.js")})
},{"../../../../../.nvm/versions/node/v14.15.4/lib/node_modules/browserify/node_modules/is-buffer/index.js":8,"./errors":140,"./native":143}],142:[function(require,module,exports){
var ERRORS = require('./errors')
var NATIVE = require('./native')

// short-hand
var tfJSON = ERRORS.tfJSON
var TfTypeError = ERRORS.TfTypeError
var TfPropertyTypeError = ERRORS.TfPropertyTypeError
var tfSubError = ERRORS.tfSubError
var getValueTypeName = ERRORS.getValueTypeName

var TYPES = {
  arrayOf: function arrayOf (type, options) {
    type = compile(type)
    options = options || {}

    function _arrayOf (array, strict) {
      if (!NATIVE.Array(array)) return false
      if (NATIVE.Nil(array)) return false
      if (options.minLength !== undefined && array.length < options.minLength) return false
      if (options.maxLength !== undefined && array.length > options.maxLength) return false
      if (options.length !== undefined && array.length !== options.length) return false

      return array.every(function (value, i) {
        try {
          return typeforce(type, value, strict)
        } catch (e) {
          throw tfSubError(e, i)
        }
      })
    }
    _arrayOf.toJSON = function () {
      var str = '[' + tfJSON(type) + ']'
      if (options.length !== undefined) {
        str += '{' + options.length + '}'
      } else if (options.minLength !== undefined || options.maxLength !== undefined) {
        str += '{' +
          (options.minLength === undefined ? 0 : options.minLength) + ',' +
          (options.maxLength === undefined ? Infinity : options.maxLength) + '}'
      }
      return str
    }

    return _arrayOf
  },

  maybe: function maybe (type) {
    type = compile(type)

    function _maybe (value, strict) {
      return NATIVE.Nil(value) || type(value, strict, maybe)
    }
    _maybe.toJSON = function () { return '?' + tfJSON(type) }

    return _maybe
  },

  map: function map (propertyType, propertyKeyType) {
    propertyType = compile(propertyType)
    if (propertyKeyType) propertyKeyType = compile(propertyKeyType)

    function _map (value, strict) {
      if (!NATIVE.Object(value)) return false
      if (NATIVE.Nil(value)) return false

      for (var propertyName in value) {
        try {
          if (propertyKeyType) {
            typeforce(propertyKeyType, propertyName, strict)
          }
        } catch (e) {
          throw tfSubError(e, propertyName, 'key')
        }

        try {
          var propertyValue = value[propertyName]
          typeforce(propertyType, propertyValue, strict)
        } catch (e) {
          throw tfSubError(e, propertyName)
        }
      }

      return true
    }

    if (propertyKeyType) {
      _map.toJSON = function () {
        return '{' + tfJSON(propertyKeyType) + ': ' + tfJSON(propertyType) + '}'
      }
    } else {
      _map.toJSON = function () { return '{' + tfJSON(propertyType) + '}' }
    }

    return _map
  },

  object: function object (uncompiled) {
    var type = {}

    for (var typePropertyName in uncompiled) {
      type[typePropertyName] = compile(uncompiled[typePropertyName])
    }

    function _object (value, strict) {
      if (!NATIVE.Object(value)) return false
      if (NATIVE.Nil(value)) return false

      var propertyName

      try {
        for (propertyName in type) {
          var propertyType = type[propertyName]
          var propertyValue = value[propertyName]

          typeforce(propertyType, propertyValue, strict)
        }
      } catch (e) {
        throw tfSubError(e, propertyName)
      }

      if (strict) {
        for (propertyName in value) {
          if (type[propertyName]) continue

          throw new TfPropertyTypeError(undefined, propertyName)
        }
      }

      return true
    }
    _object.toJSON = function () { return tfJSON(type) }

    return _object
  },

  anyOf: function anyOf () {
    var types = [].slice.call(arguments).map(compile)

    function _anyOf (value, strict) {
      return types.some(function (type) {
        try {
          return typeforce(type, value, strict)
        } catch (e) {
          return false
        }
      })
    }
    _anyOf.toJSON = function () { return types.map(tfJSON).join('|') }

    return _anyOf
  },

  allOf: function allOf () {
    var types = [].slice.call(arguments).map(compile)

    function _allOf (value, strict) {
      return types.every(function (type) {
        try {
          return typeforce(type, value, strict)
        } catch (e) {
          return false
        }
      })
    }
    _allOf.toJSON = function () { return types.map(tfJSON).join(' & ') }

    return _allOf
  },

  quacksLike: function quacksLike (type) {
    function _quacksLike (value) {
      return type === getValueTypeName(value)
    }
    _quacksLike.toJSON = function () { return type }

    return _quacksLike
  },

  tuple: function tuple () {
    var types = [].slice.call(arguments).map(compile)

    function _tuple (values, strict) {
      if (NATIVE.Nil(values)) return false
      if (NATIVE.Nil(values.length)) return false
      if (strict && (values.length !== types.length)) return false

      return types.every(function (type, i) {
        try {
          return typeforce(type, values[i], strict)
        } catch (e) {
          throw tfSubError(e, i)
        }
      })
    }
    _tuple.toJSON = function () { return '(' + types.map(tfJSON).join(', ') + ')' }

    return _tuple
  },

  value: function value (expected) {
    function _value (actual) {
      return actual === expected
    }
    _value.toJSON = function () { return expected }

    return _value
  }
}

// TODO: deprecate
TYPES.oneOf = TYPES.anyOf

function compile (type) {
  if (NATIVE.String(type)) {
    if (type[0] === '?') return TYPES.maybe(type.slice(1))

    return NATIVE[type] || TYPES.quacksLike(type)
  } else if (type && NATIVE.Object(type)) {
    if (NATIVE.Array(type)) {
      if (type.length !== 1) throw new TypeError('Expected compile() parameter of type Array of length 1')
      return TYPES.arrayOf(type[0])
    }

    return TYPES.object(type)
  } else if (NATIVE.Function(type)) {
    return type
  }

  return TYPES.value(type)
}

function typeforce (type, value, strict, surrogate) {
  if (NATIVE.Function(type)) {
    if (type(value, strict)) return true

    throw new TfTypeError(surrogate || type, value)
  }

  // JIT
  return typeforce(compile(type), value, strict)
}

// assign types to typeforce function
for (var typeName in NATIVE) {
  typeforce[typeName] = NATIVE[typeName]
}

for (typeName in TYPES) {
  typeforce[typeName] = TYPES[typeName]
}

var EXTRA = require('./extra')
for (typeName in EXTRA) {
  typeforce[typeName] = EXTRA[typeName]
}

typeforce.compile = compile
typeforce.TfTypeError = TfTypeError
typeforce.TfPropertyTypeError = TfPropertyTypeError

module.exports = typeforce

},{"./errors":140,"./extra":141,"./native":143}],143:[function(require,module,exports){
var types = {
  Array: function (value) { return value !== null && value !== undefined && value.constructor === Array },
  Boolean: function (value) { return typeof value === 'boolean' },
  Function: function (value) { return typeof value === 'function' },
  Nil: function (value) { return value === undefined || value === null },
  Number: function (value) { return typeof value === 'number' },
  Object: function (value) { return typeof value === 'object' },
  String: function (value) { return typeof value === 'string' },
  '': function () { return true }
}

// TODO: deprecate
types.Null = types.Nil

for (var typeName in types) {
  types[typeName].toJSON = function (t) {
    return t
  }.bind(null, typeName)
}

module.exports = types

},{}],144:[function(require,module,exports){
arguments[4][28][0].apply(exports,arguments)
},{"dup":28}],145:[function(require,module,exports){
'use strict'
var Buffer = require('safe-buffer').Buffer

// Number.MAX_SAFE_INTEGER
var MAX_SAFE_INTEGER = 9007199254740991

function checkUInt53 (n) {
  if (n < 0 || n > MAX_SAFE_INTEGER || n % 1 !== 0) throw new RangeError('value out of range')
}

function encode (number, buffer, offset) {
  checkUInt53(number)

  if (!buffer) buffer = Buffer.allocUnsafe(encodingLength(number))
  if (!Buffer.isBuffer(buffer)) throw new TypeError('buffer must be a Buffer instance')
  if (!offset) offset = 0

  // 8 bit
  if (number < 0xfd) {
    buffer.writeUInt8(number, offset)
    encode.bytes = 1

  // 16 bit
  } else if (number <= 0xffff) {
    buffer.writeUInt8(0xfd, offset)
    buffer.writeUInt16LE(number, offset + 1)
    encode.bytes = 3

  // 32 bit
  } else if (number <= 0xffffffff) {
    buffer.writeUInt8(0xfe, offset)
    buffer.writeUInt32LE(number, offset + 1)
    encode.bytes = 5

  // 64 bit
  } else {
    buffer.writeUInt8(0xff, offset)
    buffer.writeUInt32LE(number >>> 0, offset + 1)
    buffer.writeUInt32LE((number / 0x100000000) | 0, offset + 5)
    encode.bytes = 9
  }

  return buffer
}

function decode (buffer, offset) {
  if (!Buffer.isBuffer(buffer)) throw new TypeError('buffer must be a Buffer instance')
  if (!offset) offset = 0

  var first = buffer.readUInt8(offset)

  // 8 bit
  if (first < 0xfd) {
    decode.bytes = 1
    return first

  // 16 bit
  } else if (first === 0xfd) {
    decode.bytes = 3
    return buffer.readUInt16LE(offset + 1)

  // 32 bit
  } else if (first === 0xfe) {
    decode.bytes = 5
    return buffer.readUInt32LE(offset + 1)

  // 64 bit
  } else {
    decode.bytes = 9
    var lo = buffer.readUInt32LE(offset + 1)
    var hi = buffer.readUInt32LE(offset + 5)
    var number = hi * 0x0100000000 + lo
    checkUInt53(number)

    return number
  }
}

function encodingLength (number) {
  checkUInt53(number)

  return (
    number < 0xfd ? 1
      : number <= 0xffff ? 3
        : number <= 0xffffffff ? 5
          : 9
  )
}

module.exports = { encode: encode, decode: decode, encodingLength: encodingLength }

},{"safe-buffer":126}],146:[function(require,module,exports){
(function (Buffer){(function (){
var bs58check = require('bs58check')

function decodeRaw (buffer, version) {
  // check version only if defined
  if (version !== undefined && buffer[0] !== version) throw new Error('Invalid network version')

  // uncompressed
  if (buffer.length === 33) {
    return {
      version: buffer[0],
      privateKey: buffer.slice(1, 33),
      compressed: false
    }
  }

  // invalid length
  if (buffer.length !== 34) throw new Error('Invalid WIF length')

  // invalid compression flag
  if (buffer[33] !== 0x01) throw new Error('Invalid compression flag')

  return {
    version: buffer[0],
    privateKey: buffer.slice(1, 33),
    compressed: true
  }
}

function encodeRaw (version, privateKey, compressed) {
  var result = new Buffer(compressed ? 34 : 33)

  result.writeUInt8(version, 0)
  privateKey.copy(result, 1)

  if (compressed) {
    result[33] = 0x01
  }

  return result
}

function decode (string, version) {
  return decodeRaw(bs58check.decode(string), version)
}

function encode (version, privateKey, compressed) {
  if (typeof version === 'number') return bs58check.encode(encodeRaw(version, privateKey, compressed))

  return bs58check.encode(
    encodeRaw(
      version.version,
      version.privateKey,
      version.compressed
    )
  )
}

module.exports = {
  decode: decode,
  decodeRaw: decodeRaw,
  encode: encode,
  encodeRaw: encodeRaw
}

}).call(this)}).call(this,require("buffer").Buffer)
},{"bs58check":66,"buffer":4}],147:[function(require,module,exports){
(function (Buffer){(function (){
'use strict';
var __importStar =
  (this && this.__importStar) ||
  function(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null)
      for (var k in mod)
        if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result['default'] = mod;
    return result;
  };
Object.defineProperty(exports, '__esModule', { value: true });
const networks = __importStar(require('./networks'));
const payments = __importStar(require('./payments'));
const bscript = __importStar(require('./script'));
const types = __importStar(require('./types'));
const bech32 = require('bech32');
const blech32 = require('blech32');
const bs58check = require('bs58check');
const typeforce = require('typeforce');
function fromBase58Check(address) {
  const payload = bs58check.decode(address);
  // TODO: 4.0.0, move to "toOutputScript"
  if (payload.length < 21) throw new TypeError(address + ' is too short');
  if (payload.length > 21) throw new TypeError(address + ' is too long');
  const version = payload.readUInt8(0);
  const hash = payload.slice(1);
  return { version, hash };
}
exports.fromBase58Check = fromBase58Check;
function fromBech32(address) {
  const result = bech32.decode(address);
  const data = bech32.fromWords(result.words.slice(1));
  return {
    version: result.words[0],
    prefix: result.prefix,
    data: Buffer.from(data),
  };
}
exports.fromBech32 = fromBech32;
function fromBlech32(address) {
  const prefix = address.substring(0, 2);
  const result = blech32.decode(prefix, address);
  const pubkey = result.words.slice(0, 33);
  const prg = result.words.slice(33);
  const data = Buffer.concat([Buffer.from([result.version, prg.length]), prg]);
  return {
    version: result.version,
    pubkey,
    data,
  };
}
exports.fromBlech32 = fromBlech32;
function fromConfidential(address) {
  const network = getNetwork(address);
  if (address.startsWith(network.blech32))
    return fromConfidentialSegwit(address, network);
  return fromConfidentialLegacy(address, network);
}
exports.fromConfidential = fromConfidential;
function toBase58Check(hash, version) {
  typeforce(types.tuple(types.Hash160bit, types.UInt8), arguments);
  const payload = Buffer.allocUnsafe(21);
  payload.writeUInt8(version, 0);
  hash.copy(payload, 1);
  return bs58check.encode(payload);
}
exports.toBase58Check = toBase58Check;
function toBech32(data, version, prefix) {
  const words = bech32.toWords(data);
  words.unshift(version);
  return bech32.encode(prefix, words);
}
exports.toBech32 = toBech32;
function toBlech32(data, pubkey, prefix) {
  const words = Buffer.concat([pubkey, data.slice(2)]);
  return blech32.encode(prefix, words);
}
exports.toBlech32 = toBlech32;
function toConfidential(address, blindingKey) {
  const network = getNetwork(address);
  if (address.startsWith(network.bech32))
    return toConfidentialSegwit(address, blindingKey, network);
  return toConfidentialLegacy(address, blindingKey, network);
}
exports.toConfidential = toConfidential;
function fromOutputScript(output, network) {
  // TODO: Network
  network = network || networks.liquid;
  try {
    return payments.p2pkh({ output, network }).address;
  } catch (e) {}
  try {
    return payments.p2sh({ output, network }).address;
  } catch (e) {}
  try {
    return payments.p2wpkh({ output, network }).address;
  } catch (e) {}
  try {
    return payments.p2wsh({ output, network }).address;
  } catch (e) {}
  throw new Error(bscript.toASM(output) + ' has no matching Address');
}
exports.fromOutputScript = fromOutputScript;
function toOutputScript(address, network) {
  network = network || getNetwork(address);
  let decodeBase58;
  let decodeBech32;
  let decodeConfidential;
  try {
    decodeBase58 = fromBase58Check(address);
  } catch (e) {}
  if (decodeBase58) {
    if (decodeBase58.version === network.pubKeyHash)
      return payments.p2pkh({ hash: decodeBase58.hash }).output;
    if (decodeBase58.version === network.scriptHash)
      return payments.p2sh({ hash: decodeBase58.hash }).output;
  } else {
    try {
      decodeBech32 = fromBech32(address);
    } catch (e) {}
    if (decodeBech32) {
      if (decodeBech32.prefix !== network.bech32)
        throw new Error(address + ' has an invalid prefix');
      if (decodeBech32.version === 0) {
        if (decodeBech32.data.length === 20)
          return payments.p2wpkh({ hash: decodeBech32.data }).output;
        if (decodeBech32.data.length === 32)
          return payments.p2wsh({ hash: decodeBech32.data }).output;
      }
    } else {
      try {
        decodeConfidential = fromConfidential(address);
      } catch (e) {}
      if (decodeConfidential) {
        return toOutputScript(
          decodeConfidential.unconfidentialAddress,
          network,
        );
      }
    }
  }
  throw new Error(address + ' has no matching Script');
}
exports.toOutputScript = toOutputScript;
function getNetwork(address) {
  if (
    address.startsWith(networks.liquid.blech32) ||
    address.startsWith(networks.liquid.bech32)
  )
    return networks.liquid;
  if (
    address.startsWith(networks.regtest.blech32) ||
    address.startsWith(networks.regtest.bech32)
  )
    return networks.regtest;
  const payload = bs58check.decode(address);
  const prefix = payload.readUInt8(0);
  if (
    prefix === networks.liquid.confidentialPrefix ||
    prefix === networks.liquid.pubKeyHash ||
    prefix === networks.liquid.scriptHash
  )
    return networks.liquid;
  if (
    prefix === networks.regtest.confidentialPrefix ||
    prefix === networks.regtest.pubKeyHash ||
    prefix === networks.regtest.scriptHash
  )
    return networks.regtest;
  throw new Error(address + ' has an invalid prefix');
}
exports.getNetwork = getNetwork;
function fromConfidentialLegacy(address, network) {
  const payload = bs58check.decode(address);
  const prefix = payload.readUInt8(1);
  // Check if address has valid length and prefix
  if (prefix !== network.pubKeyHash && prefix !== network.scriptHash)
    throw new TypeError(address + 'is not valid');
  if (payload.length < 55) throw new TypeError(address + ' is too short');
  if (payload.length > 55) throw new TypeError(address + ' is too long');
  // Blinded decoded haddress has the form:
  // BLIND_PREFIX|ADDRESS_PREFIX|BLINDING_KEY|SCRIPT_HASH
  // Prefixes are 1 byte long, thus blinding key always starts at 3rd byte
  const blindingKey = payload.slice(2, 35);
  const unconfidential = payload.slice(35, payload.length);
  const versionBuf = new Uint8Array(1);
  versionBuf[0] = prefix;
  const unconfidentialAddressBuffer = Buffer.concat([
    versionBuf,
    unconfidential,
  ]);
  const unconfidentialAddress = bs58check.encode(unconfidentialAddressBuffer);
  return { blindingKey, unconfidentialAddress };
}
function fromConfidentialSegwit(address, network) {
  const result = fromBlech32(address);
  const unconfidentialAddress = fromOutputScript(result.data, network);
  return { blindingKey: result.pubkey, unconfidentialAddress };
}
function toConfidentialLegacy(address, blindingKey, network) {
  const payload = bs58check.decode(address);
  const prefix = payload.readUInt8(0);
  // Check if address has valid length and prefix
  if (
    payload.length !== 21 ||
    (prefix !== network.pubKeyHash && prefix !== network.scriptHash)
  )
    throw new TypeError(address + 'is not valid');
  // Check if blind key has valid length
  if (blindingKey.length < 33) throw new TypeError('Blinding key is too short');
  if (blindingKey.length > 33) throw new TypeError('Blinding key is too long');
  const prefixBuf = new Uint8Array(2);
  prefixBuf[0] = network.confidentialPrefix;
  prefixBuf[1] = prefix;
  const confidentialAddress = Buffer.concat([
    prefixBuf,
    blindingKey,
    Buffer.from(payload.slice(1)),
  ]);
  return bs58check.encode(confidentialAddress);
}
function toConfidentialSegwit(address, blindingKey, network) {
  const data = toOutputScript(address, network);
  return toBlech32(data, blindingKey, network.blech32);
}

}).call(this)}).call(this,require("buffer").Buffer)
},{"./networks":154,"./payments":156,"./script":165,"./types":169,"bech32":30,"blech32":60,"bs58check":66,"buffer":4,"typeforce":142}],148:[function(require,module,exports){
(function (Buffer){(function (){
'use strict';
var __importStar =
  (this && this.__importStar) ||
  function(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null)
      for (var k in mod)
        if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result['default'] = mod;
    return result;
  };
Object.defineProperty(exports, '__esModule', { value: true });
const bufferutils_1 = require('./bufferutils');
const bcrypto = __importStar(require('./crypto'));
const transaction_1 = require('./transaction');
const types = __importStar(require('./types'));
const fastMerkleRoot = require('merkle-lib/fastRoot');
const typeforce = require('typeforce');
const varuint = require('varuint-bitcoin');
const errorMerkleNoTxes = new TypeError(
  'Cannot compute merkle root for zero transactions',
);
const errorWitnessNotSegwit = new TypeError(
  'Cannot compute witness commit for non-segwit block',
);
class Block {
  constructor() {
    this.version = 1;
    this.prevHash = undefined;
    this.merkleRoot = undefined;
    this.timestamp = 0;
    this.witnessCommit = undefined;
    this.bits = 0;
    this.nonce = 0;
    this.transactions = undefined;
  }
  static fromBuffer(buffer) {
    if (buffer.length < 80) throw new Error('Buffer too small (< 80 bytes)');
    let offset = 0;
    const readSlice = n => {
      offset += n;
      return buffer.slice(offset - n, offset);
    };
    const readUInt32 = () => {
      const i = buffer.readUInt32LE(offset);
      offset += 4;
      return i;
    };
    const readInt32 = () => {
      const i = buffer.readInt32LE(offset);
      offset += 4;
      return i;
    };
    const block = new Block();
    block.version = readInt32();
    block.prevHash = readSlice(32);
    block.merkleRoot = readSlice(32);
    block.timestamp = readUInt32();
    block.bits = readUInt32();
    block.nonce = readUInt32();
    if (buffer.length === 80) return block;
    const readVarInt = () => {
      const vi = varuint.decode(buffer, offset);
      offset += varuint.decode.bytes;
      return vi;
    };
    const readTransaction = () => {
      const tx = transaction_1.Transaction.fromBuffer(
        buffer.slice(offset),
        true,
      );
      offset += tx.byteLength();
      return tx;
    };
    const nTransactions = readVarInt();
    block.transactions = [];
    for (let i = 0; i < nTransactions; ++i) {
      const tx = readTransaction();
      block.transactions.push(tx);
    }
    const witnessCommit = block.getWitnessCommit();
    // This Block contains a witness commit
    if (witnessCommit) block.witnessCommit = witnessCommit;
    return block;
  }
  static fromHex(hex) {
    return Block.fromBuffer(Buffer.from(hex, 'hex'));
  }
  static calculateTarget(bits) {
    const exponent = ((bits & 0xff000000) >> 24) - 3;
    const mantissa = bits & 0x007fffff;
    const target = Buffer.alloc(32, 0);
    target.writeUIntBE(mantissa, 29 - exponent, 3);
    return target;
  }
  static calculateMerkleRoot(transactions, forWitness) {
    typeforce([{ getHash: types.Function }], transactions);
    if (transactions.length === 0) throw errorMerkleNoTxes;
    if (forWitness && !txesHaveWitnessCommit(transactions))
      throw errorWitnessNotSegwit;
    const hashes = transactions.map(transaction =>
      transaction.getHash(forWitness),
    );
    const rootHash = fastMerkleRoot(hashes, bcrypto.hash256);
    return forWitness
      ? bcrypto.hash256(
          Buffer.concat([rootHash, transactions[0].ins[0].witness[0]]),
        )
      : rootHash;
  }
  getWitnessCommit() {
    if (!txesHaveWitnessCommit(this.transactions)) return null;
    // The merkle root for the witness data is in an OP_RETURN output.
    // There is no rule for the index of the output, so use filter to find it.
    // The root is prepended with 0xaa21a9ed so check for 0x6a24aa21a9ed
    // If multiple commits are found, the output with highest index is assumed.
    const witnessCommits = this.transactions[0].outs
      .filter(out =>
        out.script.slice(0, 6).equals(Buffer.from('6a24aa21a9ed', 'hex')),
      )
      .map(out => out.script.slice(6, 38));
    if (witnessCommits.length === 0) return null;
    // Use the commit with the highest output (should only be one though)
    const result = witnessCommits[witnessCommits.length - 1];
    if (!(result instanceof Buffer && result.length === 32)) return null;
    return result;
  }
  hasWitnessCommit() {
    if (
      this.witnessCommit instanceof Buffer &&
      this.witnessCommit.length === 32
    )
      return true;
    if (this.getWitnessCommit() !== null) return true;
    return false;
  }
  hasWitness() {
    return anyTxHasWitness(this.transactions);
  }
  weight() {
    const base = this.byteLength(false, false);
    const total = this.byteLength(false, true);
    return base * 3 + total;
  }
  byteLength(headersOnly, allowWitness = true) {
    if (headersOnly || !this.transactions) return 80;
    return (
      80 +
      varuint.encodingLength(this.transactions.length) +
      this.transactions.reduce((a, x) => a + x.byteLength(allowWitness), 0)
    );
  }
  getHash() {
    return bcrypto.hash256(this.toBuffer(true));
  }
  getId() {
    return bufferutils_1.reverseBuffer(this.getHash()).toString('hex');
  }
  getUTCDate() {
    const date = new Date(0); // epoch
    date.setUTCSeconds(this.timestamp);
    return date;
  }
  // TODO: buffer, offset compatibility
  toBuffer(headersOnly) {
    const buffer = Buffer.allocUnsafe(this.byteLength(headersOnly));
    let offset = 0;
    const writeSlice = slice => {
      slice.copy(buffer, offset);
      offset += slice.length;
    };
    const writeInt32 = i => {
      buffer.writeInt32LE(i, offset);
      offset += 4;
    };
    const writeUInt32 = i => {
      buffer.writeUInt32LE(i, offset);
      offset += 4;
    };
    writeInt32(this.version);
    writeSlice(this.prevHash);
    writeSlice(this.merkleRoot);
    writeUInt32(this.timestamp);
    writeUInt32(this.bits);
    writeUInt32(this.nonce);
    if (headersOnly || !this.transactions) return buffer;
    varuint.encode(this.transactions.length, buffer, offset);
    offset += varuint.encode.bytes;
    this.transactions.forEach(tx => {
      const txSize = tx.byteLength(); // TODO: extract from toBuffer?
      tx.toBuffer(buffer, offset);
      offset += txSize;
    });
    return buffer;
  }
  toHex(headersOnly) {
    return this.toBuffer(headersOnly).toString('hex');
  }
  checkTxRoots() {
    // If the Block has segwit transactions but no witness commit,
    // there's no way it can be valid, so fail the check.
    const hasWitnessCommit = this.hasWitnessCommit();
    if (!hasWitnessCommit && this.hasWitness()) return false;
    return (
      this.__checkMerkleRoot() &&
      (hasWitnessCommit ? this.__checkWitnessCommit() : true)
    );
  }
  checkProofOfWork() {
    const hash = bufferutils_1.reverseBuffer(this.getHash());
    const target = Block.calculateTarget(this.bits);
    return hash.compare(target) <= 0;
  }
  __checkMerkleRoot() {
    if (!this.transactions) throw errorMerkleNoTxes;
    const actualMerkleRoot = Block.calculateMerkleRoot(this.transactions);
    return this.merkleRoot.compare(actualMerkleRoot) === 0;
  }
  __checkWitnessCommit() {
    if (!this.transactions) throw errorMerkleNoTxes;
    if (!this.hasWitnessCommit()) throw errorWitnessNotSegwit;
    const actualWitnessCommit = Block.calculateMerkleRoot(
      this.transactions,
      true,
    );
    return this.witnessCommit.compare(actualWitnessCommit) === 0;
  }
}
exports.Block = Block;
function txesHaveWitnessCommit(transactions) {
  return (
    transactions instanceof Array &&
    transactions[0] &&
    transactions[0].ins &&
    transactions[0].ins instanceof Array &&
    transactions[0].ins[0] &&
    transactions[0].ins[0].witness &&
    transactions[0].ins[0].witness instanceof Array &&
    transactions[0].ins[0].witness.length > 0
  );
}
function anyTxHasWitness(transactions) {
  return (
    transactions instanceof Array &&
    transactions.some(
      tx =>
        typeof tx === 'object' &&
        tx.ins instanceof Array &&
        tx.ins.some(
          input =>
            typeof input === 'object' &&
            input.witness instanceof Array &&
            input.witness.length > 0,
        ),
    )
  );
}

}).call(this)}).call(this,require("buffer").Buffer)
},{"./bufferutils":149,"./crypto":151,"./transaction":168,"./types":169,"buffer":4,"merkle-lib/fastRoot":105,"typeforce":142,"varuint-bitcoin":145}],149:[function(require,module,exports){
(function (Buffer){(function (){
'use strict';
var __importStar =
  (this && this.__importStar) ||
  function(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null)
      for (var k in mod)
        if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result['default'] = mod;
    return result;
  };
Object.defineProperty(exports, '__esModule', { value: true });
const types = __importStar(require('./types'));
const typeforce = require('typeforce');
const varuint = require('varuint-bitcoin');
const CONFIDENTIAL_COMMITMENT = 33; // default size of confidential commitments (i.e. asset, value, nonce)
const CONFIDENTIAL_VALUE = 9; // explicit size of confidential values
// https://github.com/feross/buffer/blob/master/index.js#L1127
function verifuint(value, max) {
  if (typeof value !== 'number')
    throw new Error('cannot write a non-number as a number');
  if (value < 0)
    throw new Error('specified a negative value for writing an unsigned value');
  if (value > max) throw new Error('RangeError: value out of range');
  if (Math.floor(value) !== value)
    throw new Error('value has a fractional component');
}
function readUInt64LE(buffer, offset) {
  const a = buffer.readUInt32LE(offset);
  let b = buffer.readUInt32LE(offset + 4);
  b *= 0x100000000;
  verifuint(b + a, 0x001fffffffffffff);
  return b + a;
}
exports.readUInt64LE = readUInt64LE;
function writeUInt64LE(buffer, value, offset) {
  verifuint(value, 0x001fffffffffffff);
  buffer.writeInt32LE(value & -1, offset);
  buffer.writeUInt32LE(Math.floor(value / 0x100000000), offset + 4);
  return offset + 8;
}
exports.writeUInt64LE = writeUInt64LE;
function reverseBuffer(buffer) {
  if (buffer.length < 1) return buffer;
  let j = buffer.length - 1;
  let tmp = 0;
  for (let i = 0; i < buffer.length / 2; i++) {
    tmp = buffer[i];
    buffer[i] = buffer[j];
    buffer[j] = tmp;
    j--;
  }
  return buffer;
}
exports.reverseBuffer = reverseBuffer;
/**
 * Helper class for serialization of bitcoin data types into a pre-allocated buffer.
 */
class BufferWriter {
  constructor(buffer, offset = 0) {
    this.buffer = buffer;
    this.offset = offset;
    typeforce(types.tuple(types.Buffer, types.UInt32), [buffer, offset]);
  }
  writeUInt8(i) {
    this.offset = this.buffer.writeUInt8(i, this.offset);
  }
  writeInt32(i) {
    this.offset = this.buffer.writeInt32LE(i, this.offset);
  }
  writeUInt32(i) {
    this.offset = this.buffer.writeUInt32LE(i, this.offset);
  }
  writeUInt64(i) {
    this.offset = writeUInt64LE(this.buffer, i, this.offset);
  }
  writeVarInt(i) {
    varuint.encode(i, this.buffer, this.offset);
    this.offset += varuint.encode.bytes;
  }
  writeSlice(slice) {
    if (this.buffer.length < this.offset + slice.length) {
      throw new Error('Cannot write slice out of bounds');
    }
    this.offset += slice.copy(this.buffer, this.offset);
  }
  writeVarSlice(slice) {
    this.writeVarInt(slice.length);
    this.writeSlice(slice);
  }
  writeVector(vector) {
    this.writeVarInt(vector.length);
    vector.forEach(buf => this.writeVarSlice(buf));
  }
  writeConfidentialInFields(input) {
    this.writeVarSlice(input.issuanceRangeProof);
    this.writeVarSlice(input.inflationRangeProof);
    this.writeVarInt(input.witness.length);
    for (const it of input.witness) this.writeVarSlice(it);
    this.writeVarInt(input.peginWitness.length);
    for (const it of input.peginWitness) this.writeVarSlice(it);
  }
  writeConfidentialOutFields(output) {
    this.writeVarSlice(output.surjectionProof);
    this.writeVarSlice(output.rangeProof);
  }
}
exports.BufferWriter = BufferWriter;
/**
 * Helper class for reading of bitcoin data types from a buffer.
 */
class BufferReader {
  constructor(buffer, offset = 0) {
    this.buffer = buffer;
    this.offset = offset;
    typeforce(types.tuple(types.Buffer, types.UInt32), [buffer, offset]);
  }
  readUInt8() {
    const result = this.buffer.readUInt8(this.offset);
    this.offset++;
    return result;
  }
  readInt32() {
    const result = this.buffer.readInt32LE(this.offset);
    this.offset += 4;
    return result;
  }
  readUInt32() {
    const result = this.buffer.readUInt32LE(this.offset);
    this.offset += 4;
    return result;
  }
  readUInt64() {
    const result = readUInt64LE(this.buffer, this.offset);
    this.offset += 8;
    return result;
  }
  readVarInt() {
    const vi = varuint.decode(this.buffer, this.offset);
    this.offset += varuint.decode.bytes;
    return vi;
  }
  readSlice(n) {
    if (this.buffer.length < this.offset + n) {
      throw new Error('Cannot read slice out of bounds');
    }
    const result = this.buffer.slice(this.offset, this.offset + n);
    this.offset += n;
    return result;
  }
  readVarSlice() {
    return this.readSlice(this.readVarInt());
  }
  readVector() {
    const count = this.readVarInt();
    const vector = [];
    for (let i = 0; i < count; i++) vector.push(this.readVarSlice());
    return vector;
  }
  // CConfidentialAsset size 33, prefixA 10, prefixB 11
  readConfidentialAsset() {
    const version = this.readUInt8();
    const versionBuffer = this.buffer.slice(this.offset - 1, this.offset);
    if (version === 1 || version === 0xff)
      return Buffer.concat([
        versionBuffer,
        this.readSlice(CONFIDENTIAL_COMMITMENT - 1),
      ]);
    else if (version === 10 || version === 11)
      return Buffer.concat([
        versionBuffer,
        this.readSlice(CONFIDENTIAL_COMMITMENT - 1),
      ]);
    return versionBuffer;
  }
  // CConfidentialNonce size 33, prefixA 2, prefixB 3
  readConfidentialNonce() {
    const version = this.readUInt8();
    const versionBuffer = this.buffer.slice(this.offset - 1, this.offset);
    if (version === 1 || version === 0xff)
      return Buffer.concat([
        versionBuffer,
        this.readSlice(CONFIDENTIAL_COMMITMENT - 1),
      ]);
    else if (version === 2 || version === 3)
      return Buffer.concat([
        versionBuffer,
        this.readSlice(CONFIDENTIAL_COMMITMENT - 1),
      ]);
    return versionBuffer;
  }
  // CConfidentialValue size 9, prefixA 8, prefixB 9
  readConfidentialValue() {
    const version = this.readUInt8();
    const versionBuffer = this.buffer.slice(this.offset - 1, this.offset);
    if (version === 1 || version === 0xff)
      return Buffer.concat([
        versionBuffer,
        this.readSlice(CONFIDENTIAL_VALUE - 1),
      ]);
    else if (version === 8 || version === 9)
      return Buffer.concat([
        versionBuffer,
        this.readSlice(CONFIDENTIAL_COMMITMENT - 1),
      ]);
    return versionBuffer;
  }
  readConfidentialInFields() {
    const issuanceRangeProof = this.readVarSlice();
    const inflationRangeProof = this.readVarSlice();
    const witness = this.readVector();
    const peginWitness = this.readVector();
    return {
      issuanceRangeProof,
      inflationRangeProof,
      witness,
      peginWitness,
    };
  }
  readConfidentialOutFields() {
    const surjectionProof = this.readVarSlice();
    const rangeProof = this.readVarSlice();
    return { surjectionProof, rangeProof };
  }
  readIssuance() {
    const issuanceNonce = this.readSlice(32);
    const issuanceEntropy = this.readSlice(32);
    const amount = this.readConfidentialValue();
    const inflation = this.readConfidentialValue();
    return {
      assetBlindingNonce: issuanceNonce,
      assetEntropy: issuanceEntropy,
      assetAmount: amount,
      tokenAmount: inflation,
    };
  }
}
exports.BufferReader = BufferReader;

}).call(this)}).call(this,require("buffer").Buffer)
},{"./types":169,"buffer":4,"typeforce":142,"varuint-bitcoin":145}],150:[function(require,module,exports){
(function (Buffer){(function (){
'use strict';
var __awaiter =
  (this && this.__awaiter) ||
  function(thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function(resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(value) {
        try {
          step(generator['throw'](value));
        } catch (e) {
          reject(e);
        }
      }
      function step(result) {
        result.done
          ? resolve(result.value)
          : new P(function(resolve) {
              resolve(result.value);
            }).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };
var __importStar =
  (this && this.__importStar) ||
  function(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null)
      for (var k in mod)
        if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result['default'] = mod;
    return result;
  };
var __importDefault =
  (this && this.__importDefault) ||
  function(mod) {
    return mod && mod.__esModule ? mod : { default: mod };
  };
Object.defineProperty(exports, '__esModule', { value: true });
const bufferutils = __importStar(require('./bufferutils'));
const crypto = __importStar(require('./crypto'));
const secp256k1_zkp_1 = __importDefault(require('secp256k1-zkp'));
const secp256k1Promise = secp256k1_zkp_1.default();
function nonceHash(pubkey, privkey) {
  return __awaiter(this, void 0, void 0, function*() {
    const { ecdh } = yield secp256k1Promise;
    return crypto.sha256(ecdh(pubkey, privkey));
  });
}
function valueBlindingFactor(
  inValues,
  outValues,
  inGenerators,
  outGenerators,
  inFactors,
  outFactors,
) {
  return __awaiter(this, void 0, void 0, function*() {
    const { pedersen } = yield secp256k1Promise;
    const values = inValues.concat(outValues);
    const nInputs = inValues.length;
    const generators = inGenerators.concat(outGenerators);
    const factors = inFactors.concat(outFactors);
    return pedersen.blindGeneratorBlindSum(
      values,
      nInputs,
      generators,
      factors,
    );
  });
}
exports.valueBlindingFactor = valueBlindingFactor;
function valueCommitment(value, gen, factor) {
  return __awaiter(this, void 0, void 0, function*() {
    const { generator, pedersen } = yield secp256k1Promise;
    const generatorParsed = generator.parse(gen);
    const commit = pedersen.commit(factor, value, generatorParsed);
    return pedersen.commitSerialize(commit);
  });
}
exports.valueCommitment = valueCommitment;
function assetCommitment(asset, factor) {
  return __awaiter(this, void 0, void 0, function*() {
    const { generator } = yield secp256k1Promise;
    const gen = generator.generateBlinded(asset, factor);
    return generator.serialize(gen);
  });
}
exports.assetCommitment = assetCommitment;
function unblindOutputWithKey(out, blindingPrivKey) {
  return __awaiter(this, void 0, void 0, function*() {
    const nonce = yield nonceHash(out.nonce, blindingPrivKey);
    return unblindOutputWithNonce(out, nonce);
  });
}
exports.unblindOutputWithKey = unblindOutputWithKey;
function unblindOutputWithNonce(out, nonce) {
  return __awaiter(this, void 0, void 0, function*() {
    const secp = yield secp256k1Promise;
    const gen = secp.generator.parse(out.asset);
    const { value, blindFactor, message } = secp.rangeproof.rewind(
      out.value,
      out.rangeProof,
      nonce,
      gen,
      out.script,
    );
    return {
      value,
      asset: message.slice(0, 32),
      valueBlindingFactor: blindFactor,
      assetBlindingFactor: message.slice(32),
    };
  });
}
exports.unblindOutputWithNonce = unblindOutputWithNonce;
function rangeProofInfo(proof) {
  return __awaiter(this, void 0, void 0, function*() {
    const { rangeproof } = yield secp256k1Promise;
    const { exp, mantissa, minValue, maxValue } = rangeproof.info(proof);
    return {
      minValue: parseInt(minValue, 10),
      maxValue: parseInt(maxValue, 10),
      ctExp: exp,
      ctBits: parseInt(mantissa, 10),
    };
  });
}
exports.rangeProofInfo = rangeProofInfo;
function rangeProof(
  value,
  blindingPubkey,
  ephemeralPrivkey,
  asset,
  assetBlindingFactor,
  valueBlindFactor,
  valueCommit,
  scriptPubkey,
  minValue,
  exp,
  minBits,
) {
  return __awaiter(this, void 0, void 0, function*() {
    const { generator, pedersen, rangeproof } = yield secp256k1Promise;
    const nonce = yield nonceHash(blindingPubkey, ephemeralPrivkey);
    const gen = generator.generateBlinded(asset, assetBlindingFactor);
    const message = Buffer.concat([asset, assetBlindingFactor]);
    const commit = pedersen.commitParse(valueCommit);
    const mv = minValue ? minValue : '1';
    const e = exp ? exp : 0;
    const mb = minBits ? minBits : 36;
    return rangeproof.sign(
      commit,
      valueBlindFactor,
      nonce,
      value,
      gen,
      mv,
      e,
      mb,
      message,
      scriptPubkey,
    );
  });
}
exports.rangeProof = rangeProof;
function surjectionProof(
  outputAsset,
  outputAssetBlindingFactor,
  inputAssets,
  inputAssetBlindingFactors,
  seed,
) {
  return __awaiter(this, void 0, void 0, function*() {
    const { generator, surjectionproof } = yield secp256k1Promise;
    const outputGenerator = generator.generateBlinded(
      outputAsset,
      outputAssetBlindingFactor,
    );
    const inputGenerators = inputAssets.map((v, i) =>
      generator.generateBlinded(v, inputAssetBlindingFactors[i]),
    );
    const nInputsToUse = inputAssets.length > 3 ? 3 : inputAssets.length;
    const maxIterations = 100;
    const init = surjectionproof.initialize(
      inputAssets,
      nInputsToUse,
      outputAsset,
      maxIterations,
      seed,
    );
    const proof = surjectionproof.generate(
      init.proof,
      inputGenerators,
      outputGenerator,
      init.inputIndex,
      inputAssetBlindingFactors[init.inputIndex],
      outputAssetBlindingFactor,
    );
    return surjectionproof.serialize(proof);
  });
}
exports.surjectionProof = surjectionProof;
const CONFIDENTIAL_VALUE = 9; // explicit size of confidential values
function confidentialValueToSatoshi(value) {
  if (!isUnconfidentialValue(value)) {
    throw new Error(
      'Value must be unconfidential, length or the prefix are not valid',
    );
  }
  const reverseValueBuffer = Buffer.allocUnsafe(CONFIDENTIAL_VALUE - 1);
  value.slice(1, CONFIDENTIAL_VALUE).copy(reverseValueBuffer, 0);
  bufferutils.reverseBuffer(reverseValueBuffer);
  return bufferutils.readUInt64LE(reverseValueBuffer, 0);
}
exports.confidentialValueToSatoshi = confidentialValueToSatoshi;
function satoshiToConfidentialValue(amount) {
  const unconfPrefix = Buffer.allocUnsafe(1);
  const valueBuffer = Buffer.allocUnsafe(CONFIDENTIAL_VALUE - 1);
  unconfPrefix.writeUInt8(1, 0);
  bufferutils.writeUInt64LE(valueBuffer, amount, 0);
  return Buffer.concat([unconfPrefix, bufferutils.reverseBuffer(valueBuffer)]);
}
exports.satoshiToConfidentialValue = satoshiToConfidentialValue;
function isUnconfidentialValue(value) {
  return value.length === CONFIDENTIAL_VALUE && value.readUInt8(0) === 1;
}
exports.isUnconfidentialValue = isUnconfidentialValue;

}).call(this)}).call(this,require("buffer").Buffer)
},{"./bufferutils":149,"./crypto":151,"buffer":4,"secp256k1-zkp":128}],151:[function(require,module,exports){
'use strict';
Object.defineProperty(exports, '__esModule', { value: true });
const createHash = require('create-hash');
function ripemd160(buffer) {
  try {
    return createHash('rmd160')
      .update(buffer)
      .digest();
  } catch (err) {
    return createHash('ripemd160')
      .update(buffer)
      .digest();
  }
}
exports.ripemd160 = ripemd160;
function sha1(buffer) {
  return createHash('sha1')
    .update(buffer)
    .digest();
}
exports.sha1 = sha1;
function sha256(buffer) {
  return createHash('sha256')
    .update(buffer)
    .digest();
}
exports.sha256 = sha256;
function hash160(buffer) {
  return ripemd160(sha256(buffer));
}
exports.hash160 = hash160;
function hash256(buffer) {
  return sha256(sha256(buffer));
}
exports.hash256 = hash256;

},{"create-hash":68}],152:[function(require,module,exports){
(function (Buffer){(function (){
'use strict';
var __importStar =
  (this && this.__importStar) ||
  function(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null)
      for (var k in mod)
        if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result['default'] = mod;
    return result;
  };
Object.defineProperty(exports, '__esModule', { value: true });
const NETWORKS = __importStar(require('./networks'));
const types = __importStar(require('./types'));
const ecc = require('tiny-secp256k1');
const randomBytes = require('randombytes');
const typeforce = require('typeforce');
const wif = require('wif');
const isOptions = typeforce.maybe(
  typeforce.compile({
    compressed: types.maybe(types.Boolean),
    network: types.maybe(types.Network),
  }),
);
class ECPair {
  constructor(__D, __Q, options) {
    this.__D = __D;
    this.__Q = __Q;
    this.lowR = false;
    if (options === undefined) options = {};
    this.compressed =
      options.compressed === undefined ? true : options.compressed;
    this.network = options.network || NETWORKS.liquid;
    if (__Q !== undefined) this.__Q = ecc.pointCompress(__Q, this.compressed);
  }
  get privateKey() {
    return this.__D;
  }
  get publicKey() {
    if (!this.__Q) this.__Q = ecc.pointFromScalar(this.__D, this.compressed);
    return this.__Q;
  }
  toWIF() {
    if (!this.__D) throw new Error('Missing private key');
    return wif.encode(this.network.wif, this.__D, this.compressed);
  }
  sign(hash, lowR) {
    if (!this.__D) throw new Error('Missing private key');
    if (lowR === undefined) lowR = this.lowR;
    if (lowR === false) {
      return ecc.sign(hash, this.__D);
    } else {
      let sig = ecc.sign(hash, this.__D);
      const extraData = Buffer.alloc(32, 0);
      let counter = 0;
      // if first try is lowR, skip the loop
      // for second try and on, add extra entropy counting up
      while (sig[0] > 0x7f) {
        counter++;
        extraData.writeUIntLE(counter, 0, 6);
        sig = ecc.signWithEntropy(hash, this.__D, extraData);
      }
      return sig;
    }
  }
  verify(hash, signature) {
    return ecc.verify(hash, this.publicKey, signature);
  }
}
function fromPrivateKey(buffer, options) {
  typeforce(types.Buffer256bit, buffer);
  if (!ecc.isPrivate(buffer))
    throw new TypeError('Private key not in range [1, n)');
  typeforce(isOptions, options);
  return new ECPair(buffer, undefined, options);
}
exports.fromPrivateKey = fromPrivateKey;
function fromPublicKey(buffer, options) {
  typeforce(ecc.isPoint, buffer);
  typeforce(isOptions, options);
  return new ECPair(undefined, buffer, options);
}
exports.fromPublicKey = fromPublicKey;
function fromWIF(wifString, network) {
  const decoded = wif.decode(wifString);
  const version = decoded.version;
  // list of networks?
  if (types.Array(network)) {
    network = network
      .filter(x => {
        return version === x.wif;
      })
      .pop();
    if (!network) throw new Error('Unknown network version');
    // otherwise, assume a network object (or default to bitcoin)
  } else {
    network = network || NETWORKS.liquid;
    if (version !== network.wif) throw new Error('Invalid network version');
  }
  return fromPrivateKey(decoded.privateKey, {
    compressed: decoded.compressed,
    network: network,
  });
}
exports.fromWIF = fromWIF;
function makeRandom(options) {
  typeforce(isOptions, options);
  if (options === undefined) options = {};
  const rng = options.rng || randomBytes;
  let d;
  do {
    d = rng(32);
    typeforce(types.Buffer256bit, d);
  } while (!ecc.isPrivate(d));
  return fromPrivateKey(d, options);
}
exports.makeRandom = makeRandom;

}).call(this)}).call(this,require("buffer").Buffer)
},{"./networks":154,"./types":169,"buffer":4,"randombytes":109,"tiny-secp256k1":138,"typeforce":142,"wif":146}],153:[function(require,module,exports){
'use strict';
var __importStar =
  (this && this.__importStar) ||
  function(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null)
      for (var k in mod)
        if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result['default'] = mod;
    return result;
  };
Object.defineProperty(exports, '__esModule', { value: true });
const bip32 = __importStar(require('bip32'));
exports.bip32 = bip32;
const address = __importStar(require('./address'));
exports.address = address;
const confidential = __importStar(require('./confidential'));
exports.confidential = confidential;
const crypto = __importStar(require('./crypto'));
exports.crypto = crypto;
const ECPair = __importStar(require('./ecpair'));
exports.ECPair = ECPair;
const networks = __importStar(require('./networks'));
exports.networks = networks;
const payments = __importStar(require('./payments'));
exports.payments = payments;
const script = __importStar(require('./script'));
exports.script = script;
var block_1 = require('./block');
exports.Block = block_1.Block;
var psbt_1 = require('./psbt');
exports.Psbt = psbt_1.Psbt;
var script_1 = require('./script');
exports.opcodes = script_1.OPS;
var transaction_1 = require('./transaction');
exports.Transaction = transaction_1.Transaction;

},{"./address":147,"./block":148,"./confidential":150,"./crypto":151,"./ecpair":152,"./networks":154,"./payments":156,"./psbt":164,"./script":165,"./transaction":168,"bip32":56}],154:[function(require,module,exports){
'use strict';
Object.defineProperty(exports, '__esModule', { value: true });
exports.liquid = {
  messagePrefix: '\x18Liquid Signed Message:\n',
  bech32: 'ex',
  blech32: 'lq',
  bip32: {
    public: 0x0488b21e,
    private: 0x0488ade4,
  },
  pubKeyHash: 57,
  scriptHash: 39,
  wif: 0x80,
  confidentialPrefix: 12,
  assetHash: '6f0279e9ed041c3d710a9f57d0c02928416460c4b722ae3457a11eec381c526d',
};
exports.regtest = {
  messagePrefix: '\x18Liquid Signed Message:\n',
  bech32: 'ert',
  blech32: 'el',
  bip32: {
    public: 0x043587cf,
    private: 0x04358394,
  },
  pubKeyHash: 235,
  scriptHash: 75,
  wif: 0xef,
  confidentialPrefix: 4,
  assetHash: '5ac9f65c0efcc4775e0baec4ec03abdde22473cd3cf33c0419ca290e0751b225',
};

},{}],155:[function(require,module,exports){
'use strict';
var __importStar =
  (this && this.__importStar) ||
  function(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null)
      for (var k in mod)
        if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result['default'] = mod;
    return result;
  };
Object.defineProperty(exports, '__esModule', { value: true });
const networks_1 = require('../networks');
const bscript = __importStar(require('../script'));
const lazy = __importStar(require('./lazy'));
const typef = require('typeforce');
const OPS = bscript.OPS;
function stacksEqual(a, b) {
  if (a.length !== b.length) return false;
  return a.every((x, i) => {
    return x.equals(b[i]);
  });
}
// output: OP_RETURN ...
function p2data(a, opts) {
  if (!a.data && !a.output) throw new TypeError('Not enough data');
  opts = Object.assign({ validate: true }, opts || {});
  typef(
    {
      network: typef.maybe(typef.Object),
      output: typef.maybe(typef.Buffer),
      data: typef.maybe(typef.arrayOf(typef.Buffer)),
    },
    a,
  );
  const network = a.network || networks_1.liquid;
  const o = { name: 'embed', network };
  lazy.prop(o, 'output', () => {
    if (!a.data) return;
    return bscript.compile([OPS.OP_RETURN].concat(a.data));
  });
  lazy.prop(o, 'data', () => {
    if (!a.output) return;
    return bscript.decompile(a.output).slice(1);
  });
  // extended validation
  if (opts.validate) {
    if (a.output) {
      const chunks = bscript.decompile(a.output);
      if (chunks[0] !== OPS.OP_RETURN) throw new TypeError('Output is invalid');
      if (!chunks.slice(1).every(typef.Buffer))
        throw new TypeError('Output is invalid');
      if (a.data && !stacksEqual(a.data, o.data))
        throw new TypeError('Data mismatch');
    }
  }
  return Object.assign(o, a);
}
exports.p2data = p2data;

},{"../networks":154,"../script":165,"./lazy":157,"typeforce":142}],156:[function(require,module,exports){
'use strict';
Object.defineProperty(exports, '__esModule', { value: true });
const embed_1 = require('./embed');
exports.embed = embed_1.p2data;
const p2ms_1 = require('./p2ms');
exports.p2ms = p2ms_1.p2ms;
const p2pk_1 = require('./p2pk');
exports.p2pk = p2pk_1.p2pk;
const p2pkh_1 = require('./p2pkh');
exports.p2pkh = p2pkh_1.p2pkh;
const p2sh_1 = require('./p2sh');
exports.p2sh = p2sh_1.p2sh;
const p2wpkh_1 = require('./p2wpkh');
exports.p2wpkh = p2wpkh_1.p2wpkh;
const p2wsh_1 = require('./p2wsh');
exports.p2wsh = p2wsh_1.p2wsh;
// TODO
// witness commitment

},{"./embed":155,"./p2ms":158,"./p2pk":159,"./p2pkh":160,"./p2sh":161,"./p2wpkh":162,"./p2wsh":163}],157:[function(require,module,exports){
'use strict';
Object.defineProperty(exports, '__esModule', { value: true });
function prop(object, name, f) {
  Object.defineProperty(object, name, {
    configurable: true,
    enumerable: true,
    get() {
      const _value = f.call(this);
      this[name] = _value;
      return _value;
    },
    set(_value) {
      Object.defineProperty(this, name, {
        configurable: true,
        enumerable: true,
        value: _value,
        writable: true,
      });
    },
  });
}
exports.prop = prop;
function value(f) {
  let _value;
  return () => {
    if (_value !== undefined) return _value;
    _value = f();
    return _value;
  };
}
exports.value = value;

},{}],158:[function(require,module,exports){
'use strict';
var __importStar =
  (this && this.__importStar) ||
  function(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null)
      for (var k in mod)
        if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result['default'] = mod;
    return result;
  };
Object.defineProperty(exports, '__esModule', { value: true });
const networks_1 = require('../networks');
const bscript = __importStar(require('../script'));
const lazy = __importStar(require('./lazy'));
const OPS = bscript.OPS;
const typef = require('typeforce');
const ecc = require('tiny-secp256k1');
const OP_INT_BASE = OPS.OP_RESERVED; // OP_1 - 1
function stacksEqual(a, b) {
  if (a.length !== b.length) return false;
  return a.every((x, i) => {
    return x.equals(b[i]);
  });
}
// input: OP_0 [signatures ...]
// output: m [pubKeys ...] n OP_CHECKMULTISIG
function p2ms(a, opts) {
  if (
    !a.input &&
    !a.output &&
    !(a.pubkeys && a.m !== undefined) &&
    !a.signatures
  )
    throw new TypeError('Not enough data');
  opts = Object.assign({ validate: true }, opts || {});
  function isAcceptableSignature(x) {
    return (
      bscript.isCanonicalScriptSignature(x) ||
      (opts.allowIncomplete && x === OPS.OP_0) !== undefined
    );
  }
  typef(
    {
      network: typef.maybe(typef.Object),
      m: typef.maybe(typef.Number),
      n: typef.maybe(typef.Number),
      output: typef.maybe(typef.Buffer),
      pubkeys: typef.maybe(typef.arrayOf(ecc.isPoint)),
      signatures: typef.maybe(typef.arrayOf(isAcceptableSignature)),
      input: typef.maybe(typef.Buffer),
    },
    a,
  );
  const network = a.network || networks_1.liquid;
  const o = { network };
  let chunks = [];
  let decoded = false;
  function decode(output) {
    if (decoded) return;
    decoded = true;
    chunks = bscript.decompile(output);
    o.m = chunks[0] - OP_INT_BASE;
    o.n = chunks[chunks.length - 2] - OP_INT_BASE;
    o.pubkeys = chunks.slice(1, -2);
  }
  lazy.prop(o, 'output', () => {
    if (!a.m) return;
    if (!o.n) return;
    if (!a.pubkeys) return;
    return bscript.compile(
      [].concat(
        OP_INT_BASE + a.m,
        a.pubkeys,
        OP_INT_BASE + o.n,
        OPS.OP_CHECKMULTISIG,
      ),
    );
  });
  lazy.prop(o, 'm', () => {
    if (!o.output) return;
    decode(o.output);
    return o.m;
  });
  lazy.prop(o, 'n', () => {
    if (!o.pubkeys) return;
    return o.pubkeys.length;
  });
  lazy.prop(o, 'pubkeys', () => {
    if (!a.output) return;
    decode(a.output);
    return o.pubkeys;
  });
  lazy.prop(o, 'signatures', () => {
    if (!a.input) return;
    return bscript.decompile(a.input).slice(1);
  });
  lazy.prop(o, 'input', () => {
    if (!a.signatures) return;
    return bscript.compile([OPS.OP_0].concat(a.signatures));
  });
  lazy.prop(o, 'witness', () => {
    if (!o.input) return;
    return [];
  });
  lazy.prop(o, 'name', () => {
    if (!o.m || !o.n) return;
    return `p2ms(${o.m} of ${o.n})`;
  });
  // extended validation
  if (opts.validate) {
    if (a.output) {
      decode(a.output);
      if (!typef.Number(chunks[0])) throw new TypeError('Output is invalid');
      if (!typef.Number(chunks[chunks.length - 2]))
        throw new TypeError('Output is invalid');
      if (chunks[chunks.length - 1] !== OPS.OP_CHECKMULTISIG)
        throw new TypeError('Output is invalid');
      if (o.m <= 0 || o.n > 16 || o.m > o.n || o.n !== chunks.length - 3)
        throw new TypeError('Output is invalid');
      if (!o.pubkeys.every(x => ecc.isPoint(x)))
        throw new TypeError('Output is invalid');
      if (a.m !== undefined && a.m !== o.m) throw new TypeError('m mismatch');
      if (a.n !== undefined && a.n !== o.n) throw new TypeError('n mismatch');
      if (a.pubkeys && !stacksEqual(a.pubkeys, o.pubkeys))
        throw new TypeError('Pubkeys mismatch');
    }
    if (a.pubkeys) {
      if (a.n !== undefined && a.n !== a.pubkeys.length)
        throw new TypeError('Pubkey count mismatch');
      o.n = a.pubkeys.length;
      if (o.n < o.m) throw new TypeError('Pubkey count cannot be less than m');
    }
    if (a.signatures) {
      if (a.signatures.length < o.m)
        throw new TypeError('Not enough signatures provided');
      if (a.signatures.length > o.m)
        throw new TypeError('Too many signatures provided');
    }
    if (a.input) {
      if (a.input[0] !== OPS.OP_0) throw new TypeError('Input is invalid');
      if (
        o.signatures.length === 0 ||
        !o.signatures.every(isAcceptableSignature)
      )
        throw new TypeError('Input has invalid signature(s)');
      if (a.signatures && !stacksEqual(a.signatures, o.signatures))
        throw new TypeError('Signature mismatch');
      if (a.m !== undefined && a.m !== a.signatures.length)
        throw new TypeError('Signature count mismatch');
    }
  }
  return Object.assign(o, a);
}
exports.p2ms = p2ms;

},{"../networks":154,"../script":165,"./lazy":157,"tiny-secp256k1":138,"typeforce":142}],159:[function(require,module,exports){
'use strict';
var __importStar =
  (this && this.__importStar) ||
  function(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null)
      for (var k in mod)
        if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result['default'] = mod;
    return result;
  };
Object.defineProperty(exports, '__esModule', { value: true });
const networks_1 = require('../networks');
const bscript = __importStar(require('../script'));
const lazy = __importStar(require('./lazy'));
const typef = require('typeforce');
const OPS = bscript.OPS;
const ecc = require('tiny-secp256k1');
// input: {signature}
// output: {pubKey} OP_CHECKSIG
function p2pk(a, opts) {
  if (!a.input && !a.output && !a.pubkey && !a.input && !a.signature)
    throw new TypeError('Not enough data');
  opts = Object.assign({ validate: true }, opts || {});
  typef(
    {
      network: typef.maybe(typef.Object),
      output: typef.maybe(typef.Buffer),
      pubkey: typef.maybe(ecc.isPoint),
      signature: typef.maybe(bscript.isCanonicalScriptSignature),
      input: typef.maybe(typef.Buffer),
    },
    a,
  );
  const _chunks = lazy.value(() => {
    return bscript.decompile(a.input);
  });
  const network = a.network || networks_1.liquid;
  const o = { name: 'p2pk', network };
  lazy.prop(o, 'output', () => {
    if (!a.pubkey) return;
    return bscript.compile([a.pubkey, OPS.OP_CHECKSIG]);
  });
  lazy.prop(o, 'pubkey', () => {
    if (!a.output) return;
    return a.output.slice(1, -1);
  });
  lazy.prop(o, 'signature', () => {
    if (!a.input) return;
    return _chunks()[0];
  });
  lazy.prop(o, 'input', () => {
    if (!a.signature) return;
    return bscript.compile([a.signature]);
  });
  lazy.prop(o, 'witness', () => {
    if (!o.input) return;
    return [];
  });
  // extended validation
  if (opts.validate) {
    if (a.output) {
      if (a.output[a.output.length - 1] !== OPS.OP_CHECKSIG)
        throw new TypeError('Output is invalid');
      if (!ecc.isPoint(o.pubkey))
        throw new TypeError('Output pubkey is invalid');
      if (a.pubkey && !a.pubkey.equals(o.pubkey))
        throw new TypeError('Pubkey mismatch');
    }
    if (a.signature) {
      if (a.input && !a.input.equals(o.input))
        throw new TypeError('Signature mismatch');
    }
    if (a.input) {
      if (_chunks().length !== 1) throw new TypeError('Input is invalid');
      if (!bscript.isCanonicalScriptSignature(o.signature))
        throw new TypeError('Input has invalid signature');
    }
  }
  return Object.assign(o, a);
}
exports.p2pk = p2pk;

},{"../networks":154,"../script":165,"./lazy":157,"tiny-secp256k1":138,"typeforce":142}],160:[function(require,module,exports){
(function (Buffer){(function (){
'use strict';
var __importStar =
  (this && this.__importStar) ||
  function(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null)
      for (var k in mod)
        if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result['default'] = mod;
    return result;
  };
Object.defineProperty(exports, '__esModule', { value: true });
const bcrypto = __importStar(require('../crypto'));
const networks_1 = require('../networks');
const bscript = __importStar(require('../script'));
const lazy = __importStar(require('./lazy'));
const typef = require('typeforce');
const OPS = bscript.OPS;
const ecc = require('tiny-secp256k1');
const bs58check = require('bs58check');
// input: {signature} {pubkey}
// output: OP_DUP OP_HASH160 {hash160(pubkey)} OP_EQUALVERIFY OP_CHECKSIG
function p2pkh(a, opts) {
  if (
    !a.address &&
    !a.hash &&
    !a.output &&
    !a.pubkey &&
    !a.input &&
    !a.confidentialAddress
  )
    throw new TypeError('Not enough data');
  opts = Object.assign({ validate: true }, opts || {});
  typef(
    {
      network: typef.maybe(typef.Object),
      address: typef.maybe(typef.String),
      hash: typef.maybe(typef.BufferN(20)),
      output: typef.maybe(typef.BufferN(25)),
      pubkey: typef.maybe(ecc.isPoint),
      signature: typef.maybe(bscript.isCanonicalScriptSignature),
      input: typef.maybe(typef.Buffer),
      blindkey: typef.maybe(ecc.isPoint),
      confidentialAddress: typef.maybe(typef.String),
    },
    a,
  );
  const _address = lazy.value(() => {
    const payload = bs58check.decode(a.address);
    const version = payload.readUInt8(0);
    const hash = payload.slice(1);
    return { version, hash };
  });
  const _chunks = lazy.value(() => {
    return bscript.decompile(a.input);
  });
  const _confidentialAddress = lazy.value(() => {
    const payload = bs58check.decode(a.confidentialAddress);
    const blindkey = payload.slice(2, 35);
    const unconfidentialAddressBuffer = Buffer.concat([
      Buffer.from([payload.readUInt8(1)]),
      payload.slice(35),
    ]);
    const unconfidentialAddress = bs58check.encode(unconfidentialAddressBuffer);
    return { blindkey, unconfidentialAddress };
  });
  const network = a.network || networks_1.liquid;
  const o = { name: 'p2pkh', network };
  lazy.prop(o, 'address', () => {
    if (!o.hash) return;
    const payload = Buffer.allocUnsafe(21);
    payload.writeUInt8(network.pubKeyHash, 0);
    o.hash.copy(payload, 1);
    return bs58check.encode(payload);
  });
  lazy.prop(o, 'hash', () => {
    if (a.output) return a.output.slice(3, 23);
    if (a.address) return _address().hash;
    if (a.pubkey || o.pubkey) return bcrypto.hash160(a.pubkey || o.pubkey);
    if (a.confidentialAddress) {
      const address = _confidentialAddress().unconfidentialAddress;
      return bs58check.decode(address).slice(1);
    }
  });
  lazy.prop(o, 'output', () => {
    if (!o.hash) return;
    return bscript.compile([
      OPS.OP_DUP,
      OPS.OP_HASH160,
      o.hash,
      OPS.OP_EQUALVERIFY,
      OPS.OP_CHECKSIG,
    ]);
  });
  lazy.prop(o, 'pubkey', () => {
    if (!a.input) return;
    return _chunks()[1];
  });
  lazy.prop(o, 'signature', () => {
    if (!a.input) return;
    return _chunks()[0];
  });
  lazy.prop(o, 'input', () => {
    if (!a.pubkey) return;
    if (!a.signature) return;
    return bscript.compile([a.signature, a.pubkey]);
  });
  lazy.prop(o, 'witness', () => {
    if (!o.input) return;
    return [];
  });
  lazy.prop(o, 'blindkey', () => {
    if (a.confidentialAddress) return _confidentialAddress().blindkey;
    if (a.blindkey) return a.blindkey;
  });
  lazy.prop(o, 'confidentialAddress', () => {
    if (!o.address) return;
    if (!o.blindkey) return;
    const payload = bs58check.decode(o.address);
    const confidentialAddress = Buffer.concat([
      Buffer.from([network.confidentialPrefix, payload.readUInt8(0)]),
      o.blindkey,
      Buffer.from(payload.slice(1)),
    ]);
    return bs58check.encode(confidentialAddress);
  });
  // extended validation
  if (opts.validate) {
    let hash = Buffer.from([]);
    let blindkey = Buffer.from([]);
    if (a.address) {
      if (_address().version !== network.pubKeyHash)
        throw new TypeError('Invalid version or Network mismatch');
      if (_address().hash.length !== 20) throw new TypeError('Invalid address');
      hash = _address().hash;
    }
    if (a.hash) {
      if (hash.length > 0 && !hash.equals(a.hash))
        throw new TypeError('Hash mismatch');
      else hash = a.hash;
    }
    if (a.output) {
      if (
        a.output.length !== 25 ||
        a.output[0] !== OPS.OP_DUP ||
        a.output[1] !== OPS.OP_HASH160 ||
        a.output[2] !== 0x14 ||
        a.output[23] !== OPS.OP_EQUALVERIFY ||
        a.output[24] !== OPS.OP_CHECKSIG
      )
        throw new TypeError('Output is invalid');
      const hash2 = a.output.slice(3, 23);
      if (hash.length > 0 && !hash.equals(hash2))
        throw new TypeError('Hash mismatch');
      else hash = hash2;
    }
    if (a.pubkey) {
      const pkh = bcrypto.hash160(a.pubkey);
      if (hash.length > 0 && !hash.equals(pkh))
        throw new TypeError('Hash mismatch');
      else hash = pkh;
    }
    if (a.input) {
      const chunks = _chunks();
      if (chunks.length !== 2) throw new TypeError('Input is invalid');
      if (!bscript.isCanonicalScriptSignature(chunks[0]))
        throw new TypeError('Input has invalid signature');
      if (!ecc.isPoint(chunks[1]))
        throw new TypeError('Input has invalid pubkey');
      if (a.signature && !a.signature.equals(chunks[0]))
        throw new TypeError('Signature mismatch');
      if (a.pubkey && !a.pubkey.equals(chunks[1]))
        throw new TypeError('Pubkey mismatch');
      const pkh = bcrypto.hash160(chunks[1]);
      if (hash.length > 0 && !hash.equals(pkh))
        throw new TypeError('Hash mismatch');
    }
    if (a.confidentialAddress) {
      if (
        a.address &&
        a.address !== _confidentialAddress().unconfidentialAddress
      )
        throw new TypeError('Address mismatch');
      if (
        blindkey.length > 0 &&
        !blindkey.equals(_confidentialAddress().blindkey)
      )
        throw new TypeError('Blindkey mismatch');
      else blindkey = _confidentialAddress().blindkey;
    }
    if (a.blindkey) {
      if (!ecc.isPoint(a.blindkey)) throw new TypeError('Blindkey is invalid');
      if (blindkey.length > 0 && !blindkey.equals(a.blindkey))
        throw new TypeError('Blindkey mismatch');
      else blindkey = a.blindkey;
    }
  }
  return Object.assign(o, a);
}
exports.p2pkh = p2pkh;

}).call(this)}).call(this,require("buffer").Buffer)
},{"../crypto":151,"../networks":154,"../script":165,"./lazy":157,"bs58check":66,"buffer":4,"tiny-secp256k1":138,"typeforce":142}],161:[function(require,module,exports){
(function (Buffer){(function (){
'use strict';
var __importStar =
  (this && this.__importStar) ||
  function(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null)
      for (var k in mod)
        if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result['default'] = mod;
    return result;
  };
Object.defineProperty(exports, '__esModule', { value: true });
const bcrypto = __importStar(require('../crypto'));
const networks_1 = require('../networks');
const bscript = __importStar(require('../script'));
const lazy = __importStar(require('./lazy'));
const typef = require('typeforce');
const OPS = bscript.OPS;
const ecc = require('tiny-secp256k1');
const bs58check = require('bs58check');
function stacksEqual(a, b) {
  if (a.length !== b.length) return false;
  return a.every((x, i) => {
    return x.equals(b[i]);
  });
}
// input: [redeemScriptSig ...] {redeemScript}
// witness: <?>
// output: OP_HASH160 {hash160(redeemScript)} OP_EQUAL
function p2sh(a, opts) {
  if (
    !a.address &&
    !a.hash &&
    !a.output &&
    !a.redeem &&
    !a.input &&
    !a.confidentialAddress
  )
    throw new TypeError('Not enough data');
  opts = Object.assign({ validate: true }, opts || {});
  typef(
    {
      network: typef.maybe(typef.Object),
      address: typef.maybe(typef.String),
      hash: typef.maybe(typef.BufferN(20)),
      output: typef.maybe(typef.BufferN(23)),
      redeem: typef.maybe({
        network: typef.maybe(typef.Object),
        output: typef.maybe(typef.Buffer),
        input: typef.maybe(typef.Buffer),
        witness: typef.maybe(typef.arrayOf(typef.Buffer)),
      }),
      input: typef.maybe(typef.Buffer),
      witness: typef.maybe(typef.arrayOf(typef.Buffer)),
      blindkey: typef.maybe(ecc.isPoint),
      confidentialAddress: typef.maybe(typef.String),
    },
    a,
  );
  let network = a.network;
  if (!network) {
    network = (a.redeem && a.redeem.network) || networks_1.liquid;
  }
  const o = { network };
  const _address = lazy.value(() => {
    const payload = bs58check.decode(a.address);
    const version = payload.readUInt8(0);
    const hash = payload.slice(1);
    return { version, hash };
  });
  const _chunks = lazy.value(() => {
    return bscript.decompile(a.input);
  });
  const _redeem = lazy.value(() => {
    const chunks = _chunks();
    return {
      network,
      output: chunks[chunks.length - 1],
      input: bscript.compile(chunks.slice(0, -1)),
      witness: a.witness || [],
    };
  });
  const _confidentialAddress = lazy.value(() => {
    const payload = bs58check.decode(a.confidentialAddress);
    const blindkey = payload.slice(2, 35);
    const unconfidentialAddressBuffer = Buffer.concat([
      Buffer.from([payload.readUInt8(1)]),
      payload.slice(35),
    ]);
    const unconfidentialAddress = bs58check.encode(unconfidentialAddressBuffer);
    return { blindkey, unconfidentialAddress };
  });
  // output dependents
  lazy.prop(o, 'address', () => {
    if (!o.hash) return;
    const payload = Buffer.allocUnsafe(21);
    payload.writeUInt8(o.network.scriptHash, 0);
    o.hash.copy(payload, 1);
    return bs58check.encode(payload);
  });
  lazy.prop(o, 'hash', () => {
    // in order of least effort
    if (a.output) return a.output.slice(2, 22);
    if (a.address) return _address().hash;
    if (o.redeem && o.redeem.output) return bcrypto.hash160(o.redeem.output);
    if (a.confidentialAddress) {
      const address = _confidentialAddress().unconfidentialAddress;
      return bs58check.decode(address).slice(1);
    }
  });
  lazy.prop(o, 'output', () => {
    if (!o.hash) return;
    return bscript.compile([OPS.OP_HASH160, o.hash, OPS.OP_EQUAL]);
  });
  // input dependents
  lazy.prop(o, 'redeem', () => {
    if (!a.input) return;
    return _redeem();
  });
  lazy.prop(o, 'input', () => {
    if (!a.redeem || !a.redeem.input || !a.redeem.output) return;
    return bscript.compile(
      [].concat(bscript.decompile(a.redeem.input), a.redeem.output),
    );
  });
  lazy.prop(o, 'witness', () => {
    if (o.redeem && o.redeem.witness) return o.redeem.witness;
    if (o.input) return [];
  });
  lazy.prop(o, 'name', () => {
    const nameParts = ['p2sh'];
    if (o.redeem !== undefined) nameParts.push(o.redeem.name);
    return nameParts.join('-');
  });
  lazy.prop(o, 'blindkey', () => {
    if (a.confidentialAddress) return _confidentialAddress().blindkey;
    if (a.blindkey) return a.blindkey;
  });
  lazy.prop(o, 'confidentialAddress', () => {
    if (!o.address) return;
    if (!o.blindkey) return;
    const payload = bs58check.decode(o.address);
    const confidentialAddress = Buffer.concat([
      Buffer.from([network.confidentialPrefix, payload.readUInt8(0)]),
      o.blindkey,
      Buffer.from(payload.slice(1)),
    ]);
    return bs58check.encode(confidentialAddress);
  });
  if (opts.validate) {
    let hash = Buffer.from([]);
    let blindkey = Buffer.from([]);
    if (a.address) {
      if (_address().version !== network.scriptHash)
        throw new TypeError('Invalid version or Network mismatch');
      if (_address().hash.length !== 20) throw new TypeError('Invalid address');
      hash = _address().hash;
    }
    if (a.hash) {
      if (hash.length > 0 && !hash.equals(a.hash))
        throw new TypeError('Hash mismatch');
      else hash = a.hash;
    }
    if (a.output) {
      if (
        a.output.length !== 23 ||
        a.output[0] !== OPS.OP_HASH160 ||
        a.output[1] !== 0x14 ||
        a.output[22] !== OPS.OP_EQUAL
      )
        throw new TypeError('Output is invalid');
      const hash2 = a.output.slice(2, 22);
      if (hash.length > 0 && !hash.equals(hash2))
        throw new TypeError('Hash mismatch');
      else hash = hash2;
    }
    // inlined to prevent 'no-inner-declarations' failing
    const checkRedeem = redeem => {
      // is the redeem output empty/invalid?
      if (redeem.output) {
        const decompile = bscript.decompile(redeem.output);
        if (!decompile || decompile.length < 1)
          throw new TypeError('Redeem.output too short');
        // match hash against other sources
        const hash2 = bcrypto.hash160(redeem.output);
        if (hash.length > 0 && !hash.equals(hash2))
          throw new TypeError('Hash mismatch');
        else hash = hash2;
      }
      if (redeem.input) {
        const hasInput = redeem.input.length > 0;
        const hasWitness = redeem.witness && redeem.witness.length > 0;
        if (!hasInput && !hasWitness) throw new TypeError('Empty input');
        if (hasInput && hasWitness)
          throw new TypeError('Input and witness provided');
        if (hasInput) {
          const richunks = bscript.decompile(redeem.input);
          if (!bscript.isPushOnly(richunks))
            throw new TypeError('Non push-only scriptSig');
        }
      }
    };
    if (a.input) {
      const chunks = _chunks();
      if (!chunks || chunks.length < 1) throw new TypeError('Input too short');
      if (!Buffer.isBuffer(_redeem().output))
        throw new TypeError('Input is invalid');
      checkRedeem(_redeem());
    }
    if (a.redeem) {
      if (a.redeem.network && a.redeem.network !== network)
        throw new TypeError('Network mismatch');
      if (a.input) {
        const redeem = _redeem();
        if (a.redeem.output && !a.redeem.output.equals(redeem.output))
          throw new TypeError('Redeem.output mismatch');
        if (a.redeem.input && !a.redeem.input.equals(redeem.input))
          throw new TypeError('Redeem.input mismatch');
      }
      checkRedeem(a.redeem);
    }
    if (a.witness) {
      if (
        a.redeem &&
        a.redeem.witness &&
        !stacksEqual(a.redeem.witness, a.witness)
      )
        throw new TypeError('Witness and redeem.witness mismatch');
    }
    if (a.confidentialAddress) {
      if (
        a.address &&
        a.address !== _confidentialAddress().unconfidentialAddress
      )
        throw new TypeError('Address mismatch');
      if (
        blindkey.length > 0 &&
        !blindkey.equals(_confidentialAddress().blindkey)
      )
        throw new TypeError('Blindkey mismatch');
      else blindkey = _confidentialAddress().blindkey;
    }
    if (a.blindkey) {
      if (!ecc.isPoint(a.blindkey)) throw new TypeError('Blindkey is invalid');
      if (blindkey.length > 0 && !blindkey.equals(a.blindkey))
        throw new TypeError('Blindkey mismatch');
      else blindkey = a.blindkey;
    }
  }
  return Object.assign(o, a);
}
exports.p2sh = p2sh;

}).call(this)}).call(this,require("buffer").Buffer)
},{"../crypto":151,"../networks":154,"../script":165,"./lazy":157,"bs58check":66,"buffer":4,"tiny-secp256k1":138,"typeforce":142}],162:[function(require,module,exports){
(function (Buffer){(function (){
'use strict';
var __importStar =
  (this && this.__importStar) ||
  function(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null)
      for (var k in mod)
        if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result['default'] = mod;
    return result;
  };
Object.defineProperty(exports, '__esModule', { value: true });
const baddress = __importStar(require('../address'));
const bcrypto = __importStar(require('../crypto'));
const networks_1 = require('../networks');
const bscript = __importStar(require('../script'));
const lazy = __importStar(require('./lazy'));
const typef = require('typeforce');
const OPS = bscript.OPS;
const ecc = require('tiny-secp256k1');
const bech32 = require('bech32');
const EMPTY_BUFFER = Buffer.alloc(0);
// witness: {signature} {pubKey}
// input: <>
// output: OP_0 {pubKeyHash}
function p2wpkh(a, opts) {
  if (
    !a.address &&
    !a.hash &&
    !a.output &&
    !a.pubkey &&
    !a.witness &&
    !a.confidentialAddress
  )
    throw new TypeError('Not enough data');
  opts = Object.assign({ validate: true }, opts || {});
  typef(
    {
      address: typef.maybe(typef.String),
      hash: typef.maybe(typef.BufferN(20)),
      input: typef.maybe(typef.BufferN(0)),
      network: typef.maybe(typef.Object),
      output: typef.maybe(typef.BufferN(22)),
      pubkey: typef.maybe(ecc.isPoint),
      signature: typef.maybe(bscript.isCanonicalScriptSignature),
      witness: typef.maybe(typef.arrayOf(typef.Buffer)),
    },
    a,
  );
  const network = a.network || networks_1.liquid;
  const _address = lazy.value(() => {
    const result = bech32.decode(a.address);
    const version = result.words.shift();
    const data = bech32.fromWords(result.words);
    return {
      version,
      prefix: result.prefix,
      data: Buffer.from(data),
    };
  });
  const _confidentialAddress = lazy.value(() => {
    const result = baddress.fromBlech32(a.confidentialAddress);
    return {
      blindingKey: result.pubkey,
      unconfidentialAddress: baddress.toBech32(
        result.data.slice(2),
        result.version,
        network.bech32,
      ),
    };
  });
  const o = { name: 'p2wpkh', network };
  lazy.prop(o, 'address', () => {
    if (!o.hash) return;
    const words = bech32.toWords(o.hash);
    words.unshift(0x00);
    return bech32.encode(network.bech32, words);
  });
  lazy.prop(o, 'hash', () => {
    if (a.output) return a.output.slice(2, 22);
    if (a.address) return _address().data;
    if (a.pubkey || o.pubkey) return bcrypto.hash160(a.pubkey || o.pubkey);
    if (a.confidentialAddress) {
      const addr = _confidentialAddress().unconfidentialAddress;
      return baddress.fromBech32(addr).data;
    }
  });
  lazy.prop(o, 'output', () => {
    if (!o.hash) return;
    return bscript.compile([OPS.OP_0, o.hash]);
  });
  lazy.prop(o, 'pubkey', () => {
    if (a.pubkey) return a.pubkey;
    if (!a.witness) return;
    return a.witness[1];
  });
  lazy.prop(o, 'signature', () => {
    if (!a.witness) return;
    return a.witness[0];
  });
  lazy.prop(o, 'input', () => {
    if (!o.witness) return;
    return EMPTY_BUFFER;
  });
  lazy.prop(o, 'witness', () => {
    if (!a.pubkey) return;
    if (!a.signature) return;
    return [a.signature, a.pubkey];
  });
  lazy.prop(o, 'blindkey', () => {
    if (a.confidentialAddress) return _confidentialAddress().blindingKey;
    if (a.blindkey) return a.blindkey;
  });
  lazy.prop(o, 'confidentialAddress', () => {
    if (!o.address) return;
    if (!o.blindkey) return;
    const res = baddress.fromBech32(o.address);
    const data = Buffer.concat([
      Buffer.from([res.version, res.data.length]),
      res.data,
    ]);
    return baddress.toBlech32(data, o.blindkey, o.network.blech32);
  });
  // extended validation
  if (opts.validate) {
    let hash = Buffer.from([]);
    let blindkey = Buffer.from([]);
    if (a.address) {
      if (network && network.bech32 !== _address().prefix)
        throw new TypeError('Invalid prefix or Network mismatch');
      if (_address().version !== 0x00)
        throw new TypeError('Invalid address version');
      if (_address().data.length !== 20)
        throw new TypeError('Invalid address data');
      hash = _address().data;
    }
    if (a.hash) {
      if (hash.length > 0 && !hash.equals(a.hash))
        throw new TypeError('Hash mismatch');
      else hash = a.hash;
    }
    if (a.output) {
      if (
        a.output.length !== 22 ||
        a.output[0] !== OPS.OP_0 ||
        a.output[1] !== 0x14
      )
        throw new TypeError('Output is invalid');
      if (hash.length > 0 && !hash.equals(a.output.slice(2)))
        throw new TypeError('Hash mismatch');
      else hash = a.output.slice(2);
    }
    if (a.pubkey) {
      const pkh = bcrypto.hash160(a.pubkey);
      if (hash.length > 0 && !hash.equals(pkh))
        throw new TypeError('Hash mismatch');
      else hash = pkh;
    }
    if (a.witness) {
      if (a.witness.length !== 2) throw new TypeError('Witness is invalid');
      if (!bscript.isCanonicalScriptSignature(a.witness[0]))
        throw new TypeError('Witness has invalid signature');
      if (!ecc.isPoint(a.witness[1]))
        throw new TypeError('Witness has invalid pubkey');
      if (a.signature && !a.signature.equals(a.witness[0]))
        throw new TypeError('Signature mismatch');
      if (a.pubkey && !a.pubkey.equals(a.witness[1]))
        throw new TypeError('Pubkey mismatch');
      const pkh = bcrypto.hash160(a.witness[1]);
      if (hash.length > 0 && !hash.equals(pkh))
        throw new TypeError('Hash mismatch');
    }
    if (a.confidentialAddress) {
      if (
        a.address &&
        a.address !== _confidentialAddress().unconfidentialAddress
      )
        throw new TypeError('Address mismatch');
      if (
        blindkey.length > 0 &&
        !blindkey.equals(_confidentialAddress().blindingKey)
      )
        throw new TypeError('Blindkey mismatch');
      else blindkey = _confidentialAddress().blindingKey;
    }
    if (a.blindkey) {
      if (!ecc.isPoint(a.blindkey)) throw new TypeError('Blindkey is invalid');
      if (blindkey.length > 0 && !blindkey.equals(a.blindkey))
        throw new TypeError('Blindkey mismatch');
      else blindkey = a.blindkey;
    }
  }
  return Object.assign(o, a);
}
exports.p2wpkh = p2wpkh;

}).call(this)}).call(this,require("buffer").Buffer)
},{"../address":147,"../crypto":151,"../networks":154,"../script":165,"./lazy":157,"bech32":30,"buffer":4,"tiny-secp256k1":138,"typeforce":142}],163:[function(require,module,exports){
(function (Buffer){(function (){
'use strict';
var __importStar =
  (this && this.__importStar) ||
  function(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null)
      for (var k in mod)
        if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result['default'] = mod;
    return result;
  };
Object.defineProperty(exports, '__esModule', { value: true });
const baddress = __importStar(require('../address'));
const bcrypto = __importStar(require('../crypto'));
const networks_1 = require('../networks');
const bscript = __importStar(require('../script'));
const lazy = __importStar(require('./lazy'));
const typef = require('typeforce');
const OPS = bscript.OPS;
const ecc = require('tiny-secp256k1');
const bech32 = require('bech32');
const EMPTY_BUFFER = Buffer.alloc(0);
function stacksEqual(a, b) {
  if (a.length !== b.length) return false;
  return a.every((x, i) => {
    return x.equals(b[i]);
  });
}
// input: <>
// witness: [redeemScriptSig ...] {redeemScript}
// output: OP_0 {sha256(redeemScript)}
function p2wsh(a, opts) {
  if (
    !a.address &&
    !a.hash &&
    !a.output &&
    !a.redeem &&
    !a.witness &&
    !a.confidentialAddress
  )
    throw new TypeError('Not enough data');
  opts = Object.assign({ validate: true }, opts || {});
  typef(
    {
      network: typef.maybe(typef.Object),
      address: typef.maybe(typef.String),
      hash: typef.maybe(typef.BufferN(32)),
      output: typef.maybe(typef.BufferN(34)),
      redeem: typef.maybe({
        input: typef.maybe(typef.Buffer),
        network: typef.maybe(typef.Object),
        output: typef.maybe(typef.Buffer),
        witness: typef.maybe(typef.arrayOf(typef.Buffer)),
      }),
      input: typef.maybe(typef.BufferN(0)),
      witness: typef.maybe(typef.arrayOf(typef.Buffer)),
      blindkey: typef.maybe(ecc.isPoint),
      confidentialAddress: typef.maybe(typef.String),
    },
    a,
  );
  let network = a.network;
  if (!network) {
    network = (a.redeem && a.redeem.network) || networks_1.liquid;
  }
  const _address = lazy.value(() => {
    const result = bech32.decode(a.address);
    const version = result.words.shift();
    const data = bech32.fromWords(result.words);
    return {
      version,
      prefix: result.prefix,
      data: Buffer.from(data),
    };
  });
  const _rchunks = lazy.value(() => {
    return bscript.decompile(a.redeem.input);
  });
  const _confidentialAddress = lazy.value(() => {
    const result = baddress.fromBlech32(a.confidentialAddress);
    return {
      blindingKey: result.pubkey,
      unconfidentialAddress: baddress.toBech32(
        result.data.slice(2),
        result.version,
        network.bech32,
      ),
    };
  });
  const o = { network };
  lazy.prop(o, 'address', () => {
    if (!o.hash) return;
    const words = bech32.toWords(o.hash);
    words.unshift(0x00);
    return bech32.encode(network.bech32, words);
  });
  lazy.prop(o, 'hash', () => {
    if (a.output) return a.output.slice(2);
    if (a.address) return _address().data;
    if (o.redeem && o.redeem.output) return bcrypto.sha256(o.redeem.output);
    if (a.confidentialAddress) {
      const addr = _confidentialAddress().unconfidentialAddress;
      return baddress.fromBech32(addr).data;
    }
  });
  lazy.prop(o, 'output', () => {
    if (!o.hash) return;
    return bscript.compile([OPS.OP_0, o.hash]);
  });
  lazy.prop(o, 'redeem', () => {
    if (!a.witness) return;
    return {
      output: a.witness[a.witness.length - 1],
      input: EMPTY_BUFFER,
      witness: a.witness.slice(0, -1),
    };
  });
  lazy.prop(o, 'input', () => {
    if (!o.witness) return;
    return EMPTY_BUFFER;
  });
  lazy.prop(o, 'witness', () => {
    // transform redeem input to witness stack?
    if (
      a.redeem &&
      a.redeem.input &&
      a.redeem.input.length > 0 &&
      a.redeem.output &&
      a.redeem.output.length > 0
    ) {
      const stack = bscript.toStack(_rchunks());
      // assign, and blank the existing input
      o.redeem = Object.assign({ witness: stack }, a.redeem);
      o.redeem.input = EMPTY_BUFFER;
      return [].concat(stack, a.redeem.output);
    }
    if (!a.redeem) return;
    if (!a.redeem.output) return;
    if (!a.redeem.witness) return;
    return [].concat(a.redeem.witness, a.redeem.output);
  });
  lazy.prop(o, 'name', () => {
    const nameParts = ['p2wsh'];
    if (o.redeem !== undefined) nameParts.push(o.redeem.name);
    return nameParts.join('-');
  });
  lazy.prop(o, 'blindkey', () => {
    if (a.confidentialAddress) return _confidentialAddress().blindingKey;
    if (a.blindkey) return a.blindkey;
  });
  lazy.prop(o, 'confidentialAddress', () => {
    if (!o.address) return;
    if (!o.blindkey) return;
    const res = baddress.fromBech32(o.address);
    const data = Buffer.concat([
      Buffer.from([res.version, res.data.length]),
      res.data,
    ]);
    return baddress.toBlech32(data, o.blindkey, o.network.blech32);
  });
  // extended validation
  if (opts.validate) {
    let hash = Buffer.from([]);
    let blindkey = Buffer.from([]);
    if (a.address) {
      if (_address().prefix !== network.bech32)
        throw new TypeError('Invalid prefix or Network mismatch');
      if (_address().version !== 0x00)
        throw new TypeError('Invalid address version');
      if (_address().data.length !== 32)
        throw new TypeError('Invalid address data');
      hash = _address().data;
    }
    if (a.hash) {
      if (hash.length > 0 && !hash.equals(a.hash))
        throw new TypeError('Hash mismatch');
      else hash = a.hash;
    }
    if (a.output) {
      if (
        a.output.length !== 34 ||
        a.output[0] !== OPS.OP_0 ||
        a.output[1] !== 0x20
      )
        throw new TypeError('Output is invalid');
      const hash2 = a.output.slice(2);
      if (hash.length > 0 && !hash.equals(hash2))
        throw new TypeError('Hash mismatch');
      else hash = hash2;
    }
    if (a.redeem) {
      if (a.redeem.network && a.redeem.network !== network)
        throw new TypeError('Network mismatch');
      // is there two redeem sources?
      if (
        a.redeem.input &&
        a.redeem.input.length > 0 &&
        a.redeem.witness &&
        a.redeem.witness.length > 0
      )
        throw new TypeError('Ambiguous witness source');
      // is the redeem output non-empty?
      if (a.redeem.output) {
        if (bscript.decompile(a.redeem.output).length === 0)
          throw new TypeError('Redeem.output is invalid');
        // match hash against other sources
        const hash2 = bcrypto.sha256(a.redeem.output);
        if (hash.length > 0 && !hash.equals(hash2))
          throw new TypeError('Hash mismatch');
        else hash = hash2;
      }
      if (a.redeem.input && !bscript.isPushOnly(_rchunks()))
        throw new TypeError('Non push-only scriptSig');
      if (
        a.witness &&
        a.redeem.witness &&
        !stacksEqual(a.witness, a.redeem.witness)
      )
        throw new TypeError('Witness and redeem.witness mismatch');
    }
    if (a.witness) {
      if (
        a.redeem &&
        a.redeem.output &&
        !a.redeem.output.equals(a.witness[a.witness.length - 1])
      )
        throw new TypeError('Witness and redeem.output mismatch');
    }
    if (a.confidentialAddress) {
      if (
        a.address &&
        a.address !== _confidentialAddress().unconfidentialAddress
      )
        throw new TypeError('Address mismatch');
      if (
        blindkey.length > 0 &&
        !blindkey.equals(_confidentialAddress().blindingKey)
      )
        throw new TypeError('Blindkey mismatch');
      else blindkey = _confidentialAddress().blindingKey;
    }
    if (a.blindkey) {
      if (!ecc.isPoint(a.blindkey)) throw new TypeError('Blindkey is invalid');
      if (blindkey.length > 0 && !blindkey.equals(a.blindkey))
        throw new TypeError('Blindkey mismatch');
      else blindkey = a.blindkey;
    }
  }
  return Object.assign(o, a);
}
exports.p2wsh = p2wsh;

}).call(this)}).call(this,require("buffer").Buffer)
},{"../address":147,"../crypto":151,"../networks":154,"../script":165,"./lazy":157,"bech32":30,"buffer":4,"tiny-secp256k1":138,"typeforce":142}],164:[function(require,module,exports){
(function (Buffer){(function (){
'use strict';
var __awaiter =
  (this && this.__awaiter) ||
  function(thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function(resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(value) {
        try {
          step(generator['throw'](value));
        } catch (e) {
          reject(e);
        }
      }
      function step(result) {
        result.done
          ? resolve(result.value)
          : new P(function(resolve) {
              resolve(result.value);
            }).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };
var __importStar =
  (this && this.__importStar) ||
  function(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null)
      for (var k in mod)
        if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result['default'] = mod;
    return result;
  };
Object.defineProperty(exports, '__esModule', { value: true });
const bscript = __importStar(require('./script'));
const confidential = __importStar(require('./confidential'));
const payments = __importStar(require('./payments'));
const varuint = __importStar(require('bip174/src/lib/converter/varint'));
const networks_1 = require('./networks');
const transaction_1 = require('./transaction');
const ecpair_1 = require('./ecpair');
const bip174_1 = require('bip174');
const utils_1 = require('bip174/src/lib/utils');
const crypto_1 = require('./crypto');
const bufferutils_1 = require('./bufferutils');
const address_1 = require('./address');
const _randomBytes = require('randombytes');
/**
 * These are the default arguments for a Psbt instance.
 */
const DEFAULT_OPTS = {
  /**
   * A bitcoinjs Network object. This is only used if you pass an `address`
   * parameter to addOutput. Otherwise it is not needed and can be left default.
   */
  network: networks_1.liquid,
  /**
   * When extractTransaction is called, the fee rate is checked.
   * THIS IS NOT TO BE RELIED ON.
   * It is only here as a last ditch effort to prevent sending a 500 BTC fee etc.
   */
  maximumFeeRate: 5000,
};
/**
 * Psbt class can parse and generate a PSBT binary based off of the BIP174.
 * There are 6 roles that this class fulfills. (Explained in BIP174)
 *
 * Creator: This can be done with `new Psbt()`
 * Updater: This can be done with `psbt.addInput(input)`, `psbt.addInputs(inputs)`,
 *   `psbt.addOutput(output)`, `psbt.addOutputs(outputs)` when you are looking to
 *   add new inputs and outputs to the PSBT, and `psbt.updateGlobal(itemObject)`,
 *   `psbt.updateInput(itemObject)`, `psbt.updateOutput(itemObject)`
 *   addInput requires hash: Buffer | string; and index: number; as attributes
 *   and can also include any attributes that are used in updateInput method.
 *   addOutput requires script: Buffer; and value: number; and likewise can include
 *   data for updateOutput.
 *   For a list of what attributes should be what types. Check the bip174 library.
 *   Also, check the integration tests for some examples of usage.
 * Signer: There are a few methods. signAllInputs and signAllInputsAsync, which will search all input
 *   information for your pubkey or pubkeyhash, and only sign inputs where it finds
 *   your info. Or you can explicitly sign a specific input with signInput and
 *   signInputAsync. For the async methods you can create a SignerAsync object
 *   and use something like a hardware wallet to sign with. (You must implement this)
 * Combiner: psbts can be combined easily with `psbt.combine(psbt2, psbt3, psbt4 ...)`
 *   the psbt calling combine will always have precedence when a conflict occurs.
 *   Combine checks if the internal bitcoin transaction is the same, so be sure that
 *   all sequences, version, locktime, etc. are the same before combining.
 * Input Finalizer: This role is fairly important. Not only does it need to construct
 *   the input scriptSigs and witnesses, but it SHOULD verify the signatures etc.
 *   Before running `psbt.finalizeAllInputs()` please run `psbt.validateSignaturesOfAllInputs()`
 *   Running any finalize method will delete any data in the input(s) that are no longer
 *   needed due to the finalized scripts containing the information.
 * Transaction Extractor: This role will perform some checks before returning a
 *   Transaction object. Such as fee rate not being larger than maximumFeeRate etc.
 */
class Psbt {
  constructor(opts = {}, data = new bip174_1.Psbt(new PsbtTransaction())) {
    this.data = data;
    // set defaults
    this.opts = Object.assign({}, DEFAULT_OPTS, opts);
    this.__CACHE = {
      __NON_WITNESS_UTXO_TX_CACHE: [],
      __NON_WITNESS_UTXO_BUF_CACHE: [],
      __TX_IN_CACHE: {},
      __TX: this.data.globalMap.unsignedTx.tx,
    };
    if (this.data.inputs.length === 0) this.setVersion(2);
    // Make data hidden when enumerating
    const dpew = (obj, attr, enumerable, writable) =>
      Object.defineProperty(obj, attr, {
        enumerable,
        writable,
      });
    dpew(this, '__CACHE', false, true);
    dpew(this, 'opts', false, true);
  }
  static fromBase64(data, opts = {}) {
    const buffer = Buffer.from(data, 'base64');
    return this.fromBuffer(buffer, opts);
  }
  static fromHex(data, opts = {}) {
    const buffer = Buffer.from(data, 'hex');
    return this.fromBuffer(buffer, opts);
  }
  static fromBuffer(buffer, opts = {}) {
    const psbtBase = bip174_1.Psbt.fromBuffer(buffer, transactionFromBuffer);
    const psbt = new Psbt(opts, psbtBase);
    checkTxForDupeIns(psbt.__CACHE.__TX, psbt.__CACHE);
    return psbt;
  }
  get inputCount() {
    return this.data.inputs.length;
  }
  combine(...those) {
    this.data.combine(...those.map(o => o.data));
    return this;
  }
  clone() {
    // TODO: more efficient cloning
    const res = Psbt.fromBuffer(this.data.toBuffer());
    res.opts = JSON.parse(JSON.stringify(this.opts));
    return res;
  }
  setMaximumFeeRate(satoshiPerByte) {
    check32Bit(satoshiPerByte); // 42.9 BTC per byte IS excessive... so throw
    this.opts.maximumFeeRate = satoshiPerByte;
  }
  setVersion(version) {
    check32Bit(version);
    checkInputsForPartialSig(this.data.inputs, 'setVersion');
    const c = this.__CACHE;
    c.__TX.version = version;
    c.__EXTRACTED_TX = undefined;
    return this;
  }
  setLocktime(locktime) {
    check32Bit(locktime);
    checkInputsForPartialSig(this.data.inputs, 'setLocktime');
    const c = this.__CACHE;
    c.__TX.locktime = locktime;
    c.__EXTRACTED_TX = undefined;
    return this;
  }
  setInputSequence(inputIndex, sequence) {
    check32Bit(sequence);
    checkInputsForPartialSig(this.data.inputs, 'setInputSequence');
    const c = this.__CACHE;
    if (c.__TX.ins.length <= inputIndex) {
      throw new Error('Input index too high');
    }
    c.__TX.ins[inputIndex].sequence = sequence;
    c.__EXTRACTED_TX = undefined;
    return this;
  }
  addInputs(inputDatas) {
    inputDatas.forEach(inputData => this.addInput(inputData));
    return this;
  }
  addInput(inputData) {
    if (
      arguments.length > 1 ||
      !inputData ||
      inputData.hash === undefined ||
      inputData.index === undefined
    ) {
      throw new Error(
        `Invalid arguments for Psbt.addInput. ` +
          `Requires single object with at least [hash] and [index]`,
      );
    }
    checkInputsForPartialSig(this.data.inputs, 'addInput');
    const c = this.__CACHE;
    this.data.addInput(inputData);
    const txIn = c.__TX.ins[c.__TX.ins.length - 1];
    checkTxInputCache(c, txIn);
    const inputIndex = this.data.inputs.length - 1;
    const input = this.data.inputs[inputIndex];
    if (input.nonWitnessUtxo) {
      addNonWitnessTxCache(this.__CACHE, input, inputIndex);
    }
    c.__FEE = undefined;
    c.__FEE_RATE = undefined;
    c.__EXTRACTED_TX = undefined;
    return this;
  }
  addOutputs(outputDatas) {
    outputDatas.forEach(outputData => this.addOutput(outputData));
    return this;
  }
  addOutput(outputData) {
    if (
      arguments.length > 1 ||
      !outputData ||
      outputData.value === undefined ||
      (outputData.address === undefined && outputData.script === undefined)
    ) {
      throw new Error(
        `Invalid arguments for Psbt.addOutput. ` +
          `Requires single object with at least [script or address] and [value]`,
      );
    }
    checkInputsForPartialSig(this.data.inputs, 'addOutput');
    const { address } = outputData;
    if (typeof address === 'string') {
      const { network } = this.opts;
      const script = address_1.toOutputScript(address, network);
      outputData = Object.assign(outputData, { script });
    }
    const c = this.__CACHE;
    this.data.addOutput(outputData);
    c.__FEE = undefined;
    c.__FEE_RATE = undefined;
    c.__EXTRACTED_TX = undefined;
    return this;
  }
  extractTransaction(disableFeeCheck) {
    if (!this.data.inputs.every(isFinalized)) throw new Error('Not finalized');
    const c = this.__CACHE;
    if (!disableFeeCheck) {
      checkFees(this, c, this.opts);
    }
    if (c.__EXTRACTED_TX) return c.__EXTRACTED_TX;
    const tx = c.__TX.clone();
    inputFinalizeGetAmts(this.data.inputs, tx, c, true);
    return tx;
  }
  getFeeRate() {
    return getTxCacheValue(
      '__FEE_RATE',
      'fee rate',
      this.data.inputs,
      this.__CACHE,
    );
  }
  getFee() {
    return getTxCacheValue('__FEE', 'fee', this.data.inputs, this.__CACHE);
  }
  finalizeAllInputs() {
    utils_1.checkForInput(this.data.inputs, 0); // making sure we have at least one
    range(this.data.inputs.length).forEach(idx => this.finalizeInput(idx));
    return this;
  }
  finalizeInput(inputIndex) {
    const input = utils_1.checkForInput(this.data.inputs, inputIndex);
    const { script, isP2SH, isP2WSH, isSegwit } = getScriptFromInput(
      inputIndex,
      input,
      this.__CACHE,
    );
    if (!script) throw new Error(`No script found for input #${inputIndex}`);
    const scriptType = classifyScript(script);
    if (!canFinalize(input, script, scriptType))
      throw new Error(`Can not finalize input #${inputIndex}`);
    checkPartialSigSighashes(input);
    const { finalScriptSig, finalScriptWitness } = getFinalScripts(
      script,
      scriptType,
      input.partialSig,
      isSegwit,
      isP2SH,
      isP2WSH,
    );
    if (finalScriptSig) this.data.updateInput(inputIndex, { finalScriptSig });
    if (finalScriptWitness)
      this.data.updateInput(inputIndex, { finalScriptWitness });
    if (!finalScriptSig && !finalScriptWitness)
      throw new Error(`Unknown error finalizing input #${inputIndex}`);
    this.data.clearFinalizedInput(inputIndex);
    return this;
  }
  validateSignaturesOfAllInputs() {
    utils_1.checkForInput(this.data.inputs, 0); // making sure we have at least one
    const results = range(this.data.inputs.length).map(idx =>
      this.validateSignaturesOfInput(idx),
    );
    return results.reduce((final, res) => res === true && final, true);
  }
  validateSignaturesOfInput(inputIndex, pubkey) {
    const input = this.data.inputs[inputIndex];
    const partialSig = (input || {}).partialSig;
    if (!input || !partialSig || partialSig.length < 1)
      throw new Error('No signatures to validate');
    const mySigs = pubkey
      ? partialSig.filter(sig => sig.pubkey.equals(pubkey))
      : partialSig;
    if (mySigs.length < 1) throw new Error('No signatures for this pubkey');
    const results = [];
    let hashCache;
    let scriptCache;
    let sighashCache;
    for (const pSig of mySigs) {
      const sig = bscript.signature.decode(pSig.signature);
      const { hash, script } =
        sighashCache !== sig.hashType
          ? getHashForSig(
              inputIndex,
              Object.assign({}, input, { sighashType: sig.hashType }),
              this.__CACHE,
            )
          : { hash: hashCache, script: scriptCache };
      sighashCache = sig.hashType;
      hashCache = hash;
      scriptCache = script;
      checkScriptForPubkey(pSig.pubkey, script, 'verify');
      const keypair = ecpair_1.fromPublicKey(pSig.pubkey);
      results.push(keypair.verify(hash, sig.signature));
    }
    return results.every(res => res === true);
  }
  signAllInputsHD(
    hdKeyPair,
    sighashTypes = [transaction_1.Transaction.SIGHASH_ALL],
  ) {
    if (!hdKeyPair || !hdKeyPair.publicKey || !hdKeyPair.fingerprint) {
      throw new Error('Need HDSigner to sign input');
    }
    const results = [];
    for (const i of range(this.data.inputs.length)) {
      try {
        this.signInputHD(i, hdKeyPair, sighashTypes);
        results.push(true);
      } catch (err) {
        results.push(false);
      }
    }
    if (results.every(v => v === false)) {
      throw new Error('No inputs were signed');
    }
    return this;
  }
  signAllInputsHDAsync(
    hdKeyPair,
    sighashTypes = [transaction_1.Transaction.SIGHASH_ALL],
  ) {
    return new Promise((resolve, reject) => {
      if (!hdKeyPair || !hdKeyPair.publicKey || !hdKeyPair.fingerprint) {
        return reject(new Error('Need HDSigner to sign input'));
      }
      const results = [];
      const promises = [];
      for (const i of range(this.data.inputs.length)) {
        promises.push(
          this.signInputHDAsync(i, hdKeyPair, sighashTypes).then(
            () => {
              results.push(true);
            },
            () => {
              results.push(false);
            },
          ),
        );
      }
      return Promise.all(promises).then(() => {
        if (results.every(v => v === false)) {
          return reject(new Error('No inputs were signed'));
        }
        resolve();
      });
    });
  }
  signInputHD(
    inputIndex,
    hdKeyPair,
    sighashTypes = [transaction_1.Transaction.SIGHASH_ALL],
  ) {
    if (!hdKeyPair || !hdKeyPair.publicKey || !hdKeyPair.fingerprint) {
      throw new Error('Need HDSigner to sign input');
    }
    const signers = getSignersFromHD(inputIndex, this.data.inputs, hdKeyPair);
    signers.forEach(signer => this.signInput(inputIndex, signer, sighashTypes));
    return this;
  }
  signInputHDAsync(
    inputIndex,
    hdKeyPair,
    sighashTypes = [transaction_1.Transaction.SIGHASH_ALL],
  ) {
    return new Promise((resolve, reject) => {
      if (!hdKeyPair || !hdKeyPair.publicKey || !hdKeyPair.fingerprint) {
        return reject(new Error('Need HDSigner to sign input'));
      }
      const signers = getSignersFromHD(inputIndex, this.data.inputs, hdKeyPair);
      const promises = signers.map(signer =>
        this.signInputAsync(inputIndex, signer, sighashTypes),
      );
      return Promise.all(promises)
        .then(() => {
          resolve();
        })
        .catch(reject);
    });
  }
  signAllInputs(
    keyPair,
    sighashTypes = [transaction_1.Transaction.SIGHASH_ALL],
  ) {
    if (!keyPair || !keyPair.publicKey)
      throw new Error('Need Signer to sign input');
    // TODO: Add a pubkey/pubkeyhash cache to each input
    // as input information is added, then eventually
    // optimize this method.
    const results = [];
    for (const i of range(this.data.inputs.length)) {
      try {
        this.signInput(i, keyPair, sighashTypes);
        results.push(true);
      } catch (err) {
        results.push(false);
      }
    }
    if (results.every(v => v === false)) {
      throw new Error('No inputs were signed');
    }
    return this;
  }
  signAllInputsAsync(
    keyPair,
    sighashTypes = [transaction_1.Transaction.SIGHASH_ALL],
  ) {
    return new Promise((resolve, reject) => {
      if (!keyPair || !keyPair.publicKey)
        return reject(new Error('Need Signer to sign input'));
      // TODO: Add a pubkey/pubkeyhash cache to each input
      // as input information is added, then eventually
      // optimize this method.
      const results = [];
      const promises = [];
      for (const [i] of this.data.inputs.entries()) {
        promises.push(
          this.signInputAsync(i, keyPair, sighashTypes).then(
            () => {
              results.push(true);
            },
            () => {
              results.push(false);
            },
          ),
        );
      }
      return Promise.all(promises).then(() => {
        if (results.every(v => v === false)) {
          return reject(new Error('No inputs were signed'));
        }
        resolve();
      });
    });
  }
  signInput(
    inputIndex,
    keyPair,
    sighashTypes = [transaction_1.Transaction.SIGHASH_ALL],
  ) {
    if (!keyPair || !keyPair.publicKey)
      throw new Error('Need Signer to sign input');
    const { hash, sighashType } = getHashAndSighashType(
      this.data.inputs,
      inputIndex,
      keyPair.publicKey,
      this.__CACHE,
      sighashTypes,
    );
    const partialSig = [
      {
        pubkey: keyPair.publicKey,
        signature: bscript.signature.encode(keyPair.sign(hash), sighashType),
      },
    ];
    this.data.updateInput(inputIndex, { partialSig });
    return this;
  }
  signInputAsync(
    inputIndex,
    keyPair,
    sighashTypes = [transaction_1.Transaction.SIGHASH_ALL],
  ) {
    return new Promise((resolve, reject) => {
      if (!keyPair || !keyPair.publicKey)
        return reject(new Error('Need Signer to sign input'));
      const { hash, sighashType } = getHashAndSighashType(
        this.data.inputs,
        inputIndex,
        keyPair.publicKey,
        this.__CACHE,
        sighashTypes,
      );
      Promise.resolve(keyPair.sign(hash)).then(signature => {
        const partialSig = [
          {
            pubkey: keyPair.publicKey,
            signature: bscript.signature.encode(signature, sighashType),
          },
        ];
        this.data.updateInput(inputIndex, { partialSig });
        resolve();
      });
    });
  }
  toBuffer() {
    return this.data.toBuffer();
  }
  toHex() {
    return this.data.toHex();
  }
  toBase64() {
    return this.data.toBase64();
  }
  updateGlobal(updateData) {
    this.data.updateGlobal(updateData);
    return this;
  }
  updateInput(inputIndex, updateData) {
    if (updateData.witnessUtxo) {
      const { witnessUtxo } = updateData;
      const script = Buffer.isBuffer(witnessUtxo.script)
        ? witnessUtxo.script
        : Buffer.from(witnessUtxo.script, 'hex');
      const value = Buffer.isBuffer(witnessUtxo.value)
        ? witnessUtxo.value
        : typeof witnessUtxo.value === 'string'
        ? Buffer.from(witnessUtxo.value, 'hex')
        : confidential.satoshiToConfidentialValue(witnessUtxo.value);
      // if the asset is a string, by checking the first byte we can determine if
      // it's an asset commitment, in this case we decode the hex string as buffer,
      // or if it's an asset hash, in this case we put the unconf prefix in front of the reversed the buffer
      const asset = Buffer.isBuffer(witnessUtxo.asset)
        ? witnessUtxo.asset
        : witnessUtxo.asset.startsWith('0a') ||
          witnessUtxo.asset.startsWith('0b')
        ? Buffer.from(witnessUtxo.asset, 'hex')
        : Buffer.concat([
            Buffer.alloc(1, 1),
            bufferutils_1.reverseBuffer(Buffer.from(witnessUtxo.asset, 'hex')),
          ]);
      const nonce = witnessUtxo.nonce
        ? Buffer.isBuffer(witnessUtxo.nonce)
          ? witnessUtxo.nonce
          : Buffer.from(witnessUtxo.nonce, 'hex')
        : Buffer.alloc(1, 0);
      const rangeProof = witnessUtxo.rangeProof
        ? Buffer.isBuffer(witnessUtxo.rangeProof)
          ? witnessUtxo.rangeProof
          : Buffer.from(witnessUtxo.rangeProof, 'hex')
        : undefined;
      const surjectionProof = witnessUtxo.surjectionProof
        ? Buffer.isBuffer(witnessUtxo.surjectionProof)
          ? witnessUtxo.surjectionProof
          : Buffer.from(witnessUtxo.surjectionProof, 'hex')
        : undefined;
      updateData = Object.assign(updateData, {
        witnessUtxo: {
          script,
          value,
          asset,
          nonce,
          rangeProof,
          surjectionProof,
        },
      });
    }
    this.data.updateInput(inputIndex, updateData);
    if (updateData.nonWitnessUtxo) {
      addNonWitnessTxCache(
        this.__CACHE,
        this.data.inputs[inputIndex],
        inputIndex,
      );
    }
    return this;
  }
  updateOutput(outputIndex, updateData) {
    this.data.updateOutput(outputIndex, updateData);
    return this;
  }
  blindOutputs(blindingDataLike, blindingPubkeys, opts) {
    return this.rawBlindOutputs(
      blindingDataLike,
      blindingPubkeys,
      undefined,
      opts,
    );
  }
  blindOutputsByIndex(inputsBlindingData, outputsBlindingPubKeys, opts) {
    const blindingPrivKeysArgs = range(this.__CACHE.__TX.ins.length).map(
      inputIndex => inputsBlindingData.get(inputIndex),
    );
    const outputIndexes = [];
    const blindingPublicKey = [];
    for (const [outputIndex, pubBlindingKey] of outputsBlindingPubKeys) {
      outputIndexes.push(outputIndex);
      blindingPublicKey.push(pubBlindingKey);
    }
    return this.rawBlindOutputs(
      blindingPrivKeysArgs,
      blindingPublicKey,
      outputIndexes,
      opts,
    );
  }
  addUnknownKeyValToGlobal(keyVal) {
    this.data.addUnknownKeyValToGlobal(keyVal);
    return this;
  }
  addUnknownKeyValToInput(inputIndex, keyVal) {
    this.data.addUnknownKeyValToInput(inputIndex, keyVal);
    return this;
  }
  addUnknownKeyValToOutput(outputIndex, keyVal) {
    this.data.addUnknownKeyValToOutput(outputIndex, keyVal);
    return this;
  }
  clearFinalizedInput(inputIndex) {
    this.data.clearFinalizedInput(inputIndex);
    return this;
  }
  rawBlindOutputs(blindingDataLike, blindingPubkeys, outputIndexes, opts) {
    return __awaiter(this, void 0, void 0, function*() {
      if (this.data.inputs.some(v => !v.nonWitnessUtxo && !v.witnessUtxo))
        throw new Error(
          'All inputs must contain a non witness utxo or a witness utxo',
        );
      const c = this.__CACHE;
      if (c.__TX.ins.length !== blindingDataLike.length) {
        throw new Error(
          'blindingDataLike length does not match the number of inputs (undefined for unconfidential utxo)',
        );
      }
      if (!outputIndexes) {
        outputIndexes = [];
        // fill the outputIndexes array with all the output index (except the fee output)
        c.__TX.outs.forEach((out, index) => {
          if (out.script.length > 0) outputIndexes.push(index);
        });
      }
      if (outputIndexes.length !== blindingPubkeys.length)
        throw new Error(
          'not enough blinding public keys to blind the requested outputs',
        );
      const witnesses = this.data.inputs.map((input, index) => {
        if (input.nonWitnessUtxo) {
          const prevTx = nonWitnessUtxoTxFromCache(c, input, index);
          const prevoutIndex = c.__TX.ins[index].index;
          return prevTx.outs[prevoutIndex];
        }
        if (input.witnessUtxo) {
          return input.witnessUtxo;
        }
        throw new Error('input data needs witness utxo or nonwitness utxo');
      });
      const inputsBlindingData = yield Promise.all(
        blindingDataLike.map((data, i) => toBlindingData(data, witnesses[i])),
      );
      // get data (satoshis & asset) outputs to blind
      const outputsData = outputIndexes.map(index => {
        const output = c.__TX.outs[index];
        // prevent blinding the fee output
        if (output.script.length === 0)
          throw new Error("cant't blind the fee output");
        const value = confidential
          .confidentialValueToSatoshi(output.value)
          .toString(10);
        return [value, output.asset.slice(1)];
      });
      // compute the outputs blinders
      const outputsBlindingData = yield computeOutputsBlindingData(
        inputsBlindingData,
        outputsData,
      );
      // use blinders to compute proofs & commitments
      let indexInArray = 0;
      for (const outputIndex of outputIndexes) {
        const randomSeed = randomBytes(opts);
        const ephemeralPrivKey = randomBytes(opts);
        const outputNonce = ecpair_1.fromPrivateKey(ephemeralPrivKey).publicKey;
        const outputBlindingData = outputsBlindingData[indexInArray];
        // commitments
        const assetCommitment = yield confidential.assetCommitment(
          outputBlindingData.asset,
          outputBlindingData.assetBlindingFactor,
        );
        const valueCommitment = yield confidential.valueCommitment(
          outputBlindingData.value,
          assetCommitment,
          outputBlindingData.valueBlindingFactor,
        );
        // proofs
        const rangeProof = yield confidential.rangeProof(
          outputBlindingData.value,
          blindingPubkeys[indexInArray],
          ephemeralPrivKey,
          outputBlindingData.asset,
          outputBlindingData.assetBlindingFactor,
          outputBlindingData.valueBlindingFactor,
          valueCommitment,
          c.__TX.outs[outputIndex].script,
        );
        const surjectionProof = yield confidential.surjectionProof(
          outputBlindingData.asset,
          outputBlindingData.assetBlindingFactor,
          inputsBlindingData.map(({ asset }) => asset),
          inputsBlindingData.map(
            ({ assetBlindingFactor }) => assetBlindingFactor,
          ),
          randomSeed,
        );
        // set commitments & proofs & nonce
        c.__TX.outs[outputIndex].asset = assetCommitment;
        c.__TX.outs[outputIndex].value = valueCommitment;
        c.__TX.setOutputNonce(outputIndex, outputNonce);
        c.__TX.setOutputRangeProof(outputIndex, rangeProof);
        c.__TX.setOutputSurjectionProof(outputIndex, surjectionProof);
        indexInArray++;
      }
      c.__FEE = undefined;
      c.__FEE_RATE = undefined;
      c.__EXTRACTED_TX = undefined;
      return this;
    });
  }
}
exports.Psbt = Psbt;
/**
 * This function is needed to pass to the bip174 base class's fromBuffer.
 * It takes the "transaction buffer" portion of the psbt buffer and returns a
 * Transaction (From the bip174 library) interface.
 */
const transactionFromBuffer = buffer => new PsbtTransaction(buffer);
/**
 * This class implements the Transaction interface from bip174 library.
 * It contains a liquidjs-lib Transaction object.
 */
class PsbtTransaction {
  constructor(buffer = Buffer.from([2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])) {
    this.tx = transaction_1.Transaction.fromBuffer(buffer);
    checkTxEmpty(this.tx);
    Object.defineProperty(this, 'tx', {
      enumerable: false,
      writable: true,
    });
  }
  getInputOutputCounts() {
    return {
      inputCount: this.tx.ins.length,
      outputCount: this.tx.outs.length,
    };
  }
  addInput(input) {
    if (
      input.hash === undefined ||
      input.index === undefined ||
      (!Buffer.isBuffer(input.hash) && typeof input.hash !== 'string') ||
      typeof input.index !== 'number'
    ) {
      throw new Error('Error adding input.');
    }
    const hash =
      typeof input.hash === 'string'
        ? bufferutils_1.reverseBuffer(Buffer.from(input.hash, 'hex'))
        : input.hash;
    this.tx.addInput(hash, input.index, input.sequence);
  }
  addOutput(output) {
    if (
      output.script === undefined ||
      (!Buffer.isBuffer(output.script) && typeof output.script !== 'string') ||
      output.value === undefined ||
      (!Buffer.isBuffer(output.value) && typeof output.value !== 'number') ||
      output.asset === undefined ||
      (!Buffer.isBuffer(output.asset) && typeof output.asset !== 'string')
    ) {
      throw new Error('Error adding output.');
    }
    const nonce = Buffer.alloc(1, 0);
    const script = Buffer.isBuffer(output.script)
      ? output.script
      : Buffer.from(output.script, 'hex');
    const value = Buffer.isBuffer(output.value)
      ? output.value
      : confidential.satoshiToConfidentialValue(output.value);
    const asset = Buffer.isBuffer(output.asset)
      ? output.asset
      : Buffer.concat([
          Buffer.alloc(1, 1),
          bufferutils_1.reverseBuffer(Buffer.from(output.asset, 'hex')),
        ]);
    this.tx.addOutput(script, value, asset, nonce);
  }
  toBuffer() {
    return this.tx.toBuffer();
  }
}
function canFinalize(input, script, scriptType) {
  switch (scriptType) {
    case 'pubkey':
    case 'pubkeyhash':
    case 'witnesspubkeyhash':
      return hasSigs(1, input.partialSig);
    case 'multisig':
      const p2ms = payments.p2ms({ output: script });
      return hasSigs(p2ms.m, input.partialSig, p2ms.pubkeys);
    default:
      return false;
  }
}
function hasSigs(neededSigs, partialSig, pubkeys) {
  if (!partialSig) return false;
  let sigs;
  if (pubkeys) {
    sigs = pubkeys
      .map(pkey => {
        const pubkey = ecpair_1.fromPublicKey(pkey, { compressed: true })
          .publicKey;
        return partialSig.find(pSig => pSig.pubkey.equals(pubkey));
      })
      .filter(v => !!v);
  } else {
    sigs = partialSig;
  }
  if (sigs.length > neededSigs) throw new Error('Too many signatures');
  return sigs.length === neededSigs;
}
function isFinalized(input) {
  return !!input.finalScriptSig || !!input.finalScriptWitness;
}
function isPaymentFactory(payment) {
  return script => {
    try {
      payment({ output: script });
      return true;
    } catch (err) {
      return false;
    }
  };
}
const isP2MS = isPaymentFactory(payments.p2ms);
const isP2PK = isPaymentFactory(payments.p2pk);
const isP2PKH = isPaymentFactory(payments.p2pkh);
const isP2WPKH = isPaymentFactory(payments.p2wpkh);
const isP2WSHScript = isPaymentFactory(payments.p2wsh);
function check32Bit(num) {
  if (
    typeof num !== 'number' ||
    num !== Math.floor(num) ||
    num > 0xffffffff ||
    num < 0
  ) {
    throw new Error('Invalid 32 bit integer');
  }
}
function checkFees(psbt, cache, opts) {
  const feeRate = cache.__FEE_RATE || psbt.getFeeRate();
  const vsize = cache.__EXTRACTED_TX.virtualSize();
  const satoshis = feeRate * vsize;
  if (feeRate >= opts.maximumFeeRate) {
    throw new Error(
      `Warning: You are paying around ${(satoshis / 1e8).toFixed(8)} in ` +
        `fees, which is ${feeRate} satoshi per byte for a transaction ` +
        `with a VSize of ${vsize} bytes (segwit counted as 0.25 byte per ` +
        `byte). Use setMaximumFeeRate method to raise your threshold, or ` +
        `pass true to the first arg of extractTransaction.`,
    );
  }
}
function checkInputsForPartialSig(inputs, action) {
  inputs.forEach(input => {
    let throws = false;
    let pSigs = [];
    if ((input.partialSig || []).length === 0) {
      if (!input.finalScriptSig && !input.finalScriptWitness) return;
      pSigs = getPsigsFromInputFinalScripts(input);
    } else {
      pSigs = input.partialSig;
    }
    pSigs.forEach(pSig => {
      const { hashType } = bscript.signature.decode(pSig.signature);
      const whitelist = [];
      const isAnyoneCanPay =
        hashType & transaction_1.Transaction.SIGHASH_ANYONECANPAY;
      if (isAnyoneCanPay) whitelist.push('addInput');
      const hashMod = hashType & 0x1f;
      switch (hashMod) {
        case transaction_1.Transaction.SIGHASH_ALL:
          break;
        case transaction_1.Transaction.SIGHASH_SINGLE:
        case transaction_1.Transaction.SIGHASH_NONE:
          whitelist.push('addOutput');
          whitelist.push('setInputSequence');
          break;
      }
      if (whitelist.indexOf(action) === -1) {
        throws = true;
      }
    });
    if (throws) {
      throw new Error('Can not modify transaction, signatures exist.');
    }
  });
}
function checkPartialSigSighashes(input) {
  if (!input.sighashType || !input.partialSig) return;
  const { partialSig, sighashType } = input;
  partialSig.forEach(pSig => {
    const { hashType } = bscript.signature.decode(pSig.signature);
    if (sighashType !== hashType) {
      throw new Error('Signature sighash does not match input sighash type');
    }
  });
}
function checkScriptForPubkey(pubkey, script, action) {
  const pubkeyHash = crypto_1.hash160(pubkey);
  const decompiled = bscript.decompile(script);
  if (decompiled === null) throw new Error('Unknown script error');
  const hasKey = decompiled.some(element => {
    if (typeof element === 'number') return false;
    return element.equals(pubkey) || element.equals(pubkeyHash);
  });
  if (!hasKey) {
    throw new Error(
      `Can not ${action} for this input with the key ${pubkey.toString('hex')}`,
    );
  }
}
function checkTxEmpty(tx) {
  const isEmpty = tx.ins.every(
    input => input.script && input.script.length === 0,
  );
  if (!isEmpty) {
    throw new Error('Format Error: Transaction ScriptSigs are not empty');
  }
  // if (tx.flag === 1 && tx.witnessIn.length > 0) {
  //   throw new Error('Format Error: Transaction WitnessScriptSigs are not empty');
  // }
}
function checkTxForDupeIns(tx, cache) {
  tx.ins.forEach(input => {
    checkTxInputCache(cache, input);
  });
}
function checkTxInputCache(cache, input) {
  const key =
    bufferutils_1.reverseBuffer(Buffer.from(input.hash)).toString('hex') +
    ':' +
    input.index;
  if (cache.__TX_IN_CACHE[key]) throw new Error('Duplicate input detected.');
  cache.__TX_IN_CACHE[key] = 1;
}
function scriptCheckerFactory(payment, paymentScriptName) {
  return (inputIndex, scriptPubKey, redeemScript) => {
    const redeemScriptOutput = payment({
      redeem: { output: redeemScript },
    }).output;
    if (!scriptPubKey.equals(redeemScriptOutput)) {
      throw new Error(
        `${paymentScriptName} for input #${inputIndex} doesn't match the scriptPubKey in the prevout`,
      );
    }
  };
}
const checkRedeemScript = scriptCheckerFactory(payments.p2sh, 'Redeem script');
const checkWitnessScript = scriptCheckerFactory(
  payments.p2wsh,
  'Witness script',
);
function getTxCacheValue(key, name, inputs, c) {
  if (!inputs.every(isFinalized))
    throw new Error(`PSBT must be finalized to calculate ${name}`);
  if (key === '__FEE_RATE' && c.__FEE_RATE) return c.__FEE_RATE;
  if (key === '__FEE' && c.__FEE) return c.__FEE;
  let tx;
  let mustFinalize = true;
  if (c.__EXTRACTED_TX) {
    tx = c.__EXTRACTED_TX;
    mustFinalize = false;
  } else {
    tx = c.__TX.clone();
  }
  inputFinalizeGetAmts(inputs, tx, c, mustFinalize);
  if (key === '__FEE_RATE') return c.__FEE_RATE;
  else if (key === '__FEE') return c.__FEE;
}
function getFinalScripts(
  script,
  scriptType,
  partialSig,
  isSegwit,
  isP2SH,
  isP2WSH,
) {
  let finalScriptSig;
  let finalScriptWitness;
  // Wow, the payments API is very handy
  const payment = getPayment(script, scriptType, partialSig);
  const p2wsh = !isP2WSH ? null : payments.p2wsh({ redeem: payment });
  const p2sh = !isP2SH ? null : payments.p2sh({ redeem: p2wsh || payment });
  if (isSegwit) {
    if (p2wsh) {
      finalScriptWitness = witnessStackToScriptWitness(p2wsh.witness);
    } else {
      finalScriptWitness = witnessStackToScriptWitness(payment.witness);
    }
    if (p2sh) {
      finalScriptSig = p2sh.input;
    }
  } else {
    if (p2sh) {
      finalScriptSig = p2sh.input;
    } else {
      finalScriptSig = payment.input;
    }
  }
  return {
    finalScriptSig,
    finalScriptWitness,
  };
}
function getHashAndSighashType(
  inputs,
  inputIndex,
  pubkey,
  cache,
  sighashTypes,
) {
  const input = utils_1.checkForInput(inputs, inputIndex);
  const { hash, sighashType, script } = getHashForSig(
    inputIndex,
    input,
    cache,
    sighashTypes,
  );
  checkScriptForPubkey(pubkey, script, 'sign');
  return {
    hash,
    sighashType,
  };
}
function getHashForSig(inputIndex, input, cache, sighashTypes) {
  const unsignedTx = cache.__TX;
  const sighashType =
    input.sighashType || transaction_1.Transaction.SIGHASH_ALL;
  if (sighashTypes && sighashTypes.indexOf(sighashType) < 0) {
    const str = sighashTypeToString(sighashType);
    throw new Error(
      `Sighash type is not allowed. Retry the sign method passing the ` +
        `sighashTypes array of whitelisted types. Sighash type: ${str}`,
    );
  }
  let hash;
  let script;
  if (input.nonWitnessUtxo) {
    const nonWitnessUtxoTx = nonWitnessUtxoTxFromCache(
      cache,
      input,
      inputIndex,
    );
    const prevoutHash = unsignedTx.ins[inputIndex].hash;
    const utxoHash = nonWitnessUtxoTx.getHash();
    // If a non-witness UTXO is provided, its hash must match the hash specified in the prevout
    if (!prevoutHash.equals(utxoHash)) {
      throw new Error(
        `Non-witness UTXO hash for input #${inputIndex} doesn't match the hash specified in the prevout`,
      );
    }
    const prevoutIndex = unsignedTx.ins[inputIndex].index;
    const prevout = nonWitnessUtxoTx.outs[prevoutIndex];
    if (input.redeemScript) {
      // If a redeemScript is provided, the scriptPubKey must be for that redeemScript
      checkRedeemScript(inputIndex, prevout.script, input.redeemScript);
      script = input.redeemScript;
    } else {
      script = prevout.script;
    }
    if (isP2WSHScript(script)) {
      if (!input.witnessScript)
        throw new Error('Segwit input needs witnessScript if not P2WPKH');
      checkWitnessScript(inputIndex, script, input.witnessScript);
      hash = unsignedTx.hashForWitnessV0(
        inputIndex,
        input.witnessScript,
        prevout.value,
        sighashType,
      );
      script = input.witnessScript;
    } else if (isP2WPKH(script)) {
      // P2WPKH uses the P2PKH template for prevoutScript when signing
      const signingScript = payments.p2pkh({ hash: script.slice(2) }).output;
      hash = unsignedTx.hashForWitnessV0(
        inputIndex,
        signingScript,
        prevout.value,
        sighashType,
      );
    } else {
      hash = unsignedTx.hashForSignature(inputIndex, script, sighashType);
    }
  } else if (input.witnessUtxo) {
    let _script; // so we don't shadow the `let script` above
    if (input.redeemScript) {
      // If a redeemScript is provided, the scriptPubKey must be for that redeemScript
      checkRedeemScript(
        inputIndex,
        input.witnessUtxo.script,
        input.redeemScript,
      );
      _script = input.redeemScript;
    } else {
      _script = input.witnessUtxo.script;
    }
    if (isP2WPKH(_script)) {
      // P2WPKH uses the P2PKH template for prevoutScript when signing
      const signingScript = payments.p2pkh({ hash: _script.slice(2) }).output;
      hash = unsignedTx.hashForWitnessV0(
        inputIndex,
        signingScript,
        input.witnessUtxo.value,
        sighashType,
      );
      script = _script;
    } else if (isP2WSHScript(_script)) {
      if (!input.witnessScript)
        throw new Error('Segwit input needs witnessScript if not P2WPKH');
      checkWitnessScript(inputIndex, _script, input.witnessScript);
      hash = unsignedTx.hashForWitnessV0(
        inputIndex,
        input.witnessScript,
        input.witnessUtxo.value,
        sighashType,
      );
      // want to make sure the script we return is the actual meaningful script
      script = input.witnessScript;
    } else {
      throw new Error(
        `Input #${inputIndex} has witnessUtxo but non-segwit script: ` +
          `${_script.toString('hex')}`,
      );
    }
  } else {
    throw new Error('Need a Utxo input item for signing');
  }
  return {
    script,
    sighashType,
    hash,
  };
}
function getPayment(script, scriptType, partialSig) {
  let payment;
  switch (scriptType) {
    case 'multisig':
      const sigs = getSortedSigs(script, partialSig);
      payment = payments.p2ms({
        output: script,
        signatures: sigs,
      });
      break;
    case 'pubkey':
      payment = payments.p2pk({
        output: script,
        signature: partialSig[0].signature,
      });
      break;
    case 'pubkeyhash':
      payment = payments.p2pkh({
        output: script,
        pubkey: partialSig[0].pubkey,
        signature: partialSig[0].signature,
      });
      break;
    case 'witnesspubkeyhash':
      payment = payments.p2wpkh({
        output: script,
        pubkey: partialSig[0].pubkey,
        signature: partialSig[0].signature,
      });
      break;
  }
  return payment;
}
function getPsigsFromInputFinalScripts(input) {
  const scriptItems = !input.finalScriptSig
    ? []
    : bscript.decompile(input.finalScriptSig) || [];
  const witnessItems = !input.finalScriptWitness
    ? []
    : bscript.decompile(input.finalScriptWitness) || [];
  return scriptItems
    .concat(witnessItems)
    .filter(item => {
      return Buffer.isBuffer(item) && bscript.isCanonicalScriptSignature(item);
    })
    .map(sig => ({ signature: sig }));
}
function getScriptFromInput(inputIndex, input, cache) {
  const unsignedTx = cache.__TX;
  const res = {
    script: null,
    isSegwit: false,
    isP2SH: false,
    isP2WSH: false,
  };
  res.isP2SH = !!input.redeemScript;
  res.isP2WSH = !!input.witnessScript;
  if (input.witnessScript) {
    res.script = input.witnessScript;
  } else if (input.redeemScript) {
    res.script = input.redeemScript;
  } else {
    if (input.nonWitnessUtxo) {
      const nonWitnessUtxoTx = nonWitnessUtxoTxFromCache(
        cache,
        input,
        inputIndex,
      );
      const prevoutIndex = unsignedTx.ins[inputIndex].index;
      res.script = nonWitnessUtxoTx.outs[prevoutIndex].script;
    } else if (input.witnessUtxo) {
      res.script = input.witnessUtxo.script;
    }
  }
  if (input.witnessScript || isP2WPKH(res.script)) {
    res.isSegwit = true;
  }
  return res;
}
function getSignersFromHD(inputIndex, inputs, hdKeyPair) {
  const input = utils_1.checkForInput(inputs, inputIndex);
  if (!input.bip32Derivation || input.bip32Derivation.length === 0) {
    throw new Error('Need bip32Derivation to sign with HD');
  }
  const myDerivations = input.bip32Derivation
    .map(bipDv => {
      if (bipDv.masterFingerprint.equals(hdKeyPair.fingerprint)) {
        return bipDv;
      } else {
        return;
      }
    })
    .filter(v => !!v);
  if (myDerivations.length === 0) {
    throw new Error(
      'Need one bip32Derivation masterFingerprint to match the HDSigner fingerprint',
    );
  }
  const signers = myDerivations.map(bipDv => {
    const node = hdKeyPair.derivePath(bipDv.path);
    if (!bipDv.pubkey.equals(node.publicKey)) {
      throw new Error('pubkey did not match bip32Derivation');
    }
    return node;
  });
  return signers;
}
function getSortedSigs(script, partialSig) {
  const p2ms = payments.p2ms({ output: script });
  // for each pubkey in order of p2ms script
  return p2ms.pubkeys
    .map(pk => {
      // filter partialSig array by pubkey being equal
      return (
        partialSig.filter(ps => {
          return ps.pubkey.equals(pk);
        })[0] || {}
      ).signature;
      // Any pubkey without a match will return undefined
      // this last filter removes all the undefined items in the array.
    })
    .filter(v => !!v);
}
function scriptWitnessToWitnessStack(buffer) {
  let offset = 0;
  function readSlice(n) {
    offset += n;
    return buffer.slice(offset - n, offset);
  }
  function readVarInt() {
    const vi = varuint.decode(buffer, offset);
    offset += varuint.decode.bytes;
    return vi;
  }
  function readVarSlice() {
    return readSlice(readVarInt());
  }
  function readVector() {
    const count = readVarInt();
    const vector = [];
    for (let i = 0; i < count; i++) vector.push(readVarSlice());
    return vector;
  }
  return readVector();
}
function sighashTypeToString(sighashType) {
  let text =
    sighashType & transaction_1.Transaction.SIGHASH_ANYONECANPAY
      ? 'SIGHASH_ANYONECANPAY | '
      : '';
  const sigMod = sighashType & 0x1f;
  switch (sigMod) {
    case transaction_1.Transaction.SIGHASH_ALL:
      text += 'SIGHASH_ALL';
      break;
    case transaction_1.Transaction.SIGHASH_SINGLE:
      text += 'SIGHASH_SINGLE';
      break;
    case transaction_1.Transaction.SIGHASH_NONE:
      text += 'SIGHASH_NONE';
      break;
  }
  return text;
}
function witnessStackToScriptWitness(witness) {
  let buffer = Buffer.allocUnsafe(0);
  function writeSlice(slice) {
    buffer = Buffer.concat([buffer, Buffer.from(slice)]);
  }
  function writeVarInt(i) {
    const currentLen = buffer.length;
    const varintLen = varuint.encodingLength(i);
    buffer = Buffer.concat([buffer, Buffer.allocUnsafe(varintLen)]);
    varuint.encode(i, buffer, currentLen);
  }
  function writeVarSlice(slice) {
    writeVarInt(slice.length);
    writeSlice(slice);
  }
  function writeVector(vector) {
    writeVarInt(vector.length);
    vector.forEach(writeVarSlice);
  }
  writeVector(witness);
  return buffer;
}
function addNonWitnessTxCache(cache, input, inputIndex) {
  cache.__NON_WITNESS_UTXO_BUF_CACHE[inputIndex] = input.nonWitnessUtxo;
  const tx = transaction_1.Transaction.fromBuffer(input.nonWitnessUtxo);
  cache.__NON_WITNESS_UTXO_TX_CACHE[inputIndex] = tx;
  const self = cache;
  const selfIndex = inputIndex;
  delete input.nonWitnessUtxo;
  Object.defineProperty(input, 'nonWitnessUtxo', {
    enumerable: true,
    get() {
      const buf = self.__NON_WITNESS_UTXO_BUF_CACHE[selfIndex];
      const txCache = self.__NON_WITNESS_UTXO_TX_CACHE[selfIndex];
      if (buf !== undefined) {
        return buf;
      } else {
        const newBuf = txCache.toBuffer();
        self.__NON_WITNESS_UTXO_BUF_CACHE[selfIndex] = newBuf;
        return newBuf;
      }
    },
    set(data) {
      self.__NON_WITNESS_UTXO_BUF_CACHE[selfIndex] = data;
    },
  });
}
function inputFinalizeGetAmts(inputs, tx, cache, mustFinalize) {
  inputs.forEach((input, idx) => {
    if (mustFinalize && input.finalScriptSig)
      tx.ins[idx].script = input.finalScriptSig;
    if (mustFinalize && input.finalScriptWitness) {
      tx.ins[idx].witness = scriptWitnessToWitnessStack(
        input.finalScriptWitness,
      );
    }
  });
  if (tx.ins.some(x => x.witness.length !== 0)) {
    tx.flag = 1;
  }
  const bytes = tx.virtualSize();
  const fee = 2 * bytes;
  cache.__FEE = fee;
  cache.__EXTRACTED_TX = tx;
  cache.__FEE_RATE = Math.floor(fee / bytes);
}
function nonWitnessUtxoTxFromCache(cache, input, inputIndex) {
  const c = cache.__NON_WITNESS_UTXO_TX_CACHE;
  if (!c[inputIndex]) {
    addNonWitnessTxCache(cache, input, inputIndex);
  }
  return c[inputIndex];
}
function classifyScript(script) {
  if (isP2WPKH(script)) return 'witnesspubkeyhash';
  if (isP2PKH(script)) return 'pubkeyhash';
  if (isP2MS(script)) return 'multisig';
  if (isP2PK(script)) return 'pubkey';
  return 'nonstandard';
}
function range(n) {
  return [...Array(n).keys()];
}
function randomBytes(options) {
  if (options === undefined) options = {};
  const rng = options.rng || _randomBytes;
  return rng(32);
}
/**
 * Compute outputs blinders
 * @param inputsBlindingData the transaction inputs blinding data
 * @param outputsData data = [satoshis, asset] of output to blind ([string Buffer])
 * @returns an array of BlindingData[] corresponding of blinders to blind outputs specified in outputsData
 */
function computeOutputsBlindingData(inputsBlindingData, outputsData) {
  return __awaiter(this, void 0, void 0, function*() {
    const outputsBlindingData = [];
    outputsData
      .slice(0, outputsData.length - 1)
      .forEach(([satoshis, asset]) => {
        const blindingData = {
          value: satoshis,
          asset,
          valueBlindingFactor: randomBytes(),
          assetBlindingFactor: randomBytes(),
        };
        outputsBlindingData.push(blindingData);
      });
    const [lastOutputValue, lastOutputAsset] = outputsData[
      outputsData.length - 1
    ];
    const finalBlindingData = {
      value: lastOutputValue,
      asset: lastOutputAsset,
      assetBlindingFactor: randomBytes(),
      valueBlindingFactor: Buffer.from([]),
    };
    // values
    const inputsValues = inputsBlindingData.map(({ value }) => value);
    const outputsValues = outputsData
      .map(([amount]) => amount)
      .concat(lastOutputValue);
    // asset blinders
    const inputsAssetBlinders = inputsBlindingData.map(
      ({ assetBlindingFactor }) => assetBlindingFactor,
    );
    const outputsAssetBlinders = outputsBlindingData
      .map(({ assetBlindingFactor }) => assetBlindingFactor)
      .concat(finalBlindingData.assetBlindingFactor);
    // value blinders
    const inputsAmountBlinders = inputsBlindingData.map(
      ({ valueBlindingFactor }) => valueBlindingFactor,
    );
    const outputsAmountBlinders = outputsBlindingData.map(
      ({ valueBlindingFactor }) => valueBlindingFactor,
    );
    // compute output final amount blinder
    const finalAmountBlinder = yield confidential.valueBlindingFactor(
      inputsValues,
      outputsValues,
      inputsAssetBlinders,
      outputsAssetBlinders,
      inputsAmountBlinders,
      outputsAmountBlinders,
    );
    finalBlindingData.valueBlindingFactor = finalAmountBlinder;
    outputsBlindingData.push(finalBlindingData);
    return outputsBlindingData;
  });
}
exports.computeOutputsBlindingData = computeOutputsBlindingData;
/**
 * toBlindingData convert a BlindingDataLike to UnblindOutputResult
 * @param blindDataLike blinding data "like" associated to a specific input I
 * @param witnessUtxo the prevout of the input I
 */
function toBlindingData(blindDataLike, witnessUtxo) {
  return __awaiter(this, void 0, void 0, function*() {
    if (!blindDataLike) {
      if (!witnessUtxo) throw new Error('need witnessUtxo');
      return getUnconfidentialWitnessUtxoBlindingData(witnessUtxo);
    }
    if (Buffer.isBuffer(blindDataLike)) {
      if (!witnessUtxo) throw new Error('need witnessUtxo');
      return confidential.unblindOutputWithKey(witnessUtxo, blindDataLike);
    }
    return blindDataLike;
  });
}
exports.toBlindingData = toBlindingData;
function getUnconfidentialWitnessUtxoBlindingData(prevout) {
  const unblindedInputBlindingData = {
    value: confidential.confidentialValueToSatoshi(prevout.value).toString(10),
    valueBlindingFactor: transaction_1.ZERO,
    asset: prevout.asset.slice(1),
    assetBlindingFactor: transaction_1.ZERO,
  };
  return unblindedInputBlindingData;
}

}).call(this)}).call(this,require("buffer").Buffer)
},{"./address":147,"./bufferutils":149,"./confidential":150,"./crypto":151,"./ecpair":152,"./networks":154,"./payments":156,"./script":165,"./transaction":168,"bip174":51,"bip174/src/lib/converter/varint":47,"bip174/src/lib/utils":53,"buffer":4,"randombytes":109}],165:[function(require,module,exports){
(function (Buffer){(function (){
'use strict';
var __importStar =
  (this && this.__importStar) ||
  function(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null)
      for (var k in mod)
        if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result['default'] = mod;
    return result;
  };
Object.defineProperty(exports, '__esModule', { value: true });
const scriptNumber = __importStar(require('./script_number'));
const scriptSignature = __importStar(require('./script_signature'));
const types = __importStar(require('./types'));
const bip66 = require('bip66');
const ecc = require('tiny-secp256k1');
const pushdata = require('pushdata-bitcoin');
const typeforce = require('typeforce');
exports.OPS = require('bitcoin-ops');
const REVERSE_OPS = require('bitcoin-ops/map');
const OP_INT_BASE = exports.OPS.OP_RESERVED; // OP_1 - 1
function isOPInt(value) {
  return (
    types.Number(value) &&
    (value === exports.OPS.OP_0 ||
      (value >= exports.OPS.OP_1 && value <= exports.OPS.OP_16) ||
      value === exports.OPS.OP_1NEGATE)
  );
}
function isPushOnlyChunk(value) {
  return types.Buffer(value) || isOPInt(value);
}
function isPushOnly(value) {
  return types.Array(value) && value.every(isPushOnlyChunk);
}
exports.isPushOnly = isPushOnly;
function asMinimalOP(buffer) {
  if (buffer.length === 0) return exports.OPS.OP_0;
  if (buffer.length !== 1) return;
  if (buffer[0] >= 1 && buffer[0] <= 16) return OP_INT_BASE + buffer[0];
  if (buffer[0] === 0x81) return exports.OPS.OP_1NEGATE;
}
function chunksIsBuffer(buf) {
  return Buffer.isBuffer(buf);
}
function chunksIsArray(buf) {
  return types.Array(buf);
}
function singleChunkIsBuffer(buf) {
  return Buffer.isBuffer(buf);
}
function compile(chunks) {
  // TODO: remove me
  if (chunksIsBuffer(chunks)) return chunks;
  typeforce(types.Array, chunks);
  const bufferSize = chunks.reduce((accum, chunk) => {
    // data chunk
    if (singleChunkIsBuffer(chunk)) {
      // adhere to BIP62.3, minimal push policy
      if (chunk.length === 1 && asMinimalOP(chunk) !== undefined) {
        return accum + 1;
      }
      return accum + pushdata.encodingLength(chunk.length) + chunk.length;
    }
    // opcode
    return accum + 1;
  }, 0.0);
  const buffer = Buffer.allocUnsafe(bufferSize);
  let offset = 0;
  chunks.forEach(chunk => {
    // data chunk
    if (singleChunkIsBuffer(chunk)) {
      // adhere to BIP62.3, minimal push policy
      const opcode = asMinimalOP(chunk);
      if (opcode !== undefined) {
        buffer.writeUInt8(opcode, offset);
        offset += 1;
        return;
      }
      offset += pushdata.encode(buffer, chunk.length, offset);
      chunk.copy(buffer, offset);
      offset += chunk.length;
      // opcode
    } else {
      buffer.writeUInt8(chunk, offset);
      offset += 1;
    }
  });
  if (offset !== buffer.length) throw new Error('Could not decode chunks');
  return buffer;
}
exports.compile = compile;
function decompile(buffer) {
  // TODO: remove me
  if (chunksIsArray(buffer)) return buffer;
  typeforce(types.Buffer, buffer);
  const chunks = [];
  let i = 0;
  while (i < buffer.length) {
    const opcode = buffer[i];
    // data chunk
    if (opcode > exports.OPS.OP_0 && opcode <= exports.OPS.OP_PUSHDATA4) {
      const d = pushdata.decode(buffer, i);
      // did reading a pushDataInt fail?
      if (d === null) return null;
      i += d.size;
      // attempt to read too much data?
      if (i + d.number > buffer.length) return null;
      const data = buffer.slice(i, i + d.number);
      i += d.number;
      // decompile minimally
      const op = asMinimalOP(data);
      if (op !== undefined) {
        chunks.push(op);
      } else {
        chunks.push(data);
      }
      // opcode
    } else {
      chunks.push(opcode);
      i += 1;
    }
  }
  return chunks;
}
exports.decompile = decompile;
function toASM(chunks) {
  if (chunksIsBuffer(chunks)) {
    chunks = decompile(chunks);
  }
  return chunks
    .map(chunk => {
      // data?
      if (singleChunkIsBuffer(chunk)) {
        const op = asMinimalOP(chunk);
        if (op === undefined) return chunk.toString('hex');
        chunk = op;
      }
      // opcode!
      return REVERSE_OPS[chunk];
    })
    .join(' ');
}
exports.toASM = toASM;
function fromASM(asm) {
  typeforce(types.String, asm);
  return compile(
    asm.split(' ').map(chunkStr => {
      // opcode?
      if (exports.OPS[chunkStr] !== undefined) return exports.OPS[chunkStr];
      typeforce(types.Hex, chunkStr);
      // data!
      return Buffer.from(chunkStr, 'hex');
    }),
  );
}
exports.fromASM = fromASM;
function toStack(chunks) {
  chunks = decompile(chunks);
  typeforce(isPushOnly, chunks);
  return chunks.map(op => {
    if (singleChunkIsBuffer(op)) return op;
    if (op === exports.OPS.OP_0) return Buffer.allocUnsafe(0);
    return scriptNumber.encode(op - OP_INT_BASE);
  });
}
exports.toStack = toStack;
function isCanonicalPubKey(buffer) {
  return ecc.isPoint(buffer);
}
exports.isCanonicalPubKey = isCanonicalPubKey;
function isDefinedHashType(hashType) {
  const hashTypeMod = hashType & ~0x80;
  // return hashTypeMod > SIGHASH_ALL && hashTypeMod < SIGHASH_SINGLE
  return hashTypeMod > 0x00 && hashTypeMod < 0x04;
}
exports.isDefinedHashType = isDefinedHashType;
function isCanonicalScriptSignature(buffer) {
  if (!Buffer.isBuffer(buffer)) return false;
  if (!isDefinedHashType(buffer[buffer.length - 1])) return false;
  return bip66.check(buffer.slice(0, -1));
}
exports.isCanonicalScriptSignature = isCanonicalScriptSignature;
// tslint:disable-next-line variable-name
exports.number = scriptNumber;
exports.signature = scriptSignature;

}).call(this)}).call(this,require("buffer").Buffer)
},{"./script_number":166,"./script_signature":167,"./types":169,"bip66":57,"bitcoin-ops":58,"bitcoin-ops/map":59,"buffer":4,"pushdata-bitcoin":108,"tiny-secp256k1":138,"typeforce":142}],166:[function(require,module,exports){
(function (Buffer){(function (){
'use strict';
Object.defineProperty(exports, '__esModule', { value: true });
function decode(buffer, maxLength, minimal) {
  maxLength = maxLength || 4;
  minimal = minimal === undefined ? true : minimal;
  const length = buffer.length;
  if (length === 0) return 0;
  if (length > maxLength) throw new TypeError('Script number overflow');
  if (minimal) {
    if ((buffer[length - 1] & 0x7f) === 0) {
      if (length <= 1 || (buffer[length - 2] & 0x80) === 0)
        throw new Error('Non-minimally encoded script number');
    }
  }
  // 40-bit
  if (length === 5) {
    const a = buffer.readUInt32LE(0);
    const b = buffer.readUInt8(4);
    if (b & 0x80) return -((b & ~0x80) * 0x100000000 + a);
    return b * 0x100000000 + a;
  }
  // 32-bit / 24-bit / 16-bit / 8-bit
  let result = 0;
  for (let i = 0; i < length; ++i) {
    result |= buffer[i] << (8 * i);
  }
  if (buffer[length - 1] & 0x80)
    return -(result & ~(0x80 << (8 * (length - 1))));
  return result;
}
exports.decode = decode;
function scriptNumSize(i) {
  return i > 0x7fffffff
    ? 5
    : i > 0x7fffff
    ? 4
    : i > 0x7fff
    ? 3
    : i > 0x7f
    ? 2
    : i > 0x00
    ? 1
    : 0;
}
function encode(_number) {
  let value = Math.abs(_number);
  const size = scriptNumSize(value);
  const buffer = Buffer.allocUnsafe(size);
  const negative = _number < 0;
  for (let i = 0; i < size; ++i) {
    buffer.writeUInt8(value & 0xff, i);
    value >>= 8;
  }
  if (buffer[size - 1] & 0x80) {
    buffer.writeUInt8(negative ? 0x80 : 0x00, size - 1);
  } else if (negative) {
    buffer[size - 1] |= 0x80;
  }
  return buffer;
}
exports.encode = encode;

}).call(this)}).call(this,require("buffer").Buffer)
},{"buffer":4}],167:[function(require,module,exports){
(function (Buffer){(function (){
'use strict';
var __importStar =
  (this && this.__importStar) ||
  function(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null)
      for (var k in mod)
        if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result['default'] = mod;
    return result;
  };
Object.defineProperty(exports, '__esModule', { value: true });
const types = __importStar(require('./types'));
const bip66 = require('bip66');
const typeforce = require('typeforce');
const ZERO = Buffer.alloc(1, 0);
function toDER(x) {
  let i = 0;
  while (x[i] === 0) ++i;
  if (i === x.length) return ZERO;
  x = x.slice(i);
  if (x[0] & 0x80) return Buffer.concat([ZERO, x], 1 + x.length);
  return x;
}
function fromDER(x) {
  if (x[0] === 0x00) x = x.slice(1);
  const buffer = Buffer.alloc(32, 0);
  const bstart = Math.max(0, 32 - x.length);
  x.copy(buffer, bstart);
  return buffer;
}
// BIP62: 1 byte hashType flag (only 0x01, 0x02, 0x03, 0x81, 0x82 and 0x83 are allowed)
function decode(buffer) {
  const hashType = buffer.readUInt8(buffer.length - 1);
  const hashTypeMod = hashType & ~0x80;
  if (hashTypeMod <= 0 || hashTypeMod >= 4)
    throw new Error('Invalid hashType ' + hashType);
  const decoded = bip66.decode(buffer.slice(0, -1));
  const r = fromDER(decoded.r);
  const s = fromDER(decoded.s);
  const signature = Buffer.concat([r, s], 64);
  return { signature, hashType };
}
exports.decode = decode;
function encode(signature, hashType) {
  typeforce(
    {
      signature: types.BufferN(64),
      hashType: types.UInt8,
    },
    { signature, hashType },
  );
  const hashTypeMod = hashType & ~0x80;
  if (hashTypeMod <= 0 || hashTypeMod >= 4)
    throw new Error('Invalid hashType ' + hashType);
  const hashTypeBuffer = Buffer.allocUnsafe(1);
  hashTypeBuffer.writeUInt8(hashType, 0);
  const r = toDER(signature.slice(0, 32));
  const s = toDER(signature.slice(32, 64));
  return Buffer.concat([bip66.encode(r, s), hashTypeBuffer]);
}
exports.encode = encode;

}).call(this)}).call(this,require("buffer").Buffer)
},{"./types":169,"bip66":57,"buffer":4,"typeforce":142}],168:[function(require,module,exports){
(function (Buffer){(function (){
'use strict';
var __importStar =
  (this && this.__importStar) ||
  function(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null)
      for (var k in mod)
        if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result['default'] = mod;
    return result;
  };
Object.defineProperty(exports, '__esModule', { value: true });
const bufferutils_1 = require('./bufferutils');
const bcrypto = __importStar(require('./crypto'));
const bscript = __importStar(require('./script'));
const script_1 = require('./script');
const types = __importStar(require('./types'));
const typeforce = require('typeforce');
const varuint = require('varuint-bitcoin');
function varSliceSize(someScript) {
  const length = someScript.length;
  return varuint.encodingLength(length) + length;
}
const EMPTY_SCRIPT = Buffer.allocUnsafe(0);
const EMPTY_WITNESS = [];
exports.ZERO = Buffer.from(
  '0000000000000000000000000000000000000000000000000000000000000000',
  'hex',
);
const ONE = Buffer.from(
  '0000000000000000000000000000000000000000000000000000000000000001',
  'hex',
);
const WITNESS_SCALE_FACTOR = 4;
const OUTPOINT_ISSUANCE_FLAG = (1 << 31) >>> 0;
const OUTPOINT_PEGIN_FLAG = (1 << 30) >>> 0;
const OUTPOINT_INDEX_MASK = 0x3fffffff;
const MINUS_1 = 4294967295;
const VALUE_UINT64_MAX = Buffer.from('ffffffffffffffff', 'hex');
const BLANK_OUTPUT = {
  script: EMPTY_SCRIPT,
  asset: exports.ZERO,
  nonce: exports.ZERO,
  value: VALUE_UINT64_MAX,
};
class Transaction {
  constructor() {
    this.version = 1;
    this.locktime = 0;
    this.flag = 0;
    this.ins = [];
    this.outs = [];
  }
  static fromBuffer(buffer, _NO_STRICT) {
    const bufferReader = new bufferutils_1.BufferReader(buffer);
    const tx = new Transaction();
    tx.version = bufferReader.readInt32();
    tx.flag = bufferReader.readUInt8();
    const vinLen = bufferReader.readVarInt();
    for (let i = 0; i < vinLen; ++i) {
      const inHash = bufferReader.readSlice(32);
      let inIndex = bufferReader.readUInt32();
      const inScript = bufferReader.readVarSlice();
      const inSequence = bufferReader.readUInt32();
      let inIsPegin = false;
      let inIssuance;
      if (inIndex !== MINUS_1) {
        if (inIndex & OUTPOINT_ISSUANCE_FLAG) {
          inIssuance = bufferReader.readIssuance();
        }
        if (inIndex & OUTPOINT_PEGIN_FLAG) {
          inIsPegin = true;
        }
        inIndex &= OUTPOINT_INDEX_MASK;
      }
      tx.ins.push({
        hash: inHash,
        index: inIndex,
        script: inScript,
        sequence: inSequence,
        witness: EMPTY_WITNESS,
        isPegin: inIsPegin,
        issuance: inIssuance,
        peginWitness: EMPTY_WITNESS,
        issuanceRangeProof: EMPTY_SCRIPT,
        inflationRangeProof: EMPTY_SCRIPT,
      });
    }
    const voutLen = bufferReader.readVarInt();
    for (let i = 0; i < voutLen; ++i) {
      const asset = bufferReader.readConfidentialAsset();
      const value = bufferReader.readConfidentialValue();
      const nonce = bufferReader.readConfidentialNonce();
      const script = bufferReader.readVarSlice();
      tx.outs.push({
        asset,
        value,
        nonce,
        script,
        rangeProof: EMPTY_SCRIPT,
        surjectionProof: EMPTY_SCRIPT,
      });
    }
    tx.locktime = bufferReader.readUInt32();
    if (tx.flag === 1) {
      for (let i = 0; i < vinLen; ++i) {
        const {
          witness,
          peginWitness,
          issuanceRangeProof,
          inflationRangeProof,
        } = bufferReader.readConfidentialInFields();
        tx.ins[i].witness = witness;
        tx.ins[i].peginWitness = peginWitness;
        tx.ins[i].issuanceRangeProof = issuanceRangeProof;
        tx.ins[i].inflationRangeProof = inflationRangeProof;
      }
      for (let i = 0; i < voutLen; ++i) {
        const {
          rangeProof,
          surjectionProof,
        } = bufferReader.readConfidentialOutFields();
        tx.outs[i].rangeProof = rangeProof;
        tx.outs[i].surjectionProof = surjectionProof;
      }
    }
    if (_NO_STRICT) return tx;
    if (bufferReader.offset !== buffer.length)
      throw new Error('Transaction has unexpected data');
    return tx;
  }
  static fromHex(hex) {
    return Transaction.fromBuffer(Buffer.from(hex, 'hex'), false);
  }
  static isCoinbaseHash(buffer) {
    typeforce(types.Hash256bit, buffer);
    for (let i = 0; i < 32; ++i) {
      if (buffer[i] !== 0) return false;
    }
    return true;
  }
  isCoinbase() {
    return (
      this.ins.length === 1 && Transaction.isCoinbaseHash(this.ins[0].hash)
    );
  }
  // A quick and reliable way to validate that all the buffers are of correct type and length
  validateIssuance(assetBlindingNonce, assetEntropy, assetAmount, tokenAmount) {
    typeforce(types.Hash256bit, assetBlindingNonce);
    typeforce(types.Hash256bit, assetEntropy);
    typeforce(
      types.oneOf(
        types.ConfidentialValue,
        types.ConfidentialCommitment,
        types.BufferOne,
      ),
      assetAmount,
    );
    typeforce(
      types.oneOf(
        types.ConfidentialValue,
        types.ConfidentialCommitment,
        types.BufferOne,
      ),
      tokenAmount,
    );
    return true;
  }
  addInput(hash, index, sequence, scriptSig, issuance) {
    typeforce(
      types.tuple(
        types.Hash256bit,
        types.UInt32,
        types.maybe(types.UInt32),
        types.maybe(types.Buffer),
        types.maybe(types.Object),
      ),
      arguments,
    );
    let isPegin = false;
    if (index !== MINUS_1) {
      if (index & OUTPOINT_ISSUANCE_FLAG) {
        if (!issuance) {
          throw new Error(
            'Issuance flag has been set but the Issuance object is not defined or invalid',
          );
        } else
          this.validateIssuance(
            issuance.assetBlindingNonce,
            issuance.assetEntropy,
            issuance.assetAmount,
            issuance.tokenAmount,
          );
      }
      if (index & OUTPOINT_PEGIN_FLAG) {
        isPegin = true;
      }
      index &= OUTPOINT_INDEX_MASK;
    }
    // Add the input and return the input's index
    return (
      this.ins.push({
        hash,
        index,
        isPegin,
        issuance,
        witness: EMPTY_WITNESS,
        peginWitness: EMPTY_WITNESS,
        issuanceRangeProof: EMPTY_SCRIPT,
        inflationRangeProof: EMPTY_SCRIPT,
        script: scriptSig || EMPTY_SCRIPT,
        sequence: sequence || Transaction.DEFAULT_SEQUENCE,
      }) - 1
    );
  }
  addOutput(scriptPubKey, value, asset, nonce, rangeProof, surjectionProof) {
    typeforce(
      types.tuple(
        types.Buffer,
        types.oneOf(
          types.ConfidentialValue,
          types.ConfidentialCommitment,
          types.BufferOne,
        ),
        types.oneOf(types.ConfidentialCommitment, types.BufferOne),
        types.oneOf(types.ConfidentialCommitment, types.BufferOne),
        types.maybe(types.Buffer),
        types.maybe(types.Buffer),
      ),
      arguments,
    );
    // Add the output and return the output's index
    return (
      this.outs.push({
        script: scriptPubKey,
        value,
        asset,
        nonce,
        rangeProof: rangeProof || EMPTY_SCRIPT,
        surjectionProof: surjectionProof || EMPTY_SCRIPT,
      }) - 1
    );
  }
  hasWitnesses() {
    return (
      this.flag === 1 ||
      this.ins.some(x => {
        return x.witness.length !== 0;
      }) ||
      this.outs.some(x => {
        return x.rangeProof.length !== 0 && x.surjectionProof.length !== 0;
      })
    );
  }
  weight() {
    const base = this.__byteLength(false);
    const total = this.__byteLength(true);
    return base * (WITNESS_SCALE_FACTOR - 1) + total;
  }
  virtualSize() {
    const vsize =
      (this.weight() + WITNESS_SCALE_FACTOR - 1) / WITNESS_SCALE_FACTOR;
    return Math.floor(vsize);
  }
  byteLength(_ALLOW_WITNESS) {
    return this.__byteLength(_ALLOW_WITNESS || true);
  }
  clone() {
    const newTx = new Transaction();
    newTx.version = this.version;
    newTx.locktime = this.locktime;
    newTx.flag = this.flag;
    newTx.ins = this.ins.map(txIn => {
      return {
        hash: txIn.hash,
        index: txIn.index,
        script: txIn.script,
        sequence: txIn.sequence,
        witness: txIn.witness,
        isPegin: txIn.isPegin,
        issuance: txIn.issuance,
        peginWitness: txIn.peginWitness,
        issuanceRangeProof: txIn.issuanceRangeProof,
        inflationRangeProof: txIn.inflationRangeProof,
      };
    });
    newTx.outs = this.outs.map(txOut => {
      return {
        script: txOut.script,
        value: txOut.value,
        asset: txOut.asset,
        nonce: txOut.nonce,
        rangeProof: txOut.rangeProof,
        surjectionProof: txOut.surjectionProof,
      };
    });
    return newTx;
  }
  /**
   * Hash transaction for signing a specific input.
   *
   * Bitcoin uses a different hash for each signed transaction input.
   * This method copies the transaction, makes the necessary changes based on the
   * hashType, and then hashes the result.
   * This hash can then be used to sign the provided transaction input.
   */
  hashForSignature(inIndex, prevOutScript, hashType) {
    typeforce(
      types.tuple(types.UInt32, types.Buffer, /* types.UInt8 */ types.Number),
      arguments,
    );
    // https://github.com/bitcoin/bitcoin/blob/master/src/test/sighash_tests.cpp#L29
    if (inIndex >= this.ins.length) return ONE;
    // ignore OP_CODESEPARATOR
    const ourScript = bscript.compile(
      bscript.decompile(prevOutScript).filter(x => {
        return x !== script_1.OPS.OP_CODESEPARATOR;
      }),
    );
    const txTmp = this.clone();
    // SIGHASH_NONE: ignore all outputs? (wildcard payee)
    if ((hashType & 0x1f) === Transaction.SIGHASH_NONE) {
      txTmp.outs = [];
      // ignore sequence numbers (except at inIndex)
      txTmp.ins.forEach((input, i) => {
        if (i === inIndex) return;
        input.sequence = 0;
      });
      // SIGHASH_SINGLE: ignore all outputs, except at the same index?
    } else if ((hashType & 0x1f) === Transaction.SIGHASH_SINGLE) {
      // https://github.com/bitcoin/bitcoin/blob/master/src/test/sighash_tests.cpp#L60
      if (inIndex >= this.outs.length) return ONE;
      // truncate outputs after
      txTmp.outs.length = inIndex + 1;
      // "blank" outputs before
      for (let i = 0; i < inIndex; i++) {
        txTmp.outs[i] = BLANK_OUTPUT;
      }
      // ignore sequence numbers (except at inIndex)
      txTmp.ins.forEach((input, y) => {
        if (y === inIndex) return;
        input.sequence = 0;
      });
    }
    // SIGHASH_ANYONECANPAY: ignore inputs entirely?
    if (hashType & Transaction.SIGHASH_ANYONECANPAY) {
      txTmp.ins = [txTmp.ins[inIndex]];
      txTmp.ins[0].script = ourScript;
      // SIGHASH_ALL: only ignore input scripts
    } else {
      // "blank" others input scripts
      txTmp.ins.forEach(input => {
        input.script = EMPTY_SCRIPT;
      });
      txTmp.ins[inIndex].script = ourScript;
    }
    // serialize and hash
    const buffer = Buffer.allocUnsafe(txTmp.__byteLength(false, true) + 4);
    buffer.writeInt32LE(hashType, buffer.length - 4);
    txTmp.__toBuffer(buffer, 0, false, true, true);
    return bcrypto.hash256(buffer);
  }
  hashForWitnessV0(inIndex, prevOutScript, value, hashType) {
    typeforce(
      types.tuple(types.UInt32, types.Buffer, types.Buffer, types.UInt32),
      arguments,
    );
    function writeInputs(ins) {
      const tBuffer = Buffer.allocUnsafe(36 * ins.length);
      const tBufferWriter = new bufferutils_1.BufferWriter(tBuffer, 0);
      ins.forEach(txIn => {
        tBufferWriter.writeSlice(txIn.hash);
        tBufferWriter.writeUInt32(txIn.index);
      });
      return bcrypto.hash256(tBuffer);
    }
    function writeSequences(ins) {
      const tBuffer = Buffer.allocUnsafe(4 * ins.length);
      const tBufferWriter = new bufferutils_1.BufferWriter(tBuffer, 0);
      ins.forEach(txIn => {
        tBufferWriter.writeUInt32(txIn.sequence);
      });
      return bcrypto.hash256(tBuffer);
    }
    function writeIssuances(ins) {
      const issuanceSize = ins.reduce(
        (sum, txIn) =>
          !types.Null(txIn.issuance)
            ? sum +
              txIn.issuance.assetBlindingNonce.length +
              txIn.issuance.assetEntropy.length +
              txIn.issuance.assetAmount.length +
              txIn.issuance.tokenAmount.length
            : sum + 1, // we'll use the empty 00 Buffer if issuance is not set
        0,
      );
      const tBuffer = Buffer.allocUnsafe(issuanceSize);
      const tBufferWriter = new bufferutils_1.BufferWriter(tBuffer, 0);
      ins.forEach(txIn => {
        if (!types.Null(txIn.issuance)) {
          tBufferWriter.writeSlice(txIn.issuance.assetBlindingNonce);
          tBufferWriter.writeSlice(txIn.issuance.assetEntropy);
          tBufferWriter.writeSlice(txIn.issuance.assetAmount);
          tBufferWriter.writeSlice(txIn.issuance.tokenAmount);
        } else {
          tBufferWriter.writeSlice(Buffer.from('00', 'hex'));
        }
      });
      return bcrypto.hash256(tBuffer);
    }
    function writeOutputs(outs) {
      const outsSize = outs.reduce(
        (sum, txOut) =>
          sum +
          txOut.asset.length +
          txOut.value.length +
          txOut.nonce.length +
          varSliceSize(txOut.script),
        0,
      );
      const tBuffer = Buffer.allocUnsafe(outsSize);
      const tBufferWriter = new bufferutils_1.BufferWriter(tBuffer, 0);
      outs.forEach(txOut => {
        tBufferWriter.writeSlice(txOut.asset);
        tBufferWriter.writeSlice(txOut.value);
        tBufferWriter.writeSlice(txOut.nonce);
        tBufferWriter.writeVarSlice(txOut.script);
      });
      return bcrypto.hash256(tBuffer);
    }
    let hashOutputs = exports.ZERO;
    let hashPrevouts = exports.ZERO;
    let hashSequences = exports.ZERO;
    let hashIssuances = exports.ZERO;
    // Inputs
    if (!(hashType & Transaction.SIGHASH_ANYONECANPAY)) {
      hashPrevouts = writeInputs(this.ins);
    }
    // Sequences
    if (
      !(hashType & Transaction.SIGHASH_ANYONECANPAY) &&
      (hashType & 0x1f) !== Transaction.SIGHASH_SINGLE &&
      (hashType & 0x1f) !== Transaction.SIGHASH_NONE
    ) {
      hashSequences = writeSequences(this.ins);
    }
    // Issuances
    if (!(hashType & Transaction.SIGHASH_ANYONECANPAY)) {
      hashIssuances = writeIssuances(this.ins);
    }
    // Outputs
    if (
      (hashType & 0x1f) !== Transaction.SIGHASH_SINGLE &&
      (hashType & 0x1f) !== Transaction.SIGHASH_NONE
    ) {
      hashOutputs = writeOutputs(this.outs);
    } else if (
      (hashType & 0x1f) === Transaction.SIGHASH_SINGLE &&
      inIndex < this.outs.length
    ) {
      hashOutputs = writeOutputs([this.outs[inIndex]]);
    }
    const input = this.ins[inIndex];
    const bufferSize =
      4 + // version
      hashPrevouts.length +
      hashSequences.length +
      hashIssuances.length +
      input.hash.length +
      4 + // input.index
      varSliceSize(prevOutScript) +
      value.length +
      4 + // input.sequence
      hashOutputs.length +
      4 + // locktime
      4; // hashType
    const buffer = Buffer.allocUnsafe(bufferSize);
    const bufferWriter = new bufferutils_1.BufferWriter(buffer, 0);
    bufferWriter.writeUInt32(this.version);
    bufferWriter.writeSlice(hashPrevouts);
    bufferWriter.writeSlice(hashSequences);
    bufferWriter.writeSlice(hashIssuances);
    bufferWriter.writeSlice(input.hash);
    bufferWriter.writeUInt32(input.index);
    bufferWriter.writeVarSlice(prevOutScript);
    bufferWriter.writeSlice(value);
    bufferWriter.writeUInt32(input.sequence);
    if (!types.Null(input.issuance)) {
      bufferWriter.writeSlice(input.issuance.assetBlindingNonce);
      bufferWriter.writeSlice(input.issuance.assetEntropy);
      bufferWriter.writeSlice(input.issuance.assetAmount);
      bufferWriter.writeSlice(input.issuance.tokenAmount);
    }
    bufferWriter.writeSlice(hashOutputs);
    bufferWriter.writeUInt32(this.locktime);
    bufferWriter.writeUInt32(hashType);
    return bcrypto.hash256(buffer);
  }
  getHash(forWitness) {
    // wtxid for coinbase is always 32 bytes of 0x00
    if (forWitness && this.isCoinbase()) return Buffer.alloc(32, 0);
    return bcrypto.hash256(
      this.__toBuffer(undefined, undefined, forWitness, true),
    );
  }
  getId() {
    // transaction hash's are displayed in reverse order
    return bufferutils_1.reverseBuffer(this.getHash(false)).toString('hex');
  }
  toBuffer(buffer, initialOffset) {
    return this.__toBuffer(buffer, initialOffset, true);
  }
  toHex() {
    return this.toBuffer(undefined, undefined).toString('hex');
  }
  setInputScript(index, scriptSig) {
    typeforce(types.tuple(types.Number, types.Buffer), arguments);
    this.ins[index].script = scriptSig;
  }
  setWitness(index, witness) {
    typeforce(types.tuple(types.Number, [types.Buffer]), arguments);
    this.ins[index].witness = witness;
  }
  setPeginWitness(index, peginWitness) {
    typeforce(types.tuple(types.Number, [types.Buffer]), arguments);
    this.ins[index].peginWitness = peginWitness;
  }
  setInputIssuanceRangeProof(index, issuanceRangeProof) {
    typeforce(types.tuple(types.Buffer), arguments);
    if (this.ins[index].issuance === undefined)
      throw new Error('Issuance not set for input #' + index);
    this.ins[index].issuanceRangeProof = issuanceRangeProof;
  }
  setInputInflationRangeProof(index, inflationRangeProof) {
    typeforce(types.tuple(types.Buffer), arguments);
    if (this.ins[index].issuance === undefined)
      throw new Error('Issuance not set for input #' + index);
    this.ins[index].inflationRangeProof = inflationRangeProof;
  }
  setOutputNonce(index, nonce) {
    typeforce(types.tuple(types.Number, types.Buffer), arguments);
    this.outs[index].nonce = nonce;
  }
  setOutputRangeProof(index, proof) {
    typeforce(types.tuple(types.Number, types.Buffer), arguments);
    this.outs[index].rangeProof = proof;
  }
  setOutputSurjectionProof(index, proof) {
    typeforce(types.tuple(types.Number, types.Buffer), arguments);
    this.outs[index].surjectionProof = proof;
  }
  __byteLength(_ALLOW_WITNESS, forSignature) {
    const hasWitnesses = _ALLOW_WITNESS && this.hasWitnesses();
    return (
      8 +
      (forSignature ? 0 : 1) +
      varuint.encodingLength(this.ins.length) +
      varuint.encodingLength(this.outs.length) +
      this.ins.reduce((sum, input) => {
        return (
          sum +
          40 +
          varSliceSize(input.script) +
          (input.issuance
            ? 64 +
              input.issuance.assetAmount.length +
              input.issuance.tokenAmount.length
            : 0)
        );
      }, 0) +
      this.outs.reduce((sum, output) => {
        return (
          sum +
          output.asset.length +
          output.value.length +
          output.nonce.length +
          varSliceSize(output.script)
        );
      }, 0) +
      (hasWitnesses
        ? this.ins.reduce((sum, input) => {
            return (
              sum +
              varSliceSize(input.issuanceRangeProof) +
              varSliceSize(input.inflationRangeProof) +
              varuint.encodingLength(input.witness.length) +
              input.witness.reduce((scriptSum, scriptWit) => {
                return scriptSum + varSliceSize(scriptWit);
              }, 0) +
              varuint.encodingLength(input.peginWitness.length) +
              input.peginWitness.reduce((peginSum, peginWit) => {
                return peginSum + varSliceSize(peginWit);
              }, 0)
            );
          }, 0)
        : 0) +
      (hasWitnesses
        ? this.outs.reduce((sum, output) => {
            return (
              sum +
              varSliceSize(output.surjectionProof) +
              varSliceSize(output.rangeProof)
            );
          }, 0)
        : 0)
    );
  }
  __toBuffer(
    buffer,
    initialOffset,
    _ALLOW_WITNESS,
    forceZeroFlag,
    forSignature,
  ) {
    if (!buffer)
      buffer = Buffer.allocUnsafe(
        this.__byteLength(_ALLOW_WITNESS, forSignature),
      );
    const bufferWriter = new bufferutils_1.BufferWriter(
      buffer,
      initialOffset || 0,
    );
    bufferWriter.writeInt32(this.version);
    const hasWitnesses = _ALLOW_WITNESS && this.hasWitnesses();
    if (!forSignature) {
      if (
        hasWitnesses &&
        (forceZeroFlag === false || forceZeroFlag === undefined)
      )
        bufferWriter.writeUInt8(Transaction.ADVANCED_TRANSACTION_FLAG);
      else bufferWriter.writeUInt8(Transaction.ADVANCED_TRANSACTION_MARKER);
    }
    bufferWriter.writeVarInt(this.ins.length);
    this.ins.forEach(txIn => {
      bufferWriter.writeSlice(txIn.hash);
      let prevIndex = txIn.index;
      if (forceZeroFlag === false || forceZeroFlag === undefined) {
        if (txIn.issuance) {
          prevIndex = (prevIndex | OUTPOINT_ISSUANCE_FLAG) >>> 0;
        }
        if (txIn.isPegin) {
          prevIndex = (prevIndex | OUTPOINT_PEGIN_FLAG) >>> 0;
        }
      }
      bufferWriter.writeUInt32(prevIndex);
      bufferWriter.writeVarSlice(txIn.script);
      bufferWriter.writeUInt32(txIn.sequence);
      if (txIn.issuance) {
        bufferWriter.writeSlice(txIn.issuance.assetBlindingNonce);
        bufferWriter.writeSlice(txIn.issuance.assetEntropy);
        bufferWriter.writeSlice(txIn.issuance.assetAmount);
        bufferWriter.writeSlice(txIn.issuance.tokenAmount);
      }
    });
    bufferWriter.writeVarInt(this.outs.length);
    this.outs.forEach(txOut => {
      // if we are serializing a confidential output for producing a signature,
      // we must exclude the confidential value from the serialization and
      // use the satoshi 0 value instead, as done for typical bitcoin witness signatures.
      const val = forSignature && hasWitnesses ? Buffer.alloc(0) : txOut.value;
      bufferWriter.writeSlice(txOut.asset);
      bufferWriter.writeSlice(val);
      bufferWriter.writeSlice(txOut.nonce);
      if (forSignature && hasWitnesses) bufferWriter.writeUInt64(0);
      bufferWriter.writeVarSlice(txOut.script);
    });
    bufferWriter.writeUInt32(this.locktime);
    if (!forSignature && hasWitnesses) {
      this.ins.forEach(input => {
        bufferWriter.writeConfidentialInFields(input);
      });
      this.outs.forEach(output => {
        bufferWriter.writeConfidentialOutFields(output);
      });
    }
    // avoid slicing unless necessary
    if (initialOffset !== undefined)
      return buffer.slice(initialOffset, bufferWriter.offset);
    return buffer;
  }
}
Transaction.DEFAULT_SEQUENCE = 0xffffffff;
Transaction.SIGHASH_ALL = 0x01;
Transaction.SIGHASH_NONE = 0x02;
Transaction.SIGHASH_SINGLE = 0x03;
Transaction.SIGHASH_ANYONECANPAY = 0x80;
Transaction.ADVANCED_TRANSACTION_MARKER = 0x00;
Transaction.ADVANCED_TRANSACTION_FLAG = 0x01;
exports.Transaction = Transaction;

}).call(this)}).call(this,require("buffer").Buffer)
},{"./bufferutils":149,"./crypto":151,"./script":165,"./types":169,"buffer":4,"typeforce":142,"varuint-bitcoin":145}],169:[function(require,module,exports){
'use strict';
Object.defineProperty(exports, '__esModule', { value: true });
const typeforce = require('typeforce');
const UINT31_MAX = Math.pow(2, 31) - 1;
function UInt31(value) {
  return typeforce.UInt32(value) && value <= UINT31_MAX;
}
exports.UInt31 = UInt31;
function BIP32Path(value) {
  return typeforce.String(value) && !!value.match(/^(m\/)?(\d+'?\/)*\d+'?$/);
}
exports.BIP32Path = BIP32Path;
BIP32Path.toJSON = () => {
  return 'BIP32 derivation path';
};
function Signer(obj) {
  return (
    (typeforce.Buffer(obj.publicKey) ||
      typeof obj.getPublicKey === 'function') &&
    typeof obj.sign === 'function'
  );
}
exports.Signer = Signer;
const SATOSHI_MAX = 21 * 1e14;
function Satoshi(value) {
  return typeforce.UInt53(value) && value <= SATOSHI_MAX;
}
exports.Satoshi = Satoshi;
// external dependent types
exports.ECPoint = typeforce.quacksLike('Point');
// exposed, external API
exports.Network = typeforce.compile({
  messagePrefix: typeforce.oneOf(typeforce.Buffer, typeforce.String),
  bip32: {
    public: typeforce.UInt32,
    private: typeforce.UInt32,
  },
  pubKeyHash: typeforce.UInt8,
  scriptHash: typeforce.UInt8,
  wif: typeforce.UInt8,
  assetHash: typeforce.String,
  confidentialPrefix: typeforce.UInt8,
});
exports.Buffer256bit = typeforce.BufferN(32);
exports.Hash160bit = typeforce.BufferN(20);
exports.Hash256bit = typeforce.BufferN(32);
exports.ConfidentialCommitment = typeforce.BufferN(33);
exports.ConfidentialValue = typeforce.BufferN(9);
exports.BufferOne = typeforce.BufferN(1);
exports.Number = typeforce.Number; // tslint:disable-line variable-name
exports.Array = typeforce.Array;
exports.Boolean = typeforce.Boolean; // tslint:disable-line variable-name
exports.String = typeforce.String; // tslint:disable-line variable-name
exports.Buffer = typeforce.Buffer;
exports.Hex = typeforce.Hex;
exports.Object = typeforce.Object;
exports.maybe = typeforce.maybe;
exports.tuple = typeforce.tuple;
exports.UInt8 = typeforce.UInt8;
exports.UInt32 = typeforce.UInt32;
exports.Function = typeforce.Function;
exports.BufferN = typeforce.BufferN;
exports.Null = typeforce.Null;
exports.oneOf = typeforce.oneOf;

},{"typeforce":142}]},{},[153])(153)
});
